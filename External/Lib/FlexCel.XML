<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlexCel</name>
    </assembly>
    <members>
        <member name="T:FlexCel.XlsAdapter.TSelectionRecord">
            <summary>
            Selection. As this record is difficult to modify (it might split), it will be saved on a different place.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseRecord">
            <summary>
            The base for all Excel record hierachy.
            All Excel file records inherit from here.
            </summary>
            
        </member>
        <member name="T:FlexCel.XlsAdapter.TPaneSelection">
            <summary>
            Selection for one pane, when window is split. There might exist 4 different panes
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheetSelection">
            <summary>
            A whole selection for a sheet.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TXlsRecordLoader">
            <summary>
            Loads a Record from a biff8 stream and creates the object in memory to hold it.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRecordLoader">
            <summary>
            An Abstract loader that can be used to load different file formats on FlexCel.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TXlsRecordLoader.LoadContinues(FlexCel.XlsAdapter.TxBaseRecord)">
            <summary>
            We have this method as a loop, since a recursive call to LoadRecord can cause stack overflow for sst or other deeply nested continues.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TextDelim">
            <summary>
            Helper class for reading/writing text delimited files.
            </summary>
        </member>
        <member name="T:FlexCel.Render.FlexCelImgExport">
            <summary>
            A component for exporting an Excel file to an image. It can return an image object, or the
            actual bytes of an specific file format. (like gif, tiff or png)
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.#ctor">
            <summary>
            Creates a new FlexCelImgExport instance.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.#ctor(FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new FlexCelImgExport and assigns it to an ExcelFile.
            </summary>
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.#ctor(FlexCel.Core.ExcelFile,System.Boolean)">
            <summary>
            Creates a new FlexCelImgExport and assigns it to an ExcelFile, setting AllowOverwritingFiles to the desired value.
            </summary>
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <param name="aAllowOverwritingFiles">When true, existing files will be overwrited.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.OnBeforePaint(FlexCel.Render.ImgPaintEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelImgExport.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.OnAfterPaint(FlexCel.Render.ImgPaintEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelImgExport.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.ExportNext(System.Drawing.Graphics,FlexCel.Render.TImgExportInfo@)">
            <summary>
            Exports the associated xls workbook to a graphics stream. You need to provide a 
            Graphics object with the correct dimensions. (To get the needed dimensions, use <see cref="M:FlexCel.Render.FlexCelImgExport.GetRealPageSize"/>
            </summary>
            <param name="imgData">Graphics where the image will be stored. Set it to null to skip the page.</param>
            <param name="exportInfo"> Information needed to export, cached for speed. The first time you call this method (or when you change xls.ActiveSheet), make exportInfo=null</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.ExportNext(System.IO.Stream,System.Drawing.Imaging.PixelFormat,System.Drawing.Imaging.ImageFormat,FlexCel.Render.TImgExportInfo@)">
            <summary>
            Exports the associated xls workbook to a stream.
            </summary>
            <param name="imgStream">Stream where the image will be exported.</param>
            <param name="format">Pixel depth for the created image.</param>
            <param name="imgFormat">Format for the saved image</param>
            <param name="exportInfo"> Information needed to export, cached for speed. The first time you call this method (or when you change xls.ActiveSheet), make exportInfo=null</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.ExportNext(System.String,System.Drawing.Imaging.PixelFormat,System.Drawing.Imaging.ImageFormat,FlexCel.Render.TImgExportInfo@)">
            <summary>
            Exports the associated xls workbook to a file.
            </summary>
            <param name="fileName">File to export.</param>
            <param name="format">Format for the created image.</param>
            <param name="imgFormat">Format for the saved image</param>
            <param name="exportInfo"> Information needed to export, cached for speed. The first time you call this method (or when you change xls.ActiveSheet), make exportInfo=null</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.TotalPages">
            <summary>
            Return the pages to print. This is a costly operation, so cache the results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.GetRealPageSize(System.Int32)">
            <summary>
            Returns the page dimensions for a sheet. You can use it to create a bitmap to export the data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.GetRealPageSize">
            <summary>
            Returns the page dimensions for the active sheet. You can use it to create a bitmap to export the data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.GetFirstPageExportInfo">
            <summary>
            Returns information needed for exporting multiple pages on one sheet. You normally 
            don't need to use this method, but you can use it to speed up multiple displays.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.SaveAsImage(System.String,FlexCel.Render.ImageExportType,FlexCel.Render.ImageColorDepth)">
            <summary>
            Saves the current Excel file as an image file. 
            </summary>
            <param name="fileName">File where the image will be saved.</param>
            <param name="export">Image format.</param>
            <param name="ColorDepth">Color depth for the image, if applicable. Some formats (like fax, that is monochrome) do not allow different color depths.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelImgExport.SaveAsImage(System.IO.Stream,FlexCel.Render.ImageExportType,FlexCel.Render.ImageColorDepth)">
            <summary>
            Saves the current Excel file on an image stream. 
            </summary>
            <param name="fileStream">Stream where the image will be saved.</param>
            <param name="export">Image format.</param>
            <param name="ColorDepth">Color depth for the image, if applicable. Some formats (like fax, that is monochrome) do not allow different color depots.</param>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.Workbook">
            <summary>
            The ExcelFile to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.HidePrintObjects">
            <summary>
            Select which kind of objects should not be printed or exported to the image.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PrintRangeLeft">
            <summary>
            First column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PrintRangeTop">
            <summary>
            First row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated. 
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PrintRangeRight">
            <summary>
            Last column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PrintRangeBottom">
            <summary>
            Last row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.PageSize">
            <summary>
            Image page size. Set it to null to use the paper size on the xls file.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing image files or not.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.Resolution">
            <summary>
            "The default resolution on pixels per inch for the rendered images. For the screen, this is 96."
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.AllVisibleSheets">
            <summary>
            If true, All visible sheets on the workbook will be printed. See <see cref="P:FlexCel.Render.FlexCelImgExport.ResetPageNumberOnEachSheet"/> for behavior of the page number when printing multiple sheets.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelImgExport.ResetPageNumberOnEachSheet">
            <summary>
            This property only makes sense when <see cref="P:FlexCel.Render.FlexCelImgExport.AllVisibleSheets"/> is true. On that case, if this property is true each sheet of
            the workbook will have the page number reset. For example if the xls file has 2 sheets and each has 3 pages: 
            When ResetPageNumberOnEachSheet = true then footers will look like "Page 1 of 3". If false, they will look like "Page 5 of 6"
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelImgExport.BeforePaint">
            <summary>
            Fires before drawing the image, allowing to modify it or to modify the XlsFile associated.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelImgExport.AfterPaint">
            <summary>
            Fires after the image has been drawn, allowing to modify it.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TImgExportInfo">
            <summary>
            Holds information needed to export the pages, so it is only calculated once.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TImgExportInfo.FCurrentSheet">
            <summary>
            This is the current sheet on the worksheet. Not in the FSheets array.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TImgExportInfo.Sheet(System.Int32)">
            <summary>
            Returns the Image export info for one of the sheets.
            </summary>
            <param name="index">Sheet on the list (1 based).</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.TImgExportInfo.TotalLogicalPages(System.Boolean)">
            <summary>
            Returns the total count of pages if ResetPageNumberOnEachSheet is false, or the page number for the current sheet if true.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TImgExportInfo.Clone(FlexCel.Render.TImgExportInfo)">
            <summary>
            Returns a deep copy of a TImgExportInfo. This method will work even if the source object is null.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.SheetCount">
            <summary>
            Return the count of the sheets on the workbook.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.CurrentSheet">
            <summary>
            Sheet that is being printed.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.NextSheet">
            <summary>
            Sheet of the next page to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.CurrentPage">
            <summary>
            Last page printed.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.TotalPages">
            <summary>
            Total pages to print for all the sheets.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TImgExportInfo.ActiveSheet">
            <summary>
            TImageInfo for the active sheet.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TOneImgExportInfo">
            <summary>
            Holds information needed to export one of the workbbok sheets, so it is only calculated once.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TOneImgExportInfo.Clone(FlexCel.Render.TOneImgExportInfo)">
            <summary>
            Clones a TImageExportInfo even if it is null.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.TotalPages">
            <summary>
            Total pages on the ActiveSheet.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PaintClipRect">
            <summary>
            Coordinates to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PagePrintRange">
            <summary>
            Range to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PageBounds">
            <summary>
            Limits of the page.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.PrintRange">
            <summary>
            Range to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TOneImgExportInfo.CurrentPage">
            <summary>
            Last page printed on this sheet.
            </summary>
        </member>
        <member name="T:FlexCel.Render.ImgPaintEventArgs">
            <summary>
            Arguments passed on Paint events.
            </summary>
        </member>
        <member name="M:FlexCel.Render.ImgPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.RectangleF,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aGraphics">Gets the graphics used to paint.</param>
            <param name="aPageBounds">Gets the rectangle in which to paint.</param>
            <param name="aCurrentPage">The page we are printing.</param>
            <param name="aCurrentPageInSheet">The page we are printing, relative to the current sheet.</param>
            <param name="aTotalPages">The total number of page we have available to export.</param>
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.Graphics">
            <summary>
            Gets the graphics used to paint.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.PageBounds">
            <summary>
            Gets the rectangle in which to paint.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.CurrentPage">
            <summary>
            Gets the current page number.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.CurrentPageInSheet">
            <summary>
            Gets the current page number, relative to the active sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImgPaintEventArgs.TotalPages">
            <summary>
            Gets the total number of pages available to export.
            </summary>
        </member>
        <member name="T:FlexCel.Render.PaintEventHandler">
            <summary>
            Delegate for Paint events.
            </summary>
        </member>
        <member name="T:FlexCel.Render.ImageExportType">
            <summary>
            Defines how you want to export the sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Render.ImageExportType.Png">
            <summary>
            Export as png image. Only the first page of the Excel active sheet will be exported.
            </summary>
        </member>
        <member name="F:FlexCel.Render.ImageExportType.Gif">
            <summary>
            Export as gif file. Only the first page of the Excel active sheet will be exported.
            </summary>
        </member>
        <member name="F:FlexCel.Render.ImageExportType.Jpeg">
            <summary>
            Export as jpg file. Only the first page of the Excel active sheet will be exported.
            </summary>
        </member>
        <member name="F:FlexCel.Render.ImageExportType.Tiff">
            <summary>
            Export as multipage tiff.
            </summary>
        </member>
        <member name="F:FlexCel.Render.ImageExportType.Fax">
            <summary>
            Export as a black and white multipage tiff ccitt3 compatible with standard fax.
            </summary>
        </member>
        <member name="T:FlexCel.Render.ImageColorDepth">
            <summary>
            Number of colors for the exported images.
            </summary>
        </member>
        <member name="F:FlexCel.Render.ImageColorDepth.TrueColor">
            <summary>
            24 bits per pixel.
            </summary>
        </member>
        <member name="F:FlexCel.Render.ImageColorDepth.Color256">
            <summary>
            8 bits per pixel, 256 colors.
            </summary>
        </member>
        <member name="F:FlexCel.Render.ImageColorDepth.BlackAndWhite">
            <summary>
            1 bit per pixel, 2 colors (black and white).
            </summary>
        </member>
        <member name="T:FlexCel.Render.FlexCelHtmlExportProgress">
            <summary>
            Indicates how much of the report has been generated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExportProgress.Row">
            <summary>
            The row that is being written.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExportProgress.TotalRows">
            <summary>
            The total number of rows exporting.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExportProgress.SheetNumber">
            <summary>
            The sheet we are exporting.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TCssInformation">
            <summary>
            Encapsulates the information needed to create external CSS files.
            Note that if you use the same TCssInformation instance to create different html files, the CSS file created will be only one.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TCssInformation.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Creates a new instance of TCssInformation.
            </summary>
            <param name="aData">TextWriter where an external CSS file will be stored. If null, no CSS file will be created. A link to a CSS file might be still included if you set the Url to a non null value.</param>
            <param name="aUrl">URL of the css file that will be linked to this file. If null, all css information will be stored inside the html file.</param>
        </member>
        <member name="P:FlexCel.Render.TCssInformation.Data">
            <summary>
            TextWriter where an external CSS file will be stored. If null, no CSS file will be created. A link to a CSS file might be still included if you set the Url to a non null value.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TCssInformation.Url">
            <summary>
            URL of the css file that will be linked to this file. If null, no CSS file will be created and all CSS information will be stored inside the html file.
            </summary>
        </member>
        <member name="T:FlexCel.Render.THtmlExtraInfo">
            <summary>
            Stores extra data to write in the HTML file.
            </summary>
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.Title">
            <summary>
            Title of the HTML file. If left null, the title of the page will be used.
            </summary>
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.Meta">
            <summary>
            Extra strings to be added in the meta section of the header. You could specify keywords here, for example.
            </summary>
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.HeadStart">
            <summary>
            Extra strings to be added after the opening &lt;head&gt; tag.
            </summary>
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.HeadEnd">
            <summary>
            Extra strings to be added before the closing &lt;/head&gt; tag.
            </summary>
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.BodyStart">
            <summary>
            Extra strings to be added after the opening &lt;body&gt; tag and before the table data.
            </summary>
        </member>
        <member name="P:FlexCel.Render.THtmlExtraInfo.BodyEnd">
            <summary>
            Extra strings to be added before the closing &lt;/body&gt; tag and after the table data.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TSheetSelectorPosition">
            <summary>
            Where to place the tabs for selecting a sheet when exporting multiple sheets.
            You might combine more than one, for example, to have tabs at the top and bottom:
            C#: TSheetSelectorPosition.Top | TSheetSelectorPosition.Bottom
            VB.NET, Delphi.NET: TSheetSelectorPosition.Top or TSheetSelectorPosition.Bottom
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.None">
            <summary>
            Do not add tabs for the sheets.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.Left">
            <summary>
            Add the tabs at the left of the html document.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.Right">
            <summary>
            Add the tabs at the right of the html document.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.Top">
            <summary>
            Add the tabs at the top of the html document.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TSheetSelectorPosition.Bottom">
            <summary>
            Add the tabs at the bottom of the html document.
            </summary>
        </member>
        <member name="T:FlexCel.Render.THtmlImageFormat">
            <summary>
            Possible values in which we can save an image when exporting to HTML.
            </summary>
        </member>
        <member name="F:FlexCel.Render.THtmlImageFormat.Png">
            <summary>
            Save image as PNG. Note that transparency in PNG is not supported in ie6 unless you apply a fix.
            </summary>
        </member>
        <member name="F:FlexCel.Render.THtmlImageFormat.Gif">
            <summary>
            Save image as GIF. Image will be converted to 256 colors.
            </summary>
        </member>
        <member name="F:FlexCel.Render.THtmlImageFormat.Jpeg">
            <summary>
            Save image as JPEG. Note that transparency is not supported in JPEG.
            </summary>
        </member>
        <member name="T:FlexCel.Render.ImageInformationEventArgs">
            <summary>
            Arguments passed on <see cref="M:FlexCel.Render.FlexCelHtmlExport.OnGetImageInformation(FlexCel.Render.ImageInformationEventArgs)"/>, 
            </summary>
        </member>
        <member name="M:FlexCel.Render.ImageInformationEventArgs.#ctor(FlexCel.Core.ExcelFile,System.Int32,FlexCel.Core.TShapeProperties,System.IO.Stream,System.String,System.String,System.String,System.String,FlexCel.Render.THtmlImageFormat)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aWorkbook">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.Workbook"/></param>
            <param name="aObjectIndex">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ObjectIndex"/></param>
            <param name="aShapeProps">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ShapeProps"/></param>
            <param name="aImageStream">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageStream"/></param>
            <param name="aImageFile">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageFile"/></param>
            <param name="aImageLink">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageLink"/></param>
            <param name="aAlternateText">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.AlternateText"/></param>
            <param name="aHyperLink">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.HyperLink"/></param>
            <param name="aSavedImageFormat">See <see cref="P:FlexCel.Render.ImageInformationEventArgs.SavedImageFormat"/></param>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.Workbook">
            <summary>
            ExcelFile with the image, positioned in the sheet that we are rendering. 
            Make sure if you modify ActiveSheet of this instance to restore it back to the original value before exiting the event.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ObjectIndex">
            <summary>
            Object index of the object being rendered. You can use xls.GetObject(objectIndex) to get the object properties, or you can use this
            property to attach an unique number in the sheet to the image filename. If the image is not an object (for example it is a rotated text)
            this property will be -1.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ShapeProps">
            <summary>
            Shape properties of the object being rendered. You can use them to get the name of the object, its size, etc.
             If the image is not an object (for example it is a rotated text)
            this property will be null. 
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ImageStream">
            <summary>
            The stream where the images will be saved. Keep it null to store the image as a file using <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageFile"/>.
            When saving as MHTML this parameter does nothing, since all images will be saved in the same MTHML stream.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ImageFile">
            <summary>
            The file where the image will be saved. If <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageStream"/> is not null, this property will do nothing.
            If both this property and <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageStream"/> are null, the image will not be saved.
            When saving as MHTML this parameter does nothing, since all images will be saved in the same MTHML stream.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.ImageLink">
            <summary>
            The link that will be inserted in the html file. Change it if you change the default image location.
            Set it to null to not add a link to this image in the generated html file. If you want to avoid exporting all images,
            you can use <see cref="T:FlexCel.Core.THidePrintObjects"/> for that. But if you just want to avoid exporting one image in a file, you can do it
            by setting <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageStream"/>, <see cref="P:FlexCel.Render.ImageInformationEventArgs.ImageFile"/> and this property to null.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.AlternateText">
            <summary>
            Alternate text for the image, to show in the "ALT" tag when a browser cannot display images.
            By default this is set to the text in the box "Alternative Text" in the web tab on the image properties.
            If no Alternative text is supplied in the file, the image name will be used here.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.HyperLink">
            <summary>
            Hyperlink where the image will point to. This is automatically read from the image hyperlink if it has one,
            but you can modify, delete or add a new hyperlink for any image with this property.
            </summary>
        </member>
        <member name="P:FlexCel.Render.ImageInformationEventArgs.SavedImageFormat">
            <summary>
            File format in which to save this image. Do not modify it to keep the default format.
            </summary>
        </member>
        <member name="T:FlexCel.Render.ImageInformationEventHandler">
            <summary>
            Delegate used to specify where to store the images on a page.
            </summary>
        </member>
        <member name="T:FlexCel.Render.SaveImageEventArgs">
            <summary>
            Arguments passed on <see cref="M:FlexCel.Render.FlexCelHtmlExport.OnSaveImage(FlexCel.Render.SaveImageEventArgs)"/>, 
            </summary>
        </member>
        <member name="M:FlexCel.Render.SaveImageEventArgs.#ctor(FlexCel.Core.ExcelFile,System.Int32,FlexCel.Core.TShapeProperties,System.String,System.String,System.String,FlexCel.Render.THtmlImageFormat,System.Drawing.Image)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aWorkbook">See <see cref="P:FlexCel.Render.SaveImageEventArgs.Workbook"/></param>
            <param name="aObjectIndex">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ObjectIndex"/></param>
            <param name="aShapeProps">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ShapeProps"/></param>
            <param name="aImageFile">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ImageFile"/></param>
            <param name="aImageLink">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ImageLink"/></param>
            <param name="aAlternateText">See <see cref="P:FlexCel.Render.SaveImageEventArgs.AlternateText"/></param>
            <param name="aSavedImageFormat">See <see cref="P:FlexCel.Render.SaveImageEventArgs.SavedImageFormat"/></param>
            <param name="aImageToSave">See <see cref="P:FlexCel.Render.SaveImageEventArgs.ImageToSave"/></param>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.Workbook">
            <summary>
            ExcelFile with the image, positioned in the sheet that we are rendering. 
            Make sure if you modify ActiveSheet of this instance to restore it back to the original value before exiting the event.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ObjectIndex">
            <summary>
            Object index of the object being rendered. You can use xls.GetObject(objectIndex) to get the object properties. 
            If the image is not an object (for example it is a rotated text)
            this property will be -1.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ShapeProps">
            <summary>
            Shape properties of the object being rendered. You can use them to get the name of the object, its size, etc.
             If the image is not an object (for example it is a rotated text)
            this property will be null. 
            </summary>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ImageFile">
            <summary>
            The file where the image is expected to be saved.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ImageLink">
            <summary>
            The link that will be inserted in the html file.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.AlternateText">
            <summary>
            Alternate text for the image, to show in the "ALT" tag when a browser cannot display images.
            By default this is set to the text in the box "Alternative Text" in the web tab on the image properties.
            If no Alternative text is supplied in the file, the image name will be used here.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.SavedImageFormat">
            <summary>
            File format in which the image is. 
            </summary>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.ImageToSave">
            <summary>
            Image that will be saved. You can use it to save it yourself.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SaveImageEventArgs.Processed">
            <summary>
            Set this property to true if you have taken care of saving the image, and FlexCel does not need to save it.
            If you just used this event to get information on the image being saved, but would like to keep the normal flox,
            set it to false.
            </summary>
        </member>
        <member name="T:FlexCel.Render.SaveImageEventHandler">
            <summary>
            Delegate used to specify where to store the images on a page.
            </summary>
        </member>
        <member name="T:FlexCel.Render.SheetSelectorEntryEventArgs">
            <summary>
            Arguments passed on <see cref="M:FlexCel.Render.TStandardSheetSelector.OnSheetSelectorEntry(FlexCel.Render.SheetSelectorEntryEventArgs)"/>, 
            </summary>
        </member>
        <member name="M:FlexCel.Render.SheetSelectorEntryEventArgs.#ctor(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aWorkbook">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.Workbook"/></param>
            <param name="aActiveSheet">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.ActiveSheet"/></param>
            <param name="aRenderingSheet">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.RenderingSheet"/></param>
            <param name="aLink">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.Link"/></param>
            <param name="aEntryText">See <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.EntryText"/></param>
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.Workbook">
            <summary>
            ExcelFile we are drawing the sheet selector in, positioned in the sheet that we are rendering. 
            Make sure if you modify ActiveSheet of this instance to restore it back to the original value before exiting the event.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.ActiveSheet">
            <summary>
            Sheet index of the entry. This is equivalent to <see cref="P:FlexCel.Render.SheetSelectorEntryEventArgs.Workbook"/>.ActiveSheet
            </summary>
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.RenderingSheet">
            <summary>
            Sheet we are currently rendering. You can compare if (RenderingSheet == ActiveSheet)
            to highlight the active sheet when drawing the selector.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.Link">
            <summary>
            Place where this entry should link to.
            </summary>
        </member>
        <member name="P:FlexCel.Render.SheetSelectorEntryEventArgs.EntryText">
            <summary>
            Text that will be written in this cell of the selector.
            </summary>
        </member>
        <member name="T:FlexCel.Render.SheetSelectorEntryEventHandler">
            <summary>
            Delegate used to specify how the Sheet Selector will be like.
            </summary>
        </member>
        <member name="M:FlexCel.Render.THtmlEngine.EncodeFileName(System.String)">
            <summary>
            Very simple method to ensure filenames contain only valid characters.
            We will consider " " and "." invalid characters, since they could have issues in some filesystems.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.THtmlEngine.WriteHeader(FlexCel.Core.ExcelFile,System.IO.TextWriter,FlexCel.Render.THtmlExtraInfo,FlexCel.Render.TCssInformation,System.Boolean,FlexCel.Render.TSheetSelector)">
            <summary>
            Writes the header of an HTML file.
            </summary>
            <param name="xls">Might be null. If null the pagetitle will be the one in metainfo</param>
            <param name="CssInfo"></param>
            <param name="hasImages"></param>
            <param name="html"></param>
            <param name="extraInfo"></param>
            <param name="SheetSelector"></param>
        </member>
        <member name="T:FlexCel.Render.TGeneratedFiles">
            <summary>
            An object containing all the files generated in the export.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TGeneratedFiles.GetHtmlFiles">
            <summary>
            Name of the html files generated.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TGeneratedFiles.GetImageFiles">
            <summary>
            Name of the image files generated.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TGeneratedFiles.GetCssFiles">
            <summary>
            Name of the css files generated.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TGeneratedFiles.Clear">
            <summary>
            Clears all the files in the object.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxNumberFormat">
            <summary>
            Static class to convert cells to formatted strings. It uses format strings from Excel, that
            are different to those on .net, so we have to try to reconcile the diffs.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.FormatValue(System.Object,System.String,System.Drawing.Color@,FlexCel.Core.ExcelFile,System.Boolean@,System.Boolean@)">
            <summary>
            Formats a value as it would be shown by Excel.
            </summary>
            <param name="Value">Value to format.</param>
            <param name="Format">Cell Format.</param>
            <param name="aColor">Final color of the text. (Depending on the format, color might change. I.e. Red for negatives) </param>
            <param name="Workbook">Workbook with the cell. If null, no color information will be returned and the base date fill be assumed to be 1900 (windows) and not 1904 (macs).</param>
            <param name="HasDate">Returns if the format contains a date.</param>
            <param name="HasTime">Returns if the format contains a time.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.FormatValue(System.Object,System.String,System.Drawing.Color@,FlexCel.Core.ExcelFile)">
            <summary>
            Formats a value as it would be shown by Excel.
            </summary>
            <param name="Value">Value to format.</param>
            <param name="Format">Cell Format.</param>
            <param name="aColor">Final color of the text. (Depending on the format, color might change. I.e. Red for negatives) </param>
            <param name="Workbook">Workbook with the cell. If null, no color information will be returned and the base date fill be assumed to be 1900 (windows) and not 1904 (macs).</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.CheckColor(FlexCel.Core.ExcelFile,System.String,System.Drawing.Color@,System.Int32@)">
            <summary>
            Checks for a [Color] tag. This should be always the first on the format.
            </summary>
            <param name="Workbook"></param>
            <param name="Format"></param>
            <param name="aColor"></param>
            <param name="p"></param>
        </member>
        <member name="M:FlexCel.Core.TFlxNumberFormat.CheckOptional(System.String,System.Int32@,System.Text.StringBuilder)">
            <summary>
            Checks for an optional tag. (conditions like "[>=100"]) should be checked at the beginning, to know which section to use.
            </summary>
            <param name="Format"></param>
            <param name="p"></param>
            <param name="TextOut"></param>
        </member>
        <member name="P:FlexCel.Core.TFlxNumberFormat.RegionalDateString">
            <summary>
            Returns the string used on a standard date on the current locale
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxNumberFormat.RegionalDateTimeString">
            <summary>
            Returns the string used on a standard date and time on the current locale
            </summary>
        </member>
        <member name="T:FlexCel.Core.ExcelFont">
            <summary>
            Utility methods to create normal fonts from Excel ones.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFont.CreateFont(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Tries to create a new font given the Excel data.
            </summary>
            <param name="FontName">Name of the font we want to create.</param>
            <param name="FontSize">Size of the font.</param>
            <param name="Style">Style of the font.</param>
            <returns>A new font with the desired parameters.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFont.ConvertFontStyle(FlexCel.Core.TFlxFont)">
            <summary>
            Converts between a standard FontStyle and a TFlxFont.
            </summary>
            <param name="Fx">FlexCel font to convert.</param>
            <returns>A similar FontStyle.</returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.TFormulaRecord">
            <summary>
            Implements a formula for a cell.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCellRecord">
            <summary>
            Record to hold a value on a cell.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseRowColRecord">
            <summary>
            Base for all records including row on first word and column on second.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TBaseRowColRecord.Destroy">
            <summary>
            Implements deterministic destruction, for decreasing references.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TFormulaRecord.FRow">
            <summary>
            We need it in formulas, for example to calculate =Row()
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TFormulaRecord.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create from data. Creates an empty formula record.
            </summary>
            <param name="aId"></param>
            <param name="aDataSize"></param>
            <param name="aRow"></param>
            <param name="aCol"></param>
            <param name="aXF"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TFormulaRecord.SetFormulaValue(FlexCel.XlsAdapter.TStringRecord)">
            <summary>
            Used to delay-load string records.
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TNameRecord">
            <summary>
            Implements a Named Range.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TFormulaBounds">
            <summary>
            To be able to easily know if a formula applies to an insertandcopy.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSSTEntry">
            <summary>
            Holds one String entry. Implements the hash, taking in count the RTF and other data.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSST">
            <summary>
            Shared string table implementation
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSST.IndexData">
            <summary>
            Holds a tmp list with indices until all data has been loaded and we can sort.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSSTRecord">
            <summary>
            SST record. We are only interested in reading it. The SST class will write the new one.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TLabelSSTRecord">
            <summary>
            LABELSST. 
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TLabelSSTRecord.ToStringWithArrays(System.Object)">
            <summary>
            Includes pretty-printing arrays.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.TLabelSSTRecord.AttachToSST(System.Int64,FlexCel.XlsAdapter.TSST,FlexCel.XlsAdapter.TFontRecordList)">
            <summary>
            Should be called before we release SST.IndexData
            </summary>
            <param name="aSST"></param>
            <param name="index"></param>
            <param name="aFontList"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TLabelRecord">
            <summary>
            LABEL. This record is deprecated in BIFF8 and should not be written.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRStringRecord">
            <summary>
            RSTRING. This record is deprecated in BIFF8 and should not be written. However, it is used when pasting from the clipboard.
            </summary>
        </member>
        <member name="T:FlexCel.Report.FlexCelReport">
            <summary>
            Component for creating reports on Excel based on a template. It will read an xls file, replace tags with data read from
            a database or memory, and save a new file with the data.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReport.ConfigDataSourceList">
            <summary>
            Holds the data for the config sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReport.FNestedIncludeLevel">
            <summary>
            The level of nesting of this report. So we can detect recursive includes.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.#ctor">
            <summary>
            Creates a new FlexCelReport component.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.#ctor(System.Boolean)">
            <summary>
            Creates a new FlexCelReport component and sets the desired Overwrite mode for files. <seealso cref="P:FlexCel.Report.FlexCelReport.AllowOverwritingFiles"/>
            </summary>
            <param name="aAllowOverwritingFiles">If false, FlexCelReport will never overwrite an existing file, and you have to delete it before creating it again.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.#ctor(System.Int32,System.String,FlexCel.Report.TDataSourceInfoList,FlexCel.Report.FlexCelReport)">
            <summary>
            Creates a new FlexCelReport component to be used on #include tags.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Run(System.String,System.String)">
            <summary>
            Executes the report, reading from a file and writing to a file.
            </summary>
            <param name="templateFileName">File with the template to use.</param>
            <param name="outFileName">File to create. Note the it must not exist.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Run(System.IO.Stream,System.IO.Stream)">
            <summary>
            Executes the report, reading from a stream and writing to a stream.
            </summary>
            <param name="templateStream">Stream with the template.</param>
            <param name="outStream">Stream where the result will be written.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Run(FlexCel.Core.ExcelFile)">
            <summary>
            Executes the report, reading from an ExcelFile and writing the results to it again.
            </summary>
            <remarks>
            Note that <see cref="P:FlexCel.Report.FlexCelReport.RecalcMode"/>, <see cref="P:FlexCel.Report.FlexCelReport.SemiAbsoluteReferences"/> <see cref="P:FlexCel.Report.FlexCelReport.RecalcForced"/> and <see cref="P:FlexCel.Report.FlexCelReport.AllowOverwritingFiles"/> values used will be the ones on 
            aWorkbook, not the ones on this report.
            </remarks>
            <param name="aWorkbook">ExcelFile that contains the template file, and that will contain the generated file once this method runs.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Cancel">
            <summary>
            Cancels a running report. This method is equivalent to setting <see cref="P:FlexCel.Report.FlexCelReport.Canceled"/> = true.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)">
            <summary>
            Use this method to tell FlexCel which DataTables or DataViews are available for the report.
            </summary>
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available to the report.</param>
            <example>
            To allow flexCelReport1 to use Customers and Orders tables, you can use the code:
            <code>
               public Form1()
               {
                   InitializeComponent();
                   InitializeReports();
               }
               
               private InitializeReports()
               {
                   flexCelReport1.AddTable("Customers", DataSet1.Customers); //Add datatable Customers to the report.
                   flexCelReport1.AddTable("Orders", OrdersDataView); //Add dataview OrdersDataView to the report.
                   flexCelReport1.AddTable(MyDataSet); //Add all the tables on MyDataSet to the report.
                   flexCelReport1.AddTable(Form1, true);    //Add all tables and dataviews on Form1, and on all the components inside Form1.
               }
            </code>
            </example>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable,FlexCel.Report.TDisposeMode)">
            <summary>
            Use this method to tell FlexCel which DataTables or DataViews are available for the report.
            </summary><param name="tableName">Name that the table will have on the report.</param><param name="table">Table that will be available to the report.</param><example>
            To allow flexCelReport1 to use Customers and Orders tables, you can use the code:
            <code>
               public Form1()
               {
                   InitializeComponent();
                   InitializeReports();
               }
               
               private InitializeReports()
               {
                   flexCelReport1.AddTable("Customers", DataSet1.Customers); //Add datatable Customers to the report.
                   flexCelReport1.AddTable("Orders", OrdersDataView); //Add dataview OrdersDataView to the report.
                   flexCelReport1.AddTable(MyDataSet); //Add all the tables on MyDataSet to the report.
                   flexCelReport1.AddTable(Form1, true);    //Add all tables and dataviews on Form1, and on all the components inside Form1.
               }
            </code>
            </example>       
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this table after running the report. Use it when adding tables created on the fly, so you do not have to dispose them yourself.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataView)">
            <summary>
            Use this method to tell FlexCel which DataTables or DataViews are available for the report.
            </summary><param name="tableName">Name that the table will have on the report.</param><param name="table">Table that will be available to the report.</param><example>
            To allow flexCelReport1 to use Customers and Orders tables, you can use the code:
            <code>
               public Form1()
               {
                   InitializeComponent();
                   InitializeReports();
               }
               
               private InitializeReports()
               {
                   flexCelReport1.AddTable("Customers", DataSet1.Customers); //Add datatable Customers to the report.
                   flexCelReport1.AddTable("Orders", OrdersDataView); //Add dataview OrdersDataView to the report.
                   flexCelReport1.AddTable(MyDataSet); //Add all the tables on MyDataSet to the report.
                   flexCelReport1.AddTable(Form1, true);    //Add all tables and dataviews on Form1, and on all the components inside Form1.
               }
            </code>
            </example>       
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataView,FlexCel.Report.TDisposeMode)">
            <summary>
            Use this method to tell FlexCel which DataTables or DataViews are available for the report.
            </summary><param name="tableName">Name that the table will have on the report.</param><param name="table">Table that will be available to the report.</param><example>
            To allow flexCelReport1 to use Customers and Orders tables, you can use the code:
            <code>
               public Form1()
               {
                   InitializeComponent();
                   InitializeReports();
               }
               
               private InitializeReports()
               {
                   flexCelReport1.AddTable("Customers", DataSet1.Customers); //Add datatable Customers to the report.
                   flexCelReport1.AddTable("Orders", OrdersDataView); //Add dataview OrdersDataView to the report.
                   flexCelReport1.AddTable(MyDataSet); //Add all the tables on MyDataSet to the report.
                   flexCelReport1.AddTable(Form1, true);    //Add all tables and dataviews on Form1, and on all the components inside Form1.
               }
            </code>
            </example>       
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this table after running the report. Use it when adding tables created on the fly, so you do not have to dispose them yourself.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.Data.DataSet)">
            <summary>
            Use this method to load all tables on a dataset at once. This is equivalent to calling <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)"/>
            for each of the tables on the dataset.
            </summary>
            <param name="tables">Dataset containing the tables to add.</param>
            <example>See <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)"/> for an example.</example>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.Data.DataSet,FlexCel.Report.TDisposeMode)">
             <summary>
             Use this method to load all tables on a dataset at once. When disposeMode is DoNotDispose, this is equivalent to calling <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)"/>
             for each of the tables on the dataset. If disposeMode is DisposeTable, this will make the same as calling AddTable() with disposeTable equal to false for
             each table on the dataset. and when fisnished all the dataset will be disposed.
             </summary>
             <param name="tables">Dataset containing the tables to add.</param>
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this dataset after running the report. Use it when adding datasets created on the fly, so you do not have to dispose them yourself.</param>
             <example>See <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)"/> for an example.</example>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,FlexCel.Report.VirtualDataTable)">
            <summary>
            Use this method to add any custom object as a datasource for FlexCel. Make sure to read "Virtual Datasets" on UsingFlexCelReports.pdf.
            Use <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)"/> to add datasets.
            </summary>
            <param name="tableName">Name that the table will have on the report.</param>
            <param name="table">Table that will be available in the report.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddTable(System.String,FlexCel.Report.VirtualDataTable,FlexCel.Report.TDisposeMode)">
             <summary>
             Use this method to add any custom object as a datasource for FlexCel. Make sure to read "Virtual Datasets" on UsingFlexCelReports.pdf.
             Use <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.String,System.Data.DataTable)"/> to add datasets.
             </summary>
             <param name="tableName">Name that the table will have on the report.</param>
            <param name="disposeMode">When disposeMode is TDisposeMode.DisposeTable, FlexCel will take care of
            disposing this table after running the report. Use it when adding tables created on the fly, so you do not have to dispose them yourself.</param>
             <param name="table">Table that will be available in the report.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearTables">
            <summary>
            Clear the collection of tables available to the report. Use <see cref="M:FlexCel.Report.FlexCelReport.AddTable(System.Data.DataSet)"/> to add new tables to it.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddConnection(System.String,System.Data.IDbDataAdapter,System.Globalization.CultureInfo)">
            <summary>
            Adds an adapter to use from the template on the DIRECT SQL commands.
            <b>For security reasons, make sure this adapter ONLY GRANTS READONLY ACCESS TO THE DATA</b>
            </summary>
            <param name="connectionName">This is the name you will use on the template to refer to this adapter.</param>
            <param name="adapter">The adapter that will be used.</param>
            <param name="locale">The locale for the created tables.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddConnection(System.String,System.Data.IDbDataAdapter,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Adds an adapter to use from the template on the DIRECT SQL commands.
            <b>For security reasons, make sure this adapter ONLY GRANTS READONLY ACCESS TO THE DATA</b>
            </summary>
            <param name="connectionName">This is the name you will use on the template to refer to this adapter.</param>
            <param name="adapter">The adapter that will be used.</param>
            <param name="locale">The locale for the created tables.</param>
            <param name="caseSensitive">When true strings will be case sensitive, and "a" will be different from "A"</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearConnections">
            <summary>
            Clear the collection of connections available to the report. Use <see cref="M:FlexCel.Report.FlexCelReport.AddConnection(System.String,System.Data.IDbDataAdapter,System.Globalization.CultureInfo,System.Boolean)"/> to add new connections to it.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.AddSqlParameter(System.String,System.Data.IDbDataParameter)">
            <summary>
            Adds an SQL parameter to use from the template on the DIRECT SQL commands.
            Note that the parameter must have a name even if you are using
            positional parameters ("?") because on the template you should always write 
            named parameters.
            </summary>
            <param name="parameterName">The name of the parameter without special symbols, as it is written
            on the DIRECT SQL string. This might be different from the real parameter name.
            For example, on SQL Server, parameterName might be "MyParameter" while
            parameter.ParameterName would be "@MyParameter"</param>
            <param name="parameter">The parameter to add.</param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearParameters">
            <summary>
            Clear the collection of SQL parameters available to the report. Use <see cref="M:FlexCel.Report.FlexCelReport.AddSqlParameter(System.String,System.Data.IDbDataParameter)"/> to add new parameters to it.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.SetValue(System.String,System.Object)">
            <summary>
            Sets a variable for the report. 
            </summary>
            <param name="name">Name of the variable to set. Case insensitive.</param>
            <param name="value">Value of the variable.</param>
            <example>
            You can define a variable "CurrentDate" on the following way:
            <code>
              flexCelReport1.SetValue("CurrentDate", DateTime.Now);
            </code>
            Then, if you write &lt;#CurrentDate&gt; on a cell, the date will be shown.
            Note that the name is case insensitive, so both "CURRENTDATE" and "currentdate" refer to the same variable.
            </example>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearValues">
            <summary>
            Destroys all variables on the report. To add new variables, use <see cref="M:FlexCel.Report.FlexCelReport.SetValue(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.SetExpression(System.String,System.Object)">
            <summary>
            Sets an user-defined expression to be used in the report. Different from <see cref="M:FlexCel.Report.FlexCelReport.SetValue(System.String,System.Object)"/> this method will evalate the
            &lt;#tags&gt; present in value. This allows you to provide formula functionality to end users, and to reuse the same report for 
            different formulas.
            </summary>
            <param name="name">Name of the expression to set. Case insensitive.</param>
            <param name="value">Value of the expression.</param>
            <example>
            You could ask the user for an expression in an edit box, and then before running the report do:
            <code>
              flexCelReport1.SetExpression("MyExpression", EditBox.Text);
            </code>
            Then, if you write &lt;#MyExpresion&gt; on a cell, the expression will be evaluated and entered into the cell.
            If the user enters "&lt;#evaluate(&lt;#Order.Amount&gt; * &lt;#Order.Vat&gt;)&gt;" in the edit box, this formula will
            be evaluated into the cell. The user can write any &lt;#tag&gt; that could be used in an expression defined directly in the template.
            </example>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearExpressions">
            <summary>
            Destroys all user-defined expressions on the report. To add new expressions, use <see cref="M:FlexCel.Report.FlexCelReport.SetExpression(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.SetUserFunction(System.String,FlexCel.Report.TFlexCelUserFunction)">
            <summary>
            Adds a new user defined function to be used with the report. 
            For information on how to create the user function, see <see cref="T:FlexCel.Report.TFlexCelUserFunction"/> 
            </summary>
            <param name="name">Name that the function will have on the report. Case insensitive.</param>
            <param name="functionImplementation">An implementation of the user function.</param>
            <example>
            You can define a function "MyFunc" on the following way:
            <code>
              flexCelReport1.SetValue("MyFunc", MyFuncImpl);
            </code>
            Then, if you write &lt;#MyFunc(param1, param2... paramn)&gt; on a cell, the function will be called and the result shown.
            Note that the name is case insensitive, so both "MYFUNC" and "myfunc" refer to the same function.
            </example>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ClearUserFunctions">
            <summary>
            Destroys all user defined functions on the report. To add new functions, use <see cref="M:FlexCel.Report.FlexCelReport.SetUserFunction(System.String,FlexCel.Report.TFlexCelUserFunction)"/>
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnBeforeReadTemplate(FlexCel.Report.GenerateEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.BeforeReadTemplate"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnBeforeGenerateWorkbook(FlexCel.Report.GenerateEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.BeforeGenerateWorkbook"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnAfterGenerateWorkbook(FlexCel.Report.GenerateEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.AfterGenerateWorkbook"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnBeforeGenerateSheet(FlexCel.Report.GenerateEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.BeforeGenerateSheet"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnAfterGenerateSheet(FlexCel.Report.GenerateEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.AfterGenerateSheet"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnGetImageData(FlexCel.Report.GetImageDataEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.GetImageData"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnGetInclude(FlexCel.Report.GetIncludeEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.GetInclude"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.OnUserTable(FlexCel.Report.UserTableEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelReport. See also <see cref="E:FlexCel.Report.FlexCelReport.UserTable"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.PreLoad(FlexCel.Core.ExcelFile,FlexCel.Report.TBand@,System.Int32,System.Byte[]@,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Used on included reports. For performance, the report will be parsed only once.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.ResolveString(System.Object,System.Int32,FlexCel.Report.TBand)">
            <summary>
            This is the method that does the parsing. Could be made virtual and override it on a descendant class to support 
            self defined Tags.
            </summary>
            <param name="s">String to parse.</param>
            <param name="XF">Original XF of the cell. The value returned might change it, if for example there is a #FormatCell tag.</param>
            <param name="CurrentBand">The band we are currently in.</param>
            <returns>A parsed class, with values replaced by tags found on s.</returns>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.FillSheetBands(FlexCel.Report.TBand[]@)">
            <summary>
            Creates a list of bands with all available datasets, to be used with sheet datasets.
            </summary>
            <param name="SheetBands"></param>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Unload">
            <summary>
            This cleans the resources allocated by preload.
            </summary>
        </member>
        <member name="M:FlexCel.Report.FlexCelReport.Dispose(System.Boolean)">
            <summary>
            Override this instance when creating descendants of FlexCelReport.
            Remember to always call base.Dispose(disposing).
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.Canceled">
            <summary>
            If true the report has been canceled with <see cref="M:FlexCel.Report.FlexCelReport.Cancel"/> method.
            You can't set this variable to false, and setting it true is the same as calling <see cref="M:FlexCel.Report.FlexCelReport.Cancel"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.Progress">
            <summary>
            Progress of the report. This variable must be accessed from other thread.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.DeleteEmptyRanges">
            <summary>
            Determines if FlexCel will delete or just clear ranges with empty datasets (0 records).
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing files or not.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.ResetCellSelections">
            <summary>
            When true, all sheets will selections will be reset to A1. This way, you do not need to care about setting the correct selection when editing the template.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.HtmlMode">
            <summary>
            When true, FlexCel will interpret the text as HTML, and honor the tags that it can understand.
            Note that when in HtmlMode, many consecutive spaces will be interpreted as one, and carriage returns
            will be interpreted as spaces. To enter real carriage returns you need to enter a &lt;br&gt; tag (unless the text is inside &lt;pre&gt; tags). 
            Also &amp; symbols need to be escaped. For more info on HTML syntax supported, see <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)"/>
            <br/>Note that the &lt;#HTML&gt; tag can overwrite the Html behavior on a cell by cell basis.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.EnterFormulas">
            <summary>
            When true, FlexCel will try to enter any string starting with "=" as a formula instead of text. 
            If this property is true, any string you enter that starts with "=" must be a valid formula, or an error will be raised.
            When you know a priori which cells will have formulas, you might want to use the &lt;#formula&gt; tag instead.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.TryToConvertStrings">
            <summary>
            When true, FlexCel will try to convert strings to numbers or dates before entering them into the cells. 
            <b>USE THIS PROPERTY WITH CARE!</b>  You shouldn't normally need to use this property, since FlexCel automatically
            enters numbers or dates in the DataSets as number or dates in the Excel file. If you need to use this property,
            it means that data in your database is stored as strings when they should not be. So the correct fix is to fix the columns
            you know should have numbers to have numbers, NOT to use this proeprty. This is just a workaround when you can't do anything else about it.<br/>
            Note also that htis method is not efficient since it has to "guess" what a string might be if anything, and it might be wrong.
            Also, it might have issues with locales: Does the string "1/2/2008" means January 2 or February 1? Depends on the locale.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.RecalcMode">
            <summary>
            Determines if the report will be recalculated before saving.
            See <see cref="P:FlexCel.Core.ExcelFile.RecalcMode"/> for more info.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.RecalcForced">
            <summary>
            <b>Before changing this property, look at <see cref="P:FlexCel.Core.ExcelFile.RecalcForced"/></b> Determines if the formulas will be recalculated when Excel opens them.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.ErrorActions">
            <summary>
            Determines if FlexCel will throw Exceptions or just ignore errors on specific situations. When the errors are ignored, they will
            be logged into the <see cref="T:FlexCel.Core.FlexCelTrace"/> class.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.ErrorsInResultFile">
            <summary>
            When true and there is an error reading cells in the template or writing the cells in the report, the
            error message will be written in the corresponding cell on the generated report. No Exception will be thrown.
            <br/>You can use this property to <b>DEBUG</b> reports, as it provides an easy
            way to see all errors at once in the place they are produced. But is it recommended that you leave this property <b>FALSE</b> in production, 
            or you could create xls files with error messages inside. See also <see cref="P:FlexCel.Report.FlexCelReport.DebugExpressions"/>
            </summary>
            <remarks>You can also set this property in the template, by writing &lt;#ErrorsInResultFile&gt; in the expressions column in the config sheet.</remarks>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.DebugExpressions">
            <summary>
            Set this value to true if you want to analize how FlexCel is evaluating the tags in a file. When true, a full stack
            trace will be written in the cell instead of the tag values. See the section on Debugging reports in the "Using FlexCel Reports (Designing Templates)" for
            information on how to use those stack traces.
            </summary>
            <remarks>You can also set this property in the template, by writing &lt;#Debug&gt; in the expressions column in the config sheet.
            Debug in the template will set both this property and <see cref="P:FlexCel.Report.FlexCelReport.ErrorsInResultFile"/> to true.</remarks>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.SqlParameterReplace">
            <summary>
            Format string for replacing the standard parameter names on DIRECT SQL commands. You can leave it empty for ODBC, OLEDB or SQLSERVER databases.
            See Also <see cref="P:FlexCel.Report.FlexCelReport.SqlParametersType"/>
            </summary>
            <remarks>
            On ADO.NET sql parameters can be defined on multiple ways, depending on
            the database you use.
            For example, SQL Server will use "@ParamName", while OLEDB will use "?"
            as parameter id. 
            But, to keep templates database independent, you will always use 
            "@ParamName" notation on the Direct SQL commands you write on templates.
            When using OLEDB, ODBC or SqlSever, FlexCel knows how to 
            replace the correct parameters on the SQL on templates, but for more
            generic databases you might need to use this property.
            This is a standard .NET format string, where {0} will be replaced by the parameter name. For example, 
            on Oracle database you might need to set this value to "\:{0}" (without quotes)
            that will translate on ":ParamName"
            </remarks>
            <example>
            On oracle databases, you can set this property to "\:{0}" (without quotes)
            It will create parameters of type ":ParamName".
            </example>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.SqlParametersType">
            <summary>
            Type of parameters for the database. Positional parameters are the ones where you write 
            "?" on the sql, and positional are when you write a name, like "@employee" or ":orderid".
            See Also <see cref="P:FlexCel.Report.FlexCelReport.SqlParameterReplace"/>
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReport.SemiAbsoluteReferences">
            <summary>
            When this property is set to true, absolute references to cells inside bands being copied will be treated as relative.
            This way, if you have "=$A$1" inside a band and cell A1 is also inside the band, it will change to A2,A3..etc when the band is copied down. 
            This can be useful in a master-detail report, where you want the cells in the detail to point to a fixed cell inside every record of the master.
            See <see cref="P:FlexCel.Core.ExcelFile.SemiAbsoluteReferences"/> for more information.
            </summary>
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.BeforeReadTemplate">
            <summary>
            Fires before starting to generate the report and before the template has been loaded.
            It allows to set the template password if you are using one.
            </summary>
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.BeforeGenerateWorkbook">
            <summary>
            Fires before starting to generate the report but after the template has been loaded.
            It allows to do some in-place modifications to the template before generating the report.
            </summary>
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.AfterGenerateWorkbook">
            <summary>
            Fires After the report has been fully generated but is not saved.
            Allows to do last clean up things before saving the report.
            </summary>
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.BeforeGenerateSheet">
            <summary>
            Fires Before each sheet on the file is generated.
            </summary>
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.AfterGenerateSheet">
            <summary>
            Fires After each sheet on the file is generated.
            </summary>
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.GetImageData">
            <summary>
            Fires before an image is saved to the report.
            Use it if the image is on a proprietary format on the database, to return a format FlexCel can understand.
            </summary>
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.GetInclude">
            <summary>
            Fires before including a file with &lt;#include&gt;.
            Use it if you want to provide an alternative path for the file, of if you want to read the include
            file from a different place, for example a database or an embedded resource.
            </summary>
            <remarks>
            If the including file is a real file (not an stream) and FileName is relative, it will be relative to the
            including file path.
            </remarks>
        </member>
        <member name="E:FlexCel.Report.FlexCelReport.UserTable">
            <summary>
            Fires on each &lt;#USER TABLE&gt; tag in the config sheet, allowing to add your own datasets to the report.
            </summary>
        </member>
        <member name="T:FlexCel.Render.FlexCelPdfExportProgress">
            <summary>
            Indicates how much of the report has been generated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExportProgress.Page">
            <summary>
            The page that is being written.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExportProgress.TotalPage">
            <summary>
            The total number of pages exporting.
            </summary>
        </member>
        <member name="T:FlexCel.Render.PageEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.BeforeGeneratePage"/>, 
            <see cref="E:FlexCel.Render.FlexCelPdfExport.BeforeNewPage"/> and <see cref="E:FlexCel.Render.FlexCelPdfExport.AfterGeneratePage"/>
            </summary>
        </member>
        <member name="M:FlexCel.Render.PageEventArgs.#ctor(FlexCel.Pdf.PdfWriter,System.Int32,System.Int32)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aPdfWriter">The file we are processing.</param>
            <param name="aCurrentPage">The page that is being generated.</param>
            <param name="aCurrentPageInSheet">The page in the current sheet that is being generated.</param>
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.File">
            <summary>
            The file with the pdf data.
            </summary>
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.CurrentPage">
            <summary>
            Page currently printing.
            </summary>
        </member>
        <member name="P:FlexCel.Render.PageEventArgs.CurrentPageInSheet">
            <summary>
            Page currently printing on the sheet printing.
            </summary>
        </member>
        <member name="T:FlexCel.Render.PageEventHandler">
            <summary>
            Generic delegate for After/Before page events.
            </summary>
        </member>
        <member name="T:FlexCel.Render.GetBookmarkInformationArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.GetBookmarkInformation"/>, 
            </summary>
        </member>
        <member name="M:FlexCel.Render.GetBookmarkInformationArgs.#ctor(FlexCel.Pdf.PdfWriter,System.Int32,System.Int32,FlexCel.Pdf.TBookmark)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aPdfWriter">The file we are processing.</param>
            <param name="aCurrentPage">The page that is being generated. 0 means the global bookmark parent of all the sheets.</param>
            <param name="aCurrentPageInSheet">The page that is being generated, relative to the sheet.</param>
            <param name="aBookmark">Bookmark that we are about to include. you can customize it on this event.</param> 
        </member>
        <member name="P:FlexCel.Render.GetBookmarkInformationArgs.File">
            <summary>
            The file with the pdf data.
            </summary>
        </member>
        <member name="P:FlexCel.Render.GetBookmarkInformationArgs.CurrentPage">
            <summary>
            Page currently printing. 0 means the global bookmark parent of all the sheets.
            </summary>
        </member>
        <member name="P:FlexCel.Render.GetBookmarkInformationArgs.CurrentPageInSheet">
            <summary>
            Page currently printing, relative to the active sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Render.GetBookmarkInformationArgs.Bookmark">
            <summary>
            Bookmark that we are about to include.
            </summary>
        </member>
        <member name="T:FlexCel.Render.GetBookmarkInformationEventHandler">
            <summary>
            This event will happend each time a PDF bookmark is automatically added by FlexCel. You can use it to customize the bookmark, for example change the font color or style.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:FlexCel.Render.FlexCelHtmlExport">
            <summary>
            A component for exporting an Excel file to HTML.
            </summary>
        </member>
        <member name="T:FlexCel.Core.IHtmlFontEvent">
            <summary>
            Provides a method to customize the fonts used in the HTML methods.
            </summary>
        </member>
        <member name="M:FlexCel.Core.IHtmlFontEvent.DoHtmlFont(FlexCel.Core.HtmlFontEventArgs)">
            <summary>
            Method to be called each time a new font is used.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.#ctor">
            <summary>
            Creates a new FlexCelHtmlExport instance.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.#ctor(FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new FlexCelHtmlExport and assigns it to an ExcelFile.
            </summary>
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.#ctor(FlexCel.Core.ExcelFile,System.Boolean)">
            <summary>
            Creates a new FlexCelHtmlExport and assigns it to an ExcelFile, setting AllowOverwritingFiles to the desired value.
            </summary>
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <param name="aAllowOverwritingFiles">When true, existing files will be overwrited.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.OnGetImageInformation(FlexCel.Render.ImageInformationEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelHtmlExport.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.OnSaveImage(FlexCel.Render.SaveImageEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelHtmlExport.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.OnHtmlFont(FlexCel.Core.HtmlFontEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelHtmlExport.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Cancel">
            <summary>
            Cancels a running export. This method is equivalent to setting <see cref="P:FlexCel.Render.FlexCelHtmlExport.Canceled"/> = true.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Export(System.IO.TextWriter,System.String,FlexCel.Render.TCssInformation)">
            <summary>
            Exports the active sheet of the associated xls workbook to a TextWriter. Note that you need to supply the stream for saving the images 
            in the <see cref="E:FlexCel.Render.FlexCelHtmlExport.GetImageInformation"/> event (if you want to save the images).
            </summary>
            <param name="html">TextWriter where the result will be written.</param>
            <param name="fileName">FileName used to generate the supporting files. If you leave it null, no images will be saved as there will not be filename for them.</param>
            <param name="css">Use this parameter to store all CSS information in an external file. Set it to null
            if you want to store the CSS inside the HTML file. If you want to share the CSS between multiple files, make sure
            you pass the same css parameter to all Export calls.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Export(System.String,System.String)">
            <summary>
            Exports the active sheet of the the associated xls workbook to a file. CSS will be saved internally in the file.
            </summary>
            <param name="htmlFileName">File name of the html file to be created.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the main file. 
            If for example htmlFileName is "c:\reports\html\index.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Export(System.String,System.String,FlexCel.Render.TCssInformation)">
            <summary>
            Exports the active sheet of the the associated xls workbook to a file.
            </summary>
            <param name="htmlFileName">File name of the html file to be created.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the main file. 
            If for example htmlFileName is "c:\reports\html\index.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <param name="css">Use this parameter to store all CSS information in an external file. Set it to null
            if you want to store the CSS inside the HTML file. If you want to share the CSS between multiple files, make sure
            you pass the same css parameter to all Export calls.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.Export(System.String,System.String,System.String)">
            <summary>
            Exports the active sheet of the the associated xls workbook to a file.
            </summary>
            <param name="htmlFileName">File name of the html file to be created.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the main file. 
            If for example htmlFileName is "c:\reports\html\index.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlPath. 
            If you set it to null, no css file created and the css will be stored inside each HTML file.
            If for example htmlpath is "c:\reports" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ExportAllVisibleSheetsAsTabs(System.String,System.String,System.String,System.String,System.String,FlexCel.Render.TSheetSelector)">
            <summary>
            This method will export all the visible sheets on an xls file to an html file, writing each sheet in a different file.
            This is equivalent to calling Export on every sheet.
            </summary>
            <param name="htmlPath">Path where html files will be stored. (one per sheet in the workbook)</param>
            <param name="htmlFileNamePrefix">This is a string that will be added to every file generated, at the beggining of the filename.
            For example, if htlmFileNamePrefix = "test_" and htmlFileNamePostfix = ".html", "sheet1" will be exported as "test_sheet1.html".
            If generating a single file (MHTML format), htmlFileNamePrefix + htmlFileNamePostFix will be used, without a sheet name.</param>
            <param name="htmlFileNamePostfix">This is a string that will be added to every file generated, at the end of the filename. Make sure you include the extension here.
            For example, if htlmFileNamePrefix = "test_" and htmlFileNamePostfix = ".html", "sheet1" will be exported as "test_sheet1.html"
            If generating a single file (MHTML format), htmlFileNamePrefix + htmlFileNamePostFix will be used, without a sheet name.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the htmlPath. 
            If for example htmlPath is "c:\reports\html" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html files.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlPath. Note that the css will be shared among all sheets, so only one file will be created.
            if you set it to null, no css file created and the css will be stored inside each HTML file. It is recommended that you provide an extenal name here,
            so the CSS is shared webpages are smaller. If for example htmlpath is "c:\reports" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
            <param name="sheetSelector">Information about how to draw the tabs that will allow you to switch between the sheets.
            Set it to null if you do not want to include a sheet selector.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ExportAllVisibleSheetsAsOneHtmlFile(System.String,System.String,System.String,System.String)">
            <summary>
            Exports all visible sheets in an xls file one after the other in the same html file.
            </summary>
            <param name="htmlFileName">Path where the generated html file will be stored.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the path in htmlFileName. 
            If for example htmlFileName is "c:\reports\html\test.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlFileName Path.
            if you set it to null, no css file created and the css will be stored inside each HTML file. 
            If for example htmlFileName is "c:\reports\test.htm" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
            <param name="sheetSeparator">An HTML string to write between all the different sheets being exported. You can use for example &lt;p&gt;&lt;hr/&gt;&lt;/p&gt; here
            to add an horizontal line. You can also use the special macros &lt;#SheeName&gt;, &lt;#SheeCount&gt; and &lt;#SheePos&gt; here to enter the current sheet name, 
            the number of sheets and the current sheet respectively. The macros are case insensitive, you can enter them in any combination of upper and lower case.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.ExportAllVisibleSheetsAsOneHtmlFile(System.IO.TextWriter,System.String,System.String,System.String,System.String)">
            <summary>
            Exports all visible sheets in an xls file one after the other in the same html stream.
            </summary>
            <param name="html">Stream where the HTML file will be saved.</param>
            <param name="htmlFileName">The filename itself won't be used (since the html file is saved to a stream), but it will tell the path where the generated extra files (for example images) will be stored, and also the way images are named.</param>
            <param name="relativeImagePath">Folder where images will be stored, relative to the path in htmlFileName. 
            If for example htmlFileName is "c:\reports\html\test.htm" and relativeImagePath is "images", images will be saved
            in folder "c:\reports\html\images". If this parameter is null or empty, images will be saved in the same folder as the html file.</param>
            <param name="relativeCssFileName">Name for the Css file, with a path relative to the htmlFileName Path.
            if you set it to null, no css file created and the css will be stored inside each HTML file. 
            If for example htmlFileName is "c:\reports\test.htm" and relativeCssFileName is "css\data.css" the
            css file will be saved in "c:\reports\css\data.css"</param>
            <param name="sheetSeparator">An HTML string to write between all the different sheets being exported. You can use for example &lt;hr/&gt;&lt;p&gt;Sheet &lt;#SheetName&gt;&lt;/p&gt; here
            to add an horizontal line. You can also use the special macros &lt;#SheetName&gt;, &lt;#SheetCount&gt; and &lt;#SheetPos&gt; here to enter the current sheet name, 
            the number of sheets and the current sheet respectively. The macros are case insensitive, you can enter them in any combination of upper and lower case.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.PartialExportAdd(FlexCel.Render.TPartialExportState,System.String,System.String)">
            <summary>
            This method is designed to export a part of the HTML inside other HTML file.
             You should call this method once for every file you wish to export, 
             in order to let FlexCel consolidate the needed CSS classes and information into the partialExportState parameter.
             Once you have "filled" the partialExportState object with all the information on files you wish to export, you can call the methods
             in partialExportState to write the CSS or body parts of the HTML file.
            <p>Note that this overload version will automatically save the images to disk when needed. If for any reason you do not want
            to save the images, use the overload with SaveImagesToDisk parameter.</p>
            </summary>
            <remarks>This method does *not* clear the generated files array, so you have more control over it. If you want to use it, you need to call
            the clear method yourself before the first PartialExportAdd.</remarks>
            <param name="partialExportState">Object where we will collect all the css and needed information on the files being exported. Call this method
            once for every sheet you want to export, using the same partialExportState parameter.</param>
            <param name="htmlFileName">Name of the stored html file. This affects the path where images will be saved, and also the way images will be named.</param>
            <param name="relativeImagePath">Path relative to the path of htmlFileName, where images will be stored.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.PartialExportAdd(FlexCel.Render.TPartialExportState,System.String,System.String,System.Boolean)">
            <summary>
            This method is designed to export a part of the HTML inside other HTML file.
             You should call this method once for every file you wish to export, 
             in order to let FlexCel consolidate the needed CSS classes and information into the partialExportState parameter.
             Once you have "filled" the partialExportState object with all the information on files you wish to export, you can call the methods
             in partialExportState to write the CSS or body parts of the HTML file.
            </summary>
            <param name="partialExportState">Object where we will collect all the css and needed information on the files being exported. Call this method
            once for every sheet you want to export, using the same partialExportState parameter.</param>
            <param name="htmlFileName">Name of the stored html file. This affects the path where images will be saved, and also the way images will be named.</param>
            <param name="relativeImagePath">Path relative to the path of htmlFileName, where images will be stored.</param>
            <param name="SaveImagesToDisk">When true, any image found in the file will be saved to disk (to relative imagepath) as the file is added.
            If false, the links for the image will be written but no image will be saved to disk, you have to do this yourself. Note that when 
            saving MHTML files this parameter doesn't matter, since images will not be saved to disk anyway.</param>
            <remarks>This method does *not* clear the generated files array, so you have more control over it. If you want to use it, you need to call
            the clear method yourself before the first PartialExportAdd.</remarks>
        </member>
        <member name="M:FlexCel.Render.FlexCelHtmlExport.DoHtmlFont(FlexCel.Core.HtmlFontEventArgs)">
            <summary>
            This method is for internal use.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.Canceled">
            <summary>
            If true the export has been canceled with <see cref="M:FlexCel.Render.FlexCelHtmlExport.Cancel"/> method.
            You can't set this variable to false, and setting it true is the same as calling <see cref="M:FlexCel.Render.FlexCelHtmlExport.Cancel"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.Progress">
            <summary>
            Progress of the export. This variable must be accessed from other thread.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.Workbook">
            <summary>
            The ExcelFile to export.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HidePrintObjects">
            <summary>
            Select which kind of objects should not be exported to html. By default we do *not* export headers and footers, since they are normally not what you want when exporting to HTML.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HtmlVersion">
            <summary>
            Version of the HTML generated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HtmlFileFormat">
            <summary>
            Format of the HTML file to be generated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ClassPrefix">
            <summary>
            Prefix to be appended to all CSS classes. For example, if you set it to "test", CSS classes will be
            named like ".test1234". Normally you do not need to change this property, but if you need to insert multiple
            Excel files in the same HTML page, you need to ensure all classes have an unique ClassPrefix.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.FixIE6TransparentPngSupport">
            <summary>
            By default, Internet explorer does not support transparent PNGs. Normally this is not an issue, since Excel does not use 
            much transparency. But if you rely on transparent images and don't want to use gif images instead of png, you can set this
            property to true. It will add special code to the HTML file to support transparent images in IE6.<br/>
            <b>Note:</b> If setting this property to false, you might want to set <see cref="P:FlexCel.Render.FlexCelHtmlExport.ImageBackground"/> to Color.White instead
            of ColorUtil.Empty to ensure images have no transparent background.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.FixOutlook2007CssSupport">
            <summary>
            Outlook 2007 renders HTML worse than previous versions, since it switched to the Word 2007 rendering engine instead of
            Internet Explorer to show HTML emails. If you apply this fix, some code will be added to the generated HTML file to improve
            the display in Outlook 2007. Other browsers will not be affected and will still render the original file. Turn this option on if
            you plan to email the generated file as an HTML email or to edit them in Word 2007. Note that the pages will not validate with the
            w3c validator if this option is on.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.FixIE6WordWrapSupport">
            <summary>
            Some older browsers (and Word 2007) might not support the CSS white-space tag. In this case, if a line longer than a cell cannot be expanded to the right
            (because there is data in the next cell) it will wrap down instead of being cropped. This fix will cut the text on this cell to the displayable
            characters. If a letter was displayed by the half on the right, after applying this fix it will not display.
            This fix is automatically applied when <see cref="P:FlexCel.Render.FlexCelHtmlExport.FixOutlook2007CssSupport"/> is selected, so there is normally no reason to apply it. You might get 
            a smaller file with this fix (if you have a lots of hidden text), but the display will not be as accurate as when it is off, so it is reccomended to keep it off.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.UseContentId">
            <summary>
            When exporting to <b>MHTML</b>, some mail clients might have problems understanding the newer "Content-Location" header to show the images.
            When this property is true, we will use the older "Content-Id" header that is better supported than Content Location in the mime headers
            to reference the images. You are strongly encouraged to keep this property
            true in order to maximize the number of mail readers compatible. When Exporting to HTML (not MHTML), this property has no effect.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HeadingWidth">
            <summary>
            Width in points of the left gutter when printing row numbers and column names.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HeadingStyle">
            <summary>
            Style definition for the gutter cells when printing row numbers or column names. This text must be 
            a valid CSS style definition, without including the braces ("{}").
            </summary>
            <example>If you specify "color:red;font-weight:bold" in this property, text will be red and bold.</example>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.PrintRangeLeft">
            <summary>
            First column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.PrintRangeTop">
            <summary>
            First row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated. 
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.PrintRangeRight">
            <summary>
            Last column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.PrintRangeBottom">
            <summary>
            Last row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing HTML and image files or not.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.IgnoreSharingViolations">
            <summary>
            When this property is true and the component tries to write any file that is locked by other thread, it will not raise
            an error and just assume the other thread will write the correct image. You will normally want to have this true, so you can have many threads
            writing to the same file without issues. Note that when <see cref="P:FlexCel.Render.FlexCelHtmlExport.AllowOverwritingFiles"/> is false, this property has no effect.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.VerticalTextAsImages">
            <summary>
            When true and text is vertical, FlexCel will replace the text with an image in order to show it correctly in HTML.
            When false, text will be rendered normally without rotation.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.BaseUrl">
            <summary>
            If this property is not null, all hyperlinks stating with this value will be converted to relative links, by removing this string form them.
            <br/>Hyperlinks in Excel must be absolute by default, so this property is a way to get relative hyperlinks.
            <br/>For example, if BaseUrl is "http://www.tmssoftware.com/" and an Excel file has a link "http://www.tmssoftware.com/test.html"
            the link in the generated HTML file will be "test.html"
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ImageResolution">
            <summary>
            Resolution for the exported images. The bigger the resolution, the bigger the image size and quality. Use 96 for standard screen resolution.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.SavedImagesFormat">
            <summary>
            File format in which the images will be saved. Note that Ie6 does not support transparency in PNGs by default,
            so if you have transparent images and you want to make you page compatible with IE6, you should save as gif or use <see cref="P:FlexCel.Render.FlexCelHtmlExport.FixIE6TransparentPngSupport"/>
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.SmoothingMode">
            <summary>
            This affects how the images, charts, etc are rendered for the image file. Some modes will look a little blurred but with better quality.
            Consult the .NET framework documentation on SmoothingMode for more information
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.InterpolationMode">
            <summary>
            This affects how the images, charts, etc are rendered for the image file. Some modes will look a little blurred but with better quality.
            Consult the .NET framework documentation on SmoothingMode for more information
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.AntiAliased">
            <summary>
            This affects how the text is rendered for example when exporting a chart. Some modes will look a little blurred but with better quality.
            Consult the .NET framework documentation on SmoothingMode for more information
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ImageBackground">
            <summary>
            When this property is set to ColorUtil.Empty (the default), images will be rendered with a transparent background. 
            While this is the normal behavior, sometimes you might not want transparent images (for example to support Internet Explorer 6
            without setting <see cref="P:FlexCel.Render.FlexCelHtmlExport.FixIE6TransparentPngSupport"/> to true), and then you could use Color.White here.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ImageNaming">
            <summary>
            This property defines how the images will be named by FlexCel. You can always override the name using the <see cref="E:FlexCel.Render.FlexCelHtmlExport.GetImageInformation"/> event.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.ExtraInfo">
            <summary>
            Extra information to be added to the HTML file.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.GeneratedFiles">
            <summary>
            Contains all the generated files by the component. Note that it might contain files not actually generated, if an error happened while trying to create them.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelHtmlExport.GetImageInformation">
            <summary>
            Use this event to customize where to save the images when exporting to HTML.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelHtmlExport.SaveImage">
            <summary>
            Use this event to save the images into other place. Note that this event only fires when saving HTML, not MTHML.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelHtmlExport.HasSaveImageEvent">
            <summary>
            Override this property when creating your own <see cref="M:FlexCel.Render.FlexCelHtmlExport.OnSaveImage(FlexCel.Render.SaveImageEventArgs)"/> descendant. This method should return true
            if there is any event attached to it.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelHtmlExport.HtmlFont">
            <summary>
            Use this event to customize the fonts used in the exported file.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TPartialExportState">
            <summary>
            This class is used to save the needed information to partially export a file.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Creates a new instance of TPartialExportState.
            </summary>
            <param name="aCssData">TextWriter where an external CSS file will be stored. If null, no CSS file will be created, even when a link to a external file might.</param>
            <param name="aCssUrl">URL of the css file that will be linked to this file. If null, all css information will be stored inside the html file.</param>
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.SaveCss(System.IO.TextWriter)">
            <summary>
            Use this method to output the CSS information on this object to the header of an HTML page. If you are using en external
            StyleSheet, this method will output a link to it, or if you are using an internal one it will output the actual classes.
            </summary>
            <param name="writer">Writer where you are going to write the information.</param>
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.SaveRelevantHeaders(System.IO.TextWriter)">
            <summary>
            This method is a middle ground between <see cref="M:FlexCel.Render.TPartialExportState.SaveCss(System.IO.TextWriter)"/> and <see cref="M:FlexCel.Render.TPartialExportState.SaveFullHeaders(System.IO.TextWriter,System.String)"/>.
            It will output only the headers that you need to add to an existing HTML file in order to include the body inthe body part.
            This means that the tags like &lt;html&gt; are not included.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.SaveFullHeaders(System.IO.TextWriter,System.String)">
            <summary>
            This method will output the full HTML headers needed to create an HTML file with the information in this object.
            If you wish to mix the output of the file with existing headers, you can use <see cref="M:FlexCel.Render.TPartialExportState.SaveRelevantHeaders(System.IO.TextWriter)"/> instead to get only
            the relevant information to mix in the headers, or <see cref="M:FlexCel.Render.TPartialExportState.SaveCss(System.IO.TextWriter)"/> to get only the CSS classes that need to be put in the header.
            </summary>
            <param name="writer">Writer where you are going to write the information.</param>
            <param name="htmlFileName">File name of the file you are generating. There is no need to supply this parameter, it is only to add extra
            information to the generated file. You can leave it null.</param>
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.StartBody(System.IO.TextWriter)">
            <summary>
            Starts writing a body declaration. After calling this method, you should call <see cref="M:FlexCel.Render.TPartialExportState.SaveBody(System.IO.TextWriter,System.Int32,System.String)"/> for the
            parts you want to save, and end up with a call to <see cref="M:FlexCel.Render.TPartialExportState.EndHtmlFile(System.IO.TextWriter)"/>
            </summary>
            <param name="writer">TextWriter where we are going to save the results.</param>
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.EndHtmlFile(System.IO.TextWriter)">
            <summary>
            Writes the "&lt;/body&gt;" end tag in the html file and the head/html end tags. It also finalizes the parts when saving to MHTML.
            </summary>
            <param name="writer">TextWriter where we are going to save the results.</param>
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.SaveBody(System.IO.TextWriter,System.Int32,System.String)">
            <summary>
            Use this method to output the body information on this object to an HTML page.
            </summary>
            <param name="writer">Writer where you are going to write the information.</param>
            <param name="index">Index of the part that you wish to write. It must be 1 &lt;= index &lt;= <see cref="P:FlexCel.Render.TPartialExportState.BodyCount"/></param>
            <param name="relativeImagePath">Image path relative to the main file where the images will be saved. Note that this path 
            <b>does not apply to normal images.</b> This is used for example to save the rotated text as images if this option is enabled.</param>
        </member>
        <member name="M:FlexCel.Render.TPartialExportState.GetImage(System.Int32,System.Int32)">
            <summary>
            Returns one of the images for one of the saved sheets.
            </summary>
            <param name="bodyIndex">Index of the document where you want to retrieve the images. (1 based)</param>
            <param name="imageIndex">Image index in the document. (1 based)</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Render.TPartialExportState.BodyCount">
            <summary>
            Number of parts added to this object.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TSheetSelector">
            <summary>
            Abstract class to implement a Sheet Selector. Derive from this class for example to implement
            tabs with images. For a standard implementation using CSS Tabs and divs, use <see cref="T:FlexCel.Render.TStandardSheetSelector"/>
            </summary>
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.#ctor(FlexCel.Render.TSheetSelectorPosition)">
            <summary>
            Contructs a new TSheetSelector instance.
            </summary>
            <param name="position">Position where the Sheet selector will be placed. Remember you can 'or' together many values
            on the enumeration to for example have a selector at the top and at the bottom.</param>
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.WriteLn(System.String)">
            <summary>
            Use this method to write a line inside the stream when overriding this class.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.EncodeAsHtml(System.String)">
            <summary>
            This method will encode an string so it is valid html. For example, it will replace "&amp;" by "&amp;amp;" in the text.
            </summary>
            <param name="s">String that you want to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.AfterDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <summary>
            Use this method to customize actions to do before the SheetSelector is drawn. 
            In the <see cref="T:FlexCel.Render.TStandardSheetSelector"/> implementation, this method is used to add a table for layout
            if <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable"/> is true.
            Note that this method is called once for each of the possible positions of Reference, even if you do not need to draw a selector in that position.
            The order in which this method will be called is: Top, Left, Right, Bottom.
            </summary>
            <param name="Reference">The position of the SheetSelector that is being created. 
            you can use <see cref="P:FlexCel.Render.TSheetSelector.SheetSelectorPosition"/> to know if this is one of the selectors you need to render.</param>
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.BeforeDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <summary>
            Use this method to customize actions to do after the SheetSelector is drawn. 
            In the <see cref="T:FlexCel.Render.TStandardSheetSelector"/> implementation, this method is used to add a table for layout
            if <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable"/> is true.
            Note that this method is called once for each of the possible positions of Reference, even if you do not need to draw a selector in that position.
            The order in which this method will be called is: Top, Left, Right, Bottom.
            </summary>
            <param name="Reference">The position of the SheetSelector that is being created. 
            you can use <see cref="P:FlexCel.Render.TSheetSelector.SheetSelectorPosition"/> to know if this is one of the selectors you need to render.</param>
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.DrawOneSheetSelector(FlexCel.Core.ExcelFile,FlexCel.Render.TSheetSelectorPosition)">
            <summary>
            Override this method on a child class if you want to completely customize how the Sheet Selector is drawn.
            Normally when deriving from <see cref="T:FlexCel.Render.TStandardSheetSelector"/> you can just change the CSS properties of this class to customize the SheetSelector, but you can use this if you want to 
            provide a completely different selector. You can use the <see cref="P:FlexCel.Render.TSheetSelector.Links"/> collection to know which hyperlinks to place in each place.
            Note that diferent from <see cref="M:FlexCel.Render.TSheetSelector.BeforeDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)"/>, this method is <b>only</b> called for the positions where the selector has to be rendered.
            </summary>
            <param name="xls">ExcelFile we are exporting. It is positioned on the sheet we are exporting, but its active sheet can be changed on this method
            and there is no need to restore it. It will be restored by the framework.</param>
            <param name="Position">Position where the sheet selector will be placed. Note that this method will always
            be called with only one value, but it might be called more than once if constants in the TSheetSelectorPosition enumeration are
            or'ed together.</param>
        </member>
        <member name="M:FlexCel.Render.TSheetSelector.WriteCssClasses">
            <summary>
            This method is in charge of writing the style definitions in the header of the html file.
            Note that when deriving from <see cref="T:FlexCel.Render.TStandardSheetSelector"/> you normally do not need to override this method, you can just change the CSS properties of this class.
            You can override this method if you want full control on how to export the classes.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TSheetSelector.SheetSelectorPosition">
            <summary>
            An enumerator defining all the positions where the SheetSelector will be drawn.Read it to know where to draw the selector.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TSheetSelector.Links">
            <summary>
            A list of links that should go in the sheet selector, one per tab. Use them when creating your
            own sheet selector to know where to point the link in the tabs to.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TStandardSheetSelectorStyles">
            <summary>
            Holds the styles for one of the positions of a <see cref="T:FlexCel.Render.TStandardSheetSelector"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.Main">
            <summary>
            Style to be applied to the whole Selector.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.ActiveTab">
            <summary>
            Style to be applied to the Active tab.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.UnselectedTab">
            <summary>
            Style to be applied to a tab when it is not the Active one.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.UnselectedTabHover">
            <summary>
            Style to be applied to an unselected tab when you hover the mouse over it.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.Links">
            <summary>
            Style to be applied to the links in the unselected tabs. Note that the active tab does not have a link.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.ActiveText">
            <summary>
            Style to be applied to the text of the selected tab.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelectorStyles.List">
            <summary>
            Style of the list used for the different entries in the selector. this defaults to
            "list-style: none", but you can use something like "list-style: upper-roman inside" to for example place roman number on each text.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TStandardSheetSelector">
            <summary>
            Implements a standard sheet selector (with CSS tabs) that will allow you to change the page when exporting multiple sheets.
            You can customize its default behavior by altering the CSS properties, or by inheriting from it and replacing the virtual methods.
            If you want to create a completely new type of sheet selector, derive it from <see cref="T:FlexCel.Render.TSheetSelector"/> instead of this class.
            </summary>
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.#ctor(FlexCel.Render.TSheetSelectorPosition)">
            <summary>
            Contructs a new TStandardSheetSelector instance.
            </summary>
            <param name="position">Position where the Sheet selector will be placed. Remember you can 'or' together many values
            on the enumeration to for example have a selector at the top and at the bottom.</param>
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.OnSheetSelectorEntry(FlexCel.Render.SheetSelectorEntryEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of TStandardSheetSelector.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.BeforeDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            <summary>
            This method is overriden to add a table for layout when <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable"/> is true.
            See the documentation in <see cref="M:FlexCel.Render.TSheetSelector.BeforeDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)"/> for more information on this method.
            </summary>
            <param name="Reference"></param>
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.AfterDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)">
            This method is overriden to add a table for layout when <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable"/> is true.
            See the documentation in <see cref="M:FlexCel.Render.TSheetSelector.AfterDrawOneSheetSelector(FlexCel.Render.TSheetSelectorPosition)"/> for more information on this method.
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.DrawOneSheetSelector(FlexCel.Core.ExcelFile,FlexCel.Render.TSheetSelectorPosition)">
            <summary>
            This method overrides the abstract parent to provide a CSS implementation for tabs.
            Override this method on a child class if you want to completely customize how the Sheet Selector is drawn.
            Normally you can just change the CSS properties of this class to customize the SheetSelector, but you can use this if you want to 
            provide a completely different selector. You can use the <see cref="P:FlexCel.Render.TSheetSelector.Links"/> collection to know which hyperlinks to place in each place.
            </summary>
            <param name="xls">ExcelFile we are exporting. It is positioned on the sheet we are exporting, but its active sheet can be changed on this method
            and there is no need to restore it. It will be restored by the framework.</param>
            <param name="Position">Position where the sheet selector will be placed. Note that this method will always
            be called with only one value, but it might be called more than once if constants in the TSheetSelectorPosition enumeration are
            or'ed together.</param>
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.ReplaceMacros(System.String)">
            <summary>
            This is an utility method that will replace all teh &lt;#...&gt; macros inside a tag by its values.
            Normally you do not ned to call this method, since it is automatically by <see cref="M:FlexCel.Render.TStandardSheetSelector.WriteOneCssRule(System.String,System.String,System.String)"/>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.WriteOneCssRule(System.String,System.String,System.String)">
            <summary>
            This method is an utility to write one rule in a TStandarSheetSelectorStyles class.
            </summary>
            <param name="Selector">A string with the style for the class. It can contain Macros (&lt;#...&gt;) and they will be replaced when writing the rule.</param>
            <param name="Rule">Name of the rule.</param>
            <param name="SubSelector">A string to be added at the end of the rule name.</param>
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.WriteOneCssClass(FlexCel.Render.TStandardSheetSelectorStyles,System.String)">
            <summary>
            This method is an utility to write all the classes of an TStandardSheetSelectorStyles class.
            </summary>
            <param name="Selector">Collection of rules to write.</param>
            <param name="subSelector">A string that will be added at the end of every rule name.</param>
        </member>
        <member name="M:FlexCel.Render.TStandardSheetSelector.WriteCssClasses">
            <summary>
            This method is in charge of writing the style definitions in the header of the html file.
            Note that you normally do not need to override this method, you can just change the CSS properties of this class.
            You can override this method if you want full control on how to export the classes.
            </summary>
        </member>
        <member name="E:FlexCel.Render.TStandardSheetSelector.SheetSelectorEntry">
            <summary>
            Use this event to customize the text and link on the individual tabs. The tab style itself must be modified with the CSS properties.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssGeneral">
            <summary>
            Style to be applied to the selector. This is a general setting, you can later further customize the style when
            the selector is at the Left, Top, Right or Bottom with the corresponding <see cref="P:FlexCel.Render.TStandardSheetSelector.CssWhenLeft"/>, <see cref="P:FlexCel.Render.TStandardSheetSelector.CssWhenTop"/>, <see cref="P:FlexCel.Render.TStandardSheetSelector.CssWhenRight"/> and <see cref="P:FlexCel.Render.TStandardSheetSelector.CssWhenBottom"/> properties.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssWhenLeft">
            <summary>
            Specific style to be applied to the selector when it goes at the left. This style will override the style you specify with <see cref="P:FlexCel.Render.TStandardSheetSelector.CssGeneral"/>
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssWhenTop">
            <summary>
            Specific style to be applied to the selector when it goes at the top. This style will override the style you specify with <see cref="P:FlexCel.Render.TStandardSheetSelector.CssGeneral"/>
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssWhenRight">
            <summary>
            Specific style to be applied to the selector when it goes at the right. This style will override the style you specify with <see cref="P:FlexCel.Render.TStandardSheetSelector.CssGeneral"/>
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssWhenBottom">
            <summary>
            Specific style to be applied to the selector when it goes at the bottom. This style will override the style you specify with <see cref="P:FlexCel.Render.TStandardSheetSelector.CssGeneral"/>
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssStyleSheetContent">
            <summary>
            Style to be applied to the sheet content.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssStyleLayoutTable">
            <summary>
            Style to be applied to the layout table if <see cref="P:FlexCel.Render.TStandardSheetSelector.LayoutTable"/> is true.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.CssTags">
            <summary>
            This property has a list of Macros that you can use in the CSS definitions. You can reference this value in the
            CSS properties by using &lt;#variable&gt;
            <p>For example, you could set a Macro "Mycolor" with CssTags.Add("mycolor", "red"); and then
            define a CssProperty: CssWhenTop.Main = "background-color:&lt;#mycolor&gt;";
            </p>
            <p>This method by default contains the following Macros:
            <list type="bullet">
            <item>width: Width of the selector when it is on the right or on the left.</item>
            <item>bordercolor: Color for the borders.</item> 
            <item>pagecolor: Color of the page. This is normally white, and will be used in the color of the
            active tab, so it blends with the page background.</item>
            <item>activetabfg: Color for the text in the active tab. The default is black.</item>
            <item>unselectedtabbg: Color for the background of the unselected tabs. The default is gray, so the active tab stands out.</item>
            <item>unselectedtabfg: Color for the text in the unselected tabs.</item>
            <item>hoverbg: Color for the unselected tab when you hover the mouse over it.</item>
            <item>hoverfg: Color for the text of the unselected tab when you hover the mouse over it.</item>
            </list>
            </p>
            <p>You can modify those Macros or add your own definitions here and use them when defining your CSS.</p>
            <b>Note that the variables are not case sensitive. You can write them in any combination of lowercase and uppercase.</b>
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.LayoutTable">
            <summary>
            When this property is true (the default), both selectors at the left and at the right will be layed out in a table.
            This has the advantage that block will not wrap down when resizing the window. But if you would prefer not to use tables for layout,
            you can turn this property off, and the layout will be pure CSS (and it will wrap down when there is not enough space). 
            If you do not have a selector in the left or the right this property does nothing.
            </summary>
        </member>
        <member name="P:FlexCel.Render.TStandardSheetSelector.UseSheetTabColors">
            <summary>
            When true (the default) and the sheets have a tab color defined in Excel, FlexCel will use this color to render the sheet tabs.
            If false, the default tab color will be used. Note that if the sheets don't have a color defined in Excel, also the default tab color will be used.
            </summary>
        </member>
        <member name="T:FlexCel.Render.IFlxGraphics">
            <summary>
            An interface to abstract all graphics operations we need to do.
            </summary>
        </member>
        <member name="T:FlexCel.Render.FloydSteinbergDither">
            <summary>
            Converts a true color image to black and white using  Floyd-Steinberg dithering.
            Needs UNMANAGED permissions in order to process the bits of the image.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FloydSteinbergDither.ConvertToBlackAndWhite(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Converts a true color image to black and white, using Floyd-Steinberg error diffusion.
            </summary>
            <param name="Source">Image to convert. Must be on Format32bppPArgb.</param>
            <param name="Result">Here we will draw the converted image. Must be Format1bppIndexed and have the same size as Source.</param>
        </member>
        <member name="M:FlexCel.Render.FloydSteinbergDither.ConvertToBlackAndWhite(System.Drawing.Bitmap)">
            <summary>
            Converts a true color image to black and white, using Floyd-Steinberg error diffusion.
            </summary>
            <param name="Source">The image we want to convert. Must be on Format32bppPArgb</param>
            <returns>The converted black and white image.</returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.xlb">
             <summary>
            Record IDs.
             </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.msoblip.ERROR">
            <summary>
            An error occurred during loading
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.msoblip.UNKNOWN">
            <summary>
            An unknown blip type
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.msoblip.EMF">
            <summary>
            Windows Enhanced Metafile
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.msoblip.WMF">
            <summary>
            Windows Metafile
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.msoblip.PICT">
            <summary>
            Macintosh PICT
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.msoblip.JPEG">
            <summary>
            JFIF
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.msoblip.PNG">
            <summary>
            PNG
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.msoblip.DIB">
            <summary>
            Windows DIB
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsTokens">
            <summary>
            Formula tokens
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheetInfo">
            <summary>
             Holds global data on all the sheets on the workbook.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSheetInfo.InsSheet">
            <summary>
            Sheet where we inserted/deleted things.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSheetInfo.SourceFormulaSheet">
            <summary>
            Sheet where the formula is. For example, we can insert a row on Sheet1 (so InsSheet=1), and we are fixing a Formula on Sheet2 that references Sheet1 (So SourceFormulaSheet=2) 
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSheetInfo.DestFormulaSheet">
            <summary>
            Sheet where the new formula will be. This only makes sense when copying from one file to another. For example, SourceFormulaSheet could be 1 in book1.xls and DestFormulaSheet 2 in book2.xls.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSheetInfo.SourceSheet">
            <summary>
            Sheet refered by SourceFormulaSheet.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSheetInfo.DestSheet">
            <summary>
            Sheet referred by DestFormulaSheet.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSheetInfo.SourceGlobals">
            <summary>
            Globals for the source. Used when copying to different files.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSheetInfo.DestGlobals">
            <summary>
            Globals for the destination. Used when copying to different files.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TSheetInfo.SemiAbsoluteMode">
            <summary>
            If true, absolute references in a block will be updated when copied.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.TSheetInfo.SourceReferences">
            <summary>
            References for the source sheet.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.TSheetInfo.DestReferences">
            <summary>
            References for the destination sheet. This will be different from References only if copying to other file.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.TSheetInfo.SourceNames">
            <summary>
            List of names.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.TSheetInfo.DestNames">
            <summary>
            List of names.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.BitOps">
            <summary>
            Simple read/writes from/to array of bytes to primitive types.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.StrOps">
            <summary>
            Simple string functions. They don't consider continue records.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.StrOps.GetStrLen(System.Boolean,System.Byte[],System.Int32,System.Boolean,System.Int64)">
            <summary>
            Length of a simple string. Does not consider continue records, so use it with care.
            </summary>
            <param name="Length16Bit">When true, string can have up to 65535 chars. When false, max string length=255</param>
            <param name="PData">Data</param>
            <param name="tPos">Where it starts.</param>
            <param name="UseExtStrLen">True if length is included on ExStrLen</param>
            <param name="ExtStrLen">StringLength, if it is not on the Data array</param>
            <returns>Length of the string</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.StrOps.ReadStr(FlexCel.XlsAdapter.TxBaseRecord@,System.Int32@,System.Text.StringBuilder,System.Byte,System.Byte@,System.Int32)">
            <summary>
            Read a string taking in count "Continue" Records. It returns the last position, so you can continue reading other things.
            </summary>
            <param name="aRecord">Record to read. If continued, the next record will be returned here.</param>
            <param name="aPos">Position of the string on the Data array</param>
            <param name="Data">Read string</param>
            <param name="OptionFlags">Original optionFlags of the string</param>
            <param name="ActualOptionFlags">Final Option flags. They can change if there are Continue records</param>
            <param name="StrLen">Length of the string to read</param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheet">
            <summary>
            Base Excel Sheet. It can be a worksheet, a Chart, a macro sheet, etc.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseSection">
            <summary>
            Abstract class for sections on a workbook stream. Children might be sheets, globals, etc.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TSheet.FixCachePointers">
            <summary>
            Here we can only set them to null.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TSheet.FixAutoFilter(System.Int32)">
            <summary>
            Changes the autofilter record to fit the "FilterDatabase" named range. Failing to do this will cause AV in the arrows outside the columns in AUTOFILTER
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.TSheet.Margins">
            <summary>
            Margins in Inches
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TFlxChart">
            <summary>
            A Chart.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheetRecordList">
            <summary>
            A list of records for a sheet.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseRecordList">
            <summary>
            Base list of records. All FlexCel record lists derive from here.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TBaseRecordList.LastRecord">
            <summary>
            Stores the last record saved.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TFlxUnsupportedSheet">
            <summary>
            Excel 4.0 macros, etc.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWorkSheet">
            <summary>
            An Excel Worksheet.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TColInfoRecord">
            <summary>
            Column information 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TColInfo">
            <summary>
            Formatting Info on columns, on a friendly way.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TColInfoList">
            <summary>
            List of ColInfos.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TChartBaseRecord">
            <summary>
            Base for all records on charts.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBeginRecord">
            <summary>
            Starts a subrecord
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEndRecord">
            <summary>
            Ends a subrecord
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TChartAIRecord">
            <summary>
            Linked series data or text
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TChartCache">
            <summary>
            A class for grouping all the needed caches.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TChartAIRecordCache">
            <summary>
            Holds a Cache with AI records for fast finding them.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TChartSeriesRecordCache">
            <summary>
            Holds a Cache with Series records for fast finding them.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TChartRecordList">
            <summary>
            Records inside a Chart.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.TChartRecordList.TotalSize">
            <summary>
            This must be recursive, we cannot use the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.XlsAdapter.TChartDataFormatRecord.PointNumber">
            <summary>
            ffff means this applies to all the series
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TAnnot">
            <summary>
            Holds one annotation on a page.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TDictionaryRecord">
            <summary>
            A dictionary List.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfBaseRecord">
            <summary>
            Base for all PDF objects.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TAnnotList">
            <summary>
            Holds a list of annotation for one page.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCompressor">
            <summary>
            Compress a stream of bytes using GZIP compatible compression.
            This class needs .NET Framework 2.0. A slower implementation using Vj# is available if 
            you don't define "FRAMEWORK20" (it also has a little better compression because compression level on .NET 20 is not configurable)
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCondFmtRecord">
            <summary>
            Conditional format. This records holds a lot of CFs together.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRangeRecord">
            <summary>
            Base for all records representing ranges.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCFRecordList">
            <summary>
            A list with CF records.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCondFmt">
            <summary>
            An internal representation of a Conditional format. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRangeEntry">
            <summary>
            Base for merged cells and conditional formats. In abstract, to any kind of records that save list of ranges.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TCondFmt.TestAllRange">
            <summary>
            Debug use only
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TCondFmt.ClearRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes all references to this range on this cf.
            </summary>
            <param name="aRow1"></param>
            <param name="aCol1"></param>
            <param name="aRow2"></param>
            <param name="aCol2"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherRecordCache">
            <summary>
            Base list of Escher records caches.
            All cache lists don't own the objects. They shouldn't call destroy.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TAdoDotNetDataTable">
            <summary>
            An implementation of a VirtualDataTable using ADO.NET.
            </summary>
        </member>
        <member name="T:FlexCel.Report.VirtualDataTable">
            <summary>
            Base class for a table used on FlexCelReport.
            Inherit from this class and <see cref="T:FlexCel.Report.VirtualDataTableState"/> to create your custom sources of data.
            Make sure you read the documentation on <b>UsingFlexCelReports.pdf</b> for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.#ctor(System.String)">
            <summary>
            Creates a new virtual datatable instance and assigns a name to it.
            </summary>
            <param name="aTableName">Name for the virtual data table. Note that this name is *not* used anywhere in FlexCel code, except to report errors.
            The Table names that are used on reports are the ones in <see cref="T:FlexCel.Report.VirtualDataTableState"/></param>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.CreateState(System.String,FlexCel.Report.TMasterDetailLink[],FlexCel.Report.TSplitLink)">
            <summary>
            Creates a VirtualDataSetState to be used in a report. Make sure you override this method on your derived classes
            and point it to the correct VirtualDataSet descendant.
            </summary>
            <param name="sort">A string showing how to sort this dataset. This string might be null, empty, or whatever the user wrote on the config sheet.</param>
            <param name="masterDetailLinks">A list of the the master datatables and relation fields on the bands outside this one. 
            You can pass this parameter to the VirtualDataSetState so it can create indexes on the required fields. 
            This parameter will be an empty array if no master detail relationships apply to the VirtualDataSetStae, but it will not be null.
            </param>
            <param name="splitLink">A link to a parent Split datasource with the number of records to split, or null if ther is no parent split datasource.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)">
            <summary>
            Returns a column indentifier that you can later use on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)"/>. 
            Return -1 if the column does not exist, and make sure this search is case insensitive.
            </summary>
            <param name="columnName">Name of the column to search.</param>
            <returns>Column identifier if found, -1 if not found.</returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetColumnName(System.Int32)">
            <summary>
            Returns the column name for a column identifier. This method is the reverse of <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)"/>
            </summary>
            <param name="columnIndex">Column index returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)"/></param>
            <returns>The name of the column at columnIndex. If the columnIndex is not valid it should throw an Exception, since
            this method will only be called for columnIndexes returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)"/></returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetColumnCaption(System.Int32)">
            <summary>
            Returns the column caption for a column identifier. This method is used on generic dataset to write the header column.
            For most uses, <see cref="M:FlexCel.Report.VirtualDataTable.GetColumnName(System.Int32)"/> will be used.
            </summary>
            <param name="columnIndex">Column index returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)"/></param>
            <returns>The name of the column at columnIndex. If the columnIndex is not valid it should throw an Exception, since
            this method will only be called for columnIndexes returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)"/></returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.FilterData(System.String,System.String)">
            <summary>
            This method should return a new VirtualDataTable instance with the data filtered.
            Note that you might have the same data with different states, so this method might be called more than once.
            </summary>
            <remarks>You do not need to implement this method if you do not want to let users create new filtered datasets on the config sheet.</remarks>
            <param name="newDataName">How this new VirtualDataSet will be named. This is what the user wrote on the config sheet,
            when creating a filtered dataset. Note that as with all the VirtualDataSets, this name is meaningless except for error messages.</param>
            <param name="rowFilter">Filter for the new data. This can be null, an empty string, or whatever the user wrote on the "filter" column
            on the config sheet. Note that if the Filter is "distinct()" this method will not be called, but <see cref="M:FlexCel.Report.VirtualDataTable.GetDistinct(System.String,System.Int32[])"/> instead.
            This method will not be called if the filter is "Split()" either.</param>
            <returns>A new VirtualDataTable with the filtered data and the new name.</returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.GetDistinct(System.String,System.Int32[])">
            <summary>
            Override this method to return a new VirtualDataSet with unique values.
            Note that the returned dataset will not have all the columns this one has, only the ones defined on &quot;filterFields&quot;
            </summary>
            <remarks>
            You do not need to implement this method if you do not want to let users create &quot;Distinct()&quot; filters on the config sheet.
            </remarks>
            <param name="newDataName">How this new VirtualDataSet will be named. This is what the user wrote on the config sheet,
            when creating the distinct dataset. Note that as with all the VirtualDataSets, this name is meaningless except for error messages.</param>
            <param name="filterFields">Fields where to apply the &quot;distinct&quot; condition.</param>
            <returns>A new VirtualDataTable with the filtered data and the new name.</returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.Lookup(System.Int32,System.String,System.Object[])">
            <summary>
            Looks for a key on this dataset and returns the corresponding value.
            Note: Remember that VirtualDataSet is stateless, so if you use any caching here, make sure you appropiately lock()
            this method so there is no possibility of one thread reading the cache when the other is updating it.
            </summary>
            <remarks>
            You do not need to implement this method if you do not want to let your users use the &lt;#Lookup&gt; tag.
            </remarks>
            <param name="column">Column with the value to be returned.</param>
            <param name="keyNames">A list of column names, as the user wrote them on the &lt;#Lookup&gt; tag</param>
            <param name="keyValues">A list of the values for the keys, that you should use to locate the right record.</param>
            <returns>The value at "column" , for the record where the columns on "keyNames" have the "keyValues" values.
            If there is more than one record where "keyNames" is equal to "keyValues" you might opt to throw an Exception or just return any of the 
            valid values, depending on the behavior you want for lookup.</returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.Dispose">
            <summary>
            Dispose whatever is needed on the children here.
            </summary>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTable.Dispose(System.Boolean)">
            <summary>
            Override this method on derived classes.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.TableName">
            <summary>
            Name for the virtual data table. Note that this name is *not* used anywhere in FlexCel code, except to report errors.
            The Table names that are used on reports are the ones in <see cref="T:FlexCel.Report.VirtualDataTableState"/>
            </summary>
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.Locale">
            <summary>
            Locale for this dataset. This might be needed to create datatables with data and the same locale.
            </summary>
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.ColumnCount">
            <summary>
            Returns the number of columns of the table.
            </summary>
        </member>
        <member name="P:FlexCel.Report.VirtualDataTable.ChildRelations">
            <summary>
            This is a list of relationships you can add to the dataset on code. By default it is not public, so
            you need to set up all relationships on the config sheet. When deriving this class, you can create methods to 
            access this relationship array, and allow to create Relationships at design time.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TLookupCache">
            <summary>
            This class is used to avoid repeated searches when many lookups are placed on the same row.
            </summary>
        </member>
        <member name="T:FlexCel.Report.VirtualDataTableState">
            <summary>
            A table that corresponds to a band on the report.
            Make sure you read the documentation on <b>UsingFlexCelReports.pdf</b> for more information.
            </summary>
        </member>
        <member name="F:FlexCel.Report.VirtualDataTableState.FPosition">
            <summary>
            This value should not be modified externally.
            </summary>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.#ctor(FlexCel.Report.VirtualDataTable)">
            <summary>
            Constructs a new VirtualDataTableState with the specified name. Note that you will not call
            this constructor directly, new VirtualDataTableState instances will be created only by <see cref="M:FlexCel.Report.VirtualDataTable.CreateState(System.String,FlexCel.Report.TMasterDetailLink[],FlexCel.Report.TSplitLink)"/>
            </summary>
            <param name="aTableData">VirtualDataTable that created this instance.</param>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)">
            <summary>
            Returns the value for row <see cref="P:FlexCel.Report.VirtualDataTableState.Position"/>, at the column "column"
            </summary>
            <param name="column">Column identifier returned by <see cref="M:FlexCel.Report.VirtualDataTable.GetColumn(System.String)"/></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.MoveMasterRecord(FlexCel.Report.TMasterDetailLink[],FlexCel.Report.TSplitLink)">
            <summary>
            This method will be called each time that the master datasource moves its position. Use it to filter the data returned
            if this is used on a master-detail relationship.
            </summary>
            <remarks>
            You do not need to implement this method if you are not using Master-Detail or Split relationships.</remarks>
            <param name="masterDetailLinks">List of all the master tables that are related to this one.
            If there are no parents on this VirtualDataTableState, this will be an empty array, not null.
            Use it on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)"/> to filter the data and then return only the records that satisfy the master-detail relationships on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)"/>
            </param>
            <param name="splitLink">Parent Split table if this dataset is on a Split relationship, or null if there is none.
            Use it to know how many records you should retun on <see cref="P:FlexCel.Report.VirtualDataTableState.RowCount"/>. Note that a table might be on Master-Detail relationship 
            *and* split relationship. In this case you need to first filter the records that are on the master detail rlationship, and then apply the split to them.
            </param>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.FilteredRowCount(FlexCel.Report.TMasterDetailLink[])">
            <summary>
            This method will be called when a Split master wants to know how many records its detail has. For example, if the detail has 30 records 
            and the split is at 10, the Split master will call this method to find out that it has to return 3 on its own record count.
            You need to filter the data here depending on the master detail relationships, but not on the splitLink.
            </summary>
            <remarks>
            You do not need to implement this method if you are not using Split relationships.
            </remarks>
            <param name="masterDetailLinks">List of all the master tables that are related to this one.
            If there are no parents on this VirtualDataTableState, this will be an empty array, not null.
            </param>
            <returns>The count of records for a specific position of the master datsets.</returns>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.Dispose">
            <summary>
            Dispose whatever is needed on the children here.
            </summary>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.Dispose(System.Boolean)">
            <summary>
            Override this method on derived classes.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FlexCel.Report.VirtualDataTableState.Finalize">
            <summary>
            Finalizer for the class.
            </summary>
        </member>
        <member name="P:FlexCel.Report.VirtualDataTableState.TableData">
            <summary>
            The VirtualDataTable that created this instance.
            </summary>
        </member>
        <member name="P:FlexCel.Report.VirtualDataTableState.Position">
            <summary>
            Returns the active row on the table. (0 based) 
            You should use this value to return the values on <see cref="M:FlexCel.Report.VirtualDataTableState.GetValue(System.Int32)"/>
            Note: You should *not* change the value in Positon unless you are not using this in the standard way. Position value is set by the framework.
            </summary>
        </member>
        <member name="P:FlexCel.Report.VirtualDataTableState.TableName">
            <summary>
            Returns the table name assigned on the template to this dataset. Note that this name is the one on the bands in the template.
            </summary>
        </member>
        <member name="P:FlexCel.Report.VirtualDataTableState.RowCount">
            <summary>
            Returns the number of rows available on the dataset, for the current state. Note that this method can be called many times, so it should be fast.
            Usa a Cache if necessary. Do *not* use something like "return select count(*) from table" here, it would be too slow.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TMasterSplitDataTable">
            <summary>
            An implementation of a VirtualDataTable that is used as a master table on a splitted dataset.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TTopDataTable">
            <summary>
            An implementation of a VirtualDataTable that is used to limit the records to the "top n".
            </summary>
        </member>
        <member name="T:FlexCel.Render.DrawChart">
            <summary>
            Draws a chart.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfTrueType">
            <summary>
            Encapsulates a True-Type font.
            </summary>
        </member>
        <member name="T:FlexCel.Core.Sh">
            <summary>
            Stream Helper. To read/write full streams.
            </summary>
        </member>
        <member name="M:FlexCel.Core.Sh.Write(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            For consistency. It should be inlined anyway....
            </summary>
            <param name="aStream"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsErr">
            <summary>
            Error Codes. We use this and not actual strings to make sure all are correctly spelled.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyEntries">
            <summary>TooManyEntries</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidContinue">
            <summary>InvalidContinue</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrWrongExcelRecord">
            <summary>WrongExcelRecord</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrExcelInvalid">
            <summary>ExcelInvalid</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrFileIsPasswordProtected">
            <summary>FileIsPasswordProtected</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNotSupportedOnCE">
            <summary>NotSupportedOnCE</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrFileIsNotXLS">
            <summary>FileIsNotXLS</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadFormula">
            <summary>BadFormula</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadName">
            <summary>BadName</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadToken">
            <summary>BadToken</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrWrongType">
            <summary>WrongType</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidStream">
            <summary>InvalidStream</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrEofReached">
            <summary>EofReached</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrReadingRecord">
            <summary>ReadingRecord</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidStringRecord">
            <summary>InvalidStringRecord</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidVersion">
            <summary>InvalidVersion</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDupRow">
            <summary>DupRow</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrRowMissing">
            <summary>RowMissing</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInternal">
            <summary>Internal</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrEscherNotLoaded">
            <summary>EscherNotLoaded</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrLoadingEscher">
            <summary>LoadingEscher</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBStoreDuplicated">
            <summary>BStoreDuplicated</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDgDuplicated">
            <summary>DgDuplicated</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDggDuplicated">
            <summary>DggDuplicated</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrSolverDuplicated">
            <summary>SolverDuplicated</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrChangingEscher">
            <summary>ChangingEscher</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNotImplemented">
            <summary>NotImplemented</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantCopyPictFmla">
            <summary>CantCopyPictFmla</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadChartFormula">
            <summary>BadChartFormula</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrSectionNotLoaded">
            <summary>SectionNotLoaded</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidDrawing">
            <summary>InvalidDrawing</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrXlsIndexOutBounds">
            <summary>XlsIndexOutBounds</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadCF">
            <summary>BadCF</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidCF">
            <summary>InvalidCF</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidSheetNo">
            <summary>InvalidSheetNo</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDuplicatedSheetName">
            <summary>DuplicatedSheetName</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyPageBreaks">
            <summary>TooManyPageBreaks</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidRow">
            <summary>InvalidRow</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidCol">
            <summary>InvalidCol</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadRowCount">
            <summary>BadRowCount</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrShrFmlaNotFound">
            <summary>ShrFmlaNotFound</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrHiddenSheetSelected">
            <summary>HiddenSheetSelected</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNoSheetVisible">
            <summary>NoSheetVisible</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadCopyRows">
            <summary>BadCopyRows</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadCopyCols">
            <summary>BadCopyCols</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrBadMoveCall">
            <summary>BadMoveCall</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.BaseSheetName">
            <summary>eSheetName</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantDeleteSheetWithMacros">
            <summary>CantDeleteSheetWithMacros</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyRows">
            <summary>TooManyRows</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyColumns">
            <summary>TooManyColumns</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidPassword">
            <summary>Invalid password.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrPasswordTooLong">
            <summary>Password too long.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrNotSupportedEncryption">
            <summary>Encryption method is not supported. </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidNameForARange">
            <summary>The name for a named range is invalid. It should have no more than 255 characters, must no start with a number, and must not contain some special characters. </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrObjectNotFound">
            <summary>Could not find the object path inside the shape.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidArrayElement">
            <summary>The array element is not any of the supported types.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrPxlIsInvalid">
            <summary>The Pocket Excel file (pxl) is not on a format FlexCel can understand.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrPxlIsInvalidToken">
            <summary>The Pocket Excel file (pxl) is not on a format FlexCel can understand. Token invalid.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrStringTooLong">
            <summary>The string is longer than the maximum allowed by Excel.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrFileIsNotSupported">
            <summary>The file is not on any on the formats supported by FlexCel (Excel 97 or newer, pxl).</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrPxlDoesNotHaveExternalFormulas">
            <summary>Pocket Excel does not have support for formulas that reference external files.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidPropertySector">
            <summary>Cannot read the properties of this file.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrInvalidChart">
            <summary>Chart is invalid.</summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrMoveRangesCanNotIntersect">
            <summary>
            Ranges in move calls cannot intersect.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantMovePartOfTable">
            <summary>
            Can't move a part of a table.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrCantMovePartOfArrayFormula">
            <summary>
            Can't move a part of an Array formula.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrMoveRangeOutsideBounds">
            <summary>
            Trying to move a range outside bounds.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrTooManyCFRules">
            <summary>
            Too many Conditional format rules.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDataValidationFmla1TooLong">
            <summary>
            First formula of Data validation has more than 255 characters.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDataValidationFmla2TooLong">
            <summary>
            Second Formula of Data validation has more than 255 characters.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDataValidationFmla1Null">
            <summary>
            First formula of Data validation is null.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.XlsErr.ErrDataValidationFmla2Null">
            <summary>
            Second formula of Data validation is null.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsMessages">
            <summary>
            FlexCel Native XLS Constants. It reads the resources from the active locale, and
            returns the correct string.
            If your language is not supported and you feel like translating the messages,
            please send me a copy. I will include it on the next FlexCel version. 
            <para>To add a new language:
            <list type="number">
            <item>
               Copy the file xlsmsg.resx to your language (for example, xlsmsg.es.resx to translate to spanish)
            </item><item>
               Edit the new file and change the messages(you can do this visually with visual studio)
            </item><item>
               Add the .resx file to the FlexCel project
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.FlexCelXlsAdapterException">
            <summary>
            Exception thrown when an exception on the XLSAdapter engine happens. 
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlexCelException">
            <summary>
            Exception thrown when an specific FlexCel error happens. Base of all FlexCel hierarchy list.
            </summary>
        </member>
        <member name="M:FlexCel.Core.FlexCelException.#ctor">
            <summary>
            Creates a new FlexCelException
            </summary>
        </member>
        <member name="M:FlexCel.Core.FlexCelException.#ctor(System.String)">
            <summary>
            Creates a new FlexCelException with an error message.
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:FlexCel.Core.FlexCelException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a nested Exception.
            </summary>
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:FlexCel.Core.FlexCelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an exception from a serialization context.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming Context.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.FlexCelXlsAdapterException.#ctor">
            <summary>
            Creates a new FlexCelCoreException
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.FlexCelXlsAdapterException.#ctor(System.String)">
            <summary>
            Creates a new FlexCelXlsAdapterException with an error message.
            </summary>
            <param name="message">Error Message.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.FlexCelXlsAdapterException.#ctor(System.String,FlexCel.XlsAdapter.XlsErr)">
            <summary>
            Creates a new FlexCelXlsAdapterException with an error message and an exception code.
            </summary>
            <param name="message">Error Message</param>
            <param name="aErrorCode">Error code of the exception.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.FlexCelXlsAdapterException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a nested Exception.
            </summary>
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.FlexCelXlsAdapterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an exception from a serialization context.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming Context.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.FlexCelXlsAdapterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements standard GetObjectData.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:FlexCel.XlsAdapter.FlexCelXlsAdapterException.ErrorCode">
            <summary>
            Error code on the Exception.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.ETokenException">
            <summary>
            Exception thrown when an error parsing a formula happens.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.ETokenException.#ctor">
            <summary>
            Creates an empty ETokenException.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.ETokenException.#ctor(System.Int32)">
            <summary>
            Creates a new ETokenException for a specific Token.
            </summary>
            <param name="aToken"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.ETokenException.#ctor(System.String)">
            <summary>
            Creates a new ETokenException with a message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.ETokenException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a nested Exception.
            </summary>
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.ETokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an exception from a serialization context.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming Context.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.ETokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements standard GetObjectData.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:FlexCel.XlsAdapter.ETokenException.Token">
            <summary>
            Formula token with the error.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TFilePassRecord">
            <summary>
            Filepass. When this record is present, file is encrypted. The encryption algorithm can change.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWriteProtRecord">
            <summary>
            This record is used together with FileSharing to protect against writing.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWriteAccessRecord">
            <summary>
            Name of the user who saved the file.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TFileSharingRecord">
            <summary>
            Password and settings for write protection.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseProtectRecord">
            <summary>
            Base for all general protection records.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TProtectRecord">
            <summary>
            Workbook /worksheet is protected.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TObjProtectRecord">
            <summary>
            Objects on Workbook /worksheet are protected.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWindowProtectRecord">
            <summary>
            Window configuration on Workbook /worksheet are protected.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TScenProtectRecord">
            <summary>
            Scenarios on Workbook /worksheet are protected.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPasswordRecord">
            <summary>
            Password for protection.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheetProtectRecord">
            <summary>
            Only for excel xp and up
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TProt4RevRecord">
            <summary>
            Shared protection.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsChart">
            <summary>
            Implements an ExcelChart interface.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ExcelChart">
            <summary>
            Information for a chart inside a sheet or an object.
            </summary>
        </member>
        <member name="T:FlexCel.Core.IEmbeddedObjects">
            <summary>
            Use this interface to read or write Embedded drawing objects inside other object.
            </summary>
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.GetObjectProperties(System.Int32,System.Boolean)">
            <summary>
            Returns information on an object and all of its children. 
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="GetShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <summary>
            Changes the text inside an object of this object.
            </summary>
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.IEmbeddedObjects.ObjectCount"/></param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.IEmbeddedObjects.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
        </member>
        <member name="M:FlexCel.Core.IEmbeddedObjects.DeleteObject(System.Int32)">
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <param name="objectIndex">Index of the object (1 based).</param>
        </member>
        <member name="P:FlexCel.Core.IEmbeddedObjects.ObjectCount">
            <summary>
            The number of objects that are embedded inside this object.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetSeries(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a series definition.
            </summary>
            <param name="index">Index of the series you want to return.</param>
            <param name="getDefinitions">If false, this method will not return the series formulas, so it will be a little faster.</param>
            <param name="getValues">If false, this method will not return the series values, so it will be a little faster and use less memory.</param>
            <param name="getOptions">If false, this method will not return the series options.</param>
            <returns>series description.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.SetSeries(System.Int32,FlexCel.Core.ChartSeries)">
            <summary>
            Sets a Serie value.
            </summary>
            <param name="index">Index of the serie to set.</param>
            <param name="value">Series definition.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.AddSeries(FlexCel.Core.ChartSeries)">
            <summary>
            Adds a series to the chart.
            </summary>
            <param name="value">Definition of the new series</param>
            <returns>Index of the newly added series.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.DeleteSeries(System.Int32)">
            <summary>
            Deletes the series at position index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetChartAxis">
            <summary>
            Returns the axis information for this chart. Note that this might be more than one, if the chart has a secondary axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetChartLegend">
            <summary>
            Information about the Legend of the chart.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetDataLabels">
            <summary>
            Returns all the labels for the chart and the main title. Note that Axis have their labels defined inside their own definition.
            </summary>
            <returns>Label values.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)">
            <summary>
            An object embedded inside a chart.
            </summary>
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.ExcelChart.ObjectCount"/></param>
            <returns>The properties for the embedded object.</returns>
            <param name="GetShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <summary>
            Changes the text inside an object of the chart.
            </summary>
            <param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.ExcelChart.ObjectCount"/></param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelChart.DeleteObject(System.Int32)">
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <param name="objectIndex">Index of the object (1 based).</param>
        </member>
        <member name="P:FlexCel.Core.ExcelChart.Background">
            <summary>
            Returns the chart background if there is one defined, or null if there is none.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelChart.DefaultFont">
            <summary>
            Returns the default font for all text in the chart that do not have a font defined.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelChart.DefaultLabelFont">
            <summary>
            Returns the default font for all labels in the chart that do not have a font defined.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelChart.DefaultAxisFont">
            <summary>
            Returns the default font for Axis in the chart that do not have a font defined.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelChart.ChartOptions">
            <summary>
            Returns the type of chart and the options specific for that kind of chart.
            There might be more than one ChartOptions returned, since you can mix more than one type of 
            chart on a simple chart. (One for each series). You need to look at the series ChartOptionsIndex to 
            know to which one it refers.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelChart.PlotEmptyCells">
            <summary>
            Defines how null cells will be plotted on the chart.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelChart.SeriesCount">
            <summary>
            Returns the count of series on this chart.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelChart.ObjectCount">
            <summary>
            The number of objects that are embedded inside this chart.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.#ctor(FlexCel.XlsAdapter.XlsFile,FlexCel.XlsAdapter.TFlxChart)">
            <summary>
            You cannot create instances of this class. It must be returned with a call to <see cref="M:FlexCel.XlsAdapter.XlsFile.GetChart(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.AddSeries(FlexCel.Core.ChartSeries)">
            <summary>
            Adds a series to the chart.
            </summary><param name="value">Definition of the new series</param><returns>Index of the newly added series.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.DeleteSeries(System.Int32)">
            <summary>
            Deletes the series at position index.
            </summary><param name="index"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetSeries(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a series definition.
            </summary><param name="index">Index of the series you want to return.</param><param name="getDefinitions">If false, this method will not return the series formulas, so it will be a little faster.</param><param name="getValues">If false, this method will not return the series values, so it will be a little faster and use less memory.</param><param name="getOptions">If false, this method will not return the series options.</param><returns>series description.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.SetSeries(System.Int32,FlexCel.Core.ChartSeries)">
            <summary>
            Sets a Serie value.
            </summary><param name="index">Index of the serie to set.</param><param name="value">Series definition.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetChartAxis">
            <summary>
            Returns the axis information for this chart. Note that this might be more than one, if the chart has a secondary axis.
            </summary><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetChartLegend">
            <summary>
            Information about the Legend of the chart.
            </summary><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetDataLabels">
            <summary>
            Returns all the labels for the chart and the main title. Note that Axis have their labels defined inside their own definition.
            </summary><returns>Label values.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.GetObjectProperties(System.Int32,System.Boolean)">
            <summary>
            An object embedded inside a chart.
            </summary><param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.ExcelChart.ObjectCount"/></param><returns>The properties for the embedded object.</returns><param name="GetShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <summary>
            Changes the text inside an object of the chart.
            </summary><param name="objectIndex">Index of the object, between 1 and <see cref="P:FlexCel.Core.ExcelChart.ObjectCount"/></param><param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelChart.GetObjectProperties(System.Int32,System.Boolean)"/></param><param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsChart.DeleteObject(System.Int32)">
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary><param name="objectIndex">Index of the object (1 based).</param>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.Background">
            <summary>
            Options for the background of the full chart. If this member is null, the options for the Autoshape will be used.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.DefaultFont">
            <summary>
            Returns the default font for all text in the chart that does not have a font defined.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.DefaultLabelFont">
            <summary>
            Returns the default font for all labels in the chart that do not have a font defined.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.DefaultAxisFont">
            <summary>
            Returns the default font for the Axis in the chart that do not have a font defined.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.ChartOptions">
            <summary>
            Returns the type of chart and the options specific for that kind of chart.
            There might be more than one ChartOptions returned, since you can mix more than one type of 
            chart on a simple chart. (One for each series). You need to look at the series ChartOptionsIndex to 
            know to which one it refers.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.PlotEmptyCells">
            <summary>
            Defines how null cells will be plotted on the chart.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.SeriesCount">
            <summary>
            Returns the count of series on this chart.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsChart.ObjectCount">
            <summary>
            The number of objects that are embedded inside this chart.
            </summary>
        </member>
        <member name="T:FlexCel.Render.DrawWordArt">
            <summary>
            Static class to draw WordArt objects.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TAcroFormRecord">
            <summary>
            Represents an interactive form (AcroForm).
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TAcroFormFieldList">
            <summary>
            Holds a list of fields in one form.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TStringStack">
            <summary>
            Specialized string stack used on formula parsing.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFormulaStack">
            <summary>
            A string stack supporting spaces, so we can reconstruct the original formula from the RPN.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TWhiteSpace">
            <summary>
            It holds one whitespace keyword.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TWhiteSpaceStack">
            <summary>
            Specialized stack for keeping the whitespace.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TExcelRange">
            <summary>
            A simple Excel range we will use to store on a list.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRangeValuesList">
            <summary>
            A list of ranges. We use this to store merged cells or conditional formats.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TRangeValuesList.CopyRangeExclusive(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Used on merged cells. we won't copy partially contained merged cells, as we would with conditional formats.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TRangeValuesList.AddNewRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            We always have to call PreAddNewRange to verify it doesn't exist
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TMergedCells">
            <summary>
            Merged Cell list. Merged cells can't be continued. We have to write independent records.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TMergedCells.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Always call premergecell first...
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDataValidation">
            <summary>
            An internal representation of a Data Validation. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TParseString">
            <summary>
            A class for parsing a string into an RPN byte stream.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBaseParseString">
            <summary>
            A class for parsing a string into an RPN byte stream. 
            This base class does not define the format of the RPN stream, this is done on the children.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.Factor(System.Boolean)">
            <summary>
            [Whitespace]* Function | Number | String | Cell Reference | 3d Ref | (Expression) | NamedRange | Boolean | Err | Array
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.RefTerm(System.Boolean)">
            <summary>
            Factor [ : | ' ' | , Factor]
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.NegTerm(System.Boolean)">
            <summary>
            [- | +] * RefTerm
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.PerTerm(System.Boolean)">
            <summary>
            NegTerm [%]*
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.ExpTerm(System.Boolean)">
            <summary>
            PerTerm [ ^ PerTerm]*
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.MulTerm(System.Boolean)">
            <summary>
            ExpTerm [ *|/ ExpTerm ]*
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.AddTerm(System.Boolean)">
            <summary>
            MulTerm [ +|- MulTerm]*
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.AndTerm(System.Boolean)">
            <summary>
            AddTerm [ &amp; AddTerm]*
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.ComTerm(System.Boolean)">
            <summary>
            AndTerm [ = | &lt; | &gt; | &lt;= | &gt;= | &lt;&gt;  AndTerm]*
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseParseString.Go">
            <summary>
            Does the encoding.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TValueType">
            <summary>
            All the things we can find on a cell.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Const">
            <summary>
            A constant value, like 2 or "a".
            </summary>
            <example>On the string: "&lt;#tag1&gt;hello&lt;#tag1&gt;" "Hello is a Const type.</example>
        </member>
        <member name="F:FlexCel.Report.TValueType.DataSet">
            <summary>
            A value from a Dataset. This tag is written as "&lt;#DataTable.Column&gt;
            </summary>
            <example>If you have a table "Customers" with a column named "LastName", &lt;#Customers.LastName&gt; will replace the value on the report.</example>
        </member>
        <member name="F:FlexCel.Report.TValueType.Property">
            <summary>
            A report variable, like &lt;#Variable&gt;
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FullDataSet">
            <summary>
            A dataset with "*"
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FullDataSetCaptions">
            <summary>
            Captions for a full dataset.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.IF">
            <summary>
            An #IF construct
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Include">
            <summary>
            An include Tag.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Equal">
            <summary>
            A #= tag
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DeleteSheet">
            <summary>
            A #Delete sheet
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ConfigSheet">
            <summary>
            #Config
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DeleteRange">
            <summary>
            #Delete Range
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DeleteRow">
            <summary>
            #Delete row
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DeleteCol">
            <summary>
            Delete Column
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FormatCell">
            <summary>
            Format cell
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FormatRow">
            <summary>
            Format row
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FormatCol">
            <summary>
            Format column
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.FormatRange">
            <summary>
            Format range
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.HPageBreak">
            <summary>
            Horizontal page break
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.VPageBreak">
            <summary>
            Vertical page break
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Comment">
            <summary>
            This one will not really be stored.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Evaluate">
            <summary>
            An expression that will be evaluated
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ImgSize">
            <summary>
            Only used inside images, to specify its zoom in % and its aspect ratio.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ImgPos">
            <summary>
            Only used inside images, to specify its position inside the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ImgFit">
            <summary>
            Only used inside images, to specify how to modify the containing cells to hold the image.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ImgDelete">
            <summary>
            Only used inside images, to delete an image.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Lookup">
            <summary>
            A lookup field. Parameters are: DataBase, KeyFields, KeyValues, ResultField.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Array">
            <summary>
            An array of values. Useful for example as the KeyValues argument of the Lookup field.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Regex">
            <summary>
            A regular expression replace.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.MergeRange">
            <summary>
            A cell that will be merged.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Formula">
            <summary>
            The contents of this cell should be entered as formula.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.ColumnWidth">
            <summary>
            Adjusts the column width to a specified value.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.RowHeight">
            <summary>
            Adjusts the row height to a specified value.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Html">
            <summary>
            Defines if the cell has HTML formatted data or not.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Ref">
            <summary>
            The parameter is considered a reference and will be changed when copying the ranges.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.AutofitSettings">
            <summary>
            Sets autofit settings for the whole sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Defined">
            <summary>
            Returns true if the expression is defined.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DefinedFormat">
            <summary>
            Returns true if the format is defined.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Preprocess">
            <summary>
            An expression that will be pre evaluated and used to modify the template.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.AutoPageBreaks">
            <summary>
            FlexCel should automatically calculate the page breaks in this sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.Aggregate">
            <summary>
            Does an operation like sum or average over a dataset.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.List">
            <summary>
            Concatenates all values in a dataset as a list.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TValueType.DbValue">
            <summary>
            Gets the value of a dataset given a row or a column.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TOneSectionValue">
            <summary>
            On a cell, we can have many Sections containing datasets, properties, etc. (Any <see cref="T:FlexCel.Report.TValueType"/>)
            TOneSectionValue represents the minimum section we can find.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TOneSectionValue.Resolve(System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TDebugStack,System.Int32)">
            <summary>
            If the section has a reference to other sections, return the children.
            </summary>
            <returns>Sections referenced by this section.</returns>
        </member>
        <member name="T:FlexCel.Report.TOneCellValue">
            <summary>
            A list of TOneSectionValue. Has a parsed version of what is on a cell.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TOneCellValue.XF">
            <summary>
            format of the cell.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TOneCellValue.Dispose">
            <summary>
            Frees the resources of the cell.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TOneCellValue.Dispose(System.Boolean)">
            <summary>
            Disposes the resources of the cell.
            </summary>
            <param name="isDisposing"></param>
        </member>
        <member name="T:FlexCel.Report.TOneRowValue">
            <summary>
            A list of TOneCellValue. Contains all the cells, images and comments on a row
            </summary>
        </member>
        <member name="M:FlexCel.Report.TCellParser.ParseParams(FlexCel.Core.TRichString,FlexCel.Core.TRichString,System.Collections.ArrayList)">
            <summary>
            For undetermined param count.
            </summary>
        </member>
        <member name="T:FlexCel.Render.OctreeQuantizer">
            <summary>
            Reduce the number of colors of an image. This class needs UNMANAGED permissions in order to be able to modify the bits in the image.
            </summary>
        </member>
        <member name="T:FlexCel.Render.Quantizer">
            <summary>
            A generic implementation for any Color Quantizer.
            </summary>
        </member>
        <member name="M:FlexCel.Render.Quantizer.#ctor(System.Boolean)">
            <summary>
            Constructs the quantizer.
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the Source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:FlexCel.Render.Quantizer.Quantize(System.Drawing.Image,System.Drawing.Bitmap)">
            <summary>
            Quantize an image and return the resulting Result bitmap
            </summary>
            <param name="Source">The image to quantize</param>
            <param name="Result">A quantized version of the image</param>
        </member>
        <member name="M:FlexCel.Render.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The Source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:FlexCel.Render.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The Source bitmap, locked into memory</param>
            <param name="Result">The Result bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:FlexCel.Render.Quantizer.InitialQuantizePixel(System.Int32)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:FlexCel.Render.Quantizer.QuantizePixel(System.Int32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:FlexCel.Render.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:FlexCel.Render.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs the octree quantizer. 
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.ConvertTo256Colors(System.Drawing.Image,System.Drawing.Bitmap)">
            <summary>
            Converts an image to 256 colors.
            </summary>
            <param name="Source">Image we want to convert.</param>
            <param name="Result">Converted image.</param>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.ConvertTo256Colors(System.Drawing.Image)">
            <summary>
            Converts an image to 256 colors.
            </summary>
            <param name="Source">Image we want to convert.</param>
            <returns>Converted image.</returns>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.InitialQuantizePixel(System.Int32)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.QuantizePixel(System.Int32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:FlexCel.Render.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.AddColor(System.Int32)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.TrackPrevious(FlexCel.Render.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.GetPaletteIndex(System.Int32)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="P:FlexCel.Render.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:FlexCel.Render.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="T:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,FlexCel.Render.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode.AddColor(System.Int32,System.Int32,System.Int32,FlexCel.Render.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(System.Int32,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode.Increment(System.Int32)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="P:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:FlexCel.Render.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlgConsts.CreatePattern(FlexCel.Core.TFlxPatternStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Deprecated by the moment. Could be of use in the future.
            </summary>
            <param name="Pattern"></param>
            <param name="ColorFg"></param>
            <param name="ColorBg"></param>
            <returns></returns>
        </member>
        <member name="F:FlexCel.Render.FlgConsts.MissingFrameworkColorMatrix">
            <summary>
            No need for threadstatic.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TShapesCache">
            <summary>
            Divides the shapes on pages so we can search faster.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfHeaderRecord">
            <summary>
            The PDF Header.
            It must be followed with a comment with non alphanumeric characters.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfStringRecord">
            <summary>
            An ASCII string.
            Syntax:
                     (this is a \(string\))  
            "(", ")" and "\" should be escaped. Strings cannot be longer than 65535
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfStringRecord.EscapeString(System.Byte[])">
            <summary>
            Text should be escaped AFTER it has been converted to bytes.
            For example, unicode "\" would be written as "\00" and it should be escaped as "\\00" and not as "\00\00"
            </summary>
            <param name="aText"></param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Pdf.TStreamRecord">
            <summary>
            A stream with text or images.
            Syntax:
                    &lt;&lt; /Length 534
                    Filter [/ASCII85Decode /LZWDecode]
                    &gt;&gt;
                    stream
                    ....
                    endstream
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TIndirectRecord">
            <summary>
            A reference to other record.
            Syntax: 
                    id id2 obj
                    ....
                    endobj
            
            Referenced with id id2 R
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TDateRecord">
            <summary>
            A date
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFormulaToken">
            <summary>
            Known token on a formula.  They are not supposed to be localized, but they can be by editing formulamsg.resx
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmErrStart">
            <summary>'#';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmTrue">
            <summary>'TRUE';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmFalse">
            <summary>'FALSE';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmStartFormula">
            <summary>'=' // as in =a1*2 or {=1+2}</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmFormulaDecimal">
            <summary>'.' as in '1.2'</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmFormulaThousands">
            <summary>',' as in '1,300'</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmFunctionSep">
            <summary>';' Argument separator on a function.
            For example, if fmFunctionSep=';' we should
            write "Max(a1;a2)"
            If you want to localize this, you could use fmFunctionSep=ListSeparator
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmUnion">
            <summary>',' as in "=a1, b2"</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmIntersect">
            <summary>' ' as in a1 a2</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmOpenArray">
            <summary>'{';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmCloseArray">
            <summary>'}';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmOpenParen">
            <summary>'(';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmCloseParen">
            <summary>')';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmArrayRowSep">
            <summary>'/' Separates 2 rows on an array. It is '\' in spanish</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmArrayColSep">
            <summary>',' Separates 2 columns on an array. Ex: {1,2}. It is ';' in spanish
            If you want to localize this, you could use fmArrayColSep=ListSeparator
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmAbsoluteRef">
            <summary>'$' as in $A$3</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmRangeSep">
            <summary>':' as in A1:A3</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmSingleQuote">
            <summary>' (as in 'Sheet 1'!A1</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmExternalRef">
            <summary>'!' as in Sheet1!a1</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmWorkbookOpen">
            <summary>'[' as in c:\[book1.xls]Sheet1!a1</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmWorkbookClose">
            <summary>']';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmTableText">
            <summary>'TABLE';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmPlus">
            <summary>'+';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmMinus">
            <summary>'-';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmMul">
            <summary>'*';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmDiv">
            <summary>'/';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmPower">
            <summary>'^';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmPercent">
            <summary>'%';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmStr">
            <summary>'"';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmAnd">
            <summary>'&amp;';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmLT">
            <summary>'&lt;';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmLE">
            <summary>'&lt;=';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmEQ">
            <summary>'=';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmGE">
            <summary>'&gt;=';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmGT">
            <summary>'&gt;';</summary>
        </member>
        <member name="F:FlexCel.Core.TFormulaToken.fmNE">
            <summary>'&lt;&gt;';</summary>
        </member>
        <member name="T:FlexCel.Core.TFmReturnType">
            <summary>
            Formula return types... A value, an array or a reference.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFmReturnType.Value">
            <summary>
            Formula returns a value.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFmReturnType.Ref">
            <summary>
            Formula returns a reference.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFmReturnType.Array">
            <summary>
            Formula returns an array.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCellFunctionData">
            <summary>
            The function description. Only use it if you have to override the formula parser.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFormulaMessages">
            <summary>
            Tokens that can be used on a formula.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.ErrString(FlexCel.Core.TFlxFormulaErrorValue)">
            <summary>
            Message for the ErrorCode.
            </summary>
            <param name="ErrCode">Error Code.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.TokenString(FlexCel.Core.TFormulaToken)">
            <summary>
            Formula tokens.
            </summary>
            <param name="Token">Token.</param>
            <returns>Message.</returns>
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.TokenChar(FlexCel.Core.TFormulaToken)">
            <summary>
            Returns the formula token as a character.
            </summary>
            <param name="Token">Token.</param>
            <returns>Message</returns>
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.FloatToString(System.Double)">
            <summary>
             This is a non-localized version of FloatToStr
             It will always use "." as decimal separator.
             If you are localizing this unit to your language, change this function
             to be:
             public string FloatToString(double Value)
             {
                return Value.ToString();
             }
             
            And it will use your current locale to get the decimal separator.
            Just remember that if you for example use "," as decimal sep,
            you should also change fmArrayColSep, fmFunctionSep and all vars with value=","
            </summary>
            <param name="Value">Value to convert</param>
            <returns>String using ALWAYS "." as decimal separator, regardless of the regional settings</returns>
        </member>
        <member name="M:FlexCel.Core.TFormulaMessages.StringToFloat(System.String)">
            <summary>
             This is a non-localized version of StrToFloat
             It will always use "." as decimal separator.
             If you are localizing this unit to your language, change this function
             to be:
             public double FloatToString(string Value)
             {
                return Value.ToDouble();
             }
             
            And it will use your current locale to get the decimal separator.
            Just remember that if you for example use "," as decimal sep,
            you should also change fmArrayColSep, fmFunctionSep and all vars with value=","
            </summary>
            <param name="Value">String to Convert. ALWAYS uses "." as decimal separator</param>
            <returns>value of the string</returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBoundSheetList">
            <summary>
            List with BoundSheets.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWorkbookGlobals">
            <summary>
            Global Section of the workbook.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TOle2Header">
            <summary>
            Header sector. It has a fixed size of 512 bytes.
            On this implementation, we don't save the first 109 DIF entries, as they will be saved by the DIF Sector.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TOle2Header.DifsInHeader">
            <summary>
            109
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TOle2Header.DifEntries">
            <summary>
            109*4
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2Header.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates the Header reading the data from a stream.
            </summary>
            <param name="aStream"></param>
            <param name="AvoidExceptions"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TOle2FAT">
            <summary>
            FAT Table stored as a list of ints.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2FAT.#ctor">
            <summary>
            Use Create() to create an instance. This way we avoid calling virtual methods on a constructor.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2FAT.Create(FlexCel.XlsAdapter.TOle2Header,System.IO.Stream)">
            <summary>
            Creates a FAT integer list from the data on a stream. 
            We have to read the DIF to access the actual FAT sectors.
            </summary>
            <param name="aHeader">The header record</param>
            <param name="aStream">Stream to read the FAT. When null, an Empty FAT will be created.</param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TOle2MiniFAT">
            <summary>
            MINIFAT Table stored as a list of ints.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2MiniFAT.#ctor">
            <summary>
            Use Create() to create an instance. This way we avoid calling virtual methods on a constructor.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2MiniFAT.Create(FlexCel.XlsAdapter.TOle2Header,System.IO.Stream,FlexCel.XlsAdapter.TOle2FAT)">
            <summary>
            Creates a MiniFAT integer list from the data on a stream. 
            </summary>
            <param name="aHeader"></param>
            <param name="aStream"></param>
            <param name="aFAT"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TOle2Directory">
            <summary>
            A semi-sector containing 1 Directory entry. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TOle2File">
            <summary>
            Class encapsulating an OLE2 file. FAT is kept in memory, data is read/written from/to disk.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2File.#ctor(System.IO.Stream)">
            <summary>
            Opens an EXISTING OLE2 Stream. There is no support for creating a new one, you can only modify existing ones.
            </summary>
            <param name="aStream">The stream with the data</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2File.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Opens an EXISTING OLE2 Stream, without throwing an exception if it is a wrong file. (On this case the error is logged into the Notxls97 variable)
            There is no support for creating a new one, you can only modify existing ones.
            </summary>
            <param name="aStream">The stream with the data</param>
            <param name="AvoidExceptions">If true, no Exception will be raised when the file is not OLE2.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2File.WriteRaw(System.Byte[],System.Int32)">
            <summary>
            Writes to the stream sequentially. No seek or read allowed while writing.
            </summary>
            <param name="Buffer">The data.</param>
            <param name="Count">number of bytes to write.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2File.SeekForward(System.Int64)">
            <summary>
            Only seeks forward, no reverse. Not really optimized either, don't use in heavy places.
            </summary>
            <param name="Offset"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.TOle2File.PrepareForWrite(System.IO.Stream,System.String,System.String[])">
            <summary>
            This method copies the contents of the ole stream to a new one, and clears the OStreamName 
            stream, leaving it ready to be written.
            </summary>
            <param name="OutStream">The new Stream where we will write the data</param>
            <param name="OStreamName">Ole Stream Name (tipically "Workbook") that we will clear to write the new data.</param>
            <param name="DeleteStorages">Storages we are not going to copy to the new one. Used to remove macros.</param>
        </member>
        <member name="T:FlexCel.Report.TFlexCelDataSource">
            <summary>
            Encapsulates a datasource to be used with FlexCelReport.
            It can have a position, master detail, etc.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TDataSourceInfo.DestroyTables">
            <summary>
            Call this method ONLY if the collection owns the objects. 
            As this is not always the case, we cannot follow a more common Dispose pattern.
            </summary>
        </member>
        <member name="T:FlexCel.Render.BidiReference">
            <summary> Reference implementation of the Unicode 3.0 Bidi algorithm. 
            <p>
            This implementation is not optimized for performance.  It is intended
            as a reference implementation that closely follows the specification
            of the Bidirectional Algorithm in The Unicode Standard version 3.0.
            </p>
            <p>
            <b>Input:</b>
            There are two levels of input to the algorithm, since clients may prefer
            to supply some information from out-of-band sources rather than relying on
            the default behavior.
            </p>
            <ol>
            <li>unicode type array</li>
            <li>unicode type array, with externally supplied base line direction</li>
            </ol>
            <p><b>Output:</b>
            Output is separated into several stages as well, to better enable clients
            to evaluate various aspects of implementation conformance.
            </p>
            <ol>
            <li>levels array over entire paragraph</li>
            <li>reordering array over entire paragraph</li>
            <li>levels array over line</li>
            <li>reordering array over line</li>
            </ol>
            Note that for conformance, algorithms are only required to generate correct
            reordering and character directionality (odd or even levels) over a line.
            Generating identical level arrays over a line is not required.  Bidi
            explicit format codes (LRE, RLE, LRO, RLO, PDF) and BN can be assigned
            arbitrary levels and positions as long as the other text matches.
            <p>
            As the algorithm is defined to operate on a single paragraph at a time,
            this implementation is written to handle single paragraphs.  Thus
            rule P1 is presumed by this implementation-- the data provided to the
            implementation is assumed to be a single paragraph, and either contains no
            'B' codes, or a single 'B' code at the end of the input.  'B' is allowed
            as input to illustrate how the algorithm assigns it a level.
            </p>
            <p>
            Also note that rules L3 and L4 depend on the rendering engine that uses 
            the result of the bidi algorithm.  This implementation assumes that the 
            rendering engine expects combining marks in visual order (e.g. to the 
            left of their base character in RTL runs) and that it adjust the glyphs 
            used to render mirrored characters that are in RTL runs so that they 
            render appropriately.
            </p>
            </summary>
            <author>  Doug Felt
            </author>
        </member>
        <member name="F:FlexCel.Render.BidiReference.L">
            <summary>Left-to-right</summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.LRE">
            <summary>Left-to-Right Embedding </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.LRO">
            <summary>Left-to-Right Override </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.R">
            <summary>Right-to-Left </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.AL">
            <summary>Right-to-Left Arabic </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.RLE">
            <summary>Right-to-Left Embedding </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.RLO">
            <summary>Right-to-Left Override </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.PDF">
            <summary>Pop Directional Format </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.EN">
            <summary>European Number </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.ES">
            <summary>European Number Separator </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.ET">
            <summary>European Number Terminator </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.AN">
            <summary>Arabic Number </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.CS">
            <summary>Common Number Separator </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.NSM">
            <summary>Non-Spacing Mark </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.BN">
            <summary>Boundary Neutral </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.B">
            <summary>Paragraph Separator </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.S">
            <summary>Segment Separator </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.WS">
            <summary>Whitespace </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.ON">
            <summary>Other Neutrals </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.TYPE_MIN">
            <summary>Minimum bidi type value. </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.TYPE_MAX">
            <summary>Maximum bidi type value. </summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.typenames">
            <summary>Shorthand names of bidi type values, for error reporting. </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.#ctor(System.String)">
            <summary> Initialize using an array of direction types.  Types range from TYPE_MIN to TYPE_MAX inclusive 
            and represent the direction codes of the characters in the text.
            
            </summary>
            <param name="Text">the Text we want to order.
            </param>
        </member>
        <member name="M:FlexCel.Render.BidiReference.runAlgorithm">
            <summary> The algorithm.
            Does not include line-based processing (Rules L1, L2).
            These are applied later in the line-based phase of the algorithm.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.determineParagraphEmbeddingLevel">
            <summary> 1) determining the paragraph level.
            <p>
            Rules P2, P3.
            </p>
            At the end of this function, the member variable paragraphEmbeddingLevel is set to either 0 or 1.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.determineExplicitEmbeddingLevels">
            <summary> Process embedding format codes.
            <p>
            Calls processEmbeddings to generate an embedding array from the explicit format codes.  The
            embedding overrides in the array are then applied to the result types, and the result levels are
            initialized.</p>
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.removeExplicitCodes">
            <summary> Rules X9.
            Remove explicit codes so that they may be ignored during the remainder 
            of the main portion of the algorithm.  The length of the resulting text 
            is returned.
            </summary>
            <returns> the length of the data excluding explicit codes and BN.
            </returns>
        </member>
        <member name="M:FlexCel.Render.BidiReference.reinsertExplicitCodes(System.Int32)">
            <summary> Reinsert levels information for explicit codes.
            This is for ease of relating the level information 
            to the original input data.  Note that the levels
            assigned to these codes are arbitrary, they're
            chosen so as to avoid breaking level runs.
            </summary>
            <param name="aTextLength">the length of the data after compression
            </param>
            <returns> the length of the data (original length of 
            types array supplied to constructor)
            </returns>
        </member>
        <member name="M:FlexCel.Render.BidiReference.processEmbeddings(System.SByte[],System.SByte)">
            <summary> 2) determining explicit levels
            Rules X1 - X8
            
            The interaction of these rules makes handling them a bit complex.
            This examines resultTypes but does not modify it.  It returns embedding and
            override information in the result array.  The low 7 bits are the level, the high
            bit is set if the level is an override, and clear if it is an embedding.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.resolveWeakTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            <summary> 3) resolving weak types
            Rules W1-W7.
            
            Note that some weak types (EN, AN) remain after this processing is complete.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.resolveNeutralTypes(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            <summary> 6) resolving neutral types
            Rules N1-N2.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.resolveImplicitLevels(System.Int32,System.Int32,System.SByte,System.SByte,System.SByte)">
            <summary> 7) resolving implicit embedding levels
            Rules I1, I2.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.getLevels(System.Int32[])">
            <summary> Return levels array breaking lines at offsets in linebreaks. <br></br>
            Rule L1.
            <p>
            The returned levels array contains the resolved level for each
            bidi code passed to the constructor.</p>
            <p>
            The linebreaks array must include at least one value.
            The values must be in strictly increasing order (no duplicates)
            between 1 and the length of the text, inclusive.  The last value
            must be the length of the text.
            </p>
            </summary>
            <param name="linebreaks">the offsets at which to break the paragraph
            </param>
            <returns> the resolved levels of the text
            </returns>
        </member>
        <member name="M:FlexCel.Render.BidiReference.getReordering(System.Int32[])">
            <summary> Return reordering array breaking lines at offsets in linebreaks.
            <p>
            The reordering array maps from a visual index to a logical index.
            Lines are concatenated from left to right.  So for example, the
            fifth character from the left on the third line is 
            <pre> getReordering(linebreaks)[linebreaks[1] + 4]</pre>
            (linebreaks[1] is the position after the last character of the 
            second line, which is also the index of the first character on the 
            third line, and adding four gets the fifth character from the left).</p>
            <p>
            The linebreaks array must include at least one value.
            The values must be in strictly increasing order (no duplicates)
            between 1 and the length of the text, inclusive.  The last value
            must be the length of the text.
            </p>
            </summary>
            <param name="linebreaks">the offsets at which to break the paragraph.
            </param>
        </member>
        <member name="M:FlexCel.Render.BidiReference.computeMultilineReordering(System.SByte[],System.Int32[])">
            <summary> Return multiline reordering array for a given level array.
            Reordering does not occur across a line break.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.computeReordering(System.SByte[])">
            <summary> Return reordering array for a given level array.  This reorders a single line.
            The reordering is a visual to logical map.  For example,
            the leftmost char is string.charAt(order[0]).
            Rule L2.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.isWhitespace(System.SByte)">
            <summary> Return true if the type is considered a whitespace type for the line break rules.</summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.typeForLevel(System.Int32)">
            <summary> Return the strong type (L or R) corresponding to the level.</summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.findRunLimit(System.Int32,System.Int32,System.SByte[])">
            <summary> Return the limit of the run starting at index that includes only resultTypes in validSet.
            This checks the value at index, and will return index if that value is not in validSet.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.setTypes(System.Int32,System.Int32,System.SByte)">
            <summary> Set resultTypes from start up to (but not including) limit to newType.</summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.setLevels(System.Int32,System.Int32,System.SByte)">
            <summary> Set resultLevels from start up to (but not including) limit to newLevel.</summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.assertOnly(System.Int32,System.Int32,System.SByte[])">
            <summary> Algorithm validation.
            Assert that all values in resultTypes are in the provided set.
            </summary>
        </member>
        <member name="M:FlexCel.Render.BidiReference.validateLineBreaks(System.Int32[],System.Int32)">
            <summary> Throw exception if line breaks array is invalid.</summary>
        </member>
        <member name="F:FlexCel.Render.BidiReference.UnicodeTypes">
            <summary>
            Both the starting range and the value.
            </summary>
        </member>
        <member name="P:FlexCel.Render.BidiReference.BaseLevel">
            <summary> Return the base level of the paragraph.</summary>
        </member>
        <member name="T:FlexCel.Pdf.TToUnicode">
            <summary>
            Handles the information needed to write a ToUnicode entry on a pdf file.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TDocumentCatalogRecord">
            <summary>
            Container for the whole document.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPageTreeRecord">
            <summary>
            Contains a list of pages or other PagesTrees.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPageRecord">
            <summary>
            The real page.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXlsFunction">
            <summary>
            A list with the functions on an excel sheet.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXlsImgType">
            <summary>
            Possible image types on an excel sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Emf">
            <summary>
            Enhanced Windows Metafile. This is a Vectorial image format.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Wmf">
            <summary>
            Windows Metafile. This is a Vectorial image format.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Jpeg">
            <summary>
            JPEG Image. This is a losely compressed bitmap, best suited for photos.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Png">
            <summary>
            Portable Network Graphics. This is a lossless compressed bitmap, best suited for text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Bmp">
            <summary>
            Windows Bitmap. As this is not compressed, don't use it except for really small images.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsImgType.Unknown">
            <summary>
            Unsupported image format.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSheetOptions">
            <summary>
            General options for a sheet. In Excel, this settings are located in Tools-&gt;Options-&gt;View in the "Window options" box.
            Most of this options can be set with dedicated methods in <see cref="T:FlexCel.Core.ExcelFile"/>, but this type allows to set them all at once, 
            or copy them from other file. This options apply only to the active sheet. For options that apply to all the sheets see <see cref="T:FlexCel.Core.TSheetWindowOptions"/>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.None">
            <summary>
            No option is selected.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.ShowFormulaText">
            <summary>
            If 1, Excel will show formula text instead of formula results. This is the same as calling <see cref="P:FlexCel.Core.ExcelFile.ShowFormulaText"/>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.ShowGridLines">
            <summary>
            If 0 Excel will hide the gridlines, if 1 it will show them. This is the same as calling <see cref="P:FlexCel.Core.ExcelFile.ShowGridLines"/>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.ShowRowAndColumnHeaders">
            <summary>
            if 0 Excel will hide the "A", "B"... column headers and "1", "2" ... row Headers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.ZeroValues">
            <summary>
            If 1 Excel will hide 0 values. This is the same as calling <see cref="P:FlexCel.Core.ExcelFile.HideZeroValues"/>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.AutomaticGridLineColors">
            <summary>
            If 1, the color of gridlines will be gray. If 0 it will be the color speciifed at <see cref="P:FlexCel.Core.ExcelFile.GridLinesColorIndex"/>.
            Note that calling <see cref="P:FlexCel.Core.ExcelFile.GridLinesColorIndex"/> will automatically set this property to 0.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.OutlineSymbols">
            <summary>
            If 1, Excel will show the outline symbols (+/-) when there are gouped rows or columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetOptions.PageBreakView">
            <summary>
            If 1 Excel will show the page breaks.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSheetWindowOptions">
            <summary>
            General options for how sheets display. In Excel, this settings are located in Tools-&gt;Options-&gt;View in the "Window options" box.
            This options apply only to all the sheets. For options that apply only to the active sheet see <see cref="T:FlexCel.Core.TSheetOptions"/>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.None">
            <summary>
            No option is selected.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.HideWindow">
            <summary>
            If true, the workbook window will be hidden. You will need to go to Window->Unhide to see it.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.MinimizeWindow">
            <summary>
            If true, the workbok window will be minimized.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.ShowHorizontalScrollBar">
            <summary>
            If false, the horizontal scroll bar will be hidden.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.ShowVerticalScrollBar">
            <summary>
            If false, the vartical scroll bar will be hidden.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetWindowOptions.ShowSheetTabBar">
            <summary>
            If false, the bar with sheet names at the bottom will be hidden.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxInsertMode">
            <summary>
            Inserting mode.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.NoneDown">
            <summary>
            Cells will not be inserted but just overwrite existing ones. If count is &gt;0, additional ranges will be copied down.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.NoneRight">
            <summary>
            Cells will not be inserted but just overwrite existing ones. If count is &gt;0, additional ranges will be copied right.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.ShiftRowDown">
            <summary>
            Inserts whole rows. Moves all destination rows down.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.ShiftColRight">
            <summary>
            Inserts whole columns. Moves all destination columns to the right.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.ShiftRangeDown">
            <summary>
            Moves all destination cells down. This WON'T move the whole row, only cells on the range. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxInsertMode.ShiftRangeRight">
            <summary>
            Moves all destination cells to the right. This WON'T move the whole column, only cells on the range.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRecalcMode">
            <summary>
            Sets how the excel file will be recalculated. Normally FlexCel calculates a file only before saving and when you explicitly call
            <see cref="M:FlexCel.Core.ExcelFile.Recalc(System.Boolean)"/>. With this enum you can change that behavior.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcMode.Smart">
            <summary>
            The file will be recalculated before saving, *only* if there are any changes on the file. This mode
            is the recommended, because it allows you to open and save a file (for example to remove a password)
            without modifying the formula results. If you modify any value on the sheet, a recalculation will be 
            done to get the new values.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcMode.Forced">
            <summary>
            The file will *always* be recalculated before saving. Use it if you are loading files that might not be
            recalculated, to make sure they will. If you open a not calculated file 
            on Smart mode and then save it without modifying anything, it will remain not calculated.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRecalcMode.Manual">
            <summary>
            The file will *never* be recalculated by FlexCel (Except if you do a forced recalc: XlsFile.Recalc(true). All formula results will be set to null and formulas will be
            modified so Excel recalculates them when you open the file. If you are only using Excel to open the generated files
            the result will be the same as with a recalculated file, but if you try to open it with a viewer
            you won't see the formula results.
            You should not need to use manual recalculation. The only case where it might be useful is if you are setting the formula results
            yourself and don't want FlexCel to change them when it saves.
            </summary>
            <remarks>Note that this mode is is not related with "Manual Recalculation" in Excel. FlexCel always does "Manual" recalculation 
            except when you use <see cref="F:FlexCel.Core.TRecalcMode.OnEveryChange"/>. It will only recalc when saving or explicitly calling Recalc(). In this
            "Manual" mode it will not even recalculate when you save or do a not-forced recalc.</remarks>
        </member>
        <member name="F:FlexCel.Core.TRecalcMode.OnEveryChange">
            <summary>
            The file will be recalculated each time a value changes on the sheet. Do not use this mode on normal files,
            as it can be really slow!!  This option could be of use for an interactive viewer.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAbsoluteAnchorRect">
            <summary>
            A rectangle holding image position in Excel internal units. Not for normal use, it can be used to do relative changes
            (for example, reducing the x to the the half).
            </summary>
        </member>
        <member name="M:FlexCel.Core.TAbsoluteAnchorRect.#ctor(FlexCel.Core.TFlxAnchorType,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Creates a new TAbsoluteAnchorRect instance.
            </summary>
            <param name="aAnchorType">Anchor type.</param>
            <param name="ax1">First x coord.</param>
            <param name="ay1">First y coord.</param>
            <param name="ax2">Second x coord.</param>
            <param name="ay2">Second y coord.</param>
        </member>
        <member name="P:FlexCel.Core.TAbsoluteAnchorRect.AnchorType">
            <summary>
            Anchor type.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAbsoluteAnchorRect.x1">
            <summary>
            X1 of the image.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAbsoluteAnchorRect.y1">
            <summary>
            Y1 of the image.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAbsoluteAnchorRect.x2">
            <summary>
            X2 of the image.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAbsoluteAnchorRect.y2">
            <summary>
            Y2 of the image.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChildAnchor">
            <summary>
            A class to hold the offsets relative to the parent on grouped shapes.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChildAnchor.#ctor">
            <summary>
            Creates a new empty instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChildAnchor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance with the defined values.
            </summary>
            <param name="aDx1"></param>
            <param name="aDy1"></param>
            <param name="aDx2"></param>
            <param name="aDy2"></param>
        </member>
        <member name="M:FlexCel.Core.TChildAnchor.Clone">
            <summary>
            Returns a deep copy of the Anchor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TChildAnchor.EqualValues(FlexCel.Core.TChildAnchor,FlexCel.Core.TChildAnchor)">
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TChildAnchor.Dx1">
            <summary>
            Offset from the left on the parent, on percent of the total width of the parent.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChildAnchor.Dy1">
            <summary>
            Offset from the top on the parent, on percent of the total height of the parent.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChildAnchor.Dx2">
            <summary>
            Width on percent of the total width of the parent.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChildAnchor.Dy2">
            <summary>
            Height on percent of the total height of the parent.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TClientAnchor">
            <summary>
            Image Anchor information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.#ctor">
            <summary>
            Creates an Empty ClientAnchor.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.#ctor(FlexCel.Core.TFlxAnchorType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new ClientAnchor object, based on cell coords. Does not take in count actual image size.
            </summary>
            <param name="aAnchorType">How the image behaves when copying/inserting cells.</param>
            <param name="aCol1">First column of object</param>
            <param name="aDx1">Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.</param>
            <param name="aRow1">First Row of object.</param>
            <param name="aDy1">Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.</param>
            <param name="aCol2">Last column of object.</param>
            <param name="aDx2">Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.</param>
            <param name="aRow2">Last row of object.</param>
            <param name="aDy2">Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.</param>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.#ctor(System.Boolean,FlexCel.Core.TFlxAnchorType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new ClientAnchor object, based on cell coords. Does not take in count actual image size.
            </summary>
            <param name="aAnchorType">How the image behaves when copying/inserting cells.</param>
            <param name="aCol1">First column of object</param>
            <param name="aDx1">Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.</param>
            <param name="aRow1">First Row of object.</param>
            <param name="aDy1">Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.</param>
            <param name="aCol2">Last column of object.</param>
            <param name="aDx2">Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.</param>
            <param name="aRow2">Last row of object.</param>
            <param name="aDy2">Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.</param>
            <param name="aChartCoords">If true, the object is inside a chart and rows and columns range from 0 to 4000.</param>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.#ctor(FlexCel.Core.TFlxAnchorType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new image based on the image size.
            </summary>
            <param name="aAnchorType">How the image behaves when copying/inserting cells.</param>
            <param name="aRow1">Row where to insert the image.</param>
            <param name="aCol1">Column where to insert the image.</param>
            <param name="aPixDy1">Delta in pixels that the image is moved from aRow1.</param>
            <param name="aPixDx1">Delta in pixels that the image is moved from aCol1.</param>
            <param name="height">Height in pixels.</param>
            <param name="width">Width in pixels.</param>
            <param name="Workbook">ExcelFile with the workbook, used to calculate the cells.</param>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Inc">
            <summary>
            Returns a COPY of the anchor with rows and cols incremented by one
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dec">
            <summary>
            Returns a COPY of the anchor with rows and cols decremented by one
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.GetData">
            <summary>
            All the data as a byte array.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.CalcImageCoords(System.Double@,System.Double@,FlexCel.Core.ExcelFile)">
            <summary>
            Calculates the width of the image in pixels.
            </summary>
            <param name="height">Will return the height of the object.</param>
            <param name="width">Will return the width of the object.</param>
            <param name="Workbook">Workbook used to know the column widths and row heights.</param>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.CalcImageCoordsInPoints(System.Double@,System.Double@,FlexCel.Core.ExcelFile)">
            <summary>
            Calculates the width of the image in Points.
            </summary>
            <param name="height">Will return the height of the object.</param>
            <param name="width">Will return the width of the object.</param>
            <param name="Workbook">Workbook used to know the column widths and row heights.</param>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dx1Pix(FlexCel.Core.ExcelFile)">
            <summary>
            Returns the offset of the object in pixels from the left of the cell.
            </summary>
            <param name="Workbook">ExcelFile where this object is placed</param>
            <returns>Offset in pixels.</returns>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dy1Pix(FlexCel.Core.ExcelFile)">
            <summary>
            Returns the offset of the object in pixels from the top of the cell.
            </summary>
            <param name="Workbook">ExcelFile where this object is placed</param>
            <returns>Offset in pixels.</returns>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dx1Points(FlexCel.Core.ExcelFile)">
            <summary>
            Returns the offset of the object in points from the left of the cell.
            </summary>
            <param name="Workbook">ExcelFile where this object is placed</param>
            <returns>Offset in points (1/72 of an inch).</returns>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Dy1Points(FlexCel.Core.ExcelFile)">
            <summary>
            Returns the offset of the object in points from the top of the cell.
            </summary>
            <param name="Workbook">ExcelFile where this object is placed</param>
            <returns>Offset in points (1/72 of an inch).</returns>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.Clone">
            <summary>
            Creates a copy of the Anchor
            </summary>
            <returns>Anchor copy.</returns>
        </member>
        <member name="M:FlexCel.Core.TClientAnchor.EqualValues(FlexCel.Core.TClientAnchor,FlexCel.Core.TClientAnchor)">
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.ChartCoords">
            <summary>
            If true, this object is inside a chart, and columns and rows range from 0 to 4000.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.AnchorType">
            <summary>
            How the image behaves when copying/inserting cells.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Col1">
            <summary>
            First column of object
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Dx1">
            <summary>
            Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Row1">
            <summary>
            First Row of object.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Dy1">
            <summary>
            Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Col2">
            <summary>
            Last column of object.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Dx2">
            <summary>
            Delta x of image, on 1/1024 of a cell.  0 means totally at the left, 512 on half of the cell, 1024 means at the left of next cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Row2">
            <summary>
            Last row of object.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Dy2">
            <summary>
            Delta y of image on 1/255 of a cell. 0 means totally at the top, 128 on half of the cell, 255 means at the top of next cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.ChildAnchor">
            <summary>
            Returns the offset on the parent system for the image, when it is grouped.
            For example, if the parent shape on the group is 100 px wide, and ChildAnchor has a dx
            of 0.5, the image starts 50px to the right of the parent. If the shape is not grouped 
            or it is the shape on top of the group, ChildAnchor is null. When this member is
            not null, other values on ClientAnchor have no meaning.
            </summary>
            <remarks>
            This offset is relative to the parent shape. If there are 2 parent shapes before on the hierarchy,
            this object applies to the parent, not the grandparent.
            </remarks>
        </member>
        <member name="P:FlexCel.Core.TClientAnchor.Length">
            <summary>
            Length of the Serialized array.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THeaderOrFooterAnchor">
            <summary>
            Image information for an image inside a header or footer.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterAnchor.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Anchor for a Header or footer image.
            </summary>
            <param name="aWidth">Width of the image in pixels.</param>
            <param name="aHeight">Height of the image in pixels.</param>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterAnchor.GetData">
            <summary>
            All the data as a byte array.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterAnchor.Clone">
            <summary>
            Returns a clone of the anchor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterAnchor.EqualValues(FlexCel.Core.THeaderOrFooterAnchor,FlexCel.Core.THeaderOrFooterAnchor)">
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.THeaderOrFooterAnchor.Width">
            <summary>
            Width of the image in pixels.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THeaderOrFooterAnchor.Height">
            <summary>
            Height of the image in pixels.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THeaderOrFooterAnchor.Length">
            <summary>
            Length of the Serialized array.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXlsMargins">
            <summary>
            Sheet margin for printing, in inches.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsMargins.#ctor">
            <summary>
            Creates default Margins
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsMargins.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates Personalized Margins
            </summary>
            <param name="aLeft"></param>
            <param name="aTop"></param>
            <param name="aRight"></param>
            <param name="aBottom"></param>
            <param name="aHeader"></param>
            <param name="aFooter"></param>
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Left">
            <summary>
            Left Margin in inches.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Top">
            <summary>
            Top Margin in inches.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Right">
            <summary>
            Right Margin in inches.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Bottom">
            <summary>
            Bottom Margin in inches.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Header">
            <summary>
            Header Margin in inches. Space for the header at top of page, it is taken from Top margin.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsMargins.Footer">
            <summary>
            Footer Margin in inches. Space for the footer at bottom of page, it is taken from Bottom margin.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXlsCellRange">
            <summary>
            An Excel Cell range, 1-based.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsCellRange.Left">
            <summary>
            First column on range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsCellRange.Top">
            <summary>
            First row on range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsCellRange.Right">
            <summary>
            Last column on range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsCellRange.Bottom">
            <summary>
            Last row on range.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new TXlsCellRange class.
            </summary>
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.#ctor">
            <summary>
            Creates an empty Cell range.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.FullRange">
            <summary>
            Creates a range with all cells on the sheet (65536 rows x 256 columns in Excel 97-2003)
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Transpose">
            <summary>
            Returns the range transposed, rows by columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Clone">
            <summary>
            Returns a copy of the original range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Offset(System.Int32,System.Int32)">
            <summary>
            Creates a new range with the start at newTopRow, newLeftCol.
            </summary>
            <param name="newTopRow"></param>
            <param name="newLeftCol"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.HasRow(System.Int32)">
            <summary>
            True if the specified row is in the range
            </summary>
            <param name="row">Row we want to know if is on the range.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.HasCol(System.Int32)">
            <summary>
            True if the specified column is in the range
            </summary>
            <param name="col">Column we want to know if is on the range.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Dec">
            <summary>
            Returns a COPY of the range decremented by one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Inc">
            <summary>
            Returns a COPY of the range incremented by one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.Equals(System.Object)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.op_Equality(FlexCel.Core.TXlsCellRange,FlexCel.Core.TXlsCellRange)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.op_Inequality(FlexCel.Core.TXlsCellRange,FlexCel.Core.TXlsCellRange)">
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsCellRange.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TXlsCellRange.IsOneCell">
            <summary>
            Returns true if the range has only one cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsCellRange.RowCount">
            <summary>
            Number of rows on the range.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsCellRange.ColCount">
            <summary>
            Number of columns on the range.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXls3DRange">
            <summary>
            A 3d Excel range.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new TXls3DRange class.
            </summary>
            <param name="aSheet1">First sheet of the range.</param>
            <param name="aSheet2">Second sheet of the range.</param>
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.#ctor">
            <summary>
            Creates an empty 3d range.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.Equals(System.Object)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.op_Equality(FlexCel.Core.TXls3DRange,FlexCel.Core.TXls3DRange)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.op_Inequality(FlexCel.Core.TXls3DRange,FlexCel.Core.TXls3DRange)">
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXls3DRange.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXls3DRange.IsOneCell">
            <summary>
            Returns true if the range has only one cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXls3DRange.Sheet1">
            <summary>
            First sheet of the range.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXls3DRange.Sheet2">
            <summary>
            Second sheet of the range.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXlsNamedRange">
            <summary>
            An Excel named range.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.String)">
            <summary>
            Creates a new Named range with the given values.
            </summary>
            <param name="aName">Name of the range.</param>
            <param name="aSheetIndex">Sheet index where the range is. (1-based)</param>
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
            <param name="aOptionFlags">Options of this Range.</param>
            <param name="aFormulaData">Formula data expressed as RPN array. Set it to null when creating a new range.</param>
            <param name="aRangeFormula">The formula for the range, expressed as text. Use it if the range is complex and cannot be expressed with aSheetIndex, aFirstRow... etc
            When you specify this parameter, all SheetIndex, aFirstRow, etc. lose their meaning.</param>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new Named range with the given values. Use this overload to create a simple range.
            </summary>
            <param name="aName">Name of the range.</param>
            <param name="aNameSheetIndex">Sheet index for the sheet that holds the range. 0 means a global range (default on Excel)</param>
            <param name="aSheetIndex">Sheet index where the range apply. This is where row and col properties apply, not where the range is stored. (1-based)</param>
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
            <param name="aOptionFlags">Options of this Range.</param>
            <param name="aRangeFormula">The formula for the range, expressed as text. Use it if the range is complex and cannot be expressed with aSheetIndex, aFirstRow... etc
            When you specify this parameter, all SheetIndex, aFirstRow, etc. lose their meaning.</param>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.String)">
            <summary>
            Creates a new Named range with the given values. This is the most complete overload, you normally don't need to call it.
            </summary>
            <param name="aName">Name of the range.</param>
            <param name="aNameSheetIndex">Sheet index for the sheet that holds the range. 0 means a global range (default on Excel)</param>
            <param name="aSheetIndex">Sheet index where the range apply. This is where row and col properties apply, not where the range is stored. (1-based)</param>
            <param name="aFirstRow">First row on range.</param>
            <param name="aFirstCol">First column on range.</param>
            <param name="aLastRow">Last row on range.</param>
            <param name="aLastCol">Last column on range.</param>
            <param name="aOptionFlags">Options of this Range.</param>
            <param name="aFormulaData"></param>
            <param name="aRangeFormula">The formula for the range, expressed as text. Use it if the range is complex and cannot be expressed with aSheetIndex, aFirstRow... etc
            When you specify this parameter, all SheetIndex, aFirstRow, etc. lose their meaning.</param>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a complex Named range, with a formula.
            </summary>
            <param name="aName">Name of the range.</param>
            <param name="aNameSheetIndex">Sheet index for the sheet that holds the range. 0 means a global range (default on Excel)</param>
            <param name="aOptionFlags">Options of this Range.</param>
            <param name="aRangeFormula">The formula for the range, expressed as text. For example: "A1:B2,C3:C7"</param>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.#ctor">
            <summary>
            Creates an empty NamedRange.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.Equals(System.Object)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.op_Equality(FlexCel.Core.TXlsNamedRange,FlexCel.Core.TXlsNamedRange)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.op_Inequality(FlexCel.Core.TXlsNamedRange,FlexCel.Core.TXlsNamedRange)">
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.GetHashCode">
            <summary>
            Returns the hashcode of the object.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsNamedRange.GetInternalName(FlexCel.Core.InternalNameRange)">
            <summary>
            Retrurns the string that corresponds to an internal name.
            </summary>
            <param name="name">Internal name we want to find out.</param>
            <returns>The one-char string that represents that internal name.</returns>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Name">
            <summary>
            The name of the range.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.SheetIndex">
            <summary>
            The Sheet index where the row and col properties apply. 1-based. When RangeFormula is set, it is not used.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.NameSheetIndex">
            <summary>
            The sheet index for the name (1 based). A named range can have the same name than other
            as long as they are on different sheets. The default value(0) means a global named range, not tied to
            any specific sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.OptionFlags">
            <summary>
            Options of the range. You can access the options by using the corresponding properties. (Hidden, BuiltIn, etc)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.RangeFormula">
            <summary>
            This is a formula defining the range. It can be used to define complex ranges.
            For example you can use "=Sheet1!$A:$B,Sheet1!$1:$2". 
            When this parameter is set, SheetIndex, Left, Top, Right and Bottom properties have no meaning.
            </summary>
            <remarks>
            In latest FlexCel versions, you *can* use ranges like "A:B" instead (A1:B65536). Using "A:B" form is prefered, since it will work also in Excel 2007.
            </remarks>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.FormulaData">
            <summary>
            Formula data as RPN array.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Hidden">
            <summary>
            True if the range is hidden.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Function">
            <summary>
            True if the range is a function.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.VisualBasicProc">
            <summary>
            True if the range is a Visual Basic Procedure
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.Proc">
            <summary>
            True if the range is a function on a macro sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.CalcExp">
            <summary>
            True if the range contains a complex function.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TXlsNamedRange.BuiltIn">
            <summary>
            True if the range is a built in name. Built in names are 1 char long.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRangeCopyMode">
            <summary>
            What we do with the cells when we call InsertAndCopyRange.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.All">
            <summary>
            Will copy all (values, ranges, images, formulas, etc).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.OnlyFormulas">
            <summary>
            Will copy all except values. Useful when you are going to replace those values anyway.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.None">
            <summary>
            Won't copy anything. Only inserts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRangeCopyMode.OnlyFormulasAndNoObjects">
            <summary>
            Will copy all except values and objects (like images). Useful when you are going to replace those values anyway.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxAnchorType">
            <summary>
            How an image behaves when inserting/copying rows/columns
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxAnchorType.MoveAndResize">
            <summary>
            Move and resize the image with the sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxAnchorType.MoveAndDontResize">
            <summary>
            Move the image when inserting/copying, but keep its size.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxAnchorType.DontMoveAndDontResize">
            <summary>
            Keep the image fixed on the sheet.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCropArea">
            <summary>
            Defines a cropping area for an image. If the values are not zero, only a part of the image will display on Excel.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCropArea.#ctor">
            <summary>
            Creates a new crop area with no crop.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCropArea.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new crop area with the indicated coordinates.
            </summary>
            <param name="aCropFromTop"></param>
            <param name="aCropFromBottom"></param>
            <param name="aCropFromLeft"></param>
            <param name="aCropFromRight"></param>
        </member>
        <member name="M:FlexCel.Core.TCropArea.Clone">
            <summary>
            Returns a deep copy of this object
            </summary>
            <returns>A deep copy of this object.</returns>
        </member>
        <member name="M:FlexCel.Core.TCropArea.IsEmpty">
            <summary>
            Returns true if all the coordinates are 0.
            </summary>
            <returns>True if all the coordinates are 0.</returns>
        </member>
        <member name="M:FlexCel.Core.TCropArea.EqualValues(FlexCel.Core.TCropArea,FlexCel.Core.TCropArea)">
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TCropArea.CropFromTop">
            <summary>
            How much to crop the image, in fractions of 65536 of the total image height.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCropArea.CropFromBottom">
            <summary>
            How much to crop the image, in fractions of 65536 of the total image height.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCropArea.CropFromLeft">
            <summary>
            How much to crop the image, in fractions of 65536 of the total image width.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCropArea.CropFromRight">
            <summary>
            How much to crop the image, in fractions of 65536 of the total image width.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBaseImageProperties">
            <summary>
            Image information, for headers and footers or normal images.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseImageProperties.SetCropArea(FlexCel.Core.TCropArea)">
            <summary>
            This method will NOT copy the area. Only internal use.
            </summary>
            <param name="aCropArea"></param>
        </member>
        <member name="M:FlexCel.Core.TBaseImageProperties.EqualValues(FlexCel.Core.TBaseImageProperties,FlexCel.Core.TBaseImageProperties)">
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.FileName">
            <summary>
            FileName of the image. It sets/gets the original filename of the image before it was inserted.
            (For example: c:\image.jpg) It is not necessary to set this field, and when the image is not inserted
            from a file but pasted, Excel does not set it either.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.CropArea">
            <summary>
            Cropping coordinates for the Image.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.TransparentColor">
            <summary>
            Transparent Color. <see cref="F:FlexCel.Core.FlxConsts.NoTransparentColor"/> (~0L) means no transparent color.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Contrast">
            <summary>
            Contrast of the image. <see cref="F:FlexCel.Core.FlxConsts.DefaultContrast"/> is the default Contrast.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Brightness">
            <summary>
            Brightness of the image. <see cref="F:FlexCel.Core.FlxConsts.DefaultBrightness"/> is the default Brightness.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseImageProperties.Gamma">
            <summary>
            Gamma of the image. <see cref="F:FlexCel.Core.FlxConsts.DefaultGamma"/> is the default Gamma.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TImageProperties">
            <summary>
            Image information for a normal image.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.#ctor">
            <summary>
            Creates a new empty TImageProperties instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.#ctor(FlexCel.Core.TClientAnchor,System.String)">
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aFileName">Filename of the image, for saving the info on the sheet. Mostly unused.</param>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.#ctor(FlexCel.Core.TClientAnchor,System.String,System.String)">
            <summary>
            This method will create a new copy of aAnchor, so you can modify it later.
            </summary>
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aFileName">Filename of the image, for saving the info on the sheet. Mostly unused.</param>
            <param name="aShapeName">Shape name as it will appear on the names combo box.</param>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.#ctor(FlexCel.Core.TClientAnchor,System.String,System.String,FlexCel.Core.TCropArea)">
            <summary>
            This method will create a new copy of aAnchor and aCropArea, so you can modify it later.
            </summary>
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aFileName">Filename of the image, for saving the info on the sheet. Mostly unused.</param>
            <param name="aShapeName">Name of the shape, as it appears on the names combobox. Set it to null to not add an imagename.</param>
            <param name="aCropArea">Crop area for the image.</param>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.#ctor(FlexCel.Core.TClientAnchor,System.String,System.String,FlexCel.Core.TCropArea,System.Int64,System.Int32,System.Int32,System.Int32,System.Boolean)">
             <summary>
             This method WILL NOT copy the anchor, to avoid the overhead. It should be used with care, that's why it isn't public.
             </summary>
             <param name="aAnchor"></param>
             <param name="aFileName"></param>
            <param name="aShapeName"></param>
             <param name="DontCopyAnchor">Use this with care</param>
             <param name="aCropArea"></param>
             <param name="aTransparentColor"></param>
             <param name="aBrightness"></param>
             <param name="aContrast"></param>
             <param name="aGamma"></param>
             <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.Inc">
            <summary>
            Returns a COPY of the class with its coords incremented by 1.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.Dec">
            <summary>
            Returns a COPY of the class with its coords decremented by 1.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.Clone">
            <summary>
            Performs a deep copy of the object.
            </summary>
            <returns>An TImageProperties class that is a copy of this instance, but has a different
            ClientAnchor. So you can change the new ClientAnchor without modifying this one.</returns>
        </member>
        <member name="M:FlexCel.Core.TImageProperties.EqualValues(FlexCel.Core.TImageProperties,FlexCel.Core.TImageProperties)">
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TImageProperties.Anchor">
            <summary>
            Image position
            </summary>
        </member>
        <member name="P:FlexCel.Core.TImageProperties.ShapeName">
            <summary>
            Name of the image. It sets/gets the name of the shape for the image as you can see it on the names combobox.
            If you set it to null Excel will show a generic name, like "Picture 31"
            </summary>
        </member>
        <member name="T:FlexCel.Core.THeaderOrFooterImageProperties">
            <summary>
            Image information for an image embedded inside a header or footer.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterImageProperties.#ctor">
            <summary>
            Creates a new empty THeaderOrFooterImageProperties instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterImageProperties.#ctor(FlexCel.Core.THeaderOrFooterAnchor,System.String,FlexCel.Core.TCropArea)">
            <summary>
            This method will create a new copy of aAnchor and aCropArea, so you can modify it later.
            </summary>
            <param name="aAnchor">Anchor. It will be copied here.</param>
            <param name="aFileName">Filename of the image, for saving the info on the sheet. Mostly unused.</param>
            <param name="aCropArea">Crop area for the image.</param>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterImageProperties.#ctor(FlexCel.Core.THeaderOrFooterAnchor,System.String,FlexCel.Core.TCropArea,System.Int64,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method WONT copy the anchor, to avoid the overhead. It should be used with care, that's why it isn't public.
            </summary>
            <param name="aAnchor"></param>
            <param name="aFileName"></param>
            <param name="DontCopyAnchor">Use this with care</param>
            <param name="aCropArea"></param>
            <param name="aTransparentColor"></param>
            <param name="aBrightness"></param>
            <param name="aContrast"></param>
            <param name="aGamma"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterImageProperties.Clone">
            <summary>
            Performs a deep copy of the object.
            </summary>
            <returns>An TImageProperties class that is a copy of this instance, but has a different
            Anchor. So you can change the new Anchor without modifying this one.</returns>
        </member>
        <member name="M:FlexCel.Core.THeaderOrFooterImageProperties.EqualValues(FlexCel.Core.THeaderOrFooterImageProperties,FlexCel.Core.THeaderOrFooterImageProperties)">
            <summary>
            Returns true if both instances of the objects contain the same values. Instances might be different, this method will return
            if their values are equal. Instances can be null.
            </summary>
            <param name="a1">First instance to compare.</param>
            <param name="a2">Second instance to compare.</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.THeaderOrFooterImageProperties.Anchor">
            <summary>
            Image position
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFormula">
            <summary>
            An Excel formula. Use this structure to pass a formula to an Excel sheet.
            </summary>
            <remarks>
            There are 3 public members here:
               1) The formula text
               2) The internal formula data
               3) The formula result. If RecalcMode is not manual, this value will be ignored.
            Not all of them need to be set, in fact, you won't probably never set internal formula data.
            Internal formula data is used so we can make Flexcel1.SetValue(FlexCel2.GetValue(1,1)); and not have to convert 
            data->text->back to data.
            </remarks>
        </member>
        <member name="F:FlexCel.Core.TFormula.FData">
            <summary>
            The formula data on excel RPN notation. This is used internally by FlexCel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormula.FArrayData">
            <summary>
            The formula data for an array on excel RPN notation. This is used internally by FlexCel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormula.FResult">
            <summary>
            The formula result.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFormula.FText">
            <summary>
            The formula Text. 
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.#ctor">
            <summary>
            Creates an empty Excel formula
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.#ctor(System.String)">
            <summary>
            Creates a formula with the corresponding text and result=null.
            </summary>
            <param name="aText">Formula Text</param>
        </member>
        <member name="M:FlexCel.Core.TFormula.#ctor(System.String,System.Object)">
            <summary>
            Creates a formula with the corresponding text and result.
            </summary>
            <param name="aText">Formula Text</param>
            <param name="aResult">Formula Result</param>
        </member>
        <member name="M:FlexCel.Core.TFormula.#ctor(System.String,System.Object,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Creates a formula with all fields. Internal use.
            </summary>
            <param name="aText"></param>
            <param name="aResult"></param>
            <param name="aData"></param>
            <param name="aArrayData"></param>
            <param name="AddText"></param>
        </member>
        <member name="M:FlexCel.Core.TFormula.Clone">
            <summary>
            Returns a Deep copy of the formula.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToUInt64(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToSByte(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToDouble(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToDateTime(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToSingle(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToBoolean(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToInt32(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToUInt16(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToInt16(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToString(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToByte(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToChar(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToInt64(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.GetTypeCode">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToDecimal(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToType(System.Type,System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToUInt32(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.ToString">
            <summary>Returns the formula result as a string.</summary>
        </member>
        <member name="M:FlexCel.Core.TFormula.Equals(System.Object)">
            <summary>
            Returns true if obj is equal to this instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TFormula.GetHashCode">
            <summary>
            Hashcode of the formula.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TFormula.Text">
            <summary>
            The formula text, as it is written on Excel. It must begin with "=" or "{" for array formulas.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFormula.Result">
            <summary>
            The formula result.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFormula.Data">
            <summary>
            Internal formula representation. Do not modify.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFormula.ArrayData">
            <summary>
            Internal formula representation. Do not modify.
            </summary>
        </member>
        <member name="T:FlexCel.Core.IFlexCelFontList">
            <summary>
            Interface for passing the font information
            </summary>
        </member>
        <member name="M:FlexCel.Core.IFlexCelFontList.GetFont(System.Int32)">
            <summary>
            Returns the font definition for a given font index.
            </summary>
            <param name="fontIndex">Font index. 0-based</param>
            <returns>Font definition</returns>
        </member>
        <member name="T:FlexCel.Core.TRichString">
            <summary>
            A string cell value with its rich text information.
            RTFRuns is an array of TRTFRun structures, where each struct identifies a font style for a portion of text.
            For example, if you have:
               Value="Hello"
               RTFRuns={FirstChar:1 FontIndex=1, FirstChar=3, FontIndex=2}
                  "H" (char 0) will be formatted with the specific cell format.
                  "el" (chars 1 and 2) will have font number 1
                  "lo" (chars 3 and 4) will have font number 2
                  
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRichString.FValue">
            <summary>
            Cell text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRichString.FRTFRuns">
            <summary>
            Rich text info.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRichString.FontList">
            <summary>
            List with fonts. We will copy them here to make it independent of the current Workbook.
            Having a reference to the workbook could lead to a memory leak, if we null the workbook but not the RichString.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.#ctor(System.String,System.Byte[],FlexCel.Core.IFlexCelFontList)">
            <summary>
            Constructs a default RichString with text and RTF info.
            </summary>
            <param name="aValue">Cell text.</param>
            <param name="aRTFRuns">Rich text info</param>
            <param name="aFontList">List with the fonts to convert.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.#ctor">
            <summary>
            Constructs an empty RichString.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.#ctor(System.String)">
            <summary>
            Constructs a RichString without formatting.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.#ctor(System.String,FlexCel.Core.TRTFRun[],FlexCel.Core.ExcelFile)">
            <summary>
            Constructs a default RichString with text and RTF info.
            </summary>
            <param name="aValue">Cell Text</param>
            <param name="aRTFRuns">Array of TRTFRuns structs. This value will be COPIED, so old reference is not used</param>
            <param name="aWorkbook">Workbook containing the fonts.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.#ctor(System.String,FlexCel.Core.TRTFRun[],FlexCel.Core.TFlxFont[])">
            <summary>
            Constructs a default RichString with text and RTF info.
            </summary>
            <param name="aValue">Cell Text</param>
            <param name="aRTFRuns">Array of TRTFRuns structs. This value will be COPIED, so old reference is not used</param>
            <param name="aFontList">List with the fonts on the workbook.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.#ctor(System.String,FlexCel.Core.TRichString,System.Int32)">
            <summary>
            Constructs a default RichString with text and RTF info. 
            </summary>
            <param name="aValue">Cell Text</param>
            <param name="aRichString">Rich string with the RTF values to copy. This value will be COPIED, so old reference is not used</param>
            <param name="offset">How many characters the RTFRun must be moved. For example: RichString(s.SubString(3), RTFRuns, 3) will adapt the RTFRun for s to the new substring.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.#ctor(System.String,System.Collections.Generic.List{FlexCel.Core.TRTFRun},FlexCel.Core.IFlexCelFontList)">
            <summary>
            Constructs a RichString with text and RTF info, using an RTF ArrayList. 
            </summary>
            <param name="aValue">Cell Text</param>
            <param name="RTFRuns">ArrayList with RTFRuns.</param>
            <param name="aFontList">List of fonts.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.FromHtml(System.String,FlexCel.Core.TFlxFormat,FlexCel.Core.ExcelFile)">
            <summary>
            Returns a new TRichString from an HTML text. Note that only some tags from
            HTML are converted, the ones that do not have correspondence on Excel rich text 
            will be discarded.<b>Note: This method is for advanced
            uses only. Normally you would just use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)"/></b>
            </summary>
            <param name="HtmlString">Html string we want to convert.</param>
            <param name="aCellFormat">Original format of the cell where we want to enter the string. Note that depending on the starting cell, the Rich string will be different.
            For example, if you have a cell with Red text and add a "hello &lt;b&gt; world" string, then resulting
            RichString will include a RED bold "world" string</param>
            <param name="aWorkbook">File where this string will be added.</param>
            <returns>A TRichString containing the converted Html.</returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.RTFRun(System.Int32)">
            <summary>
            A run of RTF.
            </summary>
            <param name="index">Index on the list. 0-Based.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.GetFont(System.Int32)">
            <summary>
            Return the font for character i.
            </summary>
            <param name="i">index of the font.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToString">
            <summary>
            Returns the string without Rich text info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.
            </summary>
            <param name="index">Start of the substring (0 based)</param>
            <param name="count">Number of characters to copy.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.Substring(System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and ends at the end of the string.
            </summary>
            <param name="index">Start of the substring (0 based)</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.op_Addition(FlexCel.Core.TRichString,FlexCel.Core.TRichString)">
            <summary>
            Concatenates two TRichString objects. Be careful that formats will be preserved from s1 to s2.
            If s1 ends up in red, s2 will start with red too. If you want to avoid this, make sure s2
            has a font definition at character 0. ALSO, MAKE SURE YOU ARE CONCATENATING RICH STRINGS FROM THE SAME WORKBOOK, SO FONT INDEXES ARE SIMILAR.
            </summary>
            <param name="s1">First string to concatenate.</param>
            <param name="s2">Second string to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.Add(FlexCel.Core.TRichString)">
            <summary>
            Adds two richstrings together. If using C#, you can just use the overloaded "+" operator to contactenate rich strings.
            </summary>
            <param name="s1"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.op_Equality(FlexCel.Core.TRichString,FlexCel.Core.TRichString)">
            <summary>
            Returns true if both RichStrings are equal.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.op_Inequality(FlexCel.Core.TRichString,FlexCel.Core.TRichString)">
            <summary>
            Returns true if both RichStrings do not have the same value.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.Trim">
            <summary>
            Trims all the whitespace at the beginning and end of the string.
            </summary>
            <returns>The trimmed string.</returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.RightTrim">
            <summary>
            Trims all the whitespace at the end of the string.
            </summary>
            <returns>The trimmed string.</returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.Replace(System.String,System.String)">
            <summary>
            Replaces all oldValue strings with newValue strings inside the RichString. (case sensitive) 
            </summary>
            <seealso cref="M:System.String.Replace(System.String,System.String)"/>
            <param name="oldValue">String to replace.</param>
            <param name="newValue">String that will replace oldValue</param>
            <returns>A new TRichString with all oldValues replaced with newValues.</returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Replaces all oldValue strings with newValue strings inside the RichString. 
            </summary>
            <seealso cref="M:System.String.Replace(System.String,System.String)"/>
            <param name="oldValue">String to replace.</param>
            <param name="newValue">String that will replace oldValue</param>
            <param name="CaseInsensitive">If true, it will not take car of case for the search.</param>
            <returns>A new TRichString with all oldValues replaced with newValues.</returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.SetFromHtml(System.String,FlexCel.Core.TFlxFormat,FlexCel.Core.ExcelFile)">
            <summary>
            Sets the rich string content from an HTML Formatted string. <b>Note: This method is for advanced
            uses only. Normally you would just use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)"/></b>
            </summary>
            <param name="HtmlString">String with the HTML data.</param>
            <param name="aCellFormat">Initial format of the cell where we want to enter the html string.</param>
            <param name="aWorkbook">ExcelFile where the cell is.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToHtml(FlexCel.Core.ExcelFile,FlexCel.Core.TFlxFormat,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)">
            <summary>
            Returns the rich string content as an HTML Formatted string. <b>Note: This method is for advanced
            uses only. Normally you would just use <see cref="M:FlexCel.Core.ExcelFile.GetHtmlFromCell(System.Int32,System.Int32,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)"/></b>
            </summary>
            <param name="aCellFormat">Format of the cell where this string is.</param>
            <param name="aWorkbook">ExcelFile where the cell is.</param>
            <returns>The string formatted as an HTML string.</returns>
            <param name="htmlStyle">Specifies whether to use CSS or not.</param>
            <param name="htmlVersion">Version of the html returned. In XHTML, single tags have a "/" at the end, while in 4.0 they don't.</param>
            <param name="aEncoding">Encoder used to return the string. Use UTF-8 for notmal cases.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToHtml(FlexCel.Core.ExcelFile,FlexCel.Core.TFlxFormat,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding,FlexCel.Core.IHtmlFontEvent)">
            <summary>
            Returns the rich string content as an HTML Formatted string. <b>Note: This method is for advanced
            uses only. Normally you would just use <see cref="M:FlexCel.Core.ExcelFile.GetHtmlFromCell(System.Int32,System.Int32,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)"/></b>
            </summary>
            <param name="aCellFormat">Format of the cell where this string is.</param>
            <param name="aWorkbook">ExcelFile where the cell is.</param>
            <returns>The string formatted as an HTML string.</returns>
            <param name="htmlStyle">Specifies whether to use CSS or not.</param>
            <param name="htmlVersion">Version of the html returned. In XHTML, single tags have a "/" at the end, while in 4.0 they don't.</param>
            <param name="aEncoding">Encoder used to return the string. Use UTF-8 for notmal cases.</param>
            <param name="OnHtmlFont">Provide this parameter to customize what to do when different fonts are found in the string.</param>
        </member>
        <member name="M:FlexCel.Core.TRichString.Clone">
            <summary>
            Returns a Deep copy of the Rich string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToUInt64(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToSByte(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToDouble(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToDateTime(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToSingle(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToBoolean(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToInt32(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToUInt16(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToInt16(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToString(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToByte(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToChar(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToInt64(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToDecimal(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.GetTypeCode">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToType(System.Type,System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.ToUInt32(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TRichString.Equals(System.Object)">
            <summary>
            Returns true when both richstrings are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRichString.GetHashCode">
            <summary>
            Hashcode for this richstring.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TRichString.Value">
            <summary>
            Text of the string without formatting. Might be null.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TRichString.RTFRunCount">
            <summary>
            Number of RTF runs.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TRichString.MaxFontIndex">
            <summary>
            The count of Fonts on the richstring.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TRichString.Item(System.Int32)">
            <summary>
            Returns the character at position index.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TRichString.Length">
            <summary>
            Length of the RichString.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRTFRun">
            <summary>
            One RTF run for the text in a cell. FirstChar is the first (base 0) character to apply the format, and FontIndex is the font index for the text
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRTFRun.FirstChar">
            <summary>
            First character on the string where we will apply the font. (0 based)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TRTFRun.FontIndex">
            <summary>
            Font index for this string part.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TRTFRun.ToByteArray(FlexCel.Core.TRTFRun[])">
            <summary>
            Converts a TRTFRun array into a byte array for serialization.
            </summary>
            <param name="runs">TRTFRun array</param>
            <returns>Serialized byte array</returns>
        </member>
        <member name="M:FlexCel.Core.TRTFRun.ToRTFRunArray(System.Byte[])">
            <summary>
            Converts a byte array into a TRTFRun array for serialization.
            </summary>
            <param name="runs">Serialized byte array</param>
            <returns>TRTFRun array</returns>
        </member>
        <member name="M:FlexCel.Core.TRTFRun.Equals(System.Object)">
            <summary>
            Determines whether two TRTFRun instances are equal.
            </summary>
            <param name="obj">The Object to compare with the current TRTFRun.</param>
            <returns>true if the specified Object is equal to the current TRTFRun; otherwise, false.</returns>
        </member>
        <member name="M:FlexCel.Core.TRTFRun.op_Equality(FlexCel.Core.TRTFRun,FlexCel.Core.TRTFRun)">
            <summary>
            Determines whether two TRTFRun instances are equal. To be considered equal, they must have the same text <b>and</b>
            the same formatting. That is, fontindex and firstchar must be equal.
            </summary>
            <remarks>Note that 2 TRTFRuns of different files might be equal but refer to different formatting, because 
            FontIndex might point to different fonts.</remarks>
            <param name="b1">First TRTFRun instance to compare.</param>
            <param name="b2">Second TRTFRun instance to compare.</param>
            <returns>true if both objects have the same text and the same formatting.</returns>
        </member>
        <member name="M:FlexCel.Core.TRTFRun.op_Inequality(FlexCel.Core.TRTFRun,FlexCel.Core.TRTFRun)">
            <summary>
            Determines whether two TRTFRun instances are different. To be considered equal, they must have the same text <b>and</b>
            the same formatting. That is, fontindex and firstchar must be equal.
            </summary>
            <remarks>Note that 2 TRTFRuns of different files might be equal but refer to different formatting, because 
            FontIndex might point to different fonts.</remarks>
            <param name="b1">First TRTFRun instance to compare.</param>
            <param name="b2">Second TRTFRun instance to compare.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TRTFRun.GetHashCode">
            <summary>
            Gets a hashcode for the TRTFRun instance.
            </summary>
            <returns>hashcode.</returns>
        </member>
        <member name="T:FlexCel.Core.TXlsSheetVisible">
            <summary>
            Sheet visibility.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TXlsSheetVisible.Hidden">
            <summary>Sheet is hidden, can be shown by the user with excel.</summary>
        </member>
        <member name="F:FlexCel.Core.TXlsSheetVisible.VeryHidden">
            <summary>Sheet is hidden, only way to show it is with a macro. (user can't see it with excel)</summary>
        </member>
        <member name="F:FlexCel.Core.TXlsSheetVisible.Visible">
            <summary>Sheet is visible to the user.</summary>
        </member>
        <member name="T:FlexCel.Core.FlxConvert">
            <summary>
            Convert converting nulls to String.Empty.
            </summary>
        </member>
        <member name="M:FlexCel.Core.FlxConvert.ToString(System.Object)">
            <summary>
            Converts a string, if null to String.Empty.
            </summary>
            <param name="v">Object to convert.</param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Core.TExcelVersion">
            <summary>
            Defines which Excel version FlexCel is targeting. Note that while on v2007 you still can make xls 97 spreadsheets.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelVersion.v97_2003">
            <summary>
            Versions from Excel 97 to Excel 2003. Those versions have a grid limited by 65536 rows x 255 columns.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelVersion.v2007">
            <summary>
            Excel 2007 and up. This version has a grid of 1048576 rows x 16384 columns.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlxConsts">
            <summary>
            Utility methods and constants usable anywhere.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Columns97_2003">
            <summary>
            Maximum column on an xls (Excel 97 - 2003) spreadsheet. (0 based, that is 255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Columns2007">
            <summary>
            Maximum column on an xlsx (Excel 2007 and up) spreadsheet. (0 based, that is 16383)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Rows97_2003">
            <summary>
            Maximum row on an xls (Excel 97 - 2003) spreadsheet. (0 based, that is 65535)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Rows2007">
            <summary>
            Maximum row on an xlsx (Excel 2007 and up) spreadsheet. (0 based, that is 1048575)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_Sheets">
            <summary>
            Maximum sheet on a spreadsheet. (0 based, that is 65530)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_PxlColumns">
            <summary>
            Maximum column on Pocket Excel a spreadsheet. (0 based, that is 255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_PxlRows">
            <summary>
            Maximum row on a Pocket Excel spreadsheet. (0 based, that is 16383)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.Max_PxlSheets">
            <summary>
            Maximum sheet on a Pocket Excel spreadsheet. (0 based, that is 255)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultBrightness">
            <summary>
            Brightness to keep the image unchanged.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultContrast">
            <summary>
            Contrast to keep the image unchanged.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultGamma">
            <summary>
            Gamma to keep the image unchanged.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefaultRotation">
            <summary>
            Zero rotation.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.NoTransparentColor">
            <summary>
            Constant meaning there is no transparent color defined on the image.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ObjectPathSeparator">
            <summary>
            String used to separate 2 objects on an object path.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.DefColWidthAdapt">
            <summary>
            OBSOLETE: Use <see cref="M:FlexCel.Core.ExcelMetrics.DefColWidthAdapt(System.Int32,FlexCel.Core.ExcelFile)"/> instead.
            Multiply by this number to convert the DEFAULT column width to pixels. This is different from <see cref="F:FlexCel.Core.FlxConsts.ColMult"/>, that goes in a column by column basis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ExcelVersion">
            <summary>
            Defines the Excel mode used in this thread.
            Note that while on v2007 (the default) you still can make xls 97 spreadsheets, so the only reason to change this setting
            is if you have any compatibility issues (for example your code depends on a sheet having 65536 rows).
            IMPORTANT: Do NOT change this value after reading a workbook. Also, remember that the value is kept for all the reports of the thread.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ColMult">
            <summary>
            OBSOLETE: Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)"/> instead.
            Multiply by this number to convert the width of a column from pixels to excel internal units. 
            Note that the default column width is different, you need to multiply by <see cref="F:FlexCel.Core.FlxConsts.DefColWidthAdapt"/>
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.RowMult">
            <summary>
            Multiply by this number to convert pixels to excel row height units.
            </summary>
            <remarks>
            1 Height unit= 1/20 pt. 1pt=1/72 inch.  At 96ppi, 1 Height Unit= 96/(72*20)pixels -> 1 pix=(72*20)/96 = 15 Height units. 
            </remarks>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.ColMultDisplay">
            <summary>
            OBSOLETE: Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMultDisplay(FlexCel.Core.ExcelFile)"/> instead.
            Multiply by this number to convert the width of a column from GraphicsUnit.Display units (1/100 inch) 
            to Excel internal units. Note that the default column width is different, you need to multiply by <see cref="F:FlexCel.Core.FlxConsts.DefColWidthAdapt"/>
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxConsts.RowMultDisplay">
            <summary>
            OBSOLETE: Use <see cref="M:FlexCel.Core.ExcelMetrics.RowMultDisplay(FlexCel.Core.ExcelFile)"/> instead.
            Multiply by this number to convert the height of a row from GraphicsUnit.Display units (1/100 inch) 
            to Excel internal units.
            </summary>
            <remarks>
            1 Height unit=1/20 pt. 1pt=1/72 inch. -&gt; 1 Height unit=1/(72*20) inch. -&gt; 1inch/100= 72*20/100= 14.4
            </remarks>
        </member>
        <member name="M:FlexCel.Core.FlxConsts.StripOLEHeader(System.Byte[])">
            <summary>
            Access stores images encapsulated on an OLE container. This function will load an OLE image and
            try to return the raw image data.
            </summary>
            <remarks>See Ms kb Q175261</remarks>
            <param name="data">Image in OLE format.</param>
            <returns>Image on raw format.</returns>
        </member>
        <member name="M:FlexCel.Core.FlxConsts.GetImageType(System.Byte[],System.Int32)">
            <summary>
            Returns the image type for a byte array.
            </summary>
            <param name="data">Array with the image.</param>
            <param name="position">Position on data where the image begins.</param>
            <returns>Image type</returns>
        </member>
        <member name="M:FlexCel.Core.FlxConsts.GetImageType(System.Byte[])">
            <summary>
            Returns the image type for a byte array.
            </summary>
            <param name="data">Array with the image.</param>
            <returns>Image type</returns>
        </member>
        <member name="M:FlexCel.Core.FlxConsts.EncodeColumn(System.Int32)">
            <summary>
            Returns "A" for column 1, "B"  for 2 and so on.
            </summary>
            <param name="C">Index of the column, 1 based.</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_Columns">
            <summary>
            Maximum column in the spreadsheet. (0 based). This number might be 255 if <see cref="F:FlexCel.Core.FlxConsts.ExcelVersion"/> is TExcelVersion.v97_2003 or 16383 otherwise.
            </summary>
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_Rows">
            <summary>
            Maximum row in the spreadsheet. (0 based). This number might be 65535 if <see cref="F:FlexCel.Core.FlxConsts.ExcelVersion"/> is TExcelVersion.v97_2003 or 1048575 otherwise.
            </summary>
        </member>
        <member name="P:FlexCel.Core.FlxConsts.Max_LettersInColumnName">
            <summary>
            Number of letters in a column name. This is 2 in xls97 (columns go up to IV) and 3 in xls2007 (columns go up to XFD)
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlxParam">
            <summary>
            Parameter names that can go into an "invalid params" error message.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ActiveSheet">
            <summary>ActiveSheet</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SheetFrom">
            <summary>SheetFrom</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SheetDest">
            <summary>SheetDest</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SheetCount">
            <summary>SheetCount</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.CellMergedIndex">
            <summary>CellMergedIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.NamedRangeIndex">
            <summary>NamedRangeIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ImageIndex">
            <summary>ImageIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ObjectIndex">
            <summary>ObjectIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.CommentIndex">
            <summary>CommentIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SourceSheet">
            <summary>SourceSheet</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.HyperLinkIndex">
            <summary>HyperLinkIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.OutlineLevel">
            <summary>OutlineLevel</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.IgnoreCase">
            <summary>IgnoreCase</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.AutoShapeIndex">
            <summary>AutoShapeIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ChartIndex">
            <summary>ChartIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.SeriesIndex">
            <summary>SeriesIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.ConditionalFormatIndex">
            <summary>ConditionalFormatIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.PercentOfUsedSheet">
            <summary>PercentOfUsedSheet</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.Level">
            <summary>Level</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.PageScale">
            <summary>PageScale</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.DataValidationIndex">
            <summary>DataValidationIndex</summary>
        </member>
        <member name="F:FlexCel.Core.FlxParam.FormatIndex">
            <summary>DataValidationIndex</summary>
        </member>
        <member name="T:FlexCel.Core.TSheetType">
            <summary>
            Sheet types
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetType.Worksheet">
            <summary>
            Normal WorkSheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetType.Chart">
            <summary>
            Chart Sheet
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSheetType.Other">
            <summary>
            A 4.0 Macro sheet, or whatever is not a chart or a worksheet
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFileFormats">
            <summary>
            Supported file formats to read and write files.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.None">
            <summary>
            File will not be saved/opened.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Xls">
            <summary>
            Xls 97-2000-XP-2003
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Text">
            <summary>
            Delimiter separated values. Depending on the delimiter, this can be csv, tab delimited text, etc.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Pxl">
            <summary>
            Pocket Excel 1.0 or 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFileFormats.Automatic">
            <summary>
            Automatically detect the type of the file (only valid for opening files)
            </summary>
        </member>
        <member name="T:FlexCel.Core.ColumnImportType">
            <summary>
            Handles how to convert a column from text when importing a text file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ColumnImportType.General">
            <summary>
            Try to convert it to a number, a date, etc.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ColumnImportType.Text">
            <summary>
            Keep the column as text, even if it can be converted to a number or other things.
            </summary>
        </member>
        <member name="F:FlexCel.Core.ColumnImportType.Skip">
            <summary>
            Do not import this column.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPrintOptions">
            <summary>
            How the sheet should be printed. You can mix value together by and'ing and or'ing the flags. 
            See the example to see how to set or clear one specific value of the enumeration.
            </summary>
            <example>
            Here we will show how to set the page orientation to landscape or portrait.
            <br/>
            <code>
            if (Landscape)  
                Xls.PrintOptions &amp;= ~(TPrintOptions.Orientation | TPrintOptions.NoPls); 
            else
            {
                //ALWAYS SET NOPLS TO 0 BEFORE CHANGING THE OTHER OPTIONS.
                Xls.PrintOptions &amp;= ~ TPrintOptions.NoPls; 
                Xls.PrintOptions |= TPrintOptions.Orientation; 
            }
            </code>
            <br/>
            <code lang = "vbnet">
             If Landscape Then
            	Xls.PrintOptions = Xls.PrintOptions And (Not (TPrintOptions.Orientation Or TPrintOptions.NoPls))
             Else
            	'ALWAYS SET NOPLS TO 0 BEFORE CHANGING THE OTHER OPTIONS.
            	Xls.PrintOptions = Xls.PrintOptions And (Not TPrintOptions.NoPls)
            	Xls.PrintOptions = Xls.PrintOptions Or (TPrintOptions.Orientation)
             End If
            </code>
            <br/>
            <code lang = "Delphi .NET" title = "Delphi .NET">
            if Landscape then
            begin
               Xls.PrintOptions := TPrintOptions(integer(Xls.PrintOptions) and (not (integer(TPrintOptions.Orientation) or integer(TPrintOptions.NoPls)));
            end
            else
            begin
               //ALWAYS SET NOPLS TO 0 BEFORE CHANGING THE OTHER OPTIONS.
               Xls.PrintOptions := TPrintOptions(integer(Xls.PrintOptions) and (not integer(TPrintOptions.NoPls)));
               Xls.PrintOptions := TPrintOptions(integer(Xls.PrintOptions) or integer(TPrintOptions.Orientation));
             end;
            </code>
            </example>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.None">
            <summary>
            All options cleared.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.LeftToRight">
            <summary>
            Print over, then down
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.Orientation">
            <summary>
            0= landscape, 1=portrait
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.NoPls">
            <summary>
            if 1, then PaperSize, Scale, Res, VRes, Copies, and Landscape data have not been obtained from the printer, so they are not valid.
            MAKE SURE YOU MAKE THIS BIT = 0 *BEFORE* CHANGING ANY OTHER OPTION. THEY WILL NOT CHANGE IF THIS IS NOT SET.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.NoColor">
            <summary>
            1= Black and white
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.Draft">
            <summary>
            1= Draft quality
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.Notes">
            <summary>
            1= Print Notes
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.NoOrient">
            <summary>
            1=orientation not set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPrintOptions.UsePage">
            <summary>
            1=use custom starting page number.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCellAddress">
            <summary>
            Small class that can convert between a string reference ("A1") into row and col integers (1,1).
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.#ctor">
            <summary>
            Creates Cell Address pointing to A1.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates Cell Address pointing to (aRow, aCol).
            </summary>
            <param name="aRow">Row index of the reference (1-based).</param>
            <param name="aCol">Column index of the reference (1-based).</param>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates Cell Address pointing to (aRow, aCol) with the corresponding absolute values.
            </summary>
            <param name="aRow">Row index of the reference (1-based).</param>
            <param name="aCol">Column index of the reference (1-based).</param>
            <param name="aRowAbsolute">If true row will be an absolute reference. (As in A$5).</param>
            <param name="aColAbsolute">If true col will be an absolute reference. (As in $A5).</param>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates Cell Address pointing to (aRow, aCol) with the corresponding absolute values.
            </summary>
            <param name="aSheet">Sheet name of the reference.</param>
            <param name="aRow">Row index of the reference (1-based).</param>
            <param name="aCol">Column index of the reference (1-based).</param>
            <param name="aRowAbsolute">If true row will be an absolute reference. (As in A$5).</param>
            <param name="aColAbsolute">If true col will be an absolute reference. (As in $A5).</param>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.#ctor(System.String)">
             <summary>
             Creates a Cell Address pointing to (aCellRef).
             </summary>
             <param name="aCellRef">
             String containing the cell address in Excel notation (for example "A5").
             Absolute references ($A$5) work too.
            </param>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.Clone">
            <summary>
            Returns a deep copy of the cell address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.QuoteSheet(System.String)">
            <summary>
            Quotes a sheet name if it is needed. For example, Sheet 1 should be quoted as 'Sheet 1'
            </summary>
            <param name="SheetName">Sheet to quote</param>
            <returns>Quoted sheet.</returns>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.TrySetCellRef(System.String)">
            <summary>
            Tries to set a cell reference, and returns true if the cell is a correct reference. This is similar to setting <see cref="P:FlexCel.Core.TCellAddress.CellRef"/> to a 
            string, but it will not raise an exception.
            </summary>
            <param name="value">String with the cell reference.</param>
            <returns>True if value was a correct cell reference, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.TryParseUnquotedSheet(FlexCel.Core.ExcelFile,System.String,FlexCel.Core.ExcelFile@,System.Int32@,System.Int32@)">
            <summary>
            Returns both sheets from a string. If the string has only one sheet, sheet1==sheet2.
            Note that this routine uses real names and not quoted ones. for example, the string "sheet'1" but not "'sheet''1'"
            </summary>
            <param name="sheetAndFileName">Expression with a sheet name or a sheet range. Might be for example "Sheet1", "Sheet 1" or "Sheet1:Sheet2"</param>
            <param name="LocalXls">XlsFile where the sheets are located.</param>
            <param name="sheet1">First sheet of the range.</param>
            <param name="sheet2">Second sheet of the range. If there is no second sheet, this value is equal to sheet1.</param>
            <param name="Xls">Excel file.</param>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.ParseAddress(FlexCel.Core.ExcelFile,System.String,System.Int32,FlexCel.Core.ExcelFile@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Parses an string with an address. Quotes are allowed here.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCellAddress.TryParseAddress(FlexCel.Core.ExcelFile,System.String,System.Int32,FlexCel.Core.ExcelFile@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Parses an string with an address. Quotes are allowed here.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCellAddress.Sheet">
            <summary>
            Sheet name of the reference.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCellAddress.Row">
            <summary>
            Row index for this reference (1-based).
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCellAddress.Col">
            <summary>
            Column index for this reference (1-based).
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCellAddress.RowAbsolute">
            <summary>
            True if the row is an absolute reference (as in A$5)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCellAddress.ColAbsolute">
            <summary>
            True if the column is an absolute reference (as in $A5)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCellAddress.CellRef">
            <summary>
            Cell address in Excel notation. (For example "A5").
            Absolute references ($A$5) will work too.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlexCelDataFormats">
            <summary>
            Excel formats to copy/paste to/from the clipboard
            </summary>
        </member>
        <member name="P:FlexCel.Core.FlexCelDataFormats.Excel97">
            <summary>
            Native Excel Format.
            </summary>
        </member>
        <member name="T:FlexCel.Core.InternalNameRange">
            <summary>
            List of internal range names.
            On Excel, internal range names like "Print_Range" are stored as a 1 character string.
            This is the list of the names and their value.
            You can convert an InternalNameRange into a string by casting it to a char, or by calling <see cref="M:FlexCel.Core.TXlsNamedRange.GetInternalName(FlexCel.Core.InternalNameRange)"/><br>See the example.</br>
            </summary>
            <example>
            To get the print range on the ActiveSheet, use:
            <code>
            xlsFile.GetNamedRange(TXlsNamedRange.GetInternalName(InternalNameRange.Print_Area), xlsFile.ActiveSheet);
            </code>
            </example>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Consolidate_Area">
            <summary>Consolidate_Area  </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Auto_Open">
            <summary>Auto_Open         </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Auto_Close">
            <summary>Auto_Close        </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Extract">
            <summary>Extract           </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Database">
            <summary>Database          </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Criteria">
            <summary>Criteria          </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Print_Area">
            <summary>Print_Area        </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Print_Titles">
            <summary>Print_Titles      </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Recorder">
            <summary>Recorder          </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Data_Form">
            <summary>Data_Form         </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Auto_Activate">
            <summary>Auto_Activate     </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Auto_Deactivate">
            <summary>Auto_Deactivate   </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Sheet_Title">
            <summary>Sheet_Title       </summary>
        </member>
        <member name="F:FlexCel.Core.InternalNameRange.Filter_DataBase">
            <summary>Used in AutoFilters. </summary>
        </member>
        <member name="T:FlexCel.Core.TPrinterDriverSettings">
            <summary>
            Printer specific settings. It is a byte array with a Win32 DEVMODE struct.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of a TPrinterDriverSettings class, with a COPY of aData
            </summary>
            <param name="aData"></param>
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.GetData">
            <summary>
            The current printer data as a byte stream. The first 2 bytes are the operating system (0=windows) and
            the rest is a Win32 DEVMODE struct.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.Equals(System.Object)">
            <summary>
            Returns true if two instances have the same data.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.op_Equality(FlexCel.Core.TPrinterDriverSettings,FlexCel.Core.TPrinterDriverSettings)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TPrinterDriverSettings.op_Inequality(FlexCel.Core.TPrinterDriverSettings,FlexCel.Core.TPrinterDriverSettings)">
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Core.TPaperSize">
            <summary>
            Pre-defined Page sizes. For Printer specific page-sizes, see <see cref="T:FlexCel.Core.TPrinterDriverSettings"/>
            Note that a printer specific page size might have a value that is <i>not</i> on this enumeration.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Undefined">
            <summary>Not defined.</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Letter">
            <summary>Letter - 81/2"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Lettersmall">
            <summary>Letter small - 81/2"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Tabloid">
            <summary>Tabloid - 11"" x 17""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Ledger">
            <summary>Ledger - 17"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Legal">
            <summary>Legal - 81/2"" x 14""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Statement">
            <summary>Statement - 51/2"" x 81/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Executive">
            <summary>Executive - 71/4"" x 101/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3">
            <summary>A3 - 297mm x 420mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4">
            <summary>A4 - 210mm x 297mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4small">
            <summary>A4 small - 210mm x 297mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A5">
            <summary>A5 - 148mm x 210mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B4_JIS">
            <summary>B4 (JIS) - 257mm x 364mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_JIS">
            <summary>B5 (JIS) - 182mm x 257mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Folio">
            <summary>Folio - 81/2"" x 13""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Quarto">
            <summary>Quarto - 215mm x 275mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s10x14">
            <summary>10x14 - 10"" x 14""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s11x17">
            <summary>11x17 - 11"" x 17""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Note">
            <summary>Note - 81/2"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope9">
            <summary>Envelope #9 - 37/8"" x 87/8""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope10">
            <summary>Envelope #10 - 41/8"" x 91/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope11">
            <summary>Envelope #11 - 41/2"" x 103/8""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope12">
            <summary>Envelope #12 - 43/4"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.Envelope14">
            <summary>Envelope #14 - 5"" x 111/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.C">
            <summary>C - 17"" x 22""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.D">
            <summary>D - 22"" x 34""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.E">
            <summary>E - 34"" x 44""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeDL">
            <summary>Envelope DL - 110mm x 220mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC5">
            <summary>Envelope C5 - 162mm x 229mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC3">
            <summary>Envelope C3 - 324mm x 458mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC4">
            <summary>Envelope C4 - 229mm x 324mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC6">
            <summary>Envelope C6 - 114mm x 162mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeC6_C5">
            <summary>Envelope C6/C5 - 114mm x 229mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B4_ISO">
            <summary>B4 (ISO) - 250mm x 353mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_ISO">
            <summary>B5 (ISO) - 176mm x 250mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B6_ISO">
            <summary>B6 (ISO) - 125mm x 176mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeItaly">
            <summary>Envelope Italy - 110mm x 230mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeMonarch">
            <summary>Envelope Monarch - 37/8"" x 71/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s63_4Envelope">
            <summary>63/4 Envelope - 35/8"" x 61/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.USStandardFanfold">
            <summary>US Standard Fanfold - 147/8"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.GermanStdFanfold">
            <summary>German Std. Fanfold - 81/2"" x 12""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.GermanLegalFanfold">
            <summary>German Legal Fanfold - 81/2"" x 13""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B4_ISO_2">
            <summary>B4 (ISO) - 250mm x 353mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.JapanesePostcard">
            <summary>Japanese Postcard - 100mm x 148mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s9x11">
            <summary>9x11 - 9"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s10x11">
            <summary>10x11 - 10"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s15x11">
            <summary>15x11 - 15"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.EnvelopeInvite">
            <summary>Envelope Invite - 220mm x 220mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterExtra">
            <summary>Letter Extra - 91/2"" x 12""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LegalExtra">
            <summary>Legal Extra - 91/2"" x 15""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.TabloidExtra">
            <summary>Tabloid Extra - 1111/16"" x 18""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4Extra">
            <summary>A4 Extra - 235mm x 322mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterTransverse">
            <summary>Letter Transverse - 81/2"" x 11""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4Transverse">
            <summary>A4 Transverse - 210mm x 297mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterExtraTransv">
            <summary>Letter Extra Transv. - 91/2"" x 12""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.SuperA_A4">
            <summary>Super A/A4 - 227mm x 356mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.SuperB_A3">
            <summary>Super B/A3 - 305mm x 487mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterPlus">
            <summary>Letter Plus - 812"" x 1211/16""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4Plus">
            <summary>A4 Plus - 210mm x 330mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A5Transverse">
            <summary>A5 Transverse - 148mm x 210mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_JIS_Transverse">
            <summary>B5 (JIS) Transverse - 182mm x 257mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3Extra">
            <summary>A3 Extra - 322mm x 445mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A5Extra">
            <summary>A5 Extra - 174mm x 235mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_ISO_Extra">
            <summary>B5 (ISO) Extra - 201mm x 276mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A2">
            <summary>A2 - 420mm x 594mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3Transverse">
            <summary>A3 Transverse - 297mm x 420mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3ExtraTransverse">
            <summary>A3 Extra Transverse - 322mm x 445mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.DblJapanesePostcard">
            <summary>Dbl. Japanese Postcard - 200mm x 148mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A6">
            <summary>A6 - 105mm x 148mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.LetterRotated">
            <summary>Letter Rotated - 11"" x 81/2""</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A3Rotated">
            <summary>A3 Rotated - 420mm x 297mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A4Rotated">
            <summary>A4 Rotated - 297mm x 210mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A5Rotated">
            <summary>A5 Rotated - 210mm x 148mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B4_JIS_Rotated">
            <summary>B4 (JIS) Rotated - 364mm x 257mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B5_JIS_Rotated">
            <summary>B5 (JIS) Rotated - 257mm x 182mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.JapanesePostcardRot">
            <summary>Japanese Postcard Rot. - 148mm x 100mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.DblJapPostcardRot">
            <summary>Dbl. Jap. Postcard Rot. - 148mm x 200mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.A6Rotated">
            <summary>A6 Rotated - 148mm x 105mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B6_JIS">
            <summary>B6 (JIS) - 128mm x 182mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.B6_JIS_Rotated">
            <summary>B6 (JIS) Rotated - 182mm x 128mm</summary>
        </member>
        <member name="F:FlexCel.Core.TPaperSize.s12x11">
            <summary>12x11 - 12"" x 11""</summary>
        </member>
        <member name="T:FlexCel.Core.TPaperDimensions">
            <summary>
            Dimensions of an Excel paper
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPaperDimensions.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Creates a new TPaperDimensions instance.
            </summary>
            <param name="aPaperName">A string identifying the paper name</param>
            <param name="aWidth">Width in inches/100</param>
            <param name="aHeight">Height in inches/100</param>
        </member>
        <member name="M:FlexCel.Core.TPaperDimensions.#ctor(FlexCel.Core.TPaperSize)">
            <summary>
            Creates a new TPaperDimensions instance.
            </summary>
            <param name="PaperSize">Excel standard papersize.</param>
        </member>
        <member name="M:FlexCel.Core.TPaperDimensions.mm(System.Single)">
            <summary>
            Converts millimeters to inches/100
            </summary>
            <param name="v">Value in millimeters</param>
            <returns>Value in inches/100</returns>
        </member>
        <member name="M:FlexCel.Core.TPaperDimensions.in100(System.Single)">
            <summary>
            Converts inches/100 to millimeters
            </summary>
            <param name="v">Value in inches/100</param>
            <returns>Value in millimeters</returns>
        </member>
        <member name="P:FlexCel.Core.TPaperDimensions.PaperName">
            <summary>
            Paper Name.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPaperDimensions.Width">
            <summary>
            Paper width in inches/100
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPaperDimensions.Height">
            <summary>
            Paper height in inches/100
            </summary>
        </member>
        <member name="T:FlexCel.Core.ExcelMetrics">
            <summary>
            Returns Information to convert between standard units and Excel units.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.GetFont0Width(FlexCel.Core.ExcelFile)">
            <summary>
            Returns the width of the 0 font on Excel. Normally this is 7, but can change depending on
            the file. The user might modify it by changing Format->Style->Normal.
            </summary>
            <param name="Workbook"></param>
            <returns></returns>
        </member>
        <member name="F:FlexCel.Core.ExcelMetrics.MissingFrameworkFont">
            <summary>
            No need for threadstatic.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.GetRowHeightInPixels(FlexCel.Core.TFlxFont)">
            <summary>
            Returns the Height of an XF format Excel. 
            </summary>
            <param name="Fx"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.FmlaMult(FlexCel.Core.ExcelFile)">
            <summary>
            When showing/printing the sheet and "Show formula" check box is on, column widths are double of the normal ones.
            This method returns 0.5 when "Show formulas" is turned on, and 1 if it is not.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.ColMultDisplay(FlexCel.Core.ExcelFile)">
            <summary>
            Multiply by this number to convert the width of a column from GraphicsUnit.Display units (1/100 inch) 
            to Excel internal units. Note that the default column width is different, you need to multiply by <see cref="M:FlexCel.Core.ExcelMetrics.DefColWidthAdapt(System.Int32,FlexCel.Core.ExcelFile)"/>
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.RowMultDisplay(FlexCel.Core.ExcelFile)">
            <summary>
            Multiply by this number to convert the height of a row from GraphicsUnit.Display units (1/100 inch) 
            to Excel internal units.
            </summary>
            <remarks>
            1 Height unit=1/20 pt. 1pt=1/72 inch. -> 1 Height unit=1/(72*20) inch. -> 1inch/100= 72*20/100= 14.4
            PrintPreview on Excel uses different coordinates than the screen.
            </remarks>
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)">
            <summary>
            Multiply by this number to convert the width of a column from pixels to excel internal units. 
            Note that the default column width is different, you need to multiply by <see cref="M:FlexCel.Core.ExcelMetrics.DefColWidthAdapt(System.Int32,FlexCel.Core.ExcelFile)"/>
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelMetrics.DefColWidthAdapt(System.Int32,FlexCel.Core.ExcelFile)">
            <summary>
            Convert the DEFAULT column width to pixels. This is different from <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)"/>, that goes in a column by column basis.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPoint">
            <summary>
            Represents a point on X,Y coordinates. We used instead of System.Drawing.Point because we do not want references to System.Drawing 
            (because .NET 3.0 applications do not need GDI+)
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new point.
            </summary>
            <param name="aX">Coordinates for the X value.</param>
            <param name="aY">Coordinates for the Y value.</param>
        </member>
        <member name="M:FlexCel.Core.TPoint.Equals(System.Object)">
            <summary>
            True if both objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TPoint.op_Equality(FlexCel.Core.TPoint,FlexCel.Core.TPoint)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TPoint.op_Inequality(FlexCel.Core.TPoint,FlexCel.Core.TPoint)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TPoint.GetHashCode">
            <summary>
            Hash code for the point.
            </summary>
            <returns>hashcode.</returns>
        </member>
        <member name="P:FlexCel.Core.TPoint.X">
            <summary>
            X coord.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPoint.Y">
            <summary>
            Y coord.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCompactFramework">
            <summary>
            Alternate implementations to Methods that do not exist on CF.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompactFramework.MissingFrameworkImageSave">
            <summary>
            No need for threadstatic.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompactFramework.MissingFrameworkImageFromStream">
            <summary>
            No need for threadstatic.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompactFramework.MissingFrameworkEnumValues">
            <summary>
            No need for threadstatic.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCompactFramework.EnumGetValues(System.Type)">
            <summary>
            A <see cref="M:System.Enum.GetValues(System.Type)"/> that works on CF
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompactFramework.MissingFrameworkMD5">
            <summary>
            No need for threadstatic.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCompactFramework.CFConvertToNumber(System.String,System.Double@,System.Globalization.CultureInfo)">
            <summary>
            Slower implementation to run on CF.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompactFramework.MissingFrameworkDoubleTryParse">
            <summary>
            No need for threadstatic.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCompactFramework.MissingFrameworkDisposeTables">
            <summary>
            No need for threadstatic.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCompactFramework.NewLine">
            <summary>
            A NewLine that works on CF.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRecordHeader">
            <summary>
            An Excel Record Header. It allows us to access it as an array or as a record
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TContinueRecord">
            <summary>
            This record continues another normal record
            A continue record can contain another continue record, that can contain another...
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TxxIgnoreRecord">
            <summary>
            This is a record we read from an xls file but that we don't want to save or include on the new spreadsheet.
            An example might be formula results, or any other record that we have to calculate again (So we don't care about the older value).
            Actually not needed (we can just use null)
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSubListRecord">
            <summary>
            //This is a "virtual" record used to save sublists of records to stream, in order
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRowRecord">
            <summary>
            Record with ROW attributes (like Height, XF of the row, etc)
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TRowRecord.#ctor">
            <summary>
            Create a Standard Row
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDimensionsRecord">
            <summary>
            Dimensions of the spreadsheet. This record has to be recreated when saving.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TDimensionsRecord.LastRow">
            <summary>
            Last defined row
            </summary>
            <returns>Last defined row+1</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.TDimensionsRecord.LastCol">
            <summary>
            Last defined column
            </summary>
            <returns>Last defined column+1</returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.TStringRecord">
            <summary>
            Formula result, when it is a string.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWindow1Record">
            <summary>
            Global window settings
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWindow2Record">
            <summary>
            Per-Sheet window settings
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSCLRecord">
            <summary>
            Window Zoom Magnification 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDefColWidthRecord">
            <summary>
            Default Width for Columns  
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TStandardWidthRecord">
            <summary>
            Standard column width, in increments of 1/256th of a character width 
            The STANDARDWIDTH record records the measurement from the Standard Width dialog box.  
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDefRowHeightRecord">
            <summary>
            The DEFAULTROWHEIGHT record specifies the height of all undefined rows on the sheet. The miyRw field contains the row height in units of 1/20th of a point. This record does not affect the row height of any rows that are explicitly defined.  
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPageHeaderFooterRecord">
            <summary>
            Print Header or Footer on Each Page
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPageHeaderRecord">
            <summary>
            Page Header
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPageFooterRecord">
            <summary>
            Page Footer
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPrintGridLinesRecord">
            <summary>
            Print Grid Lines
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TMarginRecord">
            <summary>
            Margins. There is one of this records for the left, one for the right...etc.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSetupRecord">
            <summary>
            Printer Setup
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPlsRecord">
            <summary>
            Printer driver information.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPrintHeadersRecord">
            <summary>
            Set this record to true to print row and column Headings.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPrintCenteredRecord">
            <summary>
            Set this record to true to center the sheet when printing.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWsBoolRecord">
            <summary>
            Additional Workspace Information 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TAutoFilterInfoRecord">
            <summary>
            AutoFilter Information 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCountryRecord">
            <summary>
            Country for the Excel version and Windows version. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCodePageRecord">
            <summary>
            Coodepage Record. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.T1904Record">
            <summary>
            1904 dates Record. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPrecisionRecord">
            <summary>
            Precision Record. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBookBoolRecord">
            <summary>
            Bookbool Record. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRefModeRecord">
            <summary>
            RefMode Record. 
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPropIdOffset">
            <summary>
            One property and its offset in the file.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TUnconvertedOlePropertyName">
            <summary>
            One property
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TUnconvertedString">
            <summary>
            Used to read the strings when we do not know the actual codepage.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TOle2Properties">
            <summary>
            Manages the properties of an OLE2 file.
            </summary>
        </member>
        <member name="T:FlexCel.Report.FlexCelReportProgressPhase">
            <summary>
            Phase of the report we are in.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.NotRunning">
            <summary>
            Report is inactive.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.ReadTemplate">
            <summary>
            Reading and parsing the template.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.OrganizeData">
            <summary>
            Organizing the data on the template.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.CopyStructure">
            <summary>
            Inserting the needed rows/ranges for the report.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.FillData">
            <summary>
            Replacing the tags with the new values.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.FinalCleanup">
            <summary>
            Fixing pagebreak or delete rows tags.
            </summary>
        </member>
        <member name="F:FlexCel.Report.FlexCelReportProgressPhase.Done">
            <summary>
            Report has finished.
            </summary>
        </member>
        <member name="T:FlexCel.Report.FlexCelReportProgress">
            <summary>
            Indicates how much of the report has been generated.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReportProgress.Phase">
            <summary>
            Phase of the report.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReportProgress.Counter">
            <summary>
            A meaningless counter that is increased from time to time. It is not possible to know what is the final count.
            </summary>
        </member>
        <member name="P:FlexCel.Report.FlexCelReportProgress.Sheet">
            <summary>
            The Sheet we are working on.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TSqlParametersType">
            <summary>
            How the parameters for Direct SQL queries are.
            Change it only if your database uses positional parameters and it is
            not ODBC or OLEDB.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TSqlParametersType.Automatic">
            <summary>
            FlexCel will try to guess the correct type.
            Currently it will return Positional for ODBC and OLEDB Parameters
            and Named for everything else.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TSqlParametersType.Named">
            <summary>
            Parameter is named. For example, "@param1" or ":Param2"
            </summary>
        </member>
        <member name="F:FlexCel.Report.TSqlParametersType.Positional">
            <summary>
            Name of parameter is not important, and we only care about position.
            For example "?"
            </summary>
        </member>
        <member name="T:FlexCel.Report.GenerateEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.BeforeGenerateWorkbook"/>, <see cref="E:FlexCel.Report.FlexCelReport.AfterGenerateWorkbook"/>, <see cref="E:FlexCel.Report.FlexCelReport.BeforeGenerateSheet"/> and <see cref="E:FlexCel.Report.FlexCelReport.AfterGenerateSheet"/>
            </summary>
        </member>
        <member name="M:FlexCel.Report.GenerateEventArgs.#ctor(FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aExcelFile">The file we are processing.</param>
        </member>
        <member name="P:FlexCel.Report.GenerateEventArgs.File">
            <summary>
            The file with the report data.
            </summary>
        </member>
        <member name="T:FlexCel.Report.GenerateEventHandler">
            <summary>
            Generic delegate for After/Before generate events.
            </summary>
        </member>
        <member name="T:FlexCel.Report.GetImageDataEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.GetImageData"/>"/&gt;
            </summary>
        </member>
        <member name="M:FlexCel.Report.GetImageDataEventArgs.#ctor(FlexCel.Core.ExcelFile,System.String,System.Byte[],System.Double,System.Double)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aExcelFile">The file we are processing.</param>
            <param name="aImageName">The name of the image on the Excel sheet. Use it to identify it.</param>
            <param name="aImageData">The image data.</param>
            <param name="aHeight">The height of the image in pixels. Change it to resize the image.</param>
            <param name="aWidth">The width of the image in pixels. Change it to resize the image.</param>
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.File">
            <summary>
            The file with the report data.
            </summary>
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.ImageName">
            <summary>
            The name of the image on the Excel sheet. Use it to identify it.
            </summary>
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.ImageData">
            <summary>
            The data of the image. You can modify it to return another image format.
            </summary>
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.Height">
            <summary>
            The height of the image in pixels. Change it to resize the image.
            </summary>
        </member>
        <member name="P:FlexCel.Report.GetImageDataEventArgs.Width">
            <summary>
            The width of the image in pixels. Change it to resize the image.
            </summary>
        </member>
        <member name="T:FlexCel.Report.GetImageDataEventHandler">
            <summary>
            Delegate for GetImageData event.
            </summary>
        </member>
        <member name="T:FlexCel.Report.GetIncludeEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.GetInclude"/>"/&gt;
            </summary>
        </member>
        <member name="M:FlexCel.Report.GetIncludeEventArgs.#ctor(FlexCel.Core.ExcelFile,System.String,System.Byte[])">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aExcelFile">The ExcelFile that has the report doing the include.</param>
            <param name="aFileName">File that we are trying to include.</param>
            <param name="aIncludeData">The included file as an array of bytes. If you return null, the file will be searched on disk.</param>
        </member>
        <member name="P:FlexCel.Report.GetIncludeEventArgs.File">
            <summary>
            The file with the report.
            </summary>
        </member>
        <member name="P:FlexCel.Report.GetIncludeEventArgs.FileName">
            <summary>
            File we are trying to include. you can modify it to point to other place. 
            If the including file is a real file (not an stream) and FileName is relative, it will be relative to the
            including file path.
            </summary>
        </member>
        <member name="P:FlexCel.Report.GetIncludeEventArgs.IncludeData">
            <summary>
            Here you can return the included file as an array of bytes.
            If you return null, the filename will be used to search for a file on the disk. 
            If the including file is a real file (not an stream) and FileName is relative, it will be relative to the
            including file path.
            </summary>
        </member>
        <member name="T:FlexCel.Report.GetIncludeEventHandler">
            <summary>
            Delegate for GetInclude event.
            </summary>
        </member>
        <member name="T:FlexCel.Report.UserTableEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Report.FlexCelReport.UserTable"/>"/&gt;
            </summary>
        </member>
        <member name="M:FlexCel.Report.UserTableEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aTableName">The value written on the cell &quot;Table name&quot; on the config sheet. You can use it as an extra parameter.</param>
            <param name="aParameters">The parameters passed on the &lt;#User Table(parameters)&gt; tag.</param>
        </member>
        <member name="P:FlexCel.Report.UserTableEventArgs.TableName">
            <summary>
            The value written on the cell &quot;Table name&quot; on the config sheet. You can use it as an extra parameter.
            </summary>
        </member>
        <member name="P:FlexCel.Report.UserTableEventArgs.Parameters">
            <summary>
            The parameters on the &lt;#User Table(parameters)&gt; tag.
            </summary>
        </member>
        <member name="T:FlexCel.Report.UserTableEventHandler">
            <summary>
            Delegate for UserTable event.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TWaitingRange">
            <summary>
            Holds a generic range that will be inserted/deleted after a band has been replaced.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TWaitingRangeList">
            <summary>
            Holds all includes/delete row/columns that will be inserted.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TFormatRange">
            <summary>
            Holds an XF format for a range of cells.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TFormatRangeList">
            <summary>
            Holds a list of Format Ranges.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TErrorActions">
            <summary>
            Enumerates what to do on different FlexCel error situations.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TErrorActions.None">
            <summary>
            FlexCel will try to recover from most errors.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TErrorActions.ErrorOnTooManyPageBreaks">
            <summary>
            When true and the number of manual pagebreaks is bigger than the maximum Excel allows,
            an Exception will be raised. When false, the page break will be silently ommited.
            </summary>
        </member>
        <member name="P:FlexCel.Report.TImageSizeParams.AspectRatio">
            <summary>
            Negative aspect ratios mean height is preserved. Positives will preserve width.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfAllowedChanges">
            <summary>
            Changes allowed in a signed PDF document.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAllowedChanges.None">
            <summary>
            No changes to the document are permitted; any change to the document invalidates the signature.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAllowedChanges.FillingForms_PageTemplates_Signing">
            <summary>
            Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfAllowedChanges.FillingForms_PageTemplates_Signing_Annotations">
            <summary>
            Permitted are filling in forms, instantiating page templates, and signing, as well as annotation creation, deletion, and modification; other changes invalidate the signature
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfSignature">
            <summary>
            Describes a non visible signature for a PDF file. For a visible signature, use <see cref="T:FlexCel.Pdf.TPdfVisibleSignature"/>
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfSignature.#ctor(FlexCel.Pdf.TPdfSignerFactory,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an invisible signature. For a visible signature, create a <see cref="T:FlexCel.Pdf.TPdfVisibleSignature"/> class.
            </summary>
            <param name="aSignerFactory">See <see cref="P:FlexCel.Pdf.TPdfSignature.SignerFactory"/></param>
            <param name="aName">See <see cref="P:FlexCel.Pdf.TPdfSignature.Name"/></param>
            <param name="aReason">See <see cref="P:FlexCel.Pdf.TPdfSignature.Reason"/></param>
            <param name="aLocation">See <see cref="P:FlexCel.Pdf.TPdfSignature.Location"/></param>
            <param name="aContactInfo">See <see cref="P:FlexCel.Pdf.TPdfSignature.ContactInfo"/></param>
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.SignerFactory">
            <summary>
            Object that implements the actual signing.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.Name">
            <summary>
            Name to be given to the signature. This will be displayed in the "signatures" tab, and acrobat normally names it "Signature".
            It cannot be null.
            <b>Note:</b> Signature names cannot contain dots. An exception will be thrown if you try to enter a name with a dot here.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.Reason">
            <summary>
            The reason for the signing, such as "I agree...". Leave it null if you do not want to specify a reason.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.Location">
            <summary>
            The CPU host name or physical location of the signing. Leave it null for not specifying a location.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.ContactInfo">
            <summary>
            Information provided by the signer to enable a recipient to contact the signer to verify the signature; for example, a phone number.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.SignDate">
            <summary>
            Sign Date. Use DateTime.MinValue to use the current date.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfSignature.AllowedChanges">
            <summary>
            Specifies which changes are allowed in the signed pdf.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfVisibleSignature">
            <summary>
            Describes a visible signature in a PDF file. For an invisible signature, see <see cref="T:FlexCel.Pdf.TPdfSignature"/>.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfVisibleSignature.#ctor(FlexCel.Pdf.TPdfSignerFactory,System.String,System.String,System.String,System.String,System.Int32,System.Drawing.RectangleF,System.Byte[])">
            <summary>
            Creates a new visible signature for a PDF file.
            </summary>
            <param name="aSignerFactory">See <see cref="P:FlexCel.Pdf.TPdfSignature.SignerFactory"/></param>
            <param name="aName">See <see cref="P:FlexCel.Pdf.TPdfSignature.Name"/></param>
            <param name="aReason">See <see cref="P:FlexCel.Pdf.TPdfSignature.Reason"/></param>
            <param name="aLocation">See <see cref="P:FlexCel.Pdf.TPdfSignature.Location"/></param>
            <param name="aContactInfo">See <see cref="P:FlexCel.Pdf.TPdfSignature.ContactInfo"/></param>
            <param name="aPage">See <see cref="P:FlexCel.Pdf.TPdfVisibleSignature.Page"/></param>
            <param name="aRect">See <see cref="P:FlexCel.Pdf.TPdfVisibleSignature.Rect"/></param>
            <param name="aImageData">See <see cref="P:FlexCel.Pdf.TPdfVisibleSignature.ImageData"/></param>
        </member>
        <member name="P:FlexCel.Pdf.TPdfVisibleSignature.Page">
            <summary>
            Page where the signature will go. (1 based). Use 0 to place the signature at the last page.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfVisibleSignature.Rect">
            <summary>
            Rectangle where the signature will go in the page. It is measured in points (1/72 of an inch) from the left lower corner of the page.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfVisibleSignature.ImageData">
            <summary>
            The image that will be shown in the signature as an array of bytes.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfSigner">
            <summary>
            Represents an abstract class to create a pdf PKCS7 DER encoded signature.
            Descend from this class to create your own SignerFactory implementations.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is called each time new data is added to the pdf. When overwriting this method, use it to incrementally calculate the hash of the data.
            </summary>
            <param name="buffer">Data written to the pdf.</param>
            <param name="offset">Offset in buffer where to start writing data.</param>
            <param name="count">Number of bytes from buffer that will be written.</param>
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.GetSignature">
            <summary>
            This method is called only once at the end of the pdf creation. It should release all handles and temporary memory used to calculate 
            the data hash, and return a PKCS7 DER-encoded signature.
            </summary>
            <returns>a PKCS7 DER-encoded signature.</returns>
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.EstimateLength">
            <summary>
            Returns the estimated length for the data that will be returned in <see cref="M:FlexCel.Pdf.TPdfSigner.GetSignature"/>. 
            Note that this method will be called <b>before</b> finishing the pdf, so you still don't know what the final signature will be.
            You can return a number larger than what <see cref="M:FlexCel.Pdf.TPdfSigner.GetSignature"/> will return at the end of the pdf creation, but <b>never smaller</b>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.Dispose">
            <summary>
            Disposes this instace.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.Dispose(System.Boolean)">
            <summary>
            Override this method to dispose your own objects in your descending classes.
            </summary>
            <param name="disposing">If true, this is a direct call to Dispose(), and you need to dispose both managed and unmanaged resources.
            If false, this is called by the finalizer, and you only need to release unmanaged resources.</param>
        </member>
        <member name="M:FlexCel.Pdf.TPdfSigner.Finalize">
            <summary>
            Finalizer for the class.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfSignerFactory">
            <summary>
            Override this factory when creating your own <see cref="T:FlexCel.Pdf.TPdfSigner"/> class, so it is returned here.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfSignerFactory.CreateSigner">
            <summary>
            This method should return an instance of your customized <see cref="T:FlexCel.Pdf.TPdfSigner"/> class.
            </summary>
            <returns>A new TPdfSigner instance. Do not reuse instances, always return a new instance here since it will be disposed.</returns>
        </member>
        <member name="T:FlexCel.Pdf.TBuiltInSignerFactory">
            <summary>
            This class will create instances of the Built-in singer.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TBuiltInSignerFactory.#ctor(System.Security.Cryptography.Pkcs.CmsSigner)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="aSigner">CmsSigner used to sign the pdf files.</param>
        </member>
        <member name="M:FlexCel.Pdf.TBuiltInSignerFactory.CreateSigner">
            <summary>
            Creates a new Builtin Signer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Pdf.TPngInformation">
            <summary>
            Basic information about a PNG file.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPngInformation.#ctor">
            <summary>
            Creates a new TPngInformation class.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.Height">
            <summary>
            Height of the image on pixels.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.Width">
            <summary>
            Width of the image on pixels.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.BitDepth">
            <summary>
            Bith depth of the image.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.ColorType">
            <summary>
            Png ColorType (See png reference for more information)
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPngInformation.CompressionMethod">
            <summary>
            Png Compression method (See png reference for more information)
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfPng">
            <summary>
            A class for reading a PNG image. Mostly for internal use, but it can
            return some very basic information on a PNG file too.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfPng.GetPngInfo(System.IO.Stream)">
            <summary>
            Returns the basic information on a png file. Null if the file is not PNG.
            </summary>
            <param name="PngImageData">Stream with the image data.</param>
            <returns>Null if the image is invalid, or the image properties otherwise.</returns>
        </member>
        <member name="T:FlexCel.Core.TCellType">
            <summary>
            Values we can write on a cell
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Number">
            <summary>
            Double precision number.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.DateTime">
            <summary>
            Not a real type (it is a number).
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.String">
            <summary>
            An unicode string. Might be formatted.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Bool">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Error">
            <summary>
            Error code 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Empty">
            <summary>
            Blank cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Formula">
            <summary>
            A formula.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCellType.Unknown">
            <summary>
            The .NET type does not map to any Excel type. (for example a class)
            </summary>
        </member>
        <member name="T:FlexCel.Core.THidePrintObjects">
            <summary>
            Enumeration defining which objects should not be printed or exported to pdf. You can 'or' more than one option together.
            For example, to not print images and not comments, you should specify: THidePrintObjects.Images | THidePrintOption.Comments
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.None">
            <summary>
            Print and Export everything.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Images">
            <summary>
            Do not print or export images to pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Comments">
            <summary>
            Do not export Comments to pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Hyperlynks">
            <summary>
            Do not export Hyperlinks to pdf.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Headers">
            <summary>
            Do not print or export to pdf the Headers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.Footers">
            <summary>
            Do not print or export to pdf the Footers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.HeadersAndFooters">
            <summary>
            Do not export headers nor footers. This is the same as specifying TPrintOptions.Headers and TPrintOptions.Footers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THidePrintObjects.PageBreaks">
            <summary>
            Do not export page breaks. This property only applies to html exports.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxFormulaErrorValue">
            <summary>
            Error codes for cells on excel
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrNull">
            <summary>Null Value</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrDiv0">
            <summary>Division by 0</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrValue">
            <summary>Invalid Value</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrRef">
            <summary>Invalid or deleted cell reference</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrName">
            <summary>Invalid name</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrNum">
            <summary>Invalid number</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormulaErrorValue.ErrNA">
            <summary>Not available</summary>
        </member>
        <member name="T:FlexCel.Core.TPointF">
            <summary>
            PointF is not supported in CF, so this is an equivalent
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPointF.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new Point.
            </summary>
            <param name="aX">X coord.</param>
            <param name="aY">Y coord.</param>
        </member>
        <member name="M:FlexCel.Core.TPointF.Equals(System.Object)">
            <summary>
            True if both objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TPointF.op_Equality(FlexCel.Core.TPointF,FlexCel.Core.TPointF)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TPointF.op_Inequality(FlexCel.Core.TPointF,FlexCel.Core.TPointF)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TPointF.GetHashCode">
            <summary>
            Hash code for the point.
            </summary>
            <returns>hashcode.</returns>
        </member>
        <member name="P:FlexCel.Core.TPointF.X">
            <summary>
            X coord.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPointF.Y">
            <summary>
            Y coord.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPanePosition">
            <summary>
            Position on a pane when window is split
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPanePosition.LowerRight">
            <summary>
            Lower-right corner.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPanePosition.UpperRight">
            <summary>
            Upper-right corner.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPanePosition.LowerLeft">
            <summary>
            Lower-left corner.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPanePosition.UpperLeft">
            <summary>
            Upper left corner. This is the default when you have only one pane.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THyperLinkType">
            <summary>
            Possible types of cell hyperlinks.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THyperLinkType.URL">
            <summary>
            Web, file or mail URL. (like http://, file://, mailto://, ftp://) 
            </summary>
        </member>
        <member name="F:FlexCel.Core.THyperLinkType.LocalFile">
            <summary>
            A file on the local disk. Not an url or unc file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THyperLinkType.UNC">
            <summary>
            Universal Naming convention. For example: \\server\path\file.ext
            </summary>
        </member>
        <member name="F:FlexCel.Core.THyperLinkType.CurrentWorkbook">
            <summary>
            An hyperlink inside the current file.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THyperLink">
            <summary>
            An encapsulation of an Excel hyperlink.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THyperLink.#ctor">
            <summary>
            Creates a new instance of an Hyperlink class.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THyperLink.#ctor(FlexCel.Core.THyperLinkType,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of an Hyperlink class.
            </summary>
            <param name="aLinkType">The type of hyperlink: to a local file, to an url, to a cell or to a networked file.</param>
            <param name="aText">Text of the HyperLink. This is empty when linking to a cell.</param>
            <param name="aDescription">Description of the HyperLink.</param>
            <param name="aTargetFrame">When entering an URL on excel, you can enter additional text following the url with a "#" character (for example www.your_url.com#myurl") The text Mark is the text after the "#" char. When entering an address to a cell, the address goes here too.</param>
            <param name="aTextMark">This parameter is not documented. You can leave it empty.</param>
        </member>
        <member name="M:FlexCel.Core.THyperLink.Clone">
            <summary>
            Returns a copy of the hyperlink.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.THyperLink.LinkType">
            <summary>
            The type of hyperlink: to a local file, to an url, to a cell or to a networked file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THyperLink.Text">
            <summary>
            Text of the HyperLink. This is empty when linking to a cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THyperLink.Description">
            <summary>
            Description of the HyperLink.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THyperLink.TargetFrame">
            <summary>
            When entering an URL on excel, you can enter additional text following the url with a "#" character (for example www.your_url.com#myurl") The text Mark is the text after the "#" char. When entering an address to a cell, the address goes here too.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THyperLink.TextMark">
            <summary>
            This parameter is not documented. You can leave it empty.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THyperLink.Hint">
            <summary>
            Hint when the mouse hovers over the hyperlink.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TExcelTypes">
            <summary>
            Manages converting from/to objects/Native excel types.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TExcelTypes.ObjectToCellType(System.Object)">
            <summary>
            Converts an object on a CellType representation.
            </summary>
            <param name="o">Object with the value.</param>
            <returns>Cell Type</returns>
        </member>
        <member name="M:FlexCel.Core.TExcelTypes.ConvertToAllowedObject(System.Object,System.Boolean)">
            <summary>
            Converts an object to a native Excel datatype, that is:
            Number, String, Null, bool or Error.
            </summary>
            <param name="o">Object to convert.</param>
            <param name="Dates1904">True if using 1904 as start date. Excel for windows normally uses 1900.</param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Core.FlxDateTime">
            <summary>
            Use this class to convert between a Date expressed on Excel format (a double)
            and a TDateTime.
            </summary>
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.ToOADate(System.DateTime,System.Boolean)">
            <summary>
            Converts a DateTime into a Double on Excel format for dates (Ole Automation Format).
            </summary>
            <param name="value">DateTime you want to convert.</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <returns>The value as a double on Excel format.</returns>
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.TryToOADate(System.DateTime,System.Boolean,System.Double@)">
            <summary>
            Converts a DateTime into a Double on Excel format for dates (Ole Automation Format).
            </summary>
            <param name="value">DateTime you want to convert.</param>
            <param name="Result">Returns the value as double on Excel format</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <returns>True if conversion was successful, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.FromOADate(System.Double,System.Boolean)">
            <summary>
            Converts a Double on Excel format for dates (Ole Automation Format) into a DateTime.
            </summary>
            <param name="value">Double you want to convert.</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <returns>The value as DateTime.</returns>
        </member>
        <member name="M:FlexCel.Core.FlxDateTime.TryFromOADate(System.Double,System.Boolean,System.DateTime@)">
            <summary>
            Converts a Double on Excel format for dates (Ole Automation Format) into a DateTime.
            </summary>
            <param name="value">Double you want to convert.</param>
            <param name="Dates1904">When true dates start at 1904 (Macs) instead of 1900 (Windows)</param>
            <param name="Result">Returns the value as DateTime.</param>
            <returns>True if conversion was successful, false otherwise.</returns>
        </member>
        <member name="T:FlexCel.Core.TUnsupportedFormulaErrorType">
            <summary>
            Types of error that might happen while recalculating.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.FormulaTooComplex">
            <summary>
            FlexCel was not able to parse the formula.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.MissingFunction">
            <summary>
            There is a function on the formula that is not implemented by FlexCel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.FunctionalityNotImplemented">
            <summary>
            The function is supported, but not with those arguments.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.CircularReference">
            <summary>
            There is a circular reference on this cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaErrorType.ExternalReference">
            <summary>
            The file in the external reference was not found.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUnsupportedFormulaList">
            <summary>
            A list of unsupported formulas on a sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUnsupportedFormulaList.CellAddress">
            <summary>
            Use this one to know on which cell we are working.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TUnsupportedFormulaList.Add(FlexCel.Core.TUnsupportedFormula)">
            <summary>
            Adds a new unsupported formula to the list.
            </summary>
            <param name="fmla">Unsupported formula.</param>
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormulaList.Count">
            <summary>
            The number of errors on the list.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormulaList.Item(System.Int32)">
            <summary>
            Returns the items at position index.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUnsupportedFormula">
            <summary>
            An unsupported formula, the cell it is in, and the reason why it is not supported.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TUnsupportedFormula.#ctor">
            <summary>
            Creates a new empty instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TUnsupportedFormula.#ctor(FlexCel.Core.TUnsupportedFormulaErrorType,FlexCel.Core.TCellAddress,System.String,System.String)">
            <summary>
            Creates a new instance of a TUnsupported formula class.
            </summary>
            <param name="aErrorType">See <see cref="P:FlexCel.Core.TUnsupportedFormula.ErrorType"/></param>
            <param name="aCell">See <see cref="P:FlexCel.Core.TUnsupportedFormula.Cell"/></param>
            <param name="aFunctionName">See <see cref="P:FlexCel.Core.TUnsupportedFormula.FunctionName"/></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TUnsupportedFormula.FileName"/></param>
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormula.ErrorType">
            <summary>
            Type of error.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormula.Cell">
            <summary>
            Cell where the formula is (1 based)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormula.FunctionName">
            <summary>
            If the error is <see cref="F:FlexCel.Core.TUnsupportedFormulaErrorType.MissingFunction"/> then this is the name of the missing function.  
            If the error is <see cref="F:FlexCel.Core.TUnsupportedFormulaErrorType.ExternalReference"/> then this is the name of the file not found.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TUnsupportedFormula.FileName">
            <summary>
            This property has the name of the physical file being evaluated, and can be of use when evaluating linked files. If the files are opened
            from a stream or not from a physical place, it will be null.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THeaderAndFooterPos">
            <summary>
            Different sections on a header or footer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.HeaderLeft">
            <summary>
            Left section on the header.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.HeaderCenter">
            <summary>
            Center section on the header.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.HeaderRight">
            <summary>
            Right section on the header.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.FooterLeft">
            <summary>
            Left section on the footer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.FooterCenter">
            <summary>
            Center section on the footer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THeaderAndFooterPos.FooterRight">
            <summary>
            Right section on the footer.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCollapseChildrenMode">
            <summary>
            Determines how the children of the node of an outline will be when the node  is collapsed or expanded.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCollapseChildrenMode.DontModify">
            <summary>
            Children nodes will be kept in the state they already were. If they were collapsed they will still be collapsed after
            collpasing or expanding the parent. Same if they were expanded.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCollapseChildrenMode.Collapsed">
            <summary>
            All children nodes of collapsed parents will be collapsed, and will show collapsed when you expand the parent.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCollapseChildrenMode.Expanded">
            <summary>
            All children nodes of collapsed parents will be expanded, and will show expanded when you expand the parent.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSortOrder">
            <summary>
            The sort order for a sort operation.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSortOrder.Ascending">
            <summary>
            Sort ascending.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TSortOrder.Descending">
            <summary>
            Sort descending.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationInfo">
            <summary>
            Contains the information to define a data validation in a range of cells.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.#ctor">
            <summary>
            Empty constructor. Creates a new instance of TDataValidationInfo without assigning any value.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.#ctor(FlexCel.Core.TDataValidationDataType,FlexCel.Core.TDataValidationConditionType,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String,FlexCel.Core.TDataValidationIcon)">
            <summary>
            Creates a new Data Validation condition with all parameters.
            </summary>
            <param name="aValidationType">See <see cref="P:FlexCel.Core.TDataValidationInfo.ValidationType"/></param>
            <param name="aCondition">See <see cref="P:FlexCel.Core.TDataValidationInfo.Condition"/></param>
            <param name="aFirstFormula">See <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/></param>
            <param name="aSecondFormula">See <see cref="P:FlexCel.Core.TDataValidationInfo.SecondFormula"/></param>
            <param name="aIgnoreEmptyCells">See <see cref="P:FlexCel.Core.TDataValidationInfo.IgnoreEmptyCells"/></param>
            <param name="aInCellDropDown">See <see cref="P:FlexCel.Core.TDataValidationInfo.InCellDropDown"/></param>
            <param name="aErrorBoxCaption">See <see cref="P:FlexCel.Core.TDataValidationInfo.ErrorBoxCaption"/></param>
            <param name="aErrorBoxText">See <see cref="P:FlexCel.Core.TDataValidationInfo.ErrorBoxText"/></param>
            <param name="aInputBoxCaption">See <see cref="P:FlexCel.Core.TDataValidationInfo.InputBoxCaption"/></param>
            <param name="aInputBoxText">See <see cref="P:FlexCel.Core.TDataValidationInfo.InputBoxText"/></param>
            <param name="aErrorIcon">See <see cref="P:FlexCel.Core.TDataValidationInfo.ErrorIcon"/></param>
            <param name="aExplicitList">See <see cref="P:FlexCel.Core.TDataValidationInfo.ExplicitList"/></param>
            <param name="aShowErrorBox">See <see cref="P:FlexCel.Core.TDataValidationInfo.ShowErrorBox"/></param>
            <param name="aShowInputBox"></param>See <see cref="P:FlexCel.Core.TDataValidationInfo.ShowInputBox"/>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.CompareTo(System.Object)">
            <summary>
            Compares the object with other.
            </summary>
            <param name="obj"></param>
            <returns>-1 is o2 is less than this, 0 if they are equal and 1 if o2 is bigger.</returns>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.Equals(System.Object)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.op_Equality(FlexCel.Core.TDataValidationInfo,FlexCel.Core.TDataValidationInfo)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.op_Inequality(FlexCel.Core.TDataValidationInfo,FlexCel.Core.TDataValidationInfo)">
            <summary>
            Returns true if both objects are not equal.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.op_GreaterThan(FlexCel.Core.TDataValidationInfo,FlexCel.Core.TDataValidationInfo)">
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.op_LessThan(FlexCel.Core.TDataValidationInfo,FlexCel.Core.TDataValidationInfo)">
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TDataValidationInfo.GetHashCode">
            <summary>
            Returns a hashcode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ValidationType">
            <summary>
            Type of validation we will be doing.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.Condition">
            <summary>
            Condition used to apply the data validation.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.FirstFormula">
            <summary>
            Formula for the first condition of the data validation. The text of the formula is limited to 255 characters.
            Nota ths if <see cref="P:FlexCel.Core.TDataValidationInfo.ExplicitList"/> is true, this formula can contain a list of values. 
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.SecondFormula">
            <summary>
            Formula for the second condition of the data validation, if it has two conditions. The text of the formula is limited to 255 characters.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.IgnoreEmptyCells">
            <summary>
            If true Empty cells will not trigger data validation errors.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.InCellDropDown">
            <summary>
            When the <see cref="P:FlexCel.Core.TDataValidationInfo.ValidationType"/> parameter is a list, this property indicates whether to display a drop down box or not.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ExplicitList">
            <summary>
            If true, <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/> contains a list of values. 
            In this case, Formula1 <b>must</b> be a formula of the type: ="string", where string is a list of values separated by Character(0).
            For example, in C# Formula1 could be: <i>="Apples\0Lemmons\0Melons</i>  
            In Delphi.NET, Formula1 could be: <i>'="Apples' + #0 + 'Lemmons' + #0 + 'Melons'</i>
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ShowErrorBox">
            <summary>
            If true, an error box dialog will be shown when the user enters an invalid value.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ErrorBoxCaption">
            <summary>
            Caption of the Error Alert box. Note that this text cannot be longer than 32 characters.
            Extra caracters will be truncated. If this parameter is null, the default Error alert will be displayed.
            If <see cref="P:FlexCel.Core.TDataValidationInfo.ShowErrorBox"/> is false, this parameter does nothing.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ErrorBoxText">
            <summary>
            Text on the Error Alert box. Note that this text cannot be longer than 225 characters. 
            Extra characters will be truncated. If this parameter is null, the default Error alert will be displayed.
            If <see cref="P:FlexCel.Core.TDataValidationInfo.ShowErrorBox"/> is false, this parameter does nothing.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ShowInputBox">
            <summary>
            If true, a box showing a message will be shown when the user selecte the cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.InputBoxCaption">
            <summary>
            Caption of the Input Message box. Note that this text cannot be longer than 32 characters.
            Extra caracters will be truncated. If this parameter is null, the Input box will display the default message.
            if <see cref="P:FlexCel.Core.TDataValidationInfo.ShowInputBox"/> is false, this parameter does nothing.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.InputBoxText">
            <summary>
            Text on the Input Message box. Note that this text cannot be longer than 255 characters. 
            Extra characters will be truncated. If this parameter is null, the Input box will display the default message.
            if <see cref="P:FlexCel.Core.TDataValidationInfo.ShowInputBox"/> is false, this parameter does nothing.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataValidationInfo.ErrorIcon">
            <summary>
            Icon to display in the error box.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationIcon">
            <summary>
            Icon to be displayed in the error box of a data validation action. Note that this not only affects the icon used, but the possible values.
            An information icon will allow you to enter an invalid value in a cell, a stop icon will not.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationIcon.Stop">
            <summary>
            Stop icon.  ( a red circle with a cross). When selected, invalid values cannot be entered into the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationIcon.Warning">
            <summary>
            Warning icon. ( a yellow triangle with an exclamation sign). When selected and there is an invalid entry, you get an error
            dialog allowing to cancel the operation, enter the invalid value anyway or re edit the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationIcon.Information">
            <summary>
            Information icon. (a text ballon with an "i" inside). When selected and there is an invalid entry, a waning will be shown but the invalid data
            can be entered anyway.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationDataType">
            <summary>
            Possible types of data validation.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.AnyValue">
            <summary>
            All values are allowed.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.WholeNumber">
            <summary>
            The value must be an integer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.Decimal">
            <summary>
            The value must be a decimal.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.List">
            <summary>
            The value must be in the list. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.Date">
            <summary>
            The value must be a Date.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.Time">
            <summary>
            The value must be a Time.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.TextLenght">
            <summary>
            The value will be validated depending on the text lenght.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationDataType.Custom">
            <summary>
            The value will be validated depending on the results of a formula.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataValidationConditionType">
            <summary>
            Defines the condition used in the data validation box.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.Between">
            <summary>
            Value must be bewtween <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/> and <see cref="P:FlexCel.Core.TDataValidationInfo.SecondFormula"/>.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.NotBetween">
            <summary>
            Value must be not bewtween <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/> and <see cref="P:FlexCel.Core.TDataValidationInfo.SecondFormula"/>.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.EqualTo">
            <summary>
            Value must be equal to <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/>.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.NotEqualTo">
            <summary>
            Value must be different from <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/>.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.GreaterThan">
            <summary>
            Value must be greater than <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/>.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.LessThan">
            <summary>
            Value must be less than <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/>.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.GreaterThanOrEqualTo">
            Value must be greater than or equal to <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/>.
        </member>
        <member name="F:FlexCel.Core.TDataValidationConditionType.LessThanOrEqualTo">
            Value must be less than or equal to <see cref="P:FlexCel.Core.TDataValidationInfo.FirstFormula"/>.
        </member>
        <member name="M:FlexCel.Core.FlxUtils.IsMonoRunning">
            <summary>
            Returns true if running under MONO. this method is used to workaround known bugs (or functionality) in the MONO framework,
            and calls to this method should be rechecked from time to time to verify if the bugs have not ben fixed in the latest version.
            </summary>
            <returns>Whether we are running under MONO or not.</returns>
        </member>
        <member name="T:FlexCel.Core.TUserDefinedFunctionScope">
            <summary>
            Defines how custom functions are added to the recalculation engine.
            If a function is defined in both Global and Local scope, Local scope will be used.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUserDefinedFunctionScope.Global">
            <summary>
            Function will be added for all instances of FlexCel. You will normally use this setting only once at the beginning of your application.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUserDefinedFunctionScope.Local">
            <summary>
            Functions will be available only for the instance where they were added. Use this option if you might have different custom functions with the same name in different 
            spreadsheets, and adding the function globally would clash. You will normally use this setting when adding the formulas after creeating the ExcelFile
            instances.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUserDefinedFunctionLocation">
            <summary>
            Defines where the custom function is located, if inside a macro in the same file, or inside a macro in an external file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUserDefinedFunctionLocation.External">
            <summary>
            The custom function is defined in an external file or addin. Whenever you add this function to a workbook, references will be created to an external function.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TUserDefinedFunctionLocation.Internal">
            <summary>
            The custom function is defined inside the same file where the formula is. Whenever you add this function to a workbook, references will be created to a
            macro in the same file.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUdfEventArgs">
            <summary>
            Encapsulates the parameters to send to an User Defined Function for evaluation.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TUdfEventArgs.#ctor(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aXls">See <see cref="P:FlexCel.Core.TUdfEventArgs.Xls"/></param>
            <param name="aSheet">See <see cref="P:FlexCel.Core.TUdfEventArgs.Sheet"/></param>
            <param name="aRow">See <see cref="P:FlexCel.Core.TUdfEventArgs.Row"/></param>
            <param name="aCol">See <see cref="P:FlexCel.Core.TUdfEventArgs.Col"/></param>
        </member>
        <member name="P:FlexCel.Core.TUdfEventArgs.Xls">
            <summary>
            ExcelFile that has the formula being evaluated. You might change its ActiveSheet propery inside this method and there is no
            need to restore it back.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TUdfEventArgs.Sheet">
            <summary>
            Index of the sheet where the formula is located. This value only has meaning when evaluating formulas in cells. (Not when for example evaluating formulas inside named ranges)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TUdfEventArgs.Row">
            <summary>
            Row index where the formula is located. This value only has meaning when evaluating formulas in cells. (Not when for example evaluating formulas inside named ranges)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TUdfEventArgs.Col">
            <summary>
            Column index where the formula is located. This value only has meaning when evaluating formulas in cells. (Not when for example evaluating formulas inside named ranges)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUserDefinedFunction">
            <summary>
            Inherit from this class to create your own user defined functions. Make sure you read the pdf documentation to get more information on what user defined functions are
            and how they are created.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.#ctor(System.String)">
            <summary>
            Initializes the name of the user defined function.
            </summary>
            <param name="aName">Name to be used in the user defined function. This is the same name that should be in the xls file.</param>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])">
            <summary>
            Override this method to provide your own implementation on the function.<br/>
            If this method throws an exception, it will not be handled and the recalculation will be aborted. So if you want to return an error, return a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/> value.
            <br/>
            <b>Do not use any global variable in this method</b>, it must be stateless and always return the same value when called with the same arguments.
            <br/>
            See the PDF documentation for more information.
            </summary>
            <param name="arguments">Extra objects you can use to evaluate the function.</param>
            <param name="parameters">Parameters for the function. When this method is called by FlexCel, this parameter will never be null, but might be an array
            of zero length if there are no parameters.
            <br/> Each parameter in the array will always be one of the following objects:
            <list type="bullet">
            <item>Null. (Nothing in VB). If the parameter is empty or missing.</item>
            <item>A <see cref="T:System.Boolean"/></item>
            <item>A <see cref="T:System.String"/></item>
            <item>A <see cref="T:System.Double"/></item>
            <item>A <see cref="T:FlexCel.Core.TXls3DRange"/> This will be returned when the argument is a cell reference.</item>
            <item>A <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/>. Except in very special cases (like an IsError function), the expected
            behavior in Excel is that whenever you get an Error parameter your function should return the same error and exit. You can use the method <see cref="M:FlexCel.Core.TUserDefinedFunction.CheckParameters(System.Object[],System.Int32,FlexCel.Core.TFlxFormulaErrorValue@)"/>
            to implement that.</item>
            <item>A 2-dimensional array of objects, where each object in the array will be of any of the types mentioned here again.</item> 
            </list>
             This class provides utility methods like <see cref="M:FlexCel.Core.TUserDefinedFunction.TryGetDouble(FlexCel.Core.ExcelFile,System.Object,System.Double@,FlexCel.Core.TFlxFormulaErrorValue@)"/> that will help you get an specific type of object from a parameter.
            </param>
            <returns>Return any object you want here. Normally a double, a string, a boolean a TFlxFormulaErrorValue or a null. If this method returns a class, it will be converted to an allowed value, normally to a string. </returns>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.CheckParameters(System.Object[],System.Int32,FlexCel.Core.TFlxFormulaErrorValue@)">
            <summary>
            Checks that the parameter array has the expected number of arguments, and that no one is an Error. If any argument is an error
            it is returned in ResultError, since the default in Excel is to stop processing arguments in a function when one is an error.
            </summary>
            <param name="parameters">Array of parameters to check.</param>
            <param name="expectedCount">Number of parameters expected. If this number is variable, specify -1 here.</param>
            <param name="ResultError">Returns the error in the parameters. This parameter si only valid if this function returns false.</param>
            <returns>True if all parameters are correct, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.GetSingleParameter(FlexCel.Core.ExcelFile,System.Object)">
            <summary>
            Returns a single value from a parameter. 
            If the parameter is a cell range and the cell range has only one cell, this method will return the
            value of the cell, else it will return an error.
            </summary>
            <param name="xls">ExcelFile that will be used to read the value if param is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])"/></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetDouble(FlexCel.Core.ExcelFile,System.Object,System.Double@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <summary>
            Tries to retrieve a double from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])"/></param>
            <param name="ResultValue">Value of the parameter as double. If TryGetDouble returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetDouble returns true (there was no error), this value is undefined.</param>
            <returns>True if the parameter can be converted to a double, false if there was an error.</returns>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetString(FlexCel.Core.ExcelFile,System.Object,System.String@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <summary>
            Tries to retrieve a string from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])"/></param>
            <param name="ResultValue">Value of the parameter as string. If TryGetString returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetString returns true (there was no error), this value is undefined.</param>
            <returns>True if the parameter can be converted to a string, false if there was an error.</returns>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetBoolean(FlexCel.Core.ExcelFile,System.Object,System.Boolean@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <summary>
            Tries to retrieve a boolean from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])"/></param>
            <param name="ResultValue">Value of the parameter as a boolean. If TryGetBoolean returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetBoolean returns true (there was no error), this value is undefined.</param>
            <returns>True if the parameter can be converted to a boolean, false if there was an error.</returns>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetCellRange(System.Object,FlexCel.Core.TXls3DRange@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <summary>
            Tries to retrieve a cell range from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])"/></param>
            <param name="ResultValue">Value of the parameter as a TXls3DRange. If TryGetRange returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetCellRange returns true (there was no error), this value is undefined.</param>
            <returns>True if the parameter can be converted to a cell range, false if there was an error.</returns>
        </member>
        <member name="M:FlexCel.Core.TUserDefinedFunction.TryGetArray(FlexCel.Core.ExcelFile,System.Object,System.Object[0:,0:]@,FlexCel.Core.TFlxFormulaErrorValue@)">
            <summary>
            Tries to retrieve an array from a parameter, and return it if it can be converted or an error if not.
            </summary>
            <param name="xls">ExcelFile used to read the parameter when it is a cell reference.</param>
            <param name="param">One of the parameters passed to <see cref="M:FlexCel.Core.TUserDefinedFunction.Evaluate(FlexCel.Core.TUdfEventArgs,System.Object[])"/></param>
            <param name="ResultValue">Value of the parameter as an array. If TryGetArray returns false, this value is undefined.</param>
            <param name="ResultError">Value of the error when converting the parameter. If TryGetArray returns true (there was no error), this value is undefined.</param>
            <returns>True if the parameter can be converted to an array, false if there was an error.</returns>
        </member>
        <member name="P:FlexCel.Core.TUserDefinedFunction.Name">
            <summary>
            Name that will be assigned to the function.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TExcelFileErrorActions">
            <summary>
            Enumerates what to do on different FlexCel error situations.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.None">
            <summary>
            FlexCel will try to recover from most errors.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TExcelFileErrorActions.ErrorOnTooManyPageBreaks">
            <summary>
            When true and the number of manual pagebreaks is bigger than the maximum Excel allows,
            an Exception will be raised. When false, the page break will be silently ommited.
            Note that This exception is raised when saving the file as xls, when you are exporting your report to 
            PDF or images, all page breaks will be used.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUndisposableStream">
            <summary>
            A stream that will not be closed when you call close. Useful to pass to a StreamReader/StreamWriter and not have the main stream closed.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TWorkspace">
            <summary>
            This class links together a group of spreadsheets, so you can recalculate among linked spreadsheets. 
            In order to use it, just define an object of this class and add all the files you need for the linked recalculation.
            If you don't know in advance which files you will need, you can use the <see cref="E:FlexCel.Core.TWorkspace.LoadLinkedFile"/> event.
            <br/>Note that whenever you recalculate any file in the workspace, all files will be recalculated, so you don't need to calculate them twice.
            </summary>
            <remarks>Files are case insensitive, even if running in mono. "a.xls" is the same as "A.XLS"</remarks>
            <example>
            If you have 3 files, xls1, xls2 and xls3, you can recalculate them together with the following code:
            <br/>
            <code>
            Workspace work = new Workspace();
            work.Add("xls1", xls1);
            work.Add("xls2", xls2);
            work.Add("xls3", xls3);
            xls1.Recalc();  //Either xls1.Recalc, xls2.Recalc or xls3.Recalc will recalculate all the files in the workspace.
            </code>
            <br/>
            <code lang="vbnet">
            Dim work as Workspace = new Workspace
            work.Add("xls1", xls1)
            work.Add("xls2", xls2)
            work.Add("xls3", xls3)
            xls1.Recalc  'Either xls1.Recalc, xls2.Recalc or xls3.Recalc will recalculate all the files in the workspace.
            </code>
            <br/>
            <code lang="Delphi .NET" title="Delphi .NET">
            work := Workspace.Create;
            work.Add('xls1', xls1);
            work.Add('xls2', xls2);
            work.Add('xls3', xls3);
            xls1.Recalc;  //Either xls1.Recalc, xls2.Recalc or xls3.Recalc will recalculate all the files in the workspace.
            </code>
            </example>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.#ctor">
            <summary>
            Creates a new workspace.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.Add(System.String,FlexCel.Core.ExcelFile)">
            <summary>
            Adds a file to the workspace. Whenever you recalculate any file in this workspace, all linked files will be recalculated too.
            <b>Note that you can't add two files with the same name or same reference twice to this collection.</b>
            </summary>
            <param name="FileName">Name that this file will have in the workspace. When recalculating a linked formula, this name will be used.
            If you want to include paths in the name you can too, but it is normally not needed since FlexCel will search for the simple filename anyway.
            You only need to include paths if you have 2 files with the same name in different folders used in the recalculation.</param>
            <param name="xls">Excel file to add.</param>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.GetFile(System.Int32)">
            <summary>
            Returns the file at index. 
            </summary>
            <param name="index">Index of the file in the workspace. (1 based)</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.Clear">
            <summary>
            Removes all files from the workspace.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.Recalc(System.Boolean)">
            <summary>
            Use this method to force a recalculation of all the spreadsheets in the workspace. This is the same as calling Recalc() in any of the files in the workspace.
            </summary>
            <param name="forced">When true this method will perform a recalc in all files. When false, it will only recalculate the files where there has been a change. </param>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.RecalcAndVerify">
            <summary>
            This method will do the same as <see cref="M:FlexCel.Core.ExcelFile.RecalcAndVerify"/>, but for a workspace of files.
            </summary>
            <returns>A list with the unsupported functions in the workspace.</returns>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.GetEnumerator">
            <summary>
            Returns an enumerator with all the files in the Workspace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.OnLoadLinkedFile(FlexCel.Core.LoadLinkedFileEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of TWorkspace. See also <see cref="E:FlexCel.Core.TWorkspace.LoadLinkedFile"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Core.TWorkspace.System#Collections#Generic#IEnumerable{FlexCel#Core#ExcelFile}#GetEnumerator">
            <summary>
            Returns an enumerator with the ExcelFile objects in the Workspace.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TWorkspace.Count">
            <summary>
            Number of linked files in this workspace.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TWorkspace.Item(System.String)">
            <summary>
            Returns the Excel file with the given name. To get the file at a given position, use <see cref="M:FlexCel.Core.TWorkspace.GetFile(System.Int32)"/>
            </summary>
        </member>
        <member name="E:FlexCel.Core.TWorkspace.LoadLinkedFile">
            <summary>
            Use this event to load files to recalculate on demand, if you don't know a priori which linked files you need.
            Note that this event will add the new file to the workspace. 
            It will only be called once for each file, even if the file is used many times.
            </summary>
        </member>
        <member name="T:FlexCel.Core.LoadLinkedFileEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Core.TWorkspace.LoadLinkedFile"/>"/&gt;
            </summary>
        </member>
        <member name="M:FlexCel.Core.LoadLinkedFileEventArgs.#ctor(System.String)">
            <summary>
            Creates a new Argument.
            </summary>
        </member>
        <member name="P:FlexCel.Core.LoadLinkedFileEventArgs.FileName">
            <summary>
            The filename of the file we need. <b>Note:</b> The path of this filename is relative to where the parent file is.
            you might need to add the main path to it in order to load the files.
            </summary>
        </member>
        <member name="P:FlexCel.Core.LoadLinkedFileEventArgs.Xls">
            <summary>
            Use this parameter to return the ExcelFile that corresponds with <see cref="P:FlexCel.Core.LoadLinkedFileEventArgs.FileName"/>.  If you return null here, it means
            that the file was not found and it will result in #REF errors in the formulas that reference that file.
            </summary>
        </member>
        <member name="T:FlexCel.Core.LoadLinkedFileEventHandler">
            <summary>
            Delegate for LoadLinkedFile event.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TXlsEscherRecord">
            <summary>
            Base for Excel drawing records. It has 2 main descendants: TDrawingGroupRecord for the globals, and TDrawingRecord for the sheets.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseDrawingGroupRecord">
            <summary>
            Base for Drawing Group record and HeaderImg.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDrawingGroupRecord">
            <summary>
            Drawing Group record. There is only one of them on a xls file, and is on the global section.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseDrawingRecord">
            <summary>
            Base for Drawing record and HeaderImg.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDrawingRecord">
            <summary>
            Drawing record. It holds a MSDrawing inside and can spawn many records.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDrawingSelectionRecord">
            <summary>
            Current drawing selected. We will ignore this record
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDrawingGroup">
            <summary>
            A parsed Drawing Group. As the on-file structure of drawings is so horrible, we won't attempt
            to keep it. We will parse to a better mem struct, and then save it back to the serialized file.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TDrawingGroup.EnsureDwgGroup">
            <summary>
            This function will test that there is a dwggroup, and if it doesn't, will create it.
            Should be called when adding new drawings on empty files.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDrawing">
            <summary>
            A parsed Drawing. Again, as the on-file structure of drawings is so horrible, we won't attempt
            to keep it. We will parse to a better mem struct, and then save it back to the serialized file.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheetNameList">
            <summary>
            Cache for fast-finding Sheet names. It has support for finding the next number of the sheet.
            For example, if you have 3 sheets on a workbook named "Sheet1, Sheet2, Sheet3", and you insert an empty new one,
            it should be named "Sheet4"
            </summary>
        </member>
        <member name="T:FlexCel.Report.TFlexCelUserFunction">
            <summary>
            A class used to define a FlexCel user function, that you can call from a report.
            </summary>
            <remarks>
            To Create a User function:
            <list type="number">
            <item>Create a new class derived from TFlexCelUserFunction.</item>
            <item>Override the method <see cref="M:FlexCel.Report.TFlexCelUserFunction.Evaluate(System.Object[])"/>.</item>
            <item>Add the new user function to the report using <see cref="M:FlexCel.Report.FlexCelReport.SetUserFunction(System.String,FlexCel.Report.TFlexCelUserFunction)"/>.</item>
            </list>
            </remarks>
            <example>
            To define an user function that returns "One" for param=1; "Two" for param=2 and "Unknown" on other case:
            1) Define the class:
            <code>
                public class TMyUserFunction: TFlexCelUserFunction
                {
                    public override object Evaluate(object[] parameters)
                    {
                        if (parameters==null || parameters.Length&gt;1)
                            throw new ArgumentException("Invalid number of params for user defined function \"MyUserFunction");
                        int p= Convert.ToInt32(parameters[0]);
                
                        switch (p)
                        {
                            case 1: return "One";
                            case 2: return "Two";
                        }
                        return "Unknown";
                    }
                
                }
            </code>
            2) Add the function to the report.
            <code>
            FReport.SetUserFunction("MF", new TMyUserFunction());
            </code>
            3) Now, you can write "&lt;#MF(1)&gt;" on a template, and it will be replaced by "One".
            </example>
        </member>
        <member name="M:FlexCel.Report.TFlexCelUserFunction.Evaluate(System.Object[])">
            <summary>
            Override this method on a derived class to implement your own defined function.
            </summary>
            <param name="parameters">An array of objects.</param>
            <returns>The derived class should return the value of the function on the return parameter.</returns>
        </member>
        <member name="T:FlexCel.Render.TClippingStyle">
            <summary>
            Can be used to clip into a region instead of drawing on it.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TClippingStyle.None">
            <summary>
            Normal draw, this will draw the image.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TClippingStyle.Include">
            <summary>
            This will include the region into the clipping area, no image will be drawn.
            </summary>
        </member>
        <member name="F:FlexCel.Render.TClippingStyle.Exclude">
            <summary>
            This will exclude the region from the clipping area, no image will be drawn.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.GetFontDataEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.GetFontData"/>.
            Use this event to provide font information for embedding.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.GetFontDataEventArgs.#ctor(System.Drawing.Font)">
            <summary>
            Creates a new Argument.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.GetFontDataEventArgs.FontData">
            <summary>
            Return the full font file as a byte array here.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.GetFontDataEventArgs.Applied">
            <summary>
            Set Applied = false if the font is not being processed by the event.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.GetFontDataEventArgs.InputFont">
            <summary>
            The font for which you need to return the data.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.GetFontDataEventHandler">
            <summary>
            Delegate for reading the font data.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.GetFontFolderEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.GetFontFolder"/>.
            Use this event to provide font information for embedding.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.GetFontFolderEventArgs.#ctor(System.Drawing.Font,System.String)">
            <summary>
            Creates a new Argument.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.GetFontFolderEventArgs.FontFolder">
            <summary>
            Return here the full font path to the "Fonts" folder where ttf files are located.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.GetFontFolderEventArgs.Applied">
            <summary>
            Set Applied = false if the font is not being processed by the event.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.GetFontFolderEventArgs.InputFont">
            <summary>
            The font for which you need to return the data.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.GetFontFolderEventHandler">
            <summary>
            Delegate for reading the font data.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.FontEmbedEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPdfExport.OnFontEmbed"/>.
            Use this event to specify which fonts to embed and which fonts to ignore. Note that unicode fonts will be 
            embedded no matter what you say here.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.FontEmbedEventArgs.#ctor(System.Drawing.Font,System.Boolean)">
            <summary>
            Creates a new Argument.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.FontEmbedEventArgs.InputFont">
            <summary>
            The font for which you need to return the data.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.FontEmbedEventArgs.Embed">
            <summary>
            Return true if you want to embed this font, false if you don't want to. If you don't modify this value, the default will be used.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.FontEmbedEventHandler">
            <summary>
            Delegate for reading the font data.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ptg">
            <summary>
            Excel formula p(arse)t(hin)gs.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TOperator">
            <summary>
            Operators that can be found inside a formula
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Nop">
            <summary>
            No operator
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Neg">
            <summary>
            -
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Percent">
            <summary>
            %
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Power">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Mul">
            <summary>
            *
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Div">
            <summary>
            /
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Add">
            <summary>
            +
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Sub">
            <summary>
            -
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.Concat">
            <summary>
            &amp;
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.GE">
            <summary>
            greater or equal
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.LE">
            <summary>
            less or equal
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.NE">
            <summary>
            Not equal
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.EQ">
            <summary>
            =
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.LT">
            <summary>
            less than
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.GT">
            <summary>
            greater than
            </summary>
        </member>
        <member name="F:FlexCel.Core.TOperator.UPlus">
            <summary>
            Unary plus.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TMissingArg">
            <summary>
            Represents a Missing Argument on a Formula.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TConditionType">
            <summary>
            A list of conditional operators that you can apply in a Conditional format.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.NoComparison">
            <summary>
            Always evaluates to false.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.Between">
            <summary>
            Value between Formula1 and Formula2.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.NotBetween">
            <summary>
            Value not between Formula1 and Formula2.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.Equal">
            <summary>
            Value equal to Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.NotEqual">
            <summary>
            Value not equal to Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.GreaterThan">
            <summary>
            Value Greater than Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.LessThan">
            <summary>
            Less than Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.GreaterOrEqual">
            <summary>
            Greater of Equal to Formula1.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TConditionType.LessOrEqual">
            <summary>
            Less of Equal to Formula1.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatDef">
            <summary>
            The format to apply when a <see cref="T:FlexCel.Core.TConditionalFormatRule"/> is applied.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDef.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns>A deep copy o a TConditionalFormatDef instance.</returns>
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatDefStandard">
            <summary>
            Defines a format to apply for cells when a rule evaluates to true.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefStandard.#ctor">
            <summary>
            Creates an empty instance, where no format applies.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefStandard.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefStandard.Equals(System.Object)">
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatDefStandard.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontSize20">
            <summary>
            When true the font size specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontSize20"/> will be applied, else it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.FontSize20">
            <summary>
            Font size in 1/20 of a point when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontSize20"/> is true.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontColorIndex">
            <summary>
            When true the font color specidied in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontColorIndex"/> will be applied, else it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.FontColorIndex">
            <summary>
            Font color index on the color palette when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontColorIndex"/> is true.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleBoldAndItalic">
            <summary>
            When true, the font style on <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontStyle"/> for bold an italics will be applied. When false, it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleStrikeout">
            <summary>
            When true, the font style on <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontStyle"/> for strikeout will be applied. When false, it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleSubSuperscript">
            <summary>
            When true, the font style on <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontStyle"/> for subscripts and superscripts will be applied. When false, it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.FontStyle">
            <summary>
            Style of the font, such as bold or italics when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleBoldAndItalic"/> is true and/or <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleStrikeout"/> is true and/or <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontStyleSubSuperscript"/> is true. Underline is a different option.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontUnderline">
            <summary>
            When true the font underline specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.FontUnderline"/> will be applied, else it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.FontUnderline">
            <summary>
            Underline type, when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyFontUnderline"/> = true.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternStyle">
            <summary>
            When true the pattern style specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternStyle"/> will be applied, else it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.PatternStyle">
            <summary>
            Pattern style to apply, when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternStyle"/> is true.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternFgIndex">
            <summary>
            When true the foreground color specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternFgColorIndex"/> will be used, else it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.PatternFgColorIndex">
            <summary>
            Foreground color of the pattern. This value is the only color used when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternStyle"/> is solid. Only applies if <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternFgIndex"/> is true.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternBgIndex">
            <summary>
            When true the background color specified in <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternBgColorIndex"/> will be used, else it will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.PatternBgColorIndex">
            <summary>
            Background color of the pattern. This value is *NOT* used when <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.PatternStyle"/> is solid. Only applies if <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyPatternBgIndex"/> is true.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyBorderLeft">
            <summary>
            If true, the <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.BorderLeft"/> settings will be applied, esle they will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.BorderLeft">
            <summary>
            Color and style for the cell border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyBorderRight">
            <summary>
            If true, the <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.BorderRight"/> settings will be applied, esle they will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.BorderRight">
            <summary>
            Color and style for the cell border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyBorderTop">
            <summary>
            If true, the <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.BorderTop"/> settings will be applied, esle they will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.BorderTop">
            <summary>
            Color and style for the cell border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.ApplyBorderBottom">
            <summary>
            If true, the <see cref="P:FlexCel.Core.TConditionalFormatDefStandard.BorderBottom"/> settings will be applied, esle they will be ignored.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.BorderBottom">
            <summary>
            Color and style for the cell border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.HasFontBlock">
            <summary>
            Returns true if any font formatting is applied
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.HasBorderBlock">
            <summary>
            Returns true if any border formatting is applied.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.HasPatternBlock">
            <summary>
            Returns true if any pattern formatting is applied.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatDefStandard.HasFormat">
            <summary>
            Returns true if any format is applied.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TConditionalFormatRule">
            <summary>
            A rule specifying a conditional format. You cannot create instances of this class, only of their children.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatRule.#ctor(FlexCel.Core.TConditionalFormatDef,System.Boolean)">
            <summary>
            Creates a new instance of TConditionalFormatRule, with the corrsponding Format definition.
            </summary>
            <param name="aFormatDef">Format definition for the rule.</param>
            <param name="aStopIfTrue">Only valid on Excel 2007. If true, no more conditional format rules after this one will be applied if this rule applies.</param>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatRule.Equals(System.Object)">
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormatRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue">
            <summary>
            When true, rules after this one will not evaluate if this one applies. Only Applies to Excel 2007
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormatRule.FormatDef">
            <summary>
            Format to apply when the rule evaluates to true.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TConditionalFormulaRule">
            <summary>
            A conditional format rule specified by a formula.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormulaRule.#ctor(FlexCel.Core.TConditionalFormatDefStandard,System.Boolean,System.String)">
            <summary>
            Creates a new instace of TConditionalFormulaRule.
            </summary>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue"/></param>
            <param name="aFormula">See <see cref="P:FlexCel.Core.TConditionalFormulaRule.Formula"/></param>
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef"/></param>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormulaRule.Equals(System.Object)">
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormulaRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TConditionalFormulaRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TConditionalFormulaRule.Formula">
            <summary>
            The formula to be evaluated. The conditional format will be applied when it evaluates to true.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TConditionalCellValueRule">
            <summary>
            A conditional format rule specified by the value on a cell (less than, equal, etc).
            </summary>
        </member>
        <member name="M:FlexCel.Core.TConditionalCellValueRule.#ctor(FlexCel.Core.TConditionalFormatDefStandard,System.Boolean,FlexCel.Core.TConditionType,System.String,System.String)">
            <summary>
            Creates a new instace of TConditionalFormulaRule.
            </summary>
            <param name="aStopIfTrue">See <see cref="P:FlexCel.Core.TConditionalFormatRule.StopIfTrue"/></param>
            <param name="aConditionType">See <see cref="P:FlexCel.Core.TConditionalCellValueRule.ConditionType"/></param>
            <param name="aFormula1">See <see cref="P:FlexCel.Core.TConditionalCellValueRule.Formula1"/></param>
            <param name="aFormula2">See <see cref="P:FlexCel.Core.TConditionalCellValueRule.Formula2"/></param>
            <param name="aFormatDef">See <see cref="P:FlexCel.Core.TConditionalFormatRule.FormatDef"/></param>
        </member>
        <member name="M:FlexCel.Core.TConditionalCellValueRule.Equals(System.Object)">
            <summary>
            Returns true if this object is equal to obj.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TConditionalCellValueRule.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TConditionalCellValueRule.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TConditionalCellValueRule.ConditionType">
            <summary>
            Condition to apply for the rule.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalCellValueRule.Formula1">
            <summary>
            The first formula to be evaluated. When the condition needs only one parameter (for example when condition is "Equal") this is the only formula that is used.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TConditionalCellValueRule.Formula2">
            <summary>
            The second formula to be evaluated. Note that this formula is only used if the condition needs more than one parameter (for example when condition is "Between").
            If using a condition with only one parameter, you can leave this formula to null.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsFile">
            <summary>
            This is the FlexCel Native Engine. Use this class to natively read or write an Excel 97 or newer file.
            </summary>
            <remarks>
            Note that most arrays here are 1-based and not 0-based, to follow the convention used on Excel Automation.
            So, if you are using C# or C++, your loops should look like:
            <code>for (int i=1;i&lt;=SomeProperty.Count;i++)</code> and not
            <code>for (int i=0;i&lt;SomeProperty.Count;i++)</code>
            </remarks>
        </member>
        <member name="T:FlexCel.Core.ExcelFile">
            <summary>
            Interface a flexcel engine has to implement to be used with FlexCelReport.
            </summary>
            <remarks>This is an abstract class encapsulating the FlexCel API. Any implementation on the API must derive from this class.<br/>
            FlexCel provides an implementation of this interface on the class <see cref="T:FlexCel.XlsAdapter.XlsFile"/>.
            </remarks>
        </member>
        <member name="T:FlexCel.Core.IExcelAdapterCOMv1">
            <summary>
            Exposes the ExcelFile interface to COM clients (like visual basic 6). <br/>For documentation on the methods on this interface,
            look at XlsFile and ExcelFile classes.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.#ctor">
            <summary>
            Initializes ExcelFile fields.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NewFile">
            <summary>
            Creates a new empty file, with 3 empty sheets.
            </summary>
            <remarks>
            The file created will have empty properties, (author, description, etc).
            If you want to create a more personalized file when you call NewFile 
            (for example with a given Author, or the sheets names on your language), there are 2 options:
               <list type="number">
               <item>Don't use NewFile, but open an existing file you can modify.</item>
               <item>Or, you can replace the resource "EmptyWorkbooks.resx" (on xlsadapter folder) with your own.
               Create an empty excel file, use resourcer (from http://www.aisto.com/roeder/DotNet/) to create a resx from the xls,
               and then edit the generated resx file with notepad, and change the resource type to string. There are comments on the original EmptyWorkbooks.resx on how this should be done.  
               </item></list> 
            </remarks>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NewFile(System.Int32)">
            <summary>
            Creates a new empty file, with the specified number of sheets.
            </summary>
            <param name="aSheetCount">Number of sheets for the new file</param>
            <remarks>
            The file created will have empty properties, (author, description, etc).
            If you want to create a more personalized file when you call NewFile 
            (for example with a given Author, or the sheets names on your language), there are 2 options:
               <list type="number">
               <item>Don't use NewFile, but open an existing file you can modify.</item>
               <item>Or, you can replace the resource "EmptyWorkbooks.resx" (on xlsadapter folder) with your own.
               Create an empty excel file, use resourcer (from http://www.aisto.com/roeder/DotNet/) to create a resx from the xls,
               and then edit the generated resx file with notepad, and change the resource type to string. There are comments on the original EmptyWorkbooks.resx on how this should be done.  
               </item></list> 
            </remarks>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.String)">
            <summary>
            Loads a new Spreadsheet form disk.
            </summary>
            <param name="fileName">File to open.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream)">
            <summary>
            Loads a new Spreadsheet form a stream.
            </summary>
            <param name="aStream">Stream to Load, must be a seekable stream. Verify it is on the correct position.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.String,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])">
            <summary>
            Loads a new Spreadsheet form disk, on one of the specified formats.
            </summary>
            <param name="fileName">File to open</param>
            <param name="fileFormat">List with possible file formats to try</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/> </param>
            <param name="firstCol">First column where will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType"/> elements, telling how each column should be imported.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.String,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a new Spreadsheet form disk, on one of the specified formats.
            </summary><param name="fileName">File to open</param><param name="fileFormat">List with possible file formats to try</param><param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/> </param><param name="firstCol">First column where will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType"/> elements, telling how each column should be imported.</param>
            <param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt). 
             This parameter has no effect on xls files. If ommited, it is assumed to be Encoding.Default</param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[])">
            <summary>
            Loads a new Spreadsheet form a stream, on one of the specified formats.
            </summary>
            <param name="aStream">Stream to open, must be a seekable stream. Verify it is on the correct position.</param>
            <param name="fileFormat">List with possible file formats to try</param>
            <param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param>
            <param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/> </param>
            <param name="firstCol">First column where will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/></param>
            <param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType"/> elements, telling how each column should be imported.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a new Spreadsheet form a stream, on one of the specified formats.
            </summary><param name="aStream">Stream to open, must be a seekable stream. Verify it is on the correct position.</param><param name="fileFormat">List with possible file formats to try</param><param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/> </param><param name="firstCol">First column where will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType"/> elements, telling how each column should be imported.</param>
            <param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt). 
             This parameter has no effect on xls files. If ommited, it is assumed to be Encoding.Default.</param>
            <param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.String)">
            <summary>
            Saves the file to disk, on native format.
            </summary>
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles"/> is false, then fileName MUST NOT exist.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.IO.Stream)">
            <summary>
            Saves the file to a stream, on native format.
            </summary>
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.String,FlexCel.Core.TFileFormats)">
            <summary>
            Saves the file to a disk.
            </summary>
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles"/> is false, then fileName MUST NOT exist.</param>
            <param name="fileFormat">File format. If file format is text, a tab will be used as delimiter</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.IO.Stream,FlexCel.Core.TFileFormats)">
            <summary>
            Saves the file to a stream.
            </summary>
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
            <param name="fileFormat">File format. If file format is text, a tab will be used as delimiter</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.String,FlexCel.Core.TFileFormats,System.Char)">
            <summary>
            Saves the file to a disk.
            </summary>
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles"/> is false, then fileName MUST NOT exist.</param>
            <param name="fileFormat">File format.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char)">
            <summary>
            Saves the file to a stream.
            </summary>
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
            <param name="fileFormat">File format.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.String,FlexCel.Core.TFileFormats,System.Char,System.Text.Encoding)">
            <summary>
            Saves the file to a disk.
            </summary>
            <param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles"/> is false, then fileName MUST NOT exist.</param>
            <param name="fileFormat">File format.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param>
            <param name="fileEncoding">Encoding for the generated file, when writing a Text-delimited file (csv or txt). 
            This parameter has no effect on xls files. If ommited, Encoding.Default will be used. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Save(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Text.Encoding)">
            <summary>
            Saves the file to a stream.
            </summary>
            <param name="aStream">Stream where to save the file. Must be a seekable stream.</param>
            <param name="fileFormat">File format.</param>
            <param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param>
            <param name="fileEncoding">Encoding for the generated file, when writing a Text-delimited file (csv or txt). 
            This parameter has no effect on xls files. If ommited, Encoding.Default will be used. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String)">
            <summary>
            Finds a sheet name on the workbook and returns its index.
            If it doesn't find the sheet it will raise an exception. 
            See <see cref="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String,System.Boolean)"/> for a method that will not throw an exception.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName"/>. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetName(System.Int32)"/>
            </summary>
            <param name="sheetName">Sheet you want to find.</param>
            <returns>The sheet index if the sheet exists, or throws an Exception otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String,System.Boolean)">
            <summary>
            Finds a sheet name on the workbook and returns its index.
            Depending on the "throwException" parameter, this method will raise
            an exception or return -1 if the sheet does not exist.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName"/>. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetName(System.Int32)"/>
            </summary>
            <param name="sheetName">Sheet you want to find.</param>
            <param name="throwException">When sheetName does not exist, having
            throwException = true will raise an Exception. throwException = false will 
            return -1 if the sheet is not found.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetName(System.Int32)">
            <summary>
            Returns the sheet name for a given index.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName"/>. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String)"/>
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSheetsFromExternSheet(System.Int32,System.Int32@,System.Int32@,System.Boolean@,System.String@)">
            <summary>
            Internal use. Returns the sheets (like sheet1:sheet2) for a given externsheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts and copies sheet "CopyFrom", SheetCount times before InsertBefore.
            To insert empty sheets, set CopyFrom=0.
            </summary>
            <param name="copyFrom">The sheet index of the sheet we are copying from (1 based). Set it to 0 to insert Empty sheets.</param>
            <param name="insertBefore">The sheet before which we will insert (1 based)</param>
            <param name="aSheetCount">The number of sheets to insert.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)">
            <summary>
            Inserts and copies sheet "CopyFrom", SheetCount times before InsertBefore.
            If sourceWorkbook is not null, sheets will be copied from another file.
            To insert empty sheets, set CopyFrom=0. 
            </summary>
            <remarks>When copying sheets from another file, the algorithm used is not so efficient as
            when copying from the same file. Whenever possible, don't copy from different files.</remarks>
            <param name="copyFrom">The sheet index of the sheet we are copying from (1 based). Set it to 0 to insert Empty sheets.</param>
            <param name="insertBefore">The sheet before which we will insert (1 based)</param>
            <param name="aSheetCount">The number of sheets to insert.</param>
            <param name="sourceWorkbook">Workbook from where the sheet will be copied from. Null to copy from the same file.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32[],System.Int32,FlexCel.Core.ExcelFile)">
            <summary>
            Inserts and copies all the sheets in the "CopyFrom" array, before InsertBefore into another workbook.
            </summary>
            <remarks>When copying sheets from another file, the algorithm used is not so efficient as
            when copying from the same file. 
            <p></p>
            Use this version of the method only when copying from 2 different files. If you have for example a formula "=Sheet2!A1" in Sheet1,
            and another formula "=Sheet1!A1" in Sheet2, you need to use this method to copy them, as Copying them one by one
            (with the standard <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)"/>
            method) will return an error of formula references not found.
            <p></p>
            You can also use <see cref="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)"/> method to avoid formulas before copying between workbooks.
            </remarks>
            <param name="copyFrom">The sheet index of all the sheets we are copying from (1 based).</param>
            <param name="insertBefore">The sheet before which we will insert (1 based)</param>
            <param name="sourceWorkbook">Workbook from where the sheet will be copied from. On this overloaded version it cannot be null.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearSheet">
            <summary>
            Clears all data on the active sheet, but does not delete it. <seealso cref="M:FlexCel.Core.ExcelFile.DeleteSheet(System.Int32)"/>
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteSheet(System.Int32)">
            <summary>
            Deletes the active sheet and SheetCount-1 sheets more to the right. 
            It will change all formula references to those sheets to invalid. <seealso cref="M:FlexCel.Core.ExcelFile.ClearSheet"/>
            </summary>
            <param name="aSheetCount">The number of sheets to delete</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasHPageBreak(System.Int32)">
            <summary>
            True if the sheet has a Manual Horizontal page break on the row.
            </summary>
            <param name="row">Row to check.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasVPageBreak(System.Int32)">
            <summary>
            True if the sheet has a Manual Vertical page break on the column.
            </summary>
            <param name="col">Column to check</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertHPageBreak(System.Int32)">
            <summary>
            Inserts an Horizontal Page Break at the specified row. If there is one already, it will do nothing.
            If the number of pagebreaks is bigger than the maximum Excel can admit, it will add it anyway, but you might get an 
            exception when saving the file as xls. Exporting as images or PDF will use those additional page breaks.
            To control what to do when there are too many page breaks, see <see cref="P:FlexCel.Core.ExcelFile.ErrorActions"/>
            </summary>
            <param name="row">Row where to insert the page break.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertVPageBreak(System.Int32)">
            <summary>
            Inserts a Vertical Page Break at the specified column. If there is one already, it will do nothing.
            If the number of pagebreaks is bigger than the maximum Excel can admit, it will add it anyway, but you might get an 
            exception when saving the file as xls. Exporting as images or PDF will use those additional page breaks.
            To control what to do when there are too many page breaks, see <see cref="P:FlexCel.Core.ExcelFile.ErrorActions"/>
            </summary>
            <param name="col">Column where to insert the page break.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteHPageBreak(System.Int32)">
            <summary>
            Deletes all manual page breaks at row. If there is no manual page break on row, this method will do nothing.
            </summary>
            <param name="row">Row where to delete the Page break.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteVPageBreak(System.Int32)">
            <summary>
            Deletes all manual page breaks at col. If there is no manual page break on col, this method will do nothing.
            </summary>
            <param name="col">Column where to delete the Page break</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearPageBreaks">
            <summary>
            Deletes all manual page breaks on the active sheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Tells FlexCel that it must try to keep together the rows between row1 and row2 (inclusive) when printing.  
            This method does nothing to the resulting Excel file since this is not an Excel feature. To actually
            do something, you need to call <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks"/> after calling this method.
            </summary>
            <example>
            If you call:
            <code>
              XlsFile.KeepRowsTogether(1, 10, 1, true);
              XlsFile.KeepRowsTogether(3, 4, 2, true);
            </code>
            This will define two groups. FlexCel will try to keep rows 1 to 10 in one page. But if this is impossible, it will try to keep at least rows 3 and 4 together.<br/>
            Values of the "level" parameter mean the strongness of the link. Rows with higher level values have a stronger link, and if it is impossible to keep all rows together, FlexCel will try to keep the higher level rows.<br/>
            <br/>In this case, Rows 3 and 4 have a higher level, so if rows 1 to 10 cannot be kept together in one page, FlexCel will try to keep at least rows 3 and 4.
            Normally you will want to use higher level values completely inside groups with lower levels.
            If we called:
            <code>
              XlsFile.KeepRowsTogether(1, 10, 1, true);
              XlsFile.KeepRowsTogether(3, 4, 1, true);
            </code>
            The second call would do nothing, since the level is the same, and rows 1 to 10 are already linked.
            </example>
            <param name="row1">First row of the group you want to keep together.</param>
            <param name="row2">Last row of the group you want to keep together.</param>
            <param name="level">Set this parameter to 0 to remove the condition to keep rows together. Any bigger than zero value will mean that
            the rows must be kept together. You can use more than one level to tell FlexCel to try to keep different groups together. 
            If all rows cannot be kept together in one page, FlexCel will try to keep as much rows with higher levels as possible. See the example for more information.</param>
            <param name="replaceLowerLevels">If true, all existing level values in the row range will be replaced. If false, the new level values will be written 
            only if they are bigger than the existing ones. You can use the false setting to set many values in the any order. <br/>
            For example, if you first call KeepRowsTogether(2, 3, 5, false) and then KeepRowsTogether(1, 10, 1, false), rows 2 and 3 will keep the
            level in 5. If you did so with this parameter true, the second call would replace the levels of rows 2 and 3 to level 1, making all row levels between 1 and 10 equal to 1.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Tells FlexCel that it must try to keep together the columns between col1 and col2 (inclusive) when printing.  
            This method does nothing to the resulting Excel file since this is not an Excel feature. To actually
            do something, you need to call <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks"/> after calling this method.
            </summary>
            <example>
            If you call:
            <code>
              XlsFile.KeepColsTogether(1, 10, 1, true);
              XlsFile.KeepColsTogether(3, 4, 2, true);
            </code>
            This will define two groups. FlexCel will try to keep columns 1 to 10 in one page. But if this is impossible, it will try to keep at least columns 3 and 4 together.<br/>
            Values of the "level" parameter mean the strongness of the link. Columns with higher level values have a stronger link, and if it is impossible to keep all columns together, FlexCel will try to keep the higher level columns.<br/>
            <br/>In this case, Columns 3 and 4 have a higher level, so if columns 1 to 10 cannot be kept together in one page, FlexCel will try to  keep at least columns 3 and 4.
            Normally you will want to use higher level values completely inside groups with lower levels.
            If we called:
            <code>
              XlsFile.KeepColsTogether(1, 10, 1, true);
              XlsFile.KeepColsTogether(3, 4, 1, true);
            </code>
            The second call would do nothing, since the level is the same, and columns 1 to 10 are already linked.
            </example>
            <param name="col1">First column of the group you want to keep together.</param>
            <param name="col2">Last column of the group you want to keep together.</param>
            <param name="level">Set this parameter to 0 to remove the condition to keep columns together. Any bigger than zero value will mean that
            the rows must be kept together. You can use more than one level to tell FlexCel to try to keep different groups together,
            If all columns cannot be kept together in one page, FlexCel will try to keep as much columns with higher levels as possible. See the example for more information.</param>
            <param name="replaceLowerLevels">If true, all existing level values in the column range will be replaced. If false, the new level values will be written 
            only if they are bigger than the existing ones. You can use the false setting to set many values in the any order. <br/>
            For example, if you first call KeepColsTogether(2, 3, 5,false) and then KeepColsTogether(1, 10, 1, false), columns 2 and 3 will keep the
            level in 5. If you did so with this parameter true, the second call would replace the levels of columns 2 and 3 to level 1, making all column levels between 1 and 10 equal to 1.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearKeepRowsAndColsTogether">
            <summary>
            Clears all the "KeepTogether" links in the current page.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetKeepRowsTogether(System.Int32)">
            <summary>
            Returns the value of level for a row as set in <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. Note that the last value of a "keep together" range is 0.
            For example, if you set KeepRowsTogether(1, 3, 8, true); GetKeepRowsTogether will return 8 for rows 1 and 2, and 0 for row 3.
            </summary>
            <param name="row">Row index. (1 based)</param>
            <returns>The Keep together level of the row.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetKeepColsTogether(System.Int32)">
            <summary>
            Returns the value of level for a column as set in <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. Note that the last value of a "keep together" range is 0.
            For example, if you set KeepColsTogether(1, 3, 8, true); GetKeepColsTogether will return 8 for columns 1 and 2, and 0 for column 3.
            </summary>
            <param name="col">Column index. (1 based)</param>
            <returns>The Keep together level of the column.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasKeepRowsTogether">
            <summary>
            Returns true if there is any row marked as keeptogether in the sheet.
            This method traverses every row to find out, so it acn be somehow slow and you should not call it too often.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasKeepColsTogether">
            <summary>
            Returns true if there is any column marked as keeptogether in the sheet.
            This method traverses every column to find out, so it acn be somehow slow and you should not call it too often.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutoPageBreaks">
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks"/>) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary>
            <remarks>This methood is the same as calling AutoPageBreaks(20, 95)</remarks>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutoPageBreaks(System.Int32,System.Int32)">
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks"/>) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary>
            <param name="PercentOfUsedSheet">Percentage of the sheet that must be used in any page when fitting the rows and columns.
            A value of zero means that no part of the sheet must be used, so FlexCel might add a page break after a single row in a page, leaving it almost completely blank.<br/>
            A value of 50% means that half of the page must be used. This means that FlexCel will add a page break only if there is 50% of the current page already used.<br/>
            A value of 100% will do nothing, since the sheet must be completely used, and so FlexCel can never add a page break.<br/></param>
            <param name="PageScale">This parameter must be between 50 and 100, and means how much smaller page will be considered in order to calculate the page breaks.
            <br/> A value of 100 means that the size used in the calculation will be the real size of the page, and while this will always work fine when exporting to pdf 
            or exporting to images, when printing from Excel might result in a page break that is placed a little after where it should go and an empty page for ceirtain printers.
            (Page size in Excel is different for different printers) Normally a value around 95 is the recommended value for this parameter.<br/>
            If you need to do a finer grain adjustment, you can use <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks(System.Int32,System.Drawing.RectangleF)"/>.
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutoPageBreaks(System.Int32,System.Drawing.RectangleF)">
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks"/>) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary>
            <param name="PercentOfUsedSheet">Percentage of the sheet that must be used in any page when fitting the rows and columns.
            A value of zero means that no part of the sheet must be used, so FlexCel might add a page break after a single row in a page, leaving it almost completely blank.<br/>
            A value of 50% means that half of the page must be used. This means that FlexCel will add a page break only if there is 50% of the current page already used.<br/>
            A value of 100% will do nothing, since the sheet must be completely used, and so FlexCel can never add a page break.<br/></param>
            <param name="PageBounds">You can customize a custom page size here. If width or height of this parameter is 0, the paper size specified in the file
            will be used. There is normaly no need to set this parameter, unless you want to fine tune the results.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValue(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads a Cell Value and Format.
            </summary>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="XF">XF format.</param>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula"/>, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/> or
             a <see cref="T:FlexCel.Core.TRichString"/>. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValue(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads a Cell Value and Format from a sheet that is not the active sheet.
            </summary>
            <param name="sheet">Sheet where is the cell you want to get the value.</param>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="XF">XF format.</param>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula"/>, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/> or
             a <see cref="T:FlexCel.Core.TRichString"/>. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValueIndexed(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads a Cell Value and Format, using a column index for faster access. Normal GetCellValue(row, col)
            has to search for the column on a sorted list. If you are looping from 1 to <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)"/>
            this method is faster.
            </summary>
            <param name="row">Row, 1 based.</param>
            <param name="colIndex">Column index, 1 based.</param>
            <param name="XF">XF format.</param>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula"/>, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/> or
             a <see cref="T:FlexCel.Core.TRichString"/>. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValueAndRecalc(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This is used internally to get the value of another part of the workbook.
            No checks are made, and we try to recalculate the value before sending it.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="sheet"></param>
            <param name="InSubtotal"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellValue(System.Int32,System.Int32,System.Object,System.Int32)">
            <summary>
            Sets the value and format on a cell.
            </summary>
            <remarks>This method will enter the datatype of the object you pass to it. For example, if you set value="1"
            the string "1" will be entered on the cell. To convert a string to the best representation (on this case a number), use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32)"/>
            To enter a HTML formatted string, use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)"/> 
            </remarks>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="value">Value to set.</param>
            <param name="XF">Format to Set. You normally get this number with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellValue(System.Int32,System.Int32)">
            <summary>
            Reads a Cell Value.
            </summary>
            <remarks>This method will return the real value stored on the cell. For example, if you have "1.3" formatted as "1.30",
            GetCellValue will return the number 1.3. To get a string with the formatted value, see <see cref="M:FlexCel.Core.ExcelFile.GetStringFromCell(System.Int32,System.Int32)"/></remarks>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula"/>, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/> or
             <see cref="T:FlexCel.Core.TRichString"/>. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the value on a cell.
            </summary>
            <remarks>This method will enter the datatype of the object you pass to it. For example, if you set value="1"
            the string "1" will be entered on the cell. To convert a string to the best representation (on this case a number), use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32)"/>.
            To enter a HTML formatted string, use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)"/> 
            </remarks>
            <param name="row">Row, 1 based.</param>
            <param name="col">Column, 1 based.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertString(FlexCel.Core.TRichString,System.Int32@)">
            <summary>
            Converts a string into the best datatype (a boolean, a number, etc)
            </summary>
            <remarks>See <see cref="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32)"/> for more information.</remarks>
            <param name="value">RichString to convert.</param>
            <param name="XF">XF of the cell. It might be modified, for example, if you are entering a date.</param>
            <returns>value converted to the best datatype.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32)">
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary><remarks>
            When using CellValue to set a cell value, you have to know the datatype you want to enter. 
            That is, if you have a string s="1/1/2002" and call SetCellValue(1,1,s); the cell A1 will 
            end up with a string "1/1/2002" and not with a date. The same if you have a string holding a number.
            <para></para>
            <para>SetCellFromString tries to solve this problem. When you call SetCellFromString(1,1,s) it will see:</para>
            <list type="number">
             <item> If s contains a valid number: If it does, it will enter the number into the cell, and not the string s</item>
             <item> If s contains a boolean:      If s equals the words "TRUE" or "FALSE" (or whatever you define on the constants TxtTrue and TxtFalse) it will enter the boolean into the cell</item>
             <item> If s contains a date:         If s is a valid date (according to your windows settings) it will enter a number into the cell and format the cell as a date. (see UsingFlexCelAPI.pdf)</item>
             <item> In any other case, it will enter the string s into the cell.</item>
             </list>
            </remarks><param name="row">Cell Row (1 based)</param><param name="col">Cell Column (1 based)</param><param name="value">Value to enter into the cell.</param>
             <param name="XF">New XF of the cell. It can be modified, i.e. if you enter a date, the XF will be converted to a Date XF.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString)">
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary>
            <remarks>
            When using CellValue to set a cell value, you have to know the datatype you want to enter. 
            That is, if you have a string s="1/1/2002" and call SetCellValue(1,1,s); the cell A1 will 
            end up with a string "1/1/2002" and not with a date. The same if you have a string holding a number.
            <para></para>
            <para>SetCellFromString tries to solve this problem. When you call SetCellFromString(1,1,s) it will see:</para>
            <list type="number">
             <item> If s contains a valid number: If it does, it will enter the number into the cell, and not the string s</item>
             <item> If s contains a boolean:      If s equals the words "TRUE" or "FALSE" (or whatever you define on the constants TxtTrue and TxtFalse) it will enter the boolean into the cell</item>
             <item> If s contains a date:         If s is a valid date (according to your windows settings) it will enter a number into the cell and format the cell as a date. (see UsingFlexCelAPI.pdf)</item>
             <item> In any other case, it will enter the string s into the cell.</item>
             </list>
            </remarks>
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="value">Value to enter into the cell.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary><remarks>
            When using CellValue to set a cell value, you have to know the datatype you want to enter. 
            That is, if you have a string s="1/1/2002" and call SetCellValue(1,1,s); the cell A1 will 
            end up with a string "1/1/2002" and not with a date. The same if you have a string holding a number.
            <para></para>
            <para>SetCellFromString tries to solve this problem. When you call SetCellFromString(1,1,s) it will see:</para>
            <list type="number">
             <item> If s contains a valid number: If it does, it will enter the number into the cell, and not the string s</item>
             <item> If s contains a boolean:      If s equals the words "TRUE" or "FALSE" (or whatever you define on the constants TxtTrue and TxtFalse) it will enter the boolean into the cell</item>
             <item> If s contains a date:         If s is a valid date (according to your windows settings) it will enter a number into the cell and format the cell as a date. (see UsingFlexCelAPI.pdf)</item>
             <item> In any other case, it will enter the string s into the cell.</item>
             </list>
            </remarks><param name="row">Cell Row (1 based)</param><param name="col">Cell Column (1 based)</param><param name="value">Value to enter into the cell.</param><param name="XF">New XF of the cell. It can be modified, i.e. if you enter a date, the XF will be converted to a Date XF.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,System.String)">
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary><remarks>
            When using CellValue to set a cell value, you have to know the datatype you want to enter. 
            That is, if you have a string s="1/1/2002" and call SetCellValue(1,1,s); the cell A1 will 
            end up with a string "1/1/2002" and not with a date. The same if you have a string holding a number.
            <para></para>
            <para>SetCellFromString tries to solve this problem. When you call SetCellFromString(1,1,s) it will see:</para>
            <list type="number">
             <item> If s contains a valid number: If it does, it will enter the number into the cell, and not the string s</item>
             <item> If s contains a boolean:      If s equals the words "TRUE" or "FALSE" (or whatever you define on the constants TxtTrue and TxtFalse) it will enter the boolean into the cell</item>
             <item> If s contains a date:         If s is a valid date (according to your windows settings) it will enter a number into the cell and format the cell as a date. (see UsingFlexCelAPI.pdf)</item>
             <item> In any other case, it will enter the string s into the cell.</item>
             </list>
            </remarks><param name="row">Cell Row (1 based)</param><param name="col">Cell Column (1 based)</param><param name="value">Value to enter into the cell.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStringFromCell(System.Int32,System.Int32,System.Int32@,System.Drawing.Color@)">
            <summary>
            This method will return a rich string that is formatted similar to the way Excel shows it.
            For example, if you have "1.0" on a cell, and the cell is formatted as exponential, this method will return "1.0e+1"
            It might also change the color depending on the value and format. (for example, red for negative numbers) 
            </summary>
            <param name="row">Cell Row (1 based). </param>
            <param name="col">Cell Column (1 based)</param>
            <param name="XF">The resulting XF for the cell.</param>
            <param name="aColor">Resulting color of the string. If for example you define red for negative numbers, and the result is red, this will
            be returned on aColor. If there is not color info on the format, it will remain unchanged.</param>
            <returns>A rich string with the cell value.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStringFromCell(System.Int32,System.Int32)">
            <summary>
            This method will return a rich string that is formatted similar to the way Excel shows it.
            For example, if you have "1.0" on a cell, and the cell is formatted as exponential, this method will return "1.0e+1"
            An overloaded version might also change the color depending on the value and format. (for example, red for negative numbers)
            </summary>
            <param name="row">Cell Row (1 based). </param>
            <param name="col">Cell Column (1 based)</param>
            <returns>A rich string with the cell value.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String)">
            <summary>
            Enters an HTML formatted string into a cell, and tries to match the Excel formats with the Html formatting tags.
            Note that the rich text inside Excel is more limited than xls (you are limited to only changing font attributes),
            so many tags from the HTML tags might be ignored. Whenever a tag is not understood or cannot be mapped into Excel,
            it will just be omitted. For a list of supported tags, see the <b>Remarks</b> section.
            </summary>
            <remarks>
            Any tag (between brackets) will be stripped from the entered text. If you want to
            enter a &lt; sign, you need to enter "&amp;lt;". For a list of all "&amp;" possible symbols
            consult any HTML reference. &amp;[HexadecimalUnicodeCharacer] are supported too. <br/>
            All tags are case insensitive. <br/>
            Spaces will be eliminated from the string as in normal HTML. To enter a "hard" space you can enter "&amp;nbsp;"
            (non breaking space). Also, if text is inside "pre" tags, spaces will be preserved.
            <br/><br/>
            
            The supported tags are: 
            <list type="bullet">
            <item><b>b</b> or <b>strong</b> - Bold.</item>
            <item><b>i</b> or <b>em</b>- Italics.</item>
            <item><b>u</b> - Underline.</item>
            <item><b>s</b> or <b>strike</b>- Strikeout.</item>
            <item><b>sub</b> - Subscript.</item>
            <item><b>sup</b> - Superscript.</item>
            <item><b>tt</b> - Use monospace font.</item>
            <item><b>pre</b> - Preserve spaces and returns. On normal mode, if you have 2 spaces on a string, only one will be kept.</item>
            <item><b>font</b> - Change the used font. This tag behaves as normal HTML, and you can specify 
            <i>color</i>, <i>face</i>, <i>point-size</i> or <i>size</i> as attributes. Size might be between 1 and 7, 
            and the size in points are 8, 9, 12, 14, 18, 24, 34 for each size. You can also specify relative sizes (for example -1)</item>
            <item><b>h1</b>..<b>h6</b> - Header fonts.</item>
            <item><b>small</b> - Use a smaller font. This is equivalent to &lt;font size = '-1'&gt;</item>
            <item><b>big</b> - Use a bigger font. This is equivalent to &lt;font size = '+1'&gt;</item>
            </list>
            </remarks>
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="htmlText">Text with an html formatted string.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Enters an HTML formatted string into a cell, and tries to match the Excel formats with the Html formatting tags.
            Note that the rich text inside Excel is more limited than xls (you are limited to only changing font attributes),
            so many tags from the HTML tags might be ignored. Whenever a tag is not understood or cannot be mapped into Excel,
            it will just be omitted. For a list of supported tags, see the <b>Remarks</b> section.
            </summary><remarks>
            Any tag (between brackets) will be stripped from the entered text. If you want to
            enter a &lt; sign, you need to enter "&amp;lt;". For a list of all "&amp;" possible symbols
            consult any HTML reference. &amp;[HexadecimalUnicodeCharacer] are supported too. <br/>
            All tags are case insensitive. <br/>
            Spaces will be eliminated from the string as in normal HTML. To enter a "hard" space you can enter "&amp;nbsp;"
            (non breaking space). Also, if text is inside "pre" tags, spaces will be preserved.
            <br/><br/>
            
            The supported tags are: 
            <list type="bullet">
            <item><b>b</b> or <b>strong</b> - Bold.</item>
            <item><b>i</b> or <b>em</b>- Italics.</item>
            <item><b>u</b> - Underline.</item>
            <item><b>s</b> or <b>strike</b>- Strikeout.</item>
            <item><b>sub</b> - Subscript.</item>
            <item><b>sup</b> - Superscript.</item>
            <item><b>tt</b> - Use monospace font.</item>
            <item><b>pre</b> - Preserve spaces and returns. On normal mode, if you have 2 spaces on a string, only one will be kept.</item>
            <item><b>font</b> - Change the used font. This tag behaves as normal HTML, and you can specify 
            <i>color</i>, <i>face</i>, <i>point-size</i> or <i>size</i> as attributes. Size might be between 1 and 7, 
            and the size in points are 8, 9, 12, 14, 18, 24, 34 for each size. You can also specify relative sizes (for example -1)</item>
            <item><b>h1</b>..<b>h6</b> - Header fonts.</item>
            <item><b>small</b> - Use a smaller font. This is equivalent to &lt;font size = '-1'&gt;</item>
            <item><b>big</b> - Use a bigger font. This is equivalent to &lt;font size = '+1'&gt;</item>
            </list>
            </remarks><param name="row">Cell Row (1 based)</param><param name="col">Cell Column (1 based)</param><param name="htmlText">Text with an html formatted string.</param>
             <param name="XF">Format for the cell. It can be -1 to keep the existing format.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHtmlFromCell(System.Int32,System.Int32,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)">
            <summary>
            Returns the contents of formatted cell as HTML. Conditional formats are not applied, you need to call <see cref="M:FlexCel.Core.ExcelFile.ConditionallyModifyFormat(FlexCel.Core.TFlxFormat,System.Int32,System.Int32)"/> to the cell style for that. 
            If <see cref="P:FlexCel.Core.ExcelFile.ShowFormulaText"/> is true, it will return the formula text instead of the value.
             For a list of html tags that might be returned, see the <b>Remarks</b> section.
            </summary>
            <remarks>
            Text will be returned as standard HTML, on the version specified. This means that 
            for example a &lt; sign will be returned as "&amp;lt;". For a list of all "&amp;" possible symbols
            consult any HTML reference. &amp;[HexadecimalUnicodeCharacer] might be returned too. <br/>
            <br/>
            Multiple spaces will be returned as "&amp;nbsp;"
            (non breaking space) and line breaks will be returned as &lt;br&gt; tags. 
            <br/><br/>
            
            The tags that might be returned by this method are: 
            If htmlStyle is Simple:
            <list type="bullet">
            <item><b>b</b> - Bold.</item>
            <item><b>i</b> - Italics.</item>
            <item><b>u</b> - Underline.</item>
            <item><b>s</b> - Strikeout.</item>
            <item><b>sub</b> - Subscript.</item>
            <item><b>sup</b> - Superscript.</item>
            <item><b>font</b> - Change the used font. This tag behaves as normal HTML, and you can specify 
            <i>color</i>, <i>face</i>, <i>point-size</i> or <i>size</i> as attributes. Size might be between 1 and 7, 
            and the size in points are 8, 9, 12, 14, 18, 24, 34 for each size. You can also specify relative sizes (for example -1)</item>
            </list>
            <br/>
            If htmlStlye is Css:
            The equivalent CSS style commands to the ones listed under htmlStyle = Simple.
            </remarks>
            <param name="row">Cell Row (1 based)</param>
            <param name="col">Cell Column (1 based)</param>
            <param name="htmlVersion">Version of the html returned. In XHTML, single tags have a "/" at the end, while in 4.0 they don't.</param>
            <param name="htmlStyle">Specifies if to use simple tags or for the returned HTML.</param>
            <param name="encoding">Encoding for the returned string. Use UTF-8 if in doubt.</param>
            <returns>An Html formatted string with the cell contents.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyCell(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TRangeCopyMode)">
            <summary>
            Copies <b>one</b> cell from one workbook to another. If the cell has a formula, it will be offset so it matches the new destination.
            <b>Note:</b> You will normally not need this method. To copy a range of cells from a workbook to another use 
            <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32)"/> instead.
            To copy a full sheet from one file to another, use <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)"/>.
            </summary>
            <param name="sourceWorkbook">File from where we want to copy the cell.</param>
            <param name="sourceSheet">Sheet in sourceWorkbook where the data is.</param>
            <param name="destSheet">Sheet in this file where we want to copy the data.</param>
            <param name="sourceRow">Row on the source file of the cell (1 based)</param>
            <param name="sourceCol">Column on the source file of the cell (1 based)</param>
            <param name="destRow">Row on the destination file of the cell (1 based)</param>
            <param name="destCol">Column on the destination file of the cell (1 based)</param>
            <param name="copyMode">How the cell will be copied.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)">
            <summary>
            Returns the format definition for a given format index.
            </summary>
            <param name="XF">Format index 0-Based</param>
            <returns>Format definition</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)">
            <summary>
            Adds a new format to the Excel format list. If it already exists, it doesn't add a new one, so you can use this method for searching too.
            </summary>
            <param name="format">Format to add to the list.</param>
            <returns>Position on the list for the format.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetFormat(System.Int32,FlexCel.Core.TFlxFormat)">
            <summary>
            Sets the font definition for a given format index. Normally it is of not use, (you should use AddFont or AddFormat instead) but could be used
            to change the default format. (using SetFormat(0, fmt); )
            </summary>
            <param name="formatIndex">Format index. 0-based</param>
            <param name="aFormat">Format definition</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetFont(System.Int32)">
            <summary>
            Returns the font definition for a given font index.
            </summary>
            <param name="fontIndex">Font index. 0-based</param>
            <returns>Font definition</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetFont(System.Int32,FlexCel.Core.TFlxFont)">
            <summary>
            Sets the font definition for a given font index. Normally it is of not use, (you should use AddFont or AddFormat instead) but could be used
            to change the default font format. (using SetFont(0, font); )
            </summary>
            <param name="fontIndex">Font index. 0-based</param>
            <param name="aFont">Font definition</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddFont(FlexCel.Core.TFlxFont)">
            <summary>
            Adds a new font to the excel font list.  If it already exists, it doesn't add a new one, so you can use this method for searching too.
            </summary>
            <param name="font">Font to add to the list.</param>
            <returns>The position on the list for the added font.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Cell format (XF) on a given cell.
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/>
            </summary>
            <param name="row">Row index of the cell (1 based)</param>
            <param name="col">Column index of the cell (1 based)</param>
            <param name="XF">XF Format index. See Using FlexCel API.pdf.&gt;</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Cell format (XF) on a range of cells.
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/>
            </summary>
            <param name="row1">Row index of the top cell on the range (1 based)</param>
            <param name="col1">Column index of the left cell on the range (1 based)</param>
            <param name="row2">Row index of the bottom cell on the range (1 based)</param>
            <param name="col2">Column index of the right cell on the range (1 based)</param>
            <param name="XF">XF Format index. See Using FlexCel API.pdf.&gt;</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat)">
            <summary>
            Changes part of the Cell format on a range of cells. WARNING! This method is slower than the other SetCellFormat versions, use it only
            if you do not care about maximum performance or if you just can't use the other SetCellFormat versions.
            This particular version of SetCellFormat has to read the format on each cell, modify it and write it back.
            While still very fast, it is not as fast as just setting the format on a cell.
            </summary>
            <remarks>
            You can use this method for example to add a border on the top of a row of cells, keeping the existing font and pattern styles on the range.
            </remarks>
            <param name="row1">Row index of the top cell on the range (1 based)</param>
            <param name="col1">Column index of the left cell on the range (1 based)</param>
            <param name="row2">Row index of the bottom cell on the range (1 based)</param>
            <param name="col2">Column index of the right cell on the range (1 based)</param>
            <param name="newFormat">Format to apply to the cells.></param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param> 
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <summary>
            Changes part of the Cell format on a range of cells. WARNING! This method is slower than the other SetCellFormat versions, use it only
            if you do not care about maximum performance or if you just can't use the other SetCellFormat versions.
            This particular version of SetCellFormat has to read the format on each cell, modify it and write it back.
            While still very fast, it is not as fast as just setting the format on a cell.
            </summary>
            <remarks>
            You can use this method for example to add a border on the top of a row of cells, keeping the existing font and pattern styles on the range.
            </remarks>
            <param name="row1">Row index of the top cell on the range (1 based)</param>
            <param name="col1">Column index of the left cell on the range (1 based)</param>
            <param name="row2">Row index of the bottom cell on the range (1 based)</param>
            <param name="col2">Column index of the right cell on the range (1 based)</param>
            <param name="newFormat">Format to apply to the cells.></param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param> 
            <param name="exteriorBorders">When true, the format for the border will be applied only to the outer cells in the range. This can
            be useful for example to draw a box around a range of cells, but not drawing borders inside the range. 
            Other parameters, like the cell background, will still be applied to the full range.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)">
            <summary>
            Cell Format for a given cell
            This method gets the Format number (XF) of a cell. 
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/>
            </summary>
            <remarks>This method DOES NOT return format for an empty cell, even if it
            has a column or a row format. For the visible format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/></remarks>
            <example>
            To copy the format on cell A1 to B2 you should write:
            <code>
            XlsFile.SetCellFormat(2,2,XlsFile.GetCellFormat(1,1));
            </code></example>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <returns>XF for the cell.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Cell Format for a given cell
            This method gets the Format number (XF) of a cell. 
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/>
            </summary><remarks>This method DOES NOT return format for an empty cell, even if it
            has a column or a row format. For the visible format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/></remarks><example>
            To copy the format on cell A1 to B2 you should write:
            <code>
            XlsFile.SetCellFormat(2,2,XlsFile.GetCellFormat(1,1));
            </code></example><param name="row">Row Index (1 based)</param><param name="col">Column Index (1 based)</param><returns>XF for the cell.</returns>
            <param name="sheet">Sheet index (1 based).</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)">
            <summary>
            Cell Format for a given cell, including the format of the row and the column.
            <remarks>This might return format even if the cell is empty, if the column or the row have format.
            For the real format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/>
            </remarks>
            <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormatDef(System.Int32,System.Int32)"/>
            </summary>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <returns>XF for the cell</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Cell Format for a given cell, including the format of the row and the column.
            <remarks>This might return format even if the cell is empty, if the column or the row have format.
            For the real format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/>
            </remarks>
            <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormatDef(System.Int32,System.Int32)"/>
            </summary>
            <param name="sheet">Sheet index (1 based)</param>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <returns>XF for the cell</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellVisibleFormatDef(System.Int32,System.Int32)">
            <summary>
            Cell Format for a given cell, including the format of the row and the column.
            <remarks>This might return format even if the cell is empty, if the column or the row have format.
            For the real format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/>
            This is a shortcut for GetCellVisibleFormat, returning the final Format struct.
            </remarks>
            <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/>
            </summary>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <returns>Format for the cell</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCellVisibleFormatDef(System.Int32,System.Int32,System.Int32)">
            <summary>
            Cell Format for a given cell, including the format of the row and the column.
            <remarks>This might return format even if the cell is empty, if the column or the row have format.
            For the real format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/>
            This is a shortcut for GetCellVisibleFormat, returning the final Format struct.
            </remarks>
            <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/>
            </summary>
            <param name="sheet">Sheet index. (1 based)</param>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <returns>Format for the cell</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConditionallyModifyFormat(FlexCel.Core.TFlxFormat,System.Int32,System.Int32)">
            <summary>
            Modifies the format of the specified cell if it has a conditional format active.
            Returns a modified format with the applied conditional format if there was any change, null otherwise.
            </summary>
            <param name="format">Original format of the cell.</param>
            <param name="row">Row of the cell (1 based)</param>
            <param name="col">Column of the cell (1 based)</param>
            <returns>If the format is modified by a conditional format, it returns the new format.
            If there are no changes returns null, to avoid creating new instances of TFlxFormat.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStyleName(System.Int32)">
            <summary>
            Gets the name of the style at position index. (1 based).
            </summary>
            <param name="index">Position in the list of styles (1 based).</param>
            <returns>The name of the style.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStyle(System.Int32)">
            <summary>
            Returns the named style at position index for the workbook
            </summary>
            <param name="index">Position in the list of styles (1 based).</param>
            <returns>The named style definition.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetStyle(System.String)">
            <summary>
            Returns a named style for the workbook. You can also use this method to check if a style exists or not.
            </summary>
            <param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of buit.in names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)"/></param>
            <returns>The style definition, or null if the style doesn't exists.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenameStyle(System.String,System.String)">
            <summary>
            Renames an existing style. Note that this might be an user-defined style, you can't rename built-in styles.
            </summary>
            <param name="oldName">Name of the existing style in the workbook.</param>
            <param name="newName">New name for the style. It must not exist.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetStyle(System.String,FlexCel.Core.TFlxFormat)">
            <summary>
            Modifies an existing style if name already exists, or creates a new style if it doesn't. 
            </summary>
            <param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of buit.in names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)"/></param>
            <param name="fmt">The new style definition.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteStyle(System.String)">
            <summary>
            Returns a named style for the workbook.
            </summary>
            <param name="name">Name for the style. It must be an user defined name.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)">
            <summary>
            Returns the name for a built-in style.
            </summary>
            <param name="style">Style you want find out the name.</param>
            <param name="level">Used only if style is <see cref="F:FlexCel.Core.TBuiltInStyle.RowLevel"/> or <see cref="F:FlexCel.Core.TBuiltInStyle.ColLevel"/>. It specifies the level of the outline,
            and must be a number between 1 and 7. Keep it 0 for all other styles.</param>
            <returns>The name for the Built in style.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)">
            <summary>
            Merged Range where the cell is.
            <seealso cref="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)"/><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)"/>
            </summary>
            <example>
            If you have a merged cell in range A1: B2, calling CellMergedBounds on any of the cells: A1, B1, A2, B2 will return A1:B2.
            </example>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <returns>The range where the cell is</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges a number of cells into one.
            <seealso cref="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)"/><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)"/>
            </summary>
            <param name="firstRow">First row of the merged cell.</param>
            <param name="firstCol">First column of the merged cell.</param>
            <param name="lastRow">Last row of the merged cell.</param>
            <param name="lastCol">Last column of the merged cell.</param>
            <remarks>This method might return a bigger range than the one you specify.
            For example, if you have a merged cell (A1:C1), calling MergeCells(1,2,2,2) will 
            merge the cell with the existing one, returning ONE merged cell (A1:C2), and not (B1:B2)
            <p></p>
            Other thing to consider, is that Excel honors individual linestyles inside a merged cell.
            That is, you can have only the first 2 columns of the merged cell with a line and the others without.
            Normally, after merging the cells, you will want to call <see cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/> on the range
            to make them all similar. FlexCel does not do it by default, to give the choice to you.</remarks>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Unmerges the range of cells. The coordinates have to be exact, if there is no
            merged cell with the exact coordinates, nothing will be done.
            <seealso cref="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)"/><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)"/>
            </summary>
            <param name="firstRow">First row of the merged cell.</param>
            <param name="firstCol">First column of the merged cell.</param>
            <param name="lastRow">Last row of the merged cell.</param>
            <param name="lastCol">Last column of the merged cell.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)">
            <summary>
            The Merged cell at position index on the mergedcell list.
            <seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount"/>
            </summary>
            <param name="index">index on the list (1 based)</param>
            <returns>The merged cell at position index.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowCount(System.Int32)">
            <summary>
            Number of rows actually used on a given sheet. 
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsEmptyRow(System.Int32)">
            <summary>
            True if the specified row does not have any cells, nor any format on it.
            In short, this row has never been used.
            </summary>
            <param name="row">Row to test (1-based)</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsNotFormattedCol(System.Int32)">
            <summary>
            True if the specified column does not have any format applied on it.
            </summary>
            <param name="col">Column to test (1-based)</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowFormat(System.Int32)">
            <summary>
            Gets the XF format for the specified row, -1 if the row doesn't have format.
            </summary>
            <param name="row">Row index (1-based)</param>
            <returns>XF format.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowFormat(System.Int32,System.Int32)">
            <summary>
            Gets the XF format for the specified row, -1 if the row doesn't have format.
            </summary><param name="row">Row index (1-based)</param><returns>XF format.</returns>
            <param name="sheet">Sheet index (1 based).</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowFormat(System.Int32,System.Int32)">
            <summary>
            Sets the XF format for the entire row.
            </summary>
            <param name="row">Row index (1-based)</param>
            <param name="XF">XF format.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowFormat(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the XF format for the entire row.
            </summary>
            <param name="row">Row index (1-based)</param>
            <param name="XF">XF format.</param>
            <param name="resetRow">When true, all existing cells on the row will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowFormat(System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <summary>
            Sets the format characteristics specified in ApplyFormat for the entire row.
            </summary>
            <param name="row">Row index (1-based)</param>
            <param name="newFormat">Format to apply.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param> 
            <param name="resetRow">When true, all existing cells on the row will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColFormat(System.Int32)">
            <summary>
            Gets the XF format for the specified column, -1 if the column doesn't have format.
            </summary>
            <param name="col">Column index (1-based)</param>
            <returns>XF format.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColFormat(System.Int32,System.Int32)">
            <summary>
            Gets the XF format for the specified column, -1 if the column doesn't have format.
            </summary><param name="col">Column index (1-based)</param><returns>XF format.</returns>
            <param name="sheet">Sheet index (1 based).</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the format for an entire column.
            </summary>
            <param name="col">Column to set.</param>
            <param name="XF">XF Format index.</param>
            <param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,System.Int32)">
            <summary>
            Sets the format for an entire column.
            </summary>
            <param name="col">Column to set.</param>
            <param name="XF">XF Format index.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColFormat(System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <summary>
            Sets the format characteristics specified in ApplyFormat for the entire column.
            </summary>
            <param name="col">Column to set.</param>
            <param name="newFormat">Format to apply.</param>
            <param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param> 
            <param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowOptions(System.Int32)">
            <summary>
            Returns all Row options at once (if the row is autosize, if it is hidden, etc). 
            </summary>
            <param name="row">Row Index (1 based)</param>
            <remarks>
            To get individual values, use the corresponding methods (i.e. <see cref="M:FlexCel.Core.ExcelFile.GetAutoRowHeight(System.Int32)"/>)
            Use this method only to copy the options from one row to another. 
            </remarks>
            <example>
            To copy all the row options from row 1 to 2, use
            <code>SetRowOptions(2,GetRowOptions(1));</code>
            This is much faster than assigning each option alone.
            </example>
            <returns>Row options</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowOptions(System.Int32,System.Int32)">
            <summary>
            Sets all Row options at once (if the row is autosize, if it is hidden, etc). 
            </summary>
            <param name="row">Row Index (1 based)</param>
            <param name="options">A flag with all row options</param>
            <remarks>
            To set individual values, use the corresponding methods (i.e. <see cref="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)"/>)
            Use this method only to copy the options from one row to another. 
            </remarks>
            <example>
            To copy all the row options from row 1 to 2, use
            <code>SetRowOptions(2,GetRowOptions(1));</code>
            This is much faster than assigning each option alone.
            </example>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColOptions(System.Int32)">
            <summary>
            Returns all Column options at once (if the column is hidden, etc). 
            </summary>
            <param name="col">Column Index (1 based)</param>
            <remarks>
            To get individual values, use the corresponding methods (i.e. <see cref="M:FlexCel.Core.ExcelFile.GetColHidden(System.Int32)"/>)
            Use this method only to copy the options from one column to another. 
            </remarks>
            <example>
            To copy all the column options from column 1 to 2, use
            <code>SetColOptions(2,GetColOptions(1));</code>
            This is much faster than assigning each option alone.
            </example>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColOptions(System.Int32,System.Int32)">
            <summary>
            Sets all Column options at once (if the column is hidden, etc). 
            </summary>
            <param name="col">Column Index (1 based)</param>
            <param name="options">A flag with all column options.</param>
            <remarks>
            To set individual values, use the corresponding methods (i.e. <see cref="M:FlexCel.Core.ExcelFile.SetColHidden(System.Int32,System.Boolean)"/>)
            Use this method only to copy the options from one column to another. 
            </remarks>
            <example>
            To copy all the column options from column 1 to 2, use
            <code>SetColOptions(2,GetColOptions(1));</code>
            This is much faster than assigning each option alone.
            </example>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHeight(System.Int32)">
            <summary>
            Returns the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks>
            <example><code>RowHeightInPixels=GetRowHeight(Row)/FlxConsts.RowMult;</code></example>
            <param name="row">Row Index (1 based)</param>
            <returns>Row height in internal excel units.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHeight(System.Int32,System.Boolean)">
            <summary>
            Returns the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks>
            <example><code>RowHeightInPixels=GetRowHeight(Row)/FlxConsts.RowMult;</code></example>
            <param name="row">Row Index (1 based)</param>
            <param name="HiddenIsZero">If true, the height returned for a hidden row will be 0 and not its real height.</param>
            <returns>Row height in internal excel units.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHeight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the current Row height for a given sheet, in Excel internal units. (1/20th of a point)
            </summary>
            <remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks>
            <example><code>RowHeightInPixels=GetRowHeight(Row)/ExcelMetrics.RowMult(Workbook);</code></example>
            <param name="sheet">Sheet where to look for the height.</param>
            <param name="row">Row Index (1 based)</param>
            <param name="HiddenIsZero">If true, the height returned for a hidden row will be 0 and not its real height.</param>
            <returns>Row height in internal Excel units.(1/20th of a point)</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowHeight(System.Int32,System.Int32)">
            <summary>
            Sets the current Row height, in Excel internal units. (1/20th of a point)
            </summary>
            <remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks>
            <example><code>RowHeightInPixels=GetRowHeight(Row)/FlxConsts.RowMult;</code></example>
            <param name="row">Row Index (1 based)</param>
            <param name="height">Row height, in Excel internal units. (1/20th of a point). See <see cref="F:FlexCel.Core.FlxConsts.RowMult"/></param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColWidth(System.Int32)">
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of "font 0" / 256)
            </summary>
            <remarks>Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)"/> to convert the internal units to pixels.</remarks>
            <example><code>ColWidthInPixels=GetColWidth(Col)/ExcelMetrics.ColMult(Workbook);</code></example>
            <param name="col">Column Index (1 based)</param>
            <returns>Column width in internal excel units.(Character width of "font 0" / 256)</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColWidth(System.Int32,System.Boolean)">
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <remarks>Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)"/> to convert the internal units to pixels.</remarks>
            <example><code>ColWidthInPixels=GetColWidth(Col)/ExcelMetrics.ColMult(Workbook);</code></example>
            <param name="col">Column Index (1 based)</param>
            <param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param>
            <returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColWidth(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the current Column width for a given sheet, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <remarks>Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)"/> to convert the internal units to pixels.</remarks>
            <example><code>ColWidthInPixels=GetColWidth(Col)/ExcelMetrics.ColMult(Workbook);</code></example>
            <param name="sheet">Sheet where to look for the width.</param>
            <param name="col">Column Index (1 based)</param>
            <param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param>
            <returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColWidth(System.Int32,System.Int32)">
            <summary>
            Sets the current Column width, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <remarks>Use <see cref="F:FlexCel.Core.FlxConsts.ColMult"/> to convert the internal units to pixels.</remarks>
            <example><code>ColWidthInPixels=GetColWidth(Col)/FlxConsts.ColMult;</code></example>
            <param name="col">Column Index (1 based)</param>
            <param name="width">Column width, in Excel internal units. (Character width of font 0 / 256). See <see cref="F:FlexCel.Core.FlxConsts.ColMult"/></param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHidden(System.Int32)">
            <summary>
            Returns true if the row is hidden.
            </summary>
            <param name="row">Row index (1 based).</param>
            <returns>True if the row is hidden.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowHidden(System.Int32,System.Int32)">
            <summary>
            Returns true if the row is hidden. This method does not care about ActiveSheet.
            </summary>
            <param name="sheet">Sheet index (1 based) for the row.</param>
            <param name="row">Row index (1 based).</param>
            <returns>True if the row is hidden.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowHidden(System.Int32,System.Boolean)">
            <summary>
            Hides or shows an specific row.
            </summary>
            <param name="row">Row index (1 based)</param>
            <param name="hide">If true, row will be hidden, if false it will be visible.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColHidden(System.Int32)">
            <summary>
            Returns true if the column is hidden.
            </summary>
            <param name="col">Column index (1 based)</param>
            <returns>True if the column is hidden.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColHidden(System.Int32,System.Boolean)">
            <summary>
            Hides or shows an specific column.
            </summary>
            <param name="col">Column index (1 based).</param>
            <param name="hide">If true, column will be hidden, if false it will be visible.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetAutoRowHeight(System.Int32)">
            <summary>
            Returns if the row is adjusting its size to the cell (the default) or if it has a fixed height.
            </summary>
            <remarks>
            By default, Excel rows auto adapt their size to the font size. 
            If you set the row height manually, it will remain fixed to this size until you set 
            AutoFit (Menu->Format->Row->AutoFit) back. 
            </remarks>
            <param name="row">Row index (1-based)</param>
            <returns>True if AutoFit is on for the row, False if it has a fixed size</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)">
            <summary>
            Sets the current row to automatically autosize to the biggest cell or not.
            </summary>
            <remarks>
            By default, Excel rows auto adapt their size to the font size. 
            If you set the row height manually, it will remain fixed to this size until you set 
            AutoFit (Menu->Format->Row->AutoFit) back. 
            </remarks>
            <param name="row">Row index (1-based)</param>
            <param name="autoRowHeight">If true, row will have autofit.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRow(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Autofits a range of rows so they adapt their height to show all the text inside. Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believe is best. You can change this behaviour specifying keepHeightAutomatic = false.
            </summary>
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            <param name="row1">First row to autofit.</param>
            <param name="row2">Last row to autofit.</param>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRow(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits a range of rows so they adapt their height to show all the text inside. Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believe is best. You can change this behaviour specifying keepHeightAutomatic = false.
            </summary>
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            <param name="row1">First row to autofit.</param>
            <param name="row2">Last row to autofit.</param>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br/>A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br/>maxHeight = 0 means no maxHeight.
            <br/>A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRow(System.Int32,System.Boolean,System.Single)">
            <summary>
            Autofits a row so it adapts its height to show all the text inside. It does not matter if the row is set to Autofit or not in Excel.
            Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believe is best. You can change this behaviour specifying keepHeightAutomatic = false.
            </summary>
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            <param name="row">Row to Autofit.</param>
            <param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitCol(System.Int32,System.Boolean,System.Single)">
            <summary>
            Autofits a column so it adapts its width to show all the text inside.
            </summary>
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            <param name="col">Column to Autofit.</param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitCol(System.Int32,System.Int32,System.Boolean,System.Single)">
            <summary>
            Autofits a range of columns so they adapt their width to show all the text inside. 
            </summary>
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            <param name="col1">First column to Autofit.</param>
            <param name="col2">Last column to Autofit.</param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitCol(System.Int32,System.Int32,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits a range of columns so they adapt their width to show all the text inside. 
            </summary>
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            <param name="col1">First column to Autofit.</param>
            <param name="col2">Last column to Autofit.</param>
            <param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the column will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br/>A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br/>maxWidth = 0 means no maxWidth.
            <br/>A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRowsOnWorkbook(System.Boolean,System.Boolean,System.Single)">
            <summary>
            Autofits all rhe rows on all sheets on a workbook that are set to autofit so they adapt their height to show all the text inside. 
            Note that due to GDI+ / GDI incompatibilities,
            the heights calculated by FlexCel will not be exactly the same than the ones calculated by Excel. So when you open this workbook
            in Excel, Excel might re calculate the row heights to what it believe is best. You can change this behaviour specifying keepSizesAutomatic = false.
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            </summary>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the printing/export to pdf from Excel will be the same as FlexCel.
            </param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitRowsOnWorkbook(System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits all rhe rows on all sheets on a workbook that are set to autofit so they adapt their height to show all the text inside. 
            Note that due to GDI+ / GDI incompatibilities,
            the heights calculated by FlexCel will not be exactly the same than the ones calculated by Excel. So when you open this workbook
            in Excel, Excel might re calculate the row heights to what it believe is best. You can change this behaviour specifying keepSizesAutomatic = false.
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            </summary>
            <param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param>
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the printing/export to pdf from Excel will be the same as FlexCel.
            </param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br/>A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br/>maxHeight = 0 means no maxHeight.
            <br/>A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Single)">
            <summary>
            Marks a row as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the row 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single)"/>. To change the actual autofit status on the xls file, use <see cref="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)"/>
            <b>NOTE</b>: This method will not mark empty rows.
            </summary>
            <remarks>
            You can use this method for "delay-marking" rows that you will want to autofit later, but that you cannot autofit yet since
            they are not filled with data. There is normally no need to use this method, but it is used on report generation to "mark" &lt;#row height(autofit)&gt;
            tags so those rows and columns can be autofitted once the data on the sheet has been filled.
            </remarks>
            <param name="row">Row index (1 based)</param>
            <param name="autofit">Set this to true to mark the row for autofitting, false for removing the row from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a row as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the row 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single)"/>. To change the actual autofit status on the xls file, use <see cref="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)"/>
            <b>NOTE</b>: This method will not mark empty rows.
            </summary>
            <remarks>
            You can use this method for "delay-marking" rows that you will want to autofit later, but that you cannot autofit yet since
            they are not filled with data. There is normally no need to use this method, but it is used on report generation to "mark" &lt;#row height(autofit)&gt;
            tags so those rows and columns can be autofitted once the data on the sheet has been filled.
            </remarks>
            <param name="row">Row index (1 based)</param>
            <param name="autofit">Set this to true to mark the row for autofitting, false for removing the row from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br/>A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br/>maxHeight = 0 means no maxHeight.
            <br/>A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Single)">
            <summary>
            Marks a column as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the column 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single)"/>.
            </summary>
            <remarks>
            You can use this method for "delay-marking" columns that you will want to autofit later, but that you cannot autofit yet since
            they are not filled with data.There is normally no need to use this method, but it is used on report generation to "mark" &lt;#col width(autofit)&gt;
            tags so those rows and columns can be autofitted once the data on the sheet has been filled.
            </remarks>
            <param name="col">Column index (1 based)</param>
            <param name="autofit">Set this to true to mark the column for autofitting, false for removing the column from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a column as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the column 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single)"/>.
            </summary>
            <remarks>
            You can use this method for "delay-marking" columns that you will want to autofit later, but that you cannot autofit yet since
            they are not filled with data.There is normally no need to use this method, but it is used on report generation to "mark" &lt;#col width(autofit)&gt;
            tags so those rows and columns can be autofitted once the data on the sheet has been filled.
            </remarks>
            <param name="col">Column index (1 based)</param>
            <param name="autofit">Set this to true to mark the column for autofitting, false for removing the column from autofitting list.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br/>A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br/>maxWidth = 0 means no maxWidth.
            <br/>A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single)">
            <summary>
            Autofits all the rows and columns on a sheet that have been previously marked with the <see cref="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Single)"/>  and <see cref="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Single)"/> methods.
            </summary>
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the sizes when printing/export to pdf from Excel will be the same as FlexCel, even when some cells might appear "cut" when printing on Excel.
            </param>
            <param name="ignoreStringsOnColumnFit">When true, cells containing strings will not be autofitted.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns and rows will be adjusted to 110% percent of what their calculated width and heigth was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits all the rows and columns on a sheet that have been previously marked with the <see cref="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Single)"/>  and <see cref="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Single)"/> methods.
            </summary>
            <param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the sizes when printing/export to pdf from Excel will be the same as FlexCel, even when some cells might appear "cut" when printing on Excel.
            </param>
            <param name="ignoreStringsOnColumnFit">When true, cells containing strings will not be autofitted.</param>
            <param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns and rows will be adjusted to 110% percent of what their calculated width and heigth was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param>
            <param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param>
            <param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br/>A negative value on minHeight means the row size will be no smaller than the original height.</param>
            <param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br/>maxHeight = 0 means no maxHeight.
            <br/>A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
            <param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br/>A negative value on minWidth means the column size will be no smaller than the original width.</param>
            <param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br/>maxWidth = 0 means no maxWidth.
            <br/>A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)">
             <summary>
             This method returns the existing columns on ONE ROW.
             You can use this together with <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)"/> to iterate faster on a block.
             </summary>
             <param name="row">Row index. (1-based)</param>
             <returns>The number of existing columns on one row.</returns>
             <example>
             Instead of writing:
               <code>
               for (int r=1; r&lt;=File.RowCount;r++)
                 for (int c=1; clt;=File.ColCount;c++)
                   DoSomething(r,c);
               </code> 
              You can use:
               <code>
               for (int r=1; r&lt;=File.RowCount;r++)
                 for (int c=1; c&lt;=File.ColCountInRow(r);c++)
                   DoSomething(r,ColFromIndex(c));
               </code>   
            </example>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32,System.Int32)">
             <summary>
             This method returns the existing columns on ONE ROW, for a given sheet.
             You can use this together with <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)"/> to iterate faster on a block.
             </summary>
             <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
             <param name="row">Row index. (1-based)</param>
             <returns>The number of existing columns on one row.</returns>
             <example>
             Instead of writing:
               <code>
               for (int r=1; r&lt;=File.RowCount;r++)
                 for (int c=1; clt;=File.ColCount;c++)
                   DoSomething(r,c);
               </code> 
              You can use:
               <code>
               for (int r=1; r&lt;=File.RowCount;r++)
                 for (int c=1; c&lt;=File.ColCountInRow(r);c++)
                   DoSomething(r,ColFromIndex(c));
               </code>   
            </example>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)">
            <summary>
            This is the column (1 based) for a given ColIndex. See <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)"/> for an example.
            </summary>
            <param name="row">Row (1 based)</param>
            <param name="colIndex">The index on the column list for the row. (1 based)</param>
            <returns>The column (1 based) for the corresponding item.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the column (1 based) for a given ColIndex and sheet. See <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)"/> for an example.
            </summary>
            <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
            <param name="row">Row (1 based)</param>
            <param name="colIndex">The index on the column list for the row. (1 based)</param>
            <returns>The column (1 based) for the corresponding item.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)">
            <summary>
            This is the inverse of <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)"/>. It will return the index on the 
            internal column array from the row for an existing column. If the column doesn't exist, it will return the 
            index of the "LAST existing column less than col", plus 1.
            </summary>
            <example>
            To loop on all the existing cells on a row you can use:
            int LastCIndex = xls.ColToIndex(row, LastColumn + 1);
            if (xls.ColFromIndex(LastCIndex) &gt; LastColumn) LastCIndex --;  // LastColumn does not exist.
            for (int cIndex = xls.ColToIndex(FirstColumn); cIndex &lt;= LastCIndex; cIndex++)
            {
                xls.GetCellValueIndexed(row, cIndex, ref XF);
            }
            </example>
            <param name="row">Row (1 based)</param>
            <param name="col">Column (1 based)</param>
            <returns>The index on the column list for the row. (1 based)</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the inverse of <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)"/>. It will return the index on the 
            internal column array from the row for an existing column. If the column doesn't exist, it will return the 
            index of the "LAST existing column less than col", plus 1.
            </summary>
            <example>
            To loop on all the existing cells on a row you can use:
            int LastCIndex = xls.ColToIndex(row, LastColumn + 1);
            if (xls.ColFromIndex(LastCIndex) &gt; LastColumn) LastCIndex --;  // LastColumn does not exist.
            for (int cIndex = xls.ColToIndex(FirstColumn); cIndex &lt;= LastCIndex; cIndex++)
            {
                xls.GetCellValueIndexed(row, cIndex, ref XF);
            }
            </example>
            <param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param>
            <param name="row">Row (1 based)</param>
            <param name="col">Column (1 based)</param>
            <returns>The index on the column list for the row. (1 based)</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColorPalette(System.Int32,System.Drawing.Color)">
            <summary>
            Changes a color on the Excel color palette.
            </summary>
            <param name="index">Index of the entry to change. Must be 1&lt;=indexlt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount"/></param>
            <param name="value">Color to set.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32)">
            <summary>
            Returns a color from the color palette. This method will throw an exception if its "index" parameter
            is bigger than <see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount"/>, (for example, for an automatic color).
            To get the real color, use <see cref="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32,System.Drawing.Color)"/>
            </summary>
            <param name="index">Index of the entry to return. Must be 1&lt;=index&lt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount"/></param>
            <returns>Color at position index.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32,System.Drawing.Color)">
            <summary>
            Returns a color from the color palette. If the index is not into the range 1&lt;=index&lt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount"/>
            this method will return the automaticColor.
            </summary>
            <remarks>ColorIndexes returned by FlexCel might be &lt;=0 or &gt;<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount"/> if the color is
            set to Automatic.<p>Automatic color is white for backgrounds, black for foregrounds and gray for gridlines.</p></remarks>
            <param name="index"></param>
            <param name="automaticColor"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NearestColorIndex(System.Drawing.Color)">
            <summary>
            Returns the most similar entry on the excel palette for a given color.
            </summary>
            <param name="value">Color we want to use.</param>
            <returns>Most similar color on the Excel palette.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.NearestColorIndex(System.Drawing.Color,System.Boolean[])">
            <summary>
            Returns the most similar entry on the excel palette for a given color.
            If UsedColors is not null, it will try to modify the Excel color palette
            to get a better match on the color, modifying among the not used colors. 
            Note that modifying the standard palette
            might result on a file that is not easy to edit on Excel later, since it does not have the standard Excel colors.
            </summary>
            <param name="value">Color we want to use.</param>
            <param name="UsedColors">If null, this behaves like the standard NearestColorIndex. 
            To get a list of used colors for the first call, use <see cref="P:FlexCel.Core.ExcelFile.GetUsedPaletteColors"/>.
            After the first call, keep using the same UsedColors structure and do not call GetUsedPaletteColors again, to avoid overwriting colors
            that are not yet inserted into the xls file with new ones. You can call GetUsedPaletteColors only after you added the format with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/>
            </param>
            <returns>Most similar color on the Excel palette.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNamedRange(System.Int32)">
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Range")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange"/>
            </summary>
            <remarks><seealso cref="T:FlexCel.Core.InternalNameRange"/></remarks>
            <param name="index">Index of the named range.</param>
            <returns>Named Range</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32)">
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Range")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange"/>
            </summary>
            <remarks><seealso cref="T:FlexCel.Core.InternalNameRange"/></remarks>
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="refersToSheetIndex">Sheet where the range refers to. A range with the same name might be defined on more than one sheet.
            To get the first range with the name, make refersToSheetIndex&lt;=0</param>
            <returns>Named Range or null if the range does not exist.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Range")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange"/>
            </summary>
            <remarks><seealso cref="T:FlexCel.Core.InternalNameRange"/></remarks>
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="refersToSheetIndex">Sheet where the range refers to. A range with the same name might be defined on more than one sheet.</param>
            <param name="localSheetIndex">Sheet where the range is stored. A range might be stored local to a sheet, or global (Excel default).
            To get a global range, make localSheetIndex=0</param>
            <returns>Named Range or null if the range does not exist.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FindNamedRange(System.String,System.Int32)">
            <summary>
            Returns the index (0 based) on the list of named ranges for a given name and local sheet. If the range is not found, this method will return -1
            You could use <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.Int32)"/> to get the name definition, or directly call <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32,System.Int32)"/>
            to get a named range knowing its name and sheet position.
            </summary>
            <param name="Name">Name of the range we are looking for. Case insensitive.</param>
            <param name="localSheetIndex">Sheet where the range is stored. A range might be stored local to a sheet, or global (Excel default).
            To get a global range, make localSheetIndex=0</param>
            <returns>The index (0 based) in the list of named ranges, or -1 if the range is not found.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNamedRangeData(System.Int32,System.Int32@,System.Int32@,System.String@,System.Boolean@)">
            <summary>
            Internal use. We could call GetNamedRange, but this one is faster.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNamedRangeData(System.Int32,System.Int32,System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@,System.Boolean@)">
            <summary>
            Internal use. We could call GetNamedRange, but this one is faster.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetNameRecordList">
            <summary>
            Internal use for the formula evaluator in the report tags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.EvaluateNamedRange(System.Int32,System.Int32,FlexCel.Core.TBaseAggregate)">
            <summary>
            Internal use. Evaluates a named range and returns the result.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)">
            <summary>
            Modifies or adds a Named Range. If the named range exists, it will be modified, else it will be added.
            If the range is not user defined (like "Print_Range")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange"/>
            Look at the example for more information.
            </summary>
            <example>
            This will create a range for repeating the first 2 columns and rows on each printed page (on sheet 1):
            <code>
               Xls.SetNamedRange(new TXlsNamedRange(TXlsNamedRange.GetInternalName(InternalNameRange.Print_Titles),1, 0, "=1:2,A:B"));
            </code>
            Note that in this example in particular (Print_Titles), the range has to have full rows/columns, as this is what Excel expects.
            You should also use "A:B" notation instead of the full "A1:B65535" name, so it will work in Excel 2007 too.
            </example>
            <param name="rangeData">Data of the named range. You don't need to specify the RPN Array.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetNamedRange(System.Int32,FlexCel.Core.TXlsNamedRange)">
            <summary>
            Modifies a Named Range in the specified position. You could normally use <see cref="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)"/> to do this,
            but if you want to modify the name of the named range, then you need to use this overloaded version. <see cref="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)"/>
            would add a new range instead of modifying the existing one if you change the name.
            Look at the example for more information on how to use it.
            </summary>
            <example>
            This will modify the name of the named range at position 3:
            <code>
               TXlsNamedRange R = Xls.GetNamedRange(3);
               R.Name = "MyNewName";
               Xls.SetNamedRange(3, R);
            </code>
            </example>
            <param name="index">Index of the named range we are trying to modify.</param>
            <param name="rangeData">Data of the named range. You don't need to specify the RPN Array.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteNamedRange(System.Int32)">
            <summary>
            Deletes the name at the specified position. <b>Important:</b> If the name you are trying to delete is referenced by any formula/chart/whatever in your file,
            the name will <b>not actually be deleted</b> but hidden. <br/>
            You won't see the name in Excel or in the formula, but it will be there and you can see it from FlexCel.<br/>
            <i>Also, note that if you later delete the formulas that reference those ranges FlexCel will remove those hanging ranges when saving.</i>
            The only hidden ranges that will be present in the final file will be those that haev active formulas referencing them.
            <br/><br/><b>Important:</b>If the name wasn't deleted, <see cref="P:FlexCel.Core.ExcelFile.NamedRangeCount"/> will not change. This means that you can't have code like this:
            <code>
              while (xls.NamedRangeCount &gt; 0) //WRONG! This loop might never end.
              {
                xls.DeleteNamedRange(1);  //Might not be deleted, and NamedRangeCount will never be 0.
              }
            </code>
            <br/>
            The correct code in this case would be:
            <code>
              for (int i = xls.NamedRangeCount; i &gt; 0; i--) xls.DeleteNamedRange(i);
            </code>
            <br/>
            <code lang="vbnet">
              For i = xls.NamedRangeCount To 1 Step -1 xls.DeleteNamedRange(i);
            </code>
            <br/>
            <code lang="Delphi .NET" title="Delphi .NET">
              for i := xls.NamedRangeCount downto 1 do xls.DeleteNamedRange(i);
            </code>
            </summary>
            <param name="index">Index of the name to delete (1 based).</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyToClipboard(System.Text.StringBuilder,System.IO.Stream)">
            <summary>
            Copies the active sheet to a clipboard stream, on native and text formats.
            </summary>
            <remarks>See the copy and paste demo.</remarks>
            <param name="textString">StringBuilder where the text will be copied. Leave it null to not copy to text.</param>
            <param name="xlsStream">Stream where the xls native info will be copied.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CopyToClipboardFormat(FlexCel.Core.TXlsCellRange,System.Text.StringBuilder,System.IO.Stream)">
            <summary>
            Copies a range on the active sheet to a clipboard stream, on native and text formats.
            </summary>
            <remarks>See the copy and paste demo.</remarks>
            <param name="range">Range with the cells to copy.</param>
            <param name="textString">StringBuilder where the text will be copied. Leave it null to not copy to text.</param>
            <param name="xlsStream">Stream where the xls native info will be copied.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.PasteFromXlsClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.IO.Stream)">
            <summary>
            Pastes the clipboard contents beginning on cells row, col.
            </summary>
            <remarks>See the copy and paste demo.</remarks>
            <param name="row">First row where to paste.</param>
            <param name="col">First column where to paste.</param>
            <param name="data">A stream containing a Native xls format.</param>
            <param name="insertMode">How the pasted cells will be inserted on the file.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.PasteFromTextClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.String)">
            <summary>
            Pastes the clipboard contents beginning on cells row, col.
            </summary>
            <remarks>See the copy and paste demo.</remarks>
            <param name="row">First row where to paste.</param>
            <param name="col">First column where to paste.</param>
            <param name="data">A string containing a tab separated text format.</param>
            <param name="insertMode">How the pasted cells will be inserted on the file.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FillPageHeaderOrFooter(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Given a Page Header or footer string including macros (like [FileName] or [PageNo]), this method
            will return the strings that go into the left, right and middle sections.
            </summary>
            <param name="fullText">Header or footer text.</param>
            <param name="leftText">Text that should be left justified.</param>
            <param name="centerText">Text that should be centered.</param>
            <param name="rightText">Text that should be right justified.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetPageHeaderOrFooterAsHtml(System.String,System.String,System.Int32,System.Int32,FlexCel.Core.THtmlVersion,System.Text.Encoding,FlexCel.Core.IHtmlFontEvent)">
            <summary>
            Converts a section of a page header or footer into an HTML string. 
            </summary>
            <param name="section">Text to convert. You will normally get this parameter calling <see cref="M:FlexCel.Core.ExcelFile.FillPageHeaderOrFooter(System.String,System.String@,System.String@,System.String@)"/></param>
            <param name="imageTag">Tag to call an image for the section. It must be in the form: "&lt;img src=...&gt;" 
            and you can get the image with <see cref="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@)"/> . If null or empty, no img tag will be present in the resulting html, even if the section includes an image.</param>
            <param name="pageNumber">Page we are printing. This parameter will be used if you have text like "Page 1 of 3" in the header.<br/>
            If you are exporting to html, this value should be 1, since there are no page breaks in an html doc.</param>
            <param name="pageCount">Number of pages in the document. This parameter will be used if you have text like "Page 1 of 3" in the header.<br/>
            If you are exporting to html, this value should be 1, since there are no page breaks in an html doc</param>
            <param name="htmlVersion">Version of html we are targeting. In Html 4 &lt;br&gt; is valid and &lt;br/&gt; is not. In XHtml the inverse is true.</param>
            <param name="encoding">Code page used to encode the string. Normally this is UTF-8</param>
            <param name="onFont">Method that can customize the fonts used in the resulting string. It can be null if you don't want to do any modification to the fonts.</param>
            <returns>An html string with the section.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <summary>
            This method returns the images associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            </summary>
            <param name="section">Section of the header or footer for which we want to retrieve the image.</param>
            <param name="imageType"><b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@)">
            <summary>
            This method returns the images associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            </summary>
            <param name="section">Section of the header or footer for which we want to retrieve the image.</param>
            <param name="imageType"><b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <returns>Bytes for the image. Null if there is no image on this position.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImageProperties(FlexCel.Core.THeaderAndFooterPos)">
            <summary>
            Returns the image position and size.
            </summary>
            <param name="section">Section of the header or footer for which we want to retrieve the image properties.</param>
            <returns>Image properties. Null if there is no image on this section.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterPos,System.Byte[],FlexCel.Core.TXlsImgType,FlexCel.Core.THeaderOrFooterImageProperties)">
            <summary>
            This method sets the image associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            ALSO, NOTE that only setting the image will not display it. You need to write &amp;G in 
            the corresponding <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> or <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>
            </summary>
            <param name="section">Section of the header or footer for which we want to set the image.</param>
            <param name="imageType">The image type for the data sent. (If it is a bmp, jpg or other)</param>
            <param name="data">Image data.</param>
            <param name="properties">Image size.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterPos,System.Byte[],FlexCel.Core.THeaderOrFooterImageProperties)">
            <summary>
            This method sets the image associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            ALSO, NOTE that only setting the image will not display it. You need to write &amp;G in 
            the corresponding <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> or <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>
            This methods will try to automatically guess/convert the image type
            of the data to the better fit.
            </summary>
            <param name="section">Section of the header or footer for which we want to set the image.</param>
            <param name="data">Image data.</param>
            <param name="properties">Image Size.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetPrintMargins">
            <summary>
            Gets the Margins on the active sheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetPrintMargins(FlexCel.Core.TXlsMargins)">
            <summary>
            Sets the Margins on the active sheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings">
            <summary>
            Returns printer driver settings. This method is not intended to be used alone,
            but together with <see cref="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)"/> to copy printer driver information from a file
            to another.
            </summary>
            <remarks>
            Excel stores printer settings in <b>two places</b>
            <list type="number">
            <item>
            Standard printer settings: You can set/read this with <see cref="P:FlexCel.Core.ExcelFile.PrintPaperSize"/>, 
            <see cref="P:FlexCel.Core.ExcelFile.PrintScale"/>, <see cref="P:FlexCel.Core.ExcelFile.PrintOptions"/> (Landscape inside printOptions only),
            <see cref="P:FlexCel.Core.ExcelFile.PrintXResolution"/>, <see cref="P:FlexCel.Core.ExcelFile.PrintYResolution"/> and <see cref="P:FlexCel.Core.ExcelFile.PrintCopies"/>
            </item>
            <item>
            Printer driver settings: You can access this with GetPrinterDriverSettings and SetPrinterDriverSettings.
            </item>
            </list>
            <b>NOTE THAT THOSE PLACES STORE DUPLICATED INFORMATION.</b>  For example, Excel stores the PageSize on both <i>Standard printer settings</i>
            and <i>Printer driver settings.</i><p></p> Always that a value is stored on both places, <i>(1) Standard printer settings</i> takes preference.
            <p></p>If you set PaperSize=A4 on standard settings and PaperSize=A5 on driver settings, A4 will be used.
            </remarks>
            <example>To copy the printer driver information from an empty template to the working file, use:
            <code>Xls1.SetPrinterDriverSettings(Xls.GetPrinterDriverSettings());</code>
            If you have defined a printer specific paper size, and you want to use it, you should call
            <code>Xls1.PrintPaperSize=Xls2.PrintPaperSize;</code>
            after copying the driver settings.
            </example>
            <returns>The printer driver settings.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)">
            <summary>
            Sets printer driver information. This method is not intended to be used alone,
            but together with <see cref="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings"/> to copy printer driver information from a file
            to another.
            </summary>
            <remarks>
            Excel stores printer settings in <b>two places</b>
            <list type="number">
            <item>
            Standard printer settings: You can set/read this with <see cref="P:FlexCel.Core.ExcelFile.PrintPaperSize"/>, 
            <see cref="P:FlexCel.Core.ExcelFile.PrintScale"/>, <see cref="P:FlexCel.Core.ExcelFile.PrintOptions"/> (Landscape inside printOptions only),
            <see cref="P:FlexCel.Core.ExcelFile.PrintXResolution"/>, <see cref="P:FlexCel.Core.ExcelFile.PrintYResolution"/> and <see cref="P:FlexCel.Core.ExcelFile.PrintCopies"/>
            </item>
            <item>
            Printer driver settings: You can access this with GetPrinterDriverSettings and SetPrinterDriverSettings.
            </item>
            </list>
            <b>NOTE THAT THOSE PLACES STORE DUPLICATED INFORMATION.</b>  For example, Excel stores the PageSize on both <i>Standard printer settings</i>
            and <i>Printer driver settings.</i><p></p> Always that a value is stored on both places, <i>(1) Standard printer settings</i> takes preference.
            <p></p>If you set PaperSize=A4 on standard settings and PaperSize=A5 on driver settings, A4 will be used.
            </remarks>
            <example>To copy the printer driver information from an empty template to the working file, use:
            <code>Xls1.SetPrinterDriverSettings(Xls.GetPrinterDriverSettings());</code>
            If you have defined a printer specific paper size, and you want to use it, you should call
            <code>Xls1.PrintPaperSize=Xls2.PrintPaperSize;</code>
            after copying the driver settings.
            </example>
            <param name="settings">Printer driver information obtained with <see cref="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings"/>. Use null to remove the printer settings.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,System.Byte[],FlexCel.Core.TXlsImgType)">
            <summary>
            Sets the image data and / or image properties of an existing image.
            </summary>
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="data">Image data.</param>
            <param name="imageType">Image type of the new data.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,System.Byte[])">
            <summary>
            Sets the image data for an existing image. It will try to automatically guess/convert the image type
            of the data to the better fit.
            </summary>
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="data">Image data.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImage(System.Int32,System.Drawing.Image)">
            <summary>
            WARNING!  Not CF compliant.
            </summary>
            <param name="imageIndex">Image Index. 1-Based.</param>
            <param name="Img">Image to replace.</param>
            <remarks>                    
            Saving a WMF or EMF Image is not currently supported by the .NET framework.
            If you pass a MetaFile to this method, it will be saved as png. 
            For inserting a REAL wmf into excel use <see cref="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TXlsImgType,FlexCel.Core.TImageProperties)"/>
            </remarks>
            <platform><frameworks><compact>false</compact></frameworks></platform>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetImageProperties(System.Int32,FlexCel.Core.TImageProperties)">
            <summary>
            Sets the image properties of an existing image.
            </summary>
            <param name="imageIndex">Index of the image on the sheet array (1-based)</param>
            <param name="imageProperties">Image size, placement, etc. </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImageName(System.Int32)">
            <summary>
            Returns the image name at position imageIndex.
            </summary>
            <remarks>Normally image names are automatically assigned by Excel, and are on the form
            "picture1", "picture2", etc. But you can name an image on Excel by selecting and then typing its name
            on the name combo box. (the combobox at the upper left corner on Excel. After that, you can use its name
            to identify it here.</remarks>
            <param name="imageIndex">Index of the image (1 based)</param>
            <returns>Image name.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImage(System.Int32,FlexCel.Core.TXlsImgType@)">
            <summary>
            Returns an image bytes and type.
            </summary>
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="imageType"><b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <returns>Image data. Use the returned imageType to find out the format of the stored image.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImage(System.Int32,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <summary>
            Returns an image bytes and type.
            </summary>
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="imageType"><b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImage(System.Int32,System.String,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <summary>
            Returns an image bytes and type.
            </summary>
            <param name="imageIndex">Index of the image. (1 based)</param>
            <param name="objectPath">Object path to the image when it is a grouped image. For toplevel images you can use String.Empty. In other case, you need to use the value returned by <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="imageType"><b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param>
            <param name="outStream">Stream where the image data will be copied.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)">
            <summary>
            Returns image position and size.
            </summary>
            <param name="imageIndex">Index of the image (1 based)</param>
            <returns>Image position and size.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.Byte[],FlexCel.Core.TXlsImgType,FlexCel.Core.TImageProperties)">
            <summary>
            Adds an image to the active sheet.
            </summary>
            <param name="data">byte array with the image data.</param>
            <param name="imageType">Type of image you are inserting (bmp, jpg, etc).</param>
            <param name="imageProperties">Placement and other properties of the image.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TXlsImgType,FlexCel.Core.TImageProperties)">
            <summary>
            Adds an image to the active sheet.
            </summary>
            <param name="aStream">Stream containing the image data.</param>
            <param name="imageType">Type of image you are inserting (bmp, jpg, etc).</param>
            <param name="imageProperties">Placement and other properties of the image.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.Drawing.Image,FlexCel.Core.TImageProperties)">
            <summary>
            WARNING!  Not CF compliant. If you don't have the image already created, prefer 
            using <see cref="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TImageProperties)"/>, as it is faster.
            </summary>
            <param name="img">Image to insert.</param>
            <param name="imageProperties">Image size/position</param>
            <remarks>                    
            Saving a WMF or EMF Image is not currently supported by the .NET framework.
            If you pass a MetaFile to this method, it will be saved as png. 
            For inserting a REAL wmf into excel use <see cref="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TImageProperties)"/>
            </remarks>
            <platform><frameworks><compact>false</compact></frameworks></platform>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            WARNING!  Not CF compliant. If you don't have the image already created, prefer 
            using <see cref="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TImageProperties)"/>, as it is faster.
            </summary>
            <param name="img">Image to insert.</param>
            <param name="row">Row Index (1 based)</param>
            <param name="col">Column Index (1 based)</param>
            <remarks>                    
            Saving a WMF or EMF Image is not currently supported by the .NET framework.
            If you pass a MetaFile to this method, it will be saved as png. 
            For inserting a REAL wmf into excel use <see cref="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TImageProperties)"/>
            </remarks>
            <platform><frameworks><compact>false</compact></frameworks></platform>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.Byte[],FlexCel.Core.TImageProperties)">
            <summary>
            Adds an image to the active sheet. It will try to automatically guess/convert the image type
            of the data to the better fit.
            </summary>
            <param name="data">Image data.</param>
            <param name="imageProperties">Image Properties.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddImage(System.IO.Stream,FlexCel.Core.TImageProperties)">
            <summary>
            Adds an image to the active sheet.
            </summary>
            <param name="aStream">Stream containing the image data.</param>
            <param name="imageProperties">Placement and other properties of the image.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteImage(System.Int32)">
            <summary>
            Deletes the image at position imageIndex.
            </summary>
            <param name="imageIndex">Index of the image to delete. (1 based)</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearImage(System.Int32)">
            <summary>
            Clears the image at position imageIndex, leaving an empty white box.
            </summary>
            <param name="imageIndex">Index of the image to clear. (1 based)</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ImageIndexToObjectIndex(System.Int32)">
            <summary>
            Returns the general index on the object list for an image. You can use then this index on SendToBack, for example.
            </summary>
            <param name="imageIndex">Image index on the image array.</param>
            <returns>Image index on the total objects array.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ObjectIndexToImageIndex(System.Int32)">
            <summary>
            Returns the index on the image collection of an object.
            </summary>
            <param name="objectIndex">General index of the image on the Object collection.</param>
            <returns>-1 if the object is not an image, else the index on the image collection.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectName(System.Int32)">
            <summary>
            Return the name of the object at objectIndex position.
            </summary>
            <param name="objectIndex">Object index. (1-based)</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FindObject(System.String)">
            <summary>
            Returns the object index for an exiting name.
            </summary>
            <param name="objectName">Object name to search for. This is case insensitive.</param>
            <returns>-1 if the object is not found, or the object index otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectAnchor(System.Int32)">
            <summary>
            Returns the placement of the object.
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <returns>Coordinates of the object.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectAnchor(System.Int32,FlexCel.Core.TClientAnchor)">
            <summary>
            Sets the object placement.
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectAnchor">Coordinates of the object.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)">
            <summary>
            Returns information on an object and all of its children. 
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="GetShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.String)">
            <summary>
            Sets an UNICODE STRING property for an autoshape. Verify the property expects a STRING.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods. (like SetObjectText)
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="text">Text you want to use.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.String,System.Boolean)">
            <summary>
            Sets a STRING property for an autoshape. Verify the property expects a STRING.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods. (like SetObjectText)
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="text">Text you want to use.</param>
            <param name="ascii">If true, text will be encoded as ASCII, else it will be Unicode.
            Most properties are unicode, but there are some ASCII ones. Normally properties that start with "w" like
            <see cref="F:FlexCel.Core.TShapeOption.wzName"/> are Unicode, while the others (like <see cref="F:FlexCel.Core.TShapeOption.gtextRTF"/>) are not.
            This method is mostly for internal use, use it only if you know what you are doing.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Int64)">
            <summary>
            Sets a LONG property for an autoshape. Verify the property expects a LONG.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="shapeProperty">Property you want to change.</param>
            <param name="value">Value you want to use.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Int32,System.Boolean)">
            <summary>
            Sets a BOOLEAN property for an autoshape. Verify the property expects a BOOLEAN.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            Note that boolean properties are all stored in the same byte of the last property in the set.
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="shapeProperty">Property you want to change. MAKE SURE it is the LAST property in the set.</param>
            <param name="positionInSet">Boolean properties are grouped so all properties on one set are in only
            one value. So, the last bool property on the set is the first bit, and so on. ONLY THE LAST PROPERTY
            ON THE SET IS PRESENT.</param>
            <param name="value">Value you want to use.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,FlexCel.Core.THyperLink)">
            <summary>
            Sets an Hyperlink property for an autoshape. Verify the property expects a Hyperlink, currently only <see cref="F:FlexCel.Core.TShapeOption.pihlShape"/> expects hyperlinks.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <param name="shapeProperty">Property you want to change. Fro hyperlinks it should be <see cref="F:FlexCel.Core.TShapeOption.pihlShape"/></param>
            <param name="value">Value you want to use.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteObject(System.Int32)">
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary>
            <param name="objectIndex">Index of the object (1 based).</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)">
            <summary>
            !WARNING! Not CF compliant. 
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            <br/>Background of the image will be transparent.
            </summary>
            <param name="objectIndex">Index of the object (1 based).</param>
            <returns>Might return null if the image is not visible.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32,System.Single,FlexCel.Core.TShapeProperties,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Drawing2D.InterpolationMode,System.Boolean,System.Boolean,System.Drawing.PointF@,System.Drawing.RectangleF@,System.Drawing.Size@)">
            <summary>
            !WARNING! Not CF compliant. 
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            </summary>
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/></param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.SmoothingMode"/></param>
            <param name="antiAliased">If true text will be antialiased when rendering for example a chart.</param>
            <param name="returnImage">If false, this method will return null. Use it if you need to know the image dimensions, but do not care about the real image since it is faster and uses less resources.</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/>.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)"/> because shadows or rotation of the image. You can get the image size in pixels just by looking at the image returned.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageSizePixels">Size of the returned image in pixels. You only need to use this if returnImage is false, since the returned bitmap will be null. Otherwise, you can just read the bitmap size.</param>
            <returns>Might return null if the image is not visible.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32,System.Single,FlexCel.Core.TShapeProperties,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Drawing2D.InterpolationMode,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.PointF@,System.Drawing.RectangleF@,System.Drawing.Size@)">
            <summary>
            !WARNING! Not CF compliant. 
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            </summary>
            <param name="objectIndex">Index of the object (1 based).</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/></param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.SmoothingMode"/></param>
            <param name="antiAliased">If true text will be antialiased when rendering for example a chart.</param>
            <param name="returnImage">If false, this method will return null. Use it if you need to know the image dimensions, but do not care about the real image since it is faster and uses less resources.</param>
            <param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/>.</param>
            <param name="BackgroundColor">Color for the background of the image. For a transparent background, use Color.Empty.</param>
            <param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)"/> because shadows or rotation of the image. You can get the image size in pixels just by looking at the image returned.</param>
            <param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param>
            <param name="imageSizePixels">Size of the returned image in pixels. You only need to use this if returnImage is false, since the returned bitmap will be null. Otherwise, you can just read the bitmap size.</param>
            <returns>Might return null if the image is not visible.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            !WARNING! Not CF compliant. 
            This method renders a range of cells into an image, and returns it.<br/> 
            No objects will be drawn on the cells, you can use <see cref="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)"/> to draw those.<br/>
            <b>Important note:</b> This method will only render the text inside the cell, not the borders or anything else. If you want to 
            export an xls file to images, you probably want to use <see cref="T:FlexCel.Render.FlexCelImgExport"/>
            </summary>
            <param name="row1">Index of the first row to render. (1 based).</param>
            <param name="col1">Index of the first column to render (1 based).</param>
            <param name="row2">Index of the last row to render. (1 based).</param>
            <param name="col2">Index of the last column to render (1 based).</param>
            <param name="drawBackground">If true, the image will have a solid background with the color of the cells. If false, the image will have
            a transparent background.</param>
            <returns>An image with the rendered cells.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RenderCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)">
            <summary>
            !WARNING! Not CF compliant. 
            This method renders a range of cells into an image, and returns it.<br/> 
            No objects will be drawn on the cells, you can use <see cref="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)"/> to draw those.<br/>
            <b>Important note:</b> This method will only render the text inside the cell, not the borders or anything else. If you want to 
            export an xls file to images, you probably want to use <see cref="T:FlexCel.Render.FlexCelImgExport"/>
            </summary>
            <param name="row1">Index of the first row to render. (1 based).</param>
            <param name="col1">Index of the first column to render (1 based).</param>
            <param name="row2">Index of the last row to render. (1 based).</param>
            <param name="col2">Index of the last column to render (1 based).</param>
            <param name="drawBackground">If true, the image will have a solid background with the color of the cells. If false, the image will have
            a transparent background.</param>
            <param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param>
            <param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/></param>
            <param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.SmoothingMode"/></param>
            <param name="antiAliased">If true text will be antialiased when rendering.</param>
            <returns>An image with the rendered cells.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SendToBack(System.Int32)">
            <summary>
             Sends the graphical object to the bottom layer on the display (z-order) position. It will show below and will be covered by all other objects on the sheet. 
             </summary>
             <remarks>This will change the order of the array, 
             so after calling SendToBack(i), position i will have a new object.
             <seealso cref="M:FlexCel.Core.ExcelFile.SendBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendForward(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.BringToFront(System.Int32)"/>
             </remarks>
             <param name="objectIndex">Index of the object to move. (1 based)</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.BringToFront(System.Int32)">
            <summary>
            Sends the graphical object to the top layer on the display (z-order) position. It will show above and will cover all other objects on the sheet. 
            </summary>
            <remarks>This will change the order of the array, 
            so after calling BringToFront(i), position i will have a new object.
            <seealso cref="M:FlexCel.Core.ExcelFile.SendToBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendForward(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendBack(System.Int32)"/>
            </remarks>
            <param name="objectIndex">Index of the object to move. (1 based)</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SendForward(System.Int32)">
            <summary>
            Sends the graphical object one layer up on the display (z-order) position. It will show above and will cover the image at objectIndex+1. 
            </summary>
            <remarks>This will change the order of the array, 
            so after calling SendForward(i), position i will have a new object.
            
            To move an object 2 steps down the correct code is:
            <code>
              SendForward(i);
              SendForward(i+1);
            </code>
            and not
            <code>
              SendForward(i);
              SendForward(i);
            </code>
            
            The second code would actually leave the array unmodified.
            <seealso cref="M:FlexCel.Core.ExcelFile.SendToBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.BringToFront(System.Int32)"/>
            </remarks>
            <param name="objectIndex">Index of the object to move. (1 based)</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SendBack(System.Int32)">
            <summary>
            Sends the graphical object one layer down. It will show below and will be covered by image at objectIndex-1. 
            </summary>
            <remarks>This will change the order of the array, 
            so after calling SendToBack(i), position i will have a new object.
            
            To move an object 2 steps down the correct code is:
            <code>
              SendBack(i);
              SendBack(i-1);
            </code>
            and not
            <code>
              SendBack(i);
              SendBack(i);
            </code>
            
            The second code would actually leave the array unmodified.
            <seealso cref="M:FlexCel.Core.ExcelFile.SendToBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendForward(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.BringToFront(System.Int32)"/>
            </remarks>
            <param name="objectIndex">Index of the object to move. (1 based)</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CommentRowCount">
            <summary>
            Maximum row index including comments.
            </summary>
            <remarks>
            There are 2 groups of Comment related methods. One is used when you want to find out on a loop all existing comments on 
            a range, and the other is used to get/set comments at a specified position (row and col).
            
            To loop among all existing comments, you can use CommentRowCount together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>.
            Do not confuse them, even when they have similar names. CommentRowCount returns the maximum row with a comment,
            and <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> returns the number of comments in a given row.
            </remarks>
            <example>
            You can loop on all the comments on a sheet with the following code:
            <code>
            for (int r=1; r&lt;= xls.CommentRowCount(); r++)
              for (int i=1; i&lt;= xls.CommentCountRow(r); i++)
              {
                 //Do something(GetCommentRow(r,i);
              }
            </code>
            </example>
            <returns>The maximum row with a comment.</returns>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)">
            <summary>
            Number of comments on a given row.
            </summary>
            <param name="row">Row index (1 based)</param>
            <remarks>
            There are 2 groups of Comment related methods. One is used when you want to find out on a loop all existing comments on 
            a range, and the other is used to get/set comments at a specified position (row and col).
            
            To loop among all existing comments, you can use <see cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/>  together with CommentCountRow.
            Do not confuse them, even when they have similar names. <see cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> returns the maximum row with a comment,
            and CommentCountRow returns the number of comments in a given row.
            </remarks>
            <example>
            You can loop on all the comments on a sheet with the following code:
            <code>
            for (int r=1; r&lt;= xls.CommentRowCount(); r++)
              for (int i=1; i&lt;= xls.CommentCountRow(r); i++)
              {
                 //Do something(GetCommentRow(r,i);
              }
            </code>
            </example>
            <returns>The number of comments on a given row.</returns>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)">
            <summary>
            Returns the comment at position commentIndex on the specified row.
            </summary>
            <remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks>
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based). See <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> </param>
            <returns>Comment at the specified position.</returns>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/> 
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)">
            <summary>
            Returns the column for comment at position commentIndex
            </summary>
            <remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks>
            <param name="row">Row with the comment. (1 based)</param>
            <param name="commentIndex">Index of the comment (1 based)</param>
            <returns>The column index corresponding to the comment.</returns>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)">
            <summary>
            Returns the comment at the specified row and column, or an empty string if there is no comment on that cell.
            </summary>
            <remarks>Use this method when you are searching for a comment on a fixed position. To loop along all
            comments on a sheet, see <see cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/></remarks>
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <returns>The comment on the specified cell, String.Empty if there is no comment on it.</returns>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,FlexCel.Core.TRichString,FlexCel.Core.TImageProperties)">
            <summary>
            Changes the properties (text and position of the popup) for an existing comment at commentIndex.
            To delete a comment, set a "new TRichString()" as the "value" param. To add a new comment, use <see cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/>. 
            </summary>
            <remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks> 
            <param name="row">Row Index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <param name="value">Text of the comment. Set it to "new TRichString()" to remove the comment.</param>
            <param name="commentProperties">Properties of the popup.</param>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)">
            <summary>
            Changes the properties (text and position of the popup) for an existing comment at commentIndex.
            To delete a comment, set a String.Empty as the "value" param. To add a new comment, use <see cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/>. 
            </summary>
            <remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks> 
            <param name="row">Row Index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <param name="value">Text of the comment. Set it to String.Empty to remove the comment.</param>
            <param name="commentProperties">Properties of the popup.</param>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString,System.String,FlexCel.Core.TImageProperties)">
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary><remarks>To delete a comment, set its value to String.Empty.</remarks><param name="row">Row index (1 based)</param><param name="col">Column index (1 based)</param><param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
             <param name="author">Author of the comment.</param>
             <param name="commentProperties">Properties of the popup.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,System.String,System.String,FlexCel.Core.TImageProperties)">
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary><remarks>To delete a comment, set its value to String.Empty.</remarks><param name="row">Row index (1 based)</param><param name="col">Column index (1 based)</param><param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
             <param name="author">Author of the comment.</param>
             <param name="commentProperties">Properties of the popup.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,System.String)">
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary>
            <remarks>To delete a comment, set its value to String.Empty.</remarks>
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)">
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary><remarks>To delete a comment, set its value to String.Empty.</remarks><param name="row">Row index (1 based)</param><param name="col">Column index (1 based)</param><param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)">
            <summary>
            Returns the comment properties for the popup at position commentIndex
            </summary>
            <remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks> 
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <returns>The comment properties.</returns>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetCommentProperties(System.Int32,System.Int32)">
            <summary>
            Gets the popup placement for an existing comment. If there is not a comment on cell (row,col), this will return null.
            </summary>
            <remarks>Note that you can change the size but not the placement of the popup.
            This placement you set here is the one you see when you right click the cell and choose "Show comment". 
            The yellow popup box is placed automatically by excel.</remarks>
            <param name="row">Row index (1 based).</param>
            <param name="col">Column index (1 based)</param>
            <returns>Placement of the comment popup.</returns>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)">
            <summary>
            Sets the comment properties at the specified index.
            </summary>
            <remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks> 
            <param name="row">Row index (1 based)</param>
            <param name="commentIndex">Comment index (1 based)</param>
            <param name="commentProperties">Comment properties.</param>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentProperties(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)">
            <summary>
            Sets the popup placement for an existing comment. If there is not a comment on cell (row,col), this will create an empty one.
            </summary>
            <remarks>Note that you can change the size but not the placement of the popup.
            This placement you set here is the one you see when you right click the cell and choose "Show comment". 
            The yellow popup box is placed automatically by excel.</remarks>
            <param name="row">Row index (1 based)</param>
            <param name="col">Column index (1 based)</param>
            <param name="commentProperties">Placement of the comment popup. Null if there is no comment on the cell.</param>
            <seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> <seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/> <seealso cref="M:FlexCel.Core.ExcelFile.GetCommentProperties(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>  
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode)">
            <summary>
            Inserts and/or copies a range of cells from one place to another.
            </summary>
            <remarks>
            This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
            adapting the formulas, images and everything as Excel would do it.
            </remarks>
            <param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
            be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
            The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param>
            <param name="destRow">Destination row where the cells will be copied.</param>
            <param name="destCol">Destination column where the cells will be copied.</param>
            <param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
            If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param>
            <param name="insertMode">How the cells on destination will be inserted. They can be shift down or left. 
            Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode)">
            <summary>
            Inserts and/or copies a range of cells from one place to another.
            </summary><remarks>
            This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
            adapting the formulas, images and everything as Excel would do it.
            </remarks><param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
            be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
            The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param><param name="destRow">Destination row where the cells will be copied.</param><param name="destCol">Destination column where the cells will be copied.</param><param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
            If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param><param name="insertMode">How the cells on destination will be inserted. They can be shift down or left. 
            Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param>
            <remarks>This overload version is useful for <b>inserting</b> only and not copying.</remarks>
             <param name="copyMode">Which cells on sourceRange will be copied. If you intend to replace values on the copied cells,
             you might specify OnlyFormulas. If you just want to <b>insert</b> cells and not copy, specify None.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32)">
            <summary>
            Inserts and/or copies a range of cells from one place to another.
            </summary><remarks>
            This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
            adapting the formulas, images and everything as Excel would do it.
            </remarks><param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
            be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
            The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param><param name="destRow">Destination row where the cells will be copied.</param><param name="destCol">Destination column where the cells will be copied.</param><param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
            If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param><param name="insertMode">How the cells on destination will be inserted. They can be shift down or left. 
            Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param><remarks>This overload version is useful for <b>inserting</b> only and not copying.</remarks><param name="copyMode">Which cells on sourceRange will be copied. If you intend to replace values on the copied cells,
             you might specify OnlyFormulas. If you just want to <b>insert</b> cells and not copy, specify None.</param>
            <remarks>This overload is useful for <b>copying from another file.</b> It is not as fast or complete as the other
            overloaded versions because it has to do a lot of transforms on the data. But it is very useful anyway.</remarks>
            <param name="sourceWorkbook">Workbook from where we are copying the cells. This might be the same workbook, and you would by copying from another sheet.</param>
            <param name="sourceSheet">Sheet index on the source workbook. If sourceWorkbook is the same instance as this, and sourceSheet is the active sheet on the instance, this method is equivalent to the simpler overloaded version.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteRange(FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode)">
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary>
            <param name="cellRange">Range of cells to delete.</param>
            <param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteRange(System.Int32,System.Int32,FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode)">
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary>
            <param name="sheet1">First sheet where to delete cells.</param>
            <param name="sheet2">Last sheet where to delete cells.</param>
            <param name="cellRange">Range of cells to delete.</param>
            <param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.MoveRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode)">
            <summary>
            Moves a range of cells, the same way Excel does it. All references pointing to the old range will be relocated to the new, and all
            exisitng references to the new range will be relocated to #ref. 
            </summary>
            <param name="cellRange">Range you want to move.</param>
            <param name="newRow">Row where the range will be relocated.</param>
            <param name="newCol">Column where the range will be relocated.</param>
            <param name="insertMode">This parameter switches between 2 different working modes:
            <list type="bullet">
            <item>
            Modes NoneDown and NoneRight are the same, and work the same way as when you drag a range of cells in Excel to 
            a new location. Cells on the new range will be replaced by the old, and cells where the old range was located will be cleared(not deleted).
            No cells are insered or deleted.
            </item>
            <item>
            The other modes behave like when you select a range in Excel, cut it, and then right click and select "Insert Cut Cells...". The old range will be inserted
            where the new range goes, cells where the old range was will be deleted(not cleared). 
            Using for example MoveRange(CellRange, newRow, newCol, TFlxInsertMode.ShiftRight) is equivalent to:
            1) InsertAndCopyRange(CellRange, newRow, newCol, 1, TFlxInsertMode.ShiftRight, TRangeCopyMode.None); 
            2) MoveRange(CellRange, newRow, newCol, TFlxInsertMode.NoneRight);  
            3) DeleteRange(CellRange, TFlxInsertMode.ShiftRight);
            </item>
            </list>
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearDataValidation">
            <summary>
            Clears all data validation entries in the active sheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearDataValidation(FlexCel.Core.TXlsCellRange)">
            <summary>
            Clears all data validation entries inside the specified range.
            </summary>
            <param name="range">Range of cells where data validation will be cleared.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddDataValidation(FlexCel.Core.TXlsCellRange,FlexCel.Core.TDataValidationInfo)">
            <summary>
            Adds a new Data Validation to a specified range.
            </summary>
            <param name="range">Range of cells where we will apply the Data Validation.</param>
            <param name="validationInfo">Validation information.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)">
            <summary>
            Returns the validation information for an specific cell. If the cell has no Data Validation associated, this method returns null.
            </summary>
            <param name="row">Row of the cell (1 based)</param>
            <param name="col">Column of the cell (1 based)</param>
            <returns>The data validation for a cell, or null if the cell has no Data Validation associated.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)">
            <summary>
            Returns the data validation information for an entry of the index.
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number">
            <item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)"/> to return the data validation in the cell.</item>
            <item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount"/>, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)"/> to loop over all existing data validations.</item>
            </list>
            </summary>
            <param name="index">Position in the list of data validations. (1 based)</param>
            <returns>Data validation information.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)">
            <summary>
            Returns a list of ranges for which a data validation definition applies.
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number">
            <item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)"/> to return the data validation in the cell.</item>
            <item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount"/>, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)"/> to loop over all existing data validations.</item>
            </list>
            </summary>
            <param name="index">Position in the list of data validations. (1 based)</param>
            <returns>A list of cell ranges.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHyperLink(System.Int32)">
            <summary>
            Returns the hyperlink at position index on the list.
            </summary>
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <returns>Hyperlink description.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetHyperLink(System.Int32,FlexCel.Core.THyperLink)">
            <summary>
            Modifies an existing Hyperlink. Use <see cref="M:FlexCel.Core.ExcelFile.AddHyperLink(FlexCel.Core.TXlsCellRange,FlexCel.Core.THyperLink)"/> to add a new one.
            </summary>
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <param name="value">Hyperlink description.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetHyperLinkCellRange(System.Int32)">
            <summary>
            Returns the cell range a hyperlink refers to.
            </summary>
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <returns>Range the hyperlink applies to.</returns>
            <remarks>While normally hyperlinks refer to a single cell, you can make them point to
            a range. This method will return the first and last cell of the range that the hyperlink applies to.</remarks>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetHyperLinkCellRange(System.Int32,FlexCel.Core.TXlsCellRange)">
            <summary>
            Changes the cells an hyperlink is linked to.
            </summary>
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
            <param name="cellRange">Range of cells the hyperlink will refer to.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddHyperLink(FlexCel.Core.TXlsCellRange,FlexCel.Core.THyperLink)">
            <summary>
            Adds a new hyperlink to the Active sheet. Use <see cref="M:FlexCel.Core.ExcelFile.SetHyperLink(System.Int32,FlexCel.Core.THyperLink)"/> to modify an existing one.
            </summary>
            <param name="cellRange">Range of cells the hyperlink will refer to.</param>
            <param name="value">Description of the hyperlink.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.DeleteHyperLink(System.Int32)">
            <summary>
            Deletes an existing hyperlink.
            </summary>
            <param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetRowOutlineLevel(System.Int32)">
            <summary>
            Returns the Outline level for a row.
            </summary>
            <param name="row">Row index (1 based)</param>
            <returns>Outline level for a row. It is a number between 0 and 7.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowOutlineLevel(System.Int32,System.Int32)">
            <summary>
            Sets the Outline level for a row.
            </summary>
            <param name="row">Row index (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetRowOutlineLevel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Outline level for a row range.
            </summary>
            <param name="firstRow">Row index of the first row on the range. (1 based)</param>
            <param name="lastRow">Row index of the last row on the range. (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetColOutlineLevel(System.Int32)">
            <summary>
            Returns the Outline level for a column.
            </summary>
            <param name="col">Column index (1 based)</param>
            <returns>Outline level for a column. It is a number between 0 and 7.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColOutlineLevel(System.Int32,System.Int32)">
            <summary>
            Sets the Outline level for a column.
            </summary>
            <param name="col">Column index (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetColOutlineLevel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Outline level for a column range.
            </summary>
            <param name="firstCol">Column index of the first column on the range. (1 based)</param>
            <param name="lastCol">Column index of the last column on the range. (1 based)</param>
            <param name="level">Outline level. must be between 0 and 7.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode)">
            <summary>
            Collapses or expands the row outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary>
            <param name="level">Level that we want to show of the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the top of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode,System.Int32,System.Int32)">
            <summary>
            Collapses or expands the row outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary>
            <param name="level">Level that we want to show of the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the top of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
            <param name="firstRow">This defines the first row of the range to collapse/expand. Only rows inside that range will be modified.</param>
            <param name="lastRow">This defines the last row of the range to collapse/expand. Only rows inside that range will be modified.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode)">
            <summary>
            Collapses or expands the column outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the left of the outline gutter in Excel.
            </summary>
            <param name="level">Level that we want to display from the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the left of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode,System.Int32,System.Int32)">
            <summary>
            Collapses or expands the column outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary>
            <param name="level">Level that we want to display from the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the left of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param>		 
            <param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param>
            <param name="firstCol">This defines the first column of the range to collapse/expand. Only columns inside that range will be modified.</param>
            <param name="lastCol">This defines the last column of the range to collapse/expand. Only columns inside that range will be modified.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsOutlineNodeRow(System.Int32)">
            <summary>
            Returns true when the row is the one that is used for collapsing an outline. (it has a "+" at the left).
            </summary>
            <param name="row">Row to test (1 based)</param>
            <returns>True if the node has a "+" mark.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsOutlineNodeCol(System.Int32)">
            <summary>
            Returns true when the column is the one that is used for collapsing an outline. (it has a "+" at the top).
            </summary>
            <param name="col">Column to test (1 based)</param>
            <returns>True if the node has a "+" mark.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsOutlineNodeCollapsedRow(System.Int32)">
            <summary>
            Returns true when the row is an outline node (it has a "+" at the left) and it is closed (all children are hidden).
            </summary>
            <param name="row">Row to test (1 based)</param>
            <returns>True if the row contains a node and it is collapsed, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsOutlineNodeCollapsedCol(System.Int32)">
            <summary>
            Returns true when the column is an outline node (it has a "+" at the top) and it is closed (all children are hidden).
            </summary>
            <param name="col">Column to test (1 based)</param>
            <returns>True if the column contains a node and it is collapsed, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineNodeRow(System.Int32,System.Boolean)">
            <summary>
            Use this method to collapse a node of the outline. If the row is not a node (<see cref="M:FlexCel.Core.ExcelFile.IsOutlineNodeRow(System.Int32)"/> is false) this method does nothing.
            While this method allows a better control of the rows expanded and collapsed, you will normally use <see cref="M:FlexCel.Core.ExcelFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode)"/> to collapse or
            expand all rows in a sheet.
            </summary>
            <param name="row">Row to expand or collapse (1 based)</param>
            <param name="collapse">If true, the node will be collapsed, else it will be expanded.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.CollapseOutlineNodeCol(System.Int32,System.Boolean)">
            <summary>
            Use this method to collapse a node of the outline. If the column is not a node (<see cref="M:FlexCel.Core.ExcelFile.IsOutlineNodeCol(System.Int32)"/> is false) this method does nothing.
            While this method allows a better control of the columns expanded and collapsed, you will normally use <see cref="M:FlexCel.Core.ExcelFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode)"/> to collapse or
            expand all columns in a sheet.
            </summary>
            <param name="col">Column to expand or collapse. (1 based)</param>
            <param name="collapse">If true, the node will be collapsed, else it will be expanded.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SelectCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a single cell. To select multiple cells,
            use <see cref="M:FlexCel.Core.ExcelFile.SelectCells(FlexCel.Core.TXlsCellRange[])"/>
            </summary>
            <param name="row">Row to select (1 based)</param>
            <param name="col">Column to select (1 based)</param>
            <param name="scrollWindow">When true, window will scroll so the selected cell is visible. This is equivalent to using <see cref="M:FlexCel.Core.ExcelFile.ScrollWindow(System.Int32,System.Int32)"/> method and is provided as a shortcut.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SelectCells(FlexCel.Core.TXlsCellRange[])">
            <summary>
            Selects a group of cells on a given pane. If you just want to select just one cell, you can use the simpler method <see cref="M:FlexCel.Core.ExcelFile.SelectCell(System.Int32,System.Int32,System.Boolean)"/>
            </summary>
            <param name="cellRange"></param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSelectedCells">
            <summary>
            Returns the selected ranges on a sheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ScrollWindow(System.Int32,System.Int32)">
            <summary>
            Scrolls the window to an specified place. If the window is split, it will move the left and top panels.
            </summary>
            <param name="row">First visible row.</param>
            <param name="col">First visible column.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ScrollWindow(FlexCel.Core.TPanePosition,System.Int32,System.Int32)">
            <summary>
            Scrolls the window to an specified place. 
            </summary>
            <param name="panePosition">Pane to move. Note that if you move for example the left column of the upper left pane, you will also move the left column of the lower left pane.</param>
            <param name="row">First visible row.</param>
            <param name="col">First visible column.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetWindowScroll">
            <summary>
            Returns the window scroll for the main pane.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetWindowScroll(FlexCel.Core.TPanePosition)">
            <summary>
            Returns the window scroll for a specified pane.
            </summary>
            <param name="panePosition">Pane to return. </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)">
            <summary>
            This command is equivalent to Menu-&gt;Window-&gt;Freeze Panes. It will freeze
            the rows and columns above and to the left from cell. Note that because Excel
            works this way, when you <see cref="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)"/> the panes are suppressed and vice-versa
            See also <see cref="M:FlexCel.Core.ExcelFile.GetFrozenPanes"/>
            </summary>
            <param name="cell">All rows and columns above and to the left of this cell will be frozen. Set it to null or "A1" to unfreeze the panes.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetFrozenPanes">
            <summary>
            Returns the cell that is freezing the window, "A1" if no panes are frozen.
            See also <see cref="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)"/>
            </summary>
            <returns>The cell that is freezing the window, "A1" if no panes are frozen.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)">
            <summary>
            This command is equivalent to Menu-&gt;Window-&gt;Split. It will split the
            window in 4 regions. Note that because Excel
            works this way, when you <see cref="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)"/> the windows are unsplitted and vice-versa
            See also <see cref="M:FlexCel.Core.ExcelFile.GetSplitWindow"/>
            </summary>
            <param name="xOffset">Offset from the left on 1/20 of a point. Zero for no vertical split.</param>
            <param name="yOffset">Offset from the top on 1/20 of a point. Zero for no horizontal split.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSplitWindow">
            <summary>
            Returns the horizontal and vertical offsets for the split windows. Zero means no split.
            See also <see cref="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)"/>
            </summary>
            <returns>The horizontal and vertical offsets for the split windows. Zero means no split.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetChart(System.Int32,System.String)">
            <summary>
            Returns a chart from an object position and path. If the object does not contain a chart, it returns null.
            </summary>
            <param name="objectIndex">Index of the object (1-based)</param>
            <param name="objectPath">Index to the child object where the chart is.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Find(System.Object,FlexCel.Core.TXlsCellRange,FlexCel.Core.TCellAddress,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds a value inside a cell and returns the position for the cell, or null if nothing was found.
            </summary>
            <param name="value">Value we are searching.</param>
            <param name="Range">Range to Search. Null means the whole worksheet.</param>
            <param name="Start">Cell where to start searching. For the first time, use null. After this, you can use the result of this method to get the next cell.</param>
            <param name="ByRows">If true, the value will be searched down then left. If false, the search will go left then down. SEARCH IS FASTER WHEN BYROWS = FALSE</param>
            <param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param>
            <param name="SearchInFormulas">If true, the search will cover formulas too.</param>
            <param name="WholeCellContents">If true, only whole cells will be replaced.</param>
            <returns>Cell where the string is found, or null if it is not found.</returns>
            <example>To find all cells on a sheet that contain the string "bolts":
            <code>
              do
              {
                 Cell = xls.Find("bolts", null, Cell, false, true, true, false);
                 if (Cell != null) MessageBox.Show(Cell.CellRef);
              }
                 while (Cell != null);
            </code>
            </example>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Replace(System.Object,System.Object,FlexCel.Core.TXlsCellRange,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Replaces the instances of oldValue by newValue in the active sheet.
            </summary>
            <param name="oldValue">Value we want to replace.</param>
            <param name="newValue">Value we want to use to replace oldValue.</param>
            <param name="Range">Range to Search. Null means the whole worksheet.</param>
            <param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param>
            <param name="SearchInFormulas">If true, the search will cover formulas too.</param>
            <returns>The number of replacements done.</returns>
            <param name="WholeCellContents">If true, only whole cells will be replaced.</param>
            <example>To replace all cells on a sheet that contain "hello" with "hi":
            <code>
              xls.Replace("hello", "hi", null, true, true, false);
            </code>
            </example>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Sort(FlexCel.Core.TXlsCellRange,System.Boolean,System.Int32[],FlexCel.Core.TSortOrder[],System.Collections.IComparer)">
            <summary>
            Sorts a range on the current sheet.
            </summary>
            <param name="Range">Range to sort. It must not include headers.</param>
            <param name="ByRows">If true, rows will be sorted. If false, columns will.</param>
            <param name="Keys">An array of integers indicating the columns or rows you want to use for sorting. Note that this number is absolute, for example column 1 always means column "A" no matter if the range we are sorting begins at column "B".
            A null array means sort by the first column or row, then by the second, etc. up to 8 entries.</param>
            <param name="SortOrder">An array of flags indicating whether to sort ascending or descending for each Key. If null, all sorts will be ascending. If not null and the array size is less than the size of the "Keys" parameter, all missing entries are assumed to be Ascending.</param>
            <param name="Comparer">Comparer to create a custom way to compare the different items. Set it to null to use default ordering.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetAutoFilter(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the AutoFilter in the Active sheet to point ot the range specified.
            </summary>
            <param name="row">Row where the AutoFilter will be placed (1 based).</param>
            <param name="col1">First column for the AutoFilter range (1 based).</param>
            <param name="col2">Last column for the AutoFilter range (1 based).</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.SetAutoFilter(FlexCel.Core.TXlsCellRange)">
            <summary>
            Sets an AutoFilter in a cell range. Note that the bottom coordinate of the range will be ignored, since AutoFilters 
            use only one row.
            </summary>
            <param name="range">Range to set the AutoFilter. If range is null, this method does nothing. The bottom coordinate on range will not be used.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RemoveAutoFilter">
            <summary>
            Removes the AutoFilter from the active sheet. If there is no AutoFilter in the sheet, this method does nothing.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasAutoFilter">
            <summary>
            Returns true if the active sheet has any AutoFilter defined.
            </summary>
            <returns>True if the active sheet has an AutoFilter, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasAutoFilter(System.Int32,System.Int32)">
            <summary>
            Returns true if a cell has an AutoFilter.
            </summary>
            <param name="row">Row of the cell we want to find out. (1 based)</param>
            <param name="col">Column of the cell we want to find out. (1 based)</param>
            <returns>True if the cell has an AutoFilter, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetAutoFilterRange">
            <summary>
            Returns the range of cells with AutoFilter in the Active sheet, or null if there is not AutoFilter. The "Bottom"
            coordinate of the returned range has no meaning, only Top, left and right are used. (since AutoFilters only have one row).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Recalc">
            <summary>
            When <see cref="P:FlexCel.Core.ExcelFile.RecalcMode"/> is manual, use this method to force a recalculation of the spreadsheet.
            This specific version of the method will always perform a recalc, even if it is not needed.
            You can use <see cref="M:FlexCel.Core.ExcelFile.Recalc(System.Boolean)"/> to recalc only when is needed.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.Recalc(System.Boolean)">
            <summary>
            When <see cref="P:FlexCel.Core.ExcelFile.RecalcMode"/> is manual, use this method to force a recalculation of the spreadsheet.
            </summary>
            <param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet. </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.InternalRecalc(System.Boolean)">
            <summary>
            Used by the framework to recalculate linked spreadsheets.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RecalcAndVerify">
            <summary>
            Use this method to validate a file. FlexCel does not support all the range of functions from Excel
            when recalculating, so unknown functions will return "#NAME!" errors. Using this function you can validate
            your user worksheets and see if all the formulas they use are supported.
            </summary>
            <remarks>Note that you *can* use unsupported functions on FlexCel. When you open the generated file
            on Excel it will show ok. The only problem is if you need to natively print or export to pdf the file.
            <p>Also, take in account that RecalcAndVerify is slower than recalc, as it has to do more work
            to locate the errors. Do not use it as a replace for <see cref="M:FlexCel.Core.ExcelFile.Recalc"/></p></remarks>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.GetSupportingFile(System.String)">
            <summary>
            Returns a recalculating supporting file for this spreadsheet. Supporting files are added using a Workspace object.
            </summary>
            <param name="fileName">File to return. It might be a full filename with path or only the name of the file.</param>
            <returns>The supporting file with the given filename.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.RemoveMacros">
            <summary>
            If the file has macros, this method will remove them.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.HasMacros">
            <summary>
            Returns true if the file has any macros.
            </summary>
            <returns>True if the file has macros.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)">
            <summary>
            Use it to convert formulas to their values. It can be useful if for example you are copying the sheet to
            another workbook, and you don't want any references to it. NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertExternalNamesToRefErrors"/> too.
            </summary>
            <param name="onlyExternal">When true, it will only convert the formulas that do not refer to the same sheet.
            For example "=A1+Sheet2!A1" will be converted, but "=A2+A3" will not.
            </param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ConvertExternalNamesToRefErrors">
            <summary>
            Use it to convert the external names in a sheet to #REF! . It can be useful when you need to remove all external links in a file. 
            NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)"/> too.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)">
            <summary>
            Adds a custom formula function to the FlexCel recalculation engine. Note that this formulas are only valid for Excel custom formulas, not for internal ones.
            For example, you could define "EDATE" since it is a custom formula defined in the Analisis Addin, but you cannot redefine "SUM". 
            Note that if a custom formula with the name already exists, it will be replaced. Names are Case insensitive ("Date" is the same as "DATE").
            For more information on adding Custom Formulas make sure you read the PDF documentation and take a look at the demo.
            </summary>
            <param name="scope">Defines if the custom function will be available globally to all ExcelFile instances or only to the ExcelFile instance where
            it was added. It is recommended to add functions globally, unless you have different xls files with functions that might have the same name but could be implemented different.</param>
            <param name="location">Defines if the function will be inserted as a reference to a macro in the local sheet or in an external book or addin.
            This parameter is used only when adding formulas with user defined functions to a sheet. It is not needed or used when recalculating those functions or when
            reading the text of a formula.</param>
            <param name="function">Formula function we want to add.</param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.EvaluateUserDefinedFunction(System.String,FlexCel.Core.TUdfEventArgs,System.Object[])">
            <summary>
            Evaluates a custom function you have added earlier with <see cref="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)"/>. You will not normally need to call this method, but it could be used for testing.
            If the function has not been added with <see cref="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)"/>, this method will return <see cref="F:FlexCel.Core.TFlxFormulaErrorValue.ErrName"/>.
            </summary>
            <param name="functionName">Function you want to evaluate.</param>
            <param name="arguments">Extra arguments you can use to evaluate the formula.</param>
            <param name="parameters">Parameters for the formula.</param>
            <returns>The result of evaluating the formula. It might be a string, a double, a boolean, a TFlxFormulaError or an Array.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.ClearUserDefinedFunctions(FlexCel.Core.TUserDefinedFunctionScope)">
            <summary>
            Removes all the custom formula functions from the FlexCel recalculation engine.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsDefinedFunction(System.String)">
            <summary>
            Returns true if the Custom formula function has been added to the FlexCel recalculating engine.
            </summary>
            <param name="formulaName">Name of the formula. Case insensitive.</param>
            <returns>True if the name has been added, false if not.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.IsDefinedFunction(System.String,FlexCel.Core.TUserDefinedFunctionLocation@)">
            <summary>
            Returns true if the Custom formula function has been added to the FlexCel recalculating engine.
            </summary>
            <param name="formulaName">Name of the formula. Case insensitive.</param>
            <param name="location">Returns if the function is defined as an internal or external function.</param>
            <returns>True if the name has been added, false if not.</returns>
        </member>
        <member name="M:FlexCel.Core.ExcelFile.EnsureAddInExternalName(System.String,System.Int32@,System.Int32@)">
            <summary>
            Creates and addin external name or returns an existing one.
            </summary>
            <param name="formulaName"></param>
            <param name="externSheet"></param>
            <param name="externName"></param>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ActiveFileName">
            <summary>
            The file we are working on. When we save the file with another name, it changes.
            When we open a stream, it is set to "".
            This value is also used to get the text of Headers and Footers (when using the filename macro).
            When using the filename macro on headers/footers, make sure you set this value to what you want.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles">
            <summary>
            Determines if a call to "Save()" will automatically overwrite an existing file or not.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.IsXltTemplate">
            <summary>
            Determines if the file is a template (xlt format instead of xls). Both file formats are nearly identical, but there is an extra record
            needed so the file is a proper xlt template.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ActiveSheet">
            <summary>
            The Sheet where we are working on, 1-based(First sheet is 1, not 0). 
            Always set this property before working on a file.
            You can read or write this value.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ActiveSheetByName">
            <summary>
            The sheet where we are working on, referred by name instead of by index.
            To change the active sheet name, use <see cref="P:FlexCel.Core.ExcelFile.SheetName"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetCount">
            <summary>
            The number of sheets on the file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetName">
            <summary>
            Reads and changes the name of the active sheet. To switch to another sheet by its name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName"/>
            </summary>
            <remarks>
            This name must be unique in the file. It can be up to 31 characters long, and it can't contain the
            characters "/", "\", "?", "[", "]", "*"
            or ":"<para></para>
            </remarks>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetCodeName">
            <summary>
            Returns the codename of a sheet, that is an unique identifier assigned to the sheet when it is created. 
            Codenames are useful because they never change once the file is created, and they are what macros reference.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetVisible">
            <summary>
            Sets the visibility of the active sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetZoom">
            <summary>
            Reads/Writes the zoom of the current sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetTabColorIndex">
            <summary>
            Reads/Writes the color index of the current sheet tab. Use a number less or equal than 0 to specify no color.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ShowGridLines">
            <summary>
            True if the gray grid lines are shown on the Active sheet. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ShowFormulaText">
            <summary>
            When true, the formula text will be displayed instead of the formula value. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GridLinesColorIndex">
            <summary>
            Color of the grid separator lines.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HideZeroValues">
            <summary>
            When true number 0 will be shown as empty. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetType">
            <summary>
            Use this property to know it the <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet"/> is a worksheet, a chart sheet or other.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetOptions">
            <summary>
            This property groups a lot of properties of the sheet, like for example if it is showing formula texts or the results.
            Most of this properties can be changed directly from XlsFile, but this method allows you to change them all together,
            or to easily copy the options from one file to another.  Look also at <see cref="P:FlexCel.Core.ExcelFile.SheetWindowOptions"/> for options that affect all sheets.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SheetWindowOptions">
            <summary>
            This property groups a lot of properties of all the sheets in the workbook, like for example if the sheet tab bar at the bottom is visible.
             Look also at <see cref="P:FlexCel.Core.ExcelFile.SheetOptions"/> for options that affect only the active sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.FormatCount">
            <summary>
            Number of custom formats defined in all the sheet. When calling GetFormat(XF), 0&lt;=XF&lt;FormatCount.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetDefaultFormat">
            <summary>
            Returns Excel standard format for an empty cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetDefaultFormatNormalStyle">
            <summary>
            Returns Excel standard format for the normal style. "Normal" style applies to the headers "A", "B" ... at the top of the columns
            and "1", "2"... at the left of the rows.
            You normally will want to use <see cref="P:FlexCel.Core.ExcelFile.GetDefaultFormat"/> instead of this mehtod.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultFormatId">
            <summary>
            Returns XF identifier for the style that applies to all empty cells. Note that this is different
            from the "Normal" style as defined inside Excel. This is a "Cell" format that can be applied to cells,
            while "Normal" is a "Style" format that is applied to this cell format.
            Normally when changing this format, you will want to also change <see cref="P:FlexCel.Core.ExcelFile.DefaultFormatIdNormalStyle"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultFormatIdNormalStyle">
            <summary>
            Returns XF identifier for the "Normal" style. Applies to the labels "A", B", "C" and "1", "2", "3"... in the header of the cells.
            Normally when changing this format, you will want to also change <see cref="P:FlexCel.Core.ExcelFile.DefaultFormatId"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.FontCount">
            <summary>
            Number of fonts defined in all the sheet. When calling GetFont(fontIndex), 0&lt;=fontIndex&lt;FormatCount.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetDefaultFont">
            <summary>
            Returns Excel standard font for an empty cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetDefaultFontNormalStyle">
            <summary>
            Returns Excel font for the "normal" style. This style is used to draw the row and column headings.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.StyleCount">
            <summary>
            Returns the number of named styles in the file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.CellMergedListCount">
            <summary>
            For using with <see cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)"/> on a loop: for (int i=1;i &lt;= CellMergedListCount) CellMergedList(i)...
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.RowCount">
            <summary>
            Number of rows actually used on the sheet. 
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ColCount">
            <summary>
            Number of columns actually used on the sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultRowHeight">
            <summary>
            The default height for empty rows, in Excel internal units. (1/20th of a point)
            </summary>
            <remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks>
            <example><code>RowHeightInPixels=GetRowHeight(Row)/FlxConsts.RowMult;</code></example>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DefaultColWidth">
            <summary>
            The default width for empty columns, in Excel internal units. (Character width of font 0 / 256)
            </summary>
            <remarks>Use <see cref="F:FlexCel.Core.FlxConsts.ColMult"/> to convert the internal units to pixels.</remarks>
            <example><code>ColWidthInPixels=GetColWidth(Col)/FlxConsts.ColMult;</code></example>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ColorPaletteCount">
            <summary>
            The number of entries on an Excel color palette. This is  always 56.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.GetUsedPaletteColors">
            <summary>
            Returns a list of the used colors on the palette. You can use it as an entry to <see cref="M:FlexCel.Core.ExcelFile.NearestColorIndex(System.Drawing.Color)"/>
            to modify the palette.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.NamedRangeCount">
            <summary>
            The count of all named ranges on the file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PageHeader">
             <summary>
             Page header on the active sheet.
             A page header is a string that contains the text for the 3 parts of the header.<p></p>
             The Left section begins with &amp;L, the Center section with &amp;C and the Right with &amp;R<p></p>
             For example, the text"&amp;LThis goes at the left!&amp;CThis is centered!&amp;RThis is right aligned"
             will write text to all the sections.
             <p></p><p></p>
             This is the full list of macros you can include:
            <p></p>
             <list type="bullet">
             <item>&amp;&amp; The “&amp;” character itself</item>
             <item>&amp;L Start of the left section</item>
             <item>&amp;C Start of the centered section</item>
             <item>&amp;R Start of the right section</item>
             <item>&amp;P Current page number</item>
             <item>&amp;N Page count</item>
             <item>&amp;D Current date</item>
             <item>&amp;T Current time</item>
             <item>&amp;A Sheet name</item>
             <item>&amp;F File name without path</item>
             <item>&amp;Z File path without file name (XP or Newer)</item>
             <item>&amp;G Picture (XP or Newer)</item>
             <item>&amp;U Underlining on/off</item>
             <item>&amp;E Double underlining on/off</item>
             <item>&amp;S Strikeout on/off</item>
             <item>&amp;X Superscript on/off</item>
             <item>&amp;Y Subscript on/off</item>
             <item>&amp;"&lt;fontname&gt;" Set new font &lt;fontname&gt;</item>
             <item>&amp;"&lt;fontname&gt;,&lt;fontstyle&gt;" Set new font with specified style &lt;fontstyle&gt;. The style &lt;fontstyle&gt; is in most cases
             one of “Regular”, “Bold”, “Italic”, or “Bold Italic”. But this setting is dependent on the
             used font, it may differ (localized style names, or “Standard”, “Oblique”, ...).</item>
             <item>&amp;&lt;fontheight&gt; Set font height in points (&lt;fontheight&gt; is a decimal value). If this command is followed
             by a plain number to be printed in the header, it will be separated from the font height
             with a space character.</item>
             </list>
             <p></p>
             Normally, the easiest way to find out which header string you need is to create an xls file on Excel, add a header, open the file
             with FlexCel and take a look at the generated header (You can use the ApiMate tool for that).
             </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PageFooter">
            <summary>
            Page footer on the active sheet. For a description on the format of the string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintGridLines">
            <summary>
            True if the gray grid lines are printed when printing the spreadsheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintHeadings">
            <summary>
            When true the row and column labels (A,B...etc for columns, 1,2... for rows) will be printed.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintHCentered">
            <summary>
            When true the sheet will print horizontally centered on the page.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintVCentered">
            <summary>
            When true the sheet will print vertically centered on the page.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintToFit">
            <summary>
            If true, sheet will be configured to fit on <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages"/> x <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintCopies">
            <summary>
            Number of copies to print.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintXResolution">
            <summary>
            Horizontal printer resolution on DPI.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintYResolution">
            <summary>
            Vertical printer resolution on DPI.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintOptions">
            <summary>
            Misc options.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintScale">
            <summary>
            Percent to grow/shrink the sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages">
            <summary>
            If set, the sheet will be printed on at most this number of horizontal pages. <seealso cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages">
            <summary>
            If set, the sheet will be printed on at most this number of vertical pages. <seealso cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintPaperSize">
            <summary>
            Pre-defined standard paper size. If you want to set up a printer specific paper size, see <see cref="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.PrintPaperDimensions">
            <summary>
            Returns the dimensions for the selected paper. See also <see cref="P:FlexCel.Core.ExcelFile.PrintPaperSize"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ImageCount">
            <summary>
            The number of images on the active sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ObjectCount">
            <summary>
            Count of all graphical objects on the sheet. They can be charts, images, shapes, etc.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DataValidationCount">
            <summary>
            Returns the number of DataValidation structures in the active sheet. 
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number">
            <item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)"/> to return the data validation in the cell.</item>
            <item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount"/>, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)"/> to loop over all existing data validations.</item>
            </list>
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HyperLinkCount">
            <summary>
            The count of hyperlinks on the active sheet
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OutlineSummaryRowsBelowDetail">
            <summary>
            Determines whether the summary rows should be below or above details on outline.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OutlineSummaryColsRightToDetail">
            <summary>
            Determines whether the summary columns should be right to or left to the details on outline.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OutlineAutomaticStyles">
            <summary>
            This handles the setting of Automatic Styles inside the outline options.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.Protection">
            <summary>
            Protection data for the file. Modify its properties to open and read encrypted files.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.DocumentProperties">
            <summary>
            Document properties for the file. With this object you can read or write the properties (Author, Title, etc.) of a file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ChartCount">
            <summary>
            Returns the count of charts on this sheet.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsDates1904">
            <summary>
            Excel has 2 different date systems. On windows systems it uses 1900 based dates, and on Macintosh systems it uses 1904 dates.
            You can change this on Excel under Options, and this property allows you to know and change which format is being used.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsR1C1">
            <summary>
            Use this property to know or change the reference system used in Excel.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsSaveExternalLinkValues">
            <summary>
            This property has the value of the corresponding option on Excel options.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.OptionsPrecisionAsDisplayed">
            <summary>
            This property has the value of the corresponding option on Excel options.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.RecalcMode">
             <summary>
             Set this property to change how the file will be recalculated.
             </summary>
             <remarks>
             Setting RecalcMode = Manual might be a little faster for big spreadsheets with *lots* of formulas,
             but they won't preview ok on Excel viewers as FlexCelPrintDocument. See also <see cref="P:FlexCel.Core.ExcelFile.RecalcForced"/>
             When Manual, you can still call <see cref="M:FlexCel.Core.ExcelFile.Recalc(System.Boolean)"/> with "forced" = true to recalculate the sheet.
             <p>Not all functions are supported, those that are not will return a #NAME! error on a viewer, and will be recalculated by Excel
             when you open the file. See SupportedFunctions.xls in the documentation to get a list of supported functions.</p>
            </remarks>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.RecalcForced">
             <summary>
             When false Excel will not recalculate the formulas when loading the generated file.
             </summary>
             <remarks>
             If this property is true, Excel will recalculate all formulas when you load the file, so it will
             modify the workbook and will ask for saving changes when closing. Even if you just open and close the file.
             Note that this will only happen if there are formulas on the sheet.
            <p>
            <b>It is strongly advised to leave this property = true</b>. If you set it to false and there is an error on a formula
            calculated by FlexCel, it will show wrong when open on Excel too. For example, if you have the formula:
            <code>"=GETPIVOTDATA("a";"b")"</code> 
            FlexCel will return #NAME!, as it doesn't implement this function. If you open this file on Excel and 
            RecalcForced was false when saving, Excel will not calculate it and will show also #NAME!.
            If RecalcForced was true, Excel will show the right answer, but will ask for saving the file when closing.
            <b>Only set RecalcForced=false if you are in control of the formulas used on the spreadsheet</b>,
            so you can guarantee no unsupported formula will be used. If the final user can modify the templates, do not set it.
            </p>
            <p>
            Note that if <see cref="P:FlexCel.Core.ExcelFile.RecalcMode"/> = Smart and no modification is done to the file, Autorecalc info on formulas
            will not change, even if RecalcForced=true.
            </p>
            <example>
            The following code:
            <code>
            XlsFile xls= new XlsFile();
            xls.NewFile();
            xls.RecalcMode = TRecalcMode.Manual; //So the sheet is not recalculated before saving.
            xls.RecalcForced = false; //So Excel won't recalculate either.
            xls.SetCellValue(1,1, new TFormula("=1+1",3));  //We all know 1+1=3 ;-)
            xls.Save(OutFileName);
            </code>
            will create a file with a formula "1+1" and result = 3 on cell A1. If RecalcForced were true, Excel would show the correct value when opening.
            </example>
            </remarks>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.NeedsRecalc">
            <summary>
            True if the file has been modified after loading.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.Recalculating">
            <summary>
            Returns true if the workbook is being recalculated.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.SemiAbsoluteReferences">
            <summary>
            When this property is false, inserting and copying ranges will behave the same as it does in Excel.
            When this property is true, absolute references to cells inside the block being copied will be treated as relative.
            For example, if you have:
            <code>
            A1: 2
            B1: =$A$1 + $A$57
            and you copy the row 1 to row 2, in Excel or FlexCel when this property is false you will get:
            A2: 2
            B2: =$A$1 + $A$57
            When this property is true, you will get:
            A2: 2
            B2: =$A$2 + $A$57
            </code>
            In the second case, the first reference was updated because it was inside the range being copied, but the second was not.
            This property might be useful when you want to duplicate blocks of cells, but want the absolute references inside it to point to the newer block.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.ErrorActions">
            <summary>
            Determines if FlexCel will throw Exceptions or just ignore errors on specific situations.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.WidthCorrection">
            <summary>
            Factor to multiply default column widths. See remarks for a detailed explanation.
            </summary>
            <remarks>
            Excel does not print the same things to all printers (or even the same printer with another resolution).
            Depending on the driver and resolution, printed columns and rows will be a little smaller or bigger. 
            <p></p>FlexCel uses .NET framework to print, and so it is resolution independent, it will always
            print the same no matter where. So FlexCel is tuned to print like Excel on a 600 dpi generic printer.
            This will probably be ok for most uses, but in some cases might cause FlexCel to print an Extra
            page with only one column or row.
            <p></p>You can use this property and <see cref="P:FlexCel.Core.ExcelFile.HeightCorrection"/> to manually fine tune FlexCel printing,
            previewing and exporting to pdf to make it smaller or larger. A normal value for this property might be 1.05 or 0.99,
            but don't use it unless you really need to.
            </remarks>
            <example>
            To calculate the exact HeightCorrection and WidthCorrection for your printer create a new Excel sheet,
            make column A wide (almost a sheet wide) and row 1 larger (almost a sheet tall). 
            Set the borders around cell A1 to a solid line.
            Now, print this file from Excel and from FlexCel (you can use the PrintPreview demo for this) and compare
            the 2 resulting boxes. If for example the Excel printed box is 1.2 cm wide and Flexcel is 1.4, 
            WidthCorrection should be 1.4f/1.2f.  (A larger WidthCorrection means a smaller box).
            </example>
        </member>
        <member name="P:FlexCel.Core.ExcelFile.HeightCorrection">
            <summary>
            Factor to multiply default row heights. See remarks for a detailed explanation.
            </summary>
            <remarks>
            Excel does not print the same things to all printers (or even the same printer with another resolution).
            Depending on the driver and resolution, printed columns and rows will be a little smaller or bigger. 
            <p></p>FlexCel uses .NET framework to print, and so it is resolution independent, it will always
            print the same no matter where. So FlexCel is tuned to print like Excel on a 600 dpi generic printer.
            This will probably be ok for most uses, but in some cases might cause FlexCel to print an Extra
            page with only one column or row.
            <p></p>You can use this property and <see cref="P:FlexCel.Core.ExcelFile.WidthCorrection"/> to manually fine tune FlexCel printing,
            previewing and exporting to pdf to make it smaller or larger. A normal value for this property might be 1.05 or 0.99,
            but don't use it unless you really need to.
            </remarks>
            <example>
            To calculate the exact HeightCorrection and WidthCorrection for your printer create a new Excel sheet,
            make column A wide (almost a sheet wide) and row 1 larger (almost a sheet tall). 
            Set the borders around cell A1 to a solid line.
            Now, print this file from Excel and from FlexCel (you can use the PrintPreview demo for this) and compare
            the 2 resulting boxes. If for example the Excel printed box is 1.2 cm wide and Flexcel is 1.4, 
            WidthCorrection should be 1.4f/1.2f.  (A larger WidthCorrection means a smaller box)
            </example>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.#ctor">
            <summary>
            Creates a new XlsFile.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.#ctor(System.Boolean)">
            <summary>
            Creates a new XlsFile and sets the desired Overwriting mode for files.
            </summary>
            <param name="aAllowOverwritingFiles">When true calling "Save" will overwrite existing files. See <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles"/></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.#ctor(System.String)">
            <summary>
            Creates a new XlsFile and opens the desired file.
            </summary>
            <param name="aFileName">Name of the file to open.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new XlsFile and opens the desired file. Sets the desired Overwriting mode for files.
            </summary>
            <param name="aFileName">Name of the file to open.</param>
            <param name="aAllowOverwritingFiles">When true calling "Save" will overwrite existing files. See <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles"/></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.NewFile">
            <summary>
            Creates a new empty file, with 3 empty sheets.
            </summary><remarks>
            The file created will have empty properties, (author, description, etc).
            If you want to create a more personalized file when you call NewFile 
            (for example with a given Author, or the sheets names on your language), there are 2 options:
               <list type="number">
               <item>Don't use NewFile, but open an existing file you can modify.</item>
               <item>Or, you can replace the resource "EmptyWorkbooks.resx" (on xlsadapter folder) with your own.
               Create an empty excel file, use resourcer (from http://www.aisto.com/roeder/DotNet/) to create a resx from the xls,
               and then edit the generated resx file with notepad, and change the resource type to string. There are comments on the original EmptyWorkbooks.resx on how this should be done.  
               </item></list> 
            </remarks>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.NewFile(System.Int32)">
            <summary>
            Creates a new empty file, with the specified number of sheets.
            </summary><param name="aSheetCount">Number of sheets for the new file</param><remarks>
            The file created will have empty properties, (author, description, etc).
            If you want to create a more personalized file when you call NewFile 
            (for example with a given Author, or the sheets names on your language), there are 2 options:
               <list type="number">
               <item>Don't use NewFile, but open an existing file you can modify.</item>
               <item>Or, you can replace the resource "EmptyWorkbooks.resx" (on xlsadapter folder) with your own.
               Create an empty excel file, use resourcer (from http://www.aisto.com/roeder/DotNet/) to create a resx from the xls,
               and then edit the generated resx file with notepad, and change the resource type to string. There are comments on the original EmptyWorkbooks.resx on how this should be done.  
               </item></list> 
            </remarks>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Open(System.String,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a new Spreadsheet form disk, on one of the specified formats.
            </summary><param name="fileName">File to open</param><param name="fileFormat">List with possible file formats to try</param><param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/> </param><param name="firstCol">First column where will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType"/> elements, telling how each column should be imported.</param><param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt). 
             This parameter has no effect on xls files. If ommited, it is assumed to be Encoding.Default</param><param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Open(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Int32,System.Int32,FlexCel.Core.ColumnImportType[],System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a new Spreadsheet form a stream, on one of the specified formats.
            </summary><param name="aStream">Stream to open, must be a seekable stream. Verify it is on the correct position.</param><param name="fileFormat">List with possible file formats to try</param><param name="delimiter">Delimiter used to separate columns, if the format is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="firstRow">First row where we will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/> </param><param name="firstCol">First column where will copy the cells on the new sheet, for <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="columnFormats">An array of <see cref="T:FlexCel.Core.ColumnImportType"/> elements, telling how each column should be imported.</param><param name="fileEncoding">Encoding used by the file we are reading, when opening a Text-delimited file (csv or txt). 
             This parameter has no effect on xls files. If ommited, it is assumed to be Encoding.Default.</param><param name="detectEncodingFromByteOrderMarks">This parameter only applies when reading Text files. It is the same on the constructor of a StreamReader, and it says if BOM must be used at the beginning of the file. It defaults to true.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Save(System.String,FlexCel.Core.TFileFormats,System.Char,System.Text.Encoding)">
            <summary>
            Saves the file to a disk.
            </summary><param name="fileName">File to save. If <see cref="P:FlexCel.Core.ExcelFile.AllowOverwritingFiles"/> is false, then fileName MUST NOT exist.</param><param name="fileFormat">File format.</param><param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="fileEncoding">Encoding for the generated file, when writing a Text-delimited file (csv or txt). 
            This parameter has no effect on xls files. If ommited, Encoding.Default will be used. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Save(System.IO.Stream,FlexCel.Core.TFileFormats,System.Char,System.Text.Encoding)">
            <summary>
            Saves the file to a stream.
            </summary><param name="aStream">Stream where to save the file. Must be a seekable stream.</param><param name="fileFormat">File format.</param><param name="delimiter">Delimiter to use if FileFormat is <see cref="F:FlexCel.Core.TFileFormats.Text"/></param><param name="fileEncoding">Encoding for the generated file, when writing a Text-delimited file (csv or txt). 
            This parameter has no effect on xls files. If ommited, Encoding.Default will be used. Note that to create a file with BOM (byte order marker) you need to specify an encoding here, the same as you do with a StreamWriter.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetIndex(System.String,System.Boolean)">
            <summary>
            Finds a sheet name on the workbook and returns its index.
            Depending on the "throwException" parameter, this method will raise
            an exception or return -1 if the sheet does not exist.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName"/>. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetName(System.Int32)"/>
            </summary><param name="sheetName">Sheet you want to find.</param><param name="throwException">When sheetName does not exist, having
            throwException = true will raise an Exception. throwException = false will 
            return -1 if the sheet is not found.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSheetName(System.Int32)">
            <summary>
            Returns the sheet name for a given index.
            To change the active sheet by the name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName"/>. See also <see cref="M:FlexCel.Core.ExcelFile.GetSheetIndex(System.String)"/>
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)">
            <summary>
            Inserts and copies sheet "CopyFrom", SheetCount times before InsertBefore.
            If sourceWorkbook is not null, sheets will be copied from another file.
            To insert empty sheets, set CopyFrom=0. 
            </summary><remarks>When copying sheets from another file, the algorithm used is not so efficient as
            when copying from the same file. Whenever possible, don't copy from different files.</remarks><param name="copyFrom">The sheet index of the sheet we are copying from (1 based). Set it to 0 to insert Empty sheets.</param><param name="insertBefore">The sheet before which we will insert (1 based)</param><param name="aSheetCount">The number of sheets to insert.</param><param name="sourceWorkbook">Workbook from where the sheet will be copied from. Null to copy from the same file.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.InsertAndCopySheets(System.Int32[],System.Int32,FlexCel.Core.ExcelFile)">
            <summary>
            Inserts and copies all the sheets in the "CopyFrom" array, before InsertBefore into another workbook.
            </summary><remarks>When copying sheets from another file, the algorithm used is not so efficient as
            when copying from the same file. 
            <p></p>
            Use this version of the method only when copying from 2 different files. If you have for example a formula "=Sheet2!A1" in Sheet1,
            and another formula "=Sheet1!A1" in Sheet2, you need to use this method to copy them, as Copying them one by one
            (with the standard <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)"/>
            method) will return an error of formula references not found.
            <p></p>
            You can also use <see cref="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)"/> method to avoid formulas before copying between workbooks.
            </remarks><param name="copyFrom">The sheet index of all the sheets we are copying from (1 based).</param><param name="insertBefore">The sheet before which we will insert (1 based)</param><param name="sourceWorkbook">Workbook from where the sheet will be copied from. On this overloaded version it cannot be null.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearSheet">
            <summary>
            Clears all data on the active sheet, but does not delete it. <seealso cref="M:FlexCel.Core.ExcelFile.DeleteSheet(System.Int32)"/>
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteSheet(System.Int32)">
            <summary>
            Deletes the active sheet and SheetCount-1 sheets more to the right. 
            It will change all formula references to those sheets to invalid. <seealso cref="M:FlexCel.Core.ExcelFile.ClearSheet"/>
            </summary><param name="aSheetCount">The number of sheets to delete</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasHPageBreak(System.Int32)">
            <summary>
            True if the sheet has a Manual Horizontal page break on the row.
            </summary><param name="row">Row to check.</param><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasVPageBreak(System.Int32)">
            <summary>
            True if the sheet has a Manual Vertical page break on the column.
            </summary><param name="col">Column to check</param><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.InsertHPageBreak(System.Int32)">
            <summary>
            Inserts an Horizontal Page Break at the specified row. If there is one already, it will do nothing.
            If the number of pagebreaks is bigger than the maximum Excel can admit, it will add it anyway, but you might get an 
            exception when saving the file as xls. Exporting as images or PDF will use those additional page breaks.
            To control what to do when there are too many page breaks, see <see cref="P:FlexCel.Core.ExcelFile.ErrorActions"/>
            </summary><param name="row">Row where to insert the page break.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.InsertVPageBreak(System.Int32)">
            <summary>
            Inserts a Vertical Page Break at the specified column. If there is one already, it will do nothing.
            If the number of pagebreaks is bigger than the maximum Excel can admit, it will add it anyway, but you might get an 
            exception when saving the file as xls. Exporting as images or PDF will use those additional page breaks.
            To control what to do when there are too many page breaks, see <see cref="P:FlexCel.Core.ExcelFile.ErrorActions"/>
            </summary><param name="col">Column where to insert the page break.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteHPageBreak(System.Int32)">
            <summary>
            Deletes all manual page breaks at row. If there is no manual page break on row, this method will do nothing.
            </summary><param name="row">Row where to delete the Page break.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteVPageBreak(System.Int32)">
            <summary>
            Deletes all manual page breaks at col. If there is no manual page break on col, this method will do nothing.
            </summary><param name="col">Column where to delete the Page break</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearPageBreaks">
            <summary>
            Deletes all manual page breaks on the active sheet.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Tells FlexCel that it must try to keep together the rows between row1 and row2 (inclusive) when printing.  
            This method does nothing to the resulting Excel file since this is not an Excel feature. To actually
            do something, you need to call <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks"/> after calling this method.
            </summary><example>
            If you call:
            <code>
              XlsFile.KeepRowsTogether(1, 10, 1, true);
              XlsFile.KeepRowsTogether(3, 4, 2, true);
            </code>
            This will define two groups. FlexCel will try to keep rows 1 to 10 in one page. But if this is impossible, it will try to keep at least rows 3 and 4 together.<br/>
            Values of the "level" parameter mean the strongness of the link. Rows with higher level values have a stronger link, and if it is impossible to keep all rows together, FlexCel will try to keep the higher level rows.<br/>
            <br/>In this case, Rows 3 and 4 have a higher level, so if rows 1 to 10 cannot be kept together in one page, FlexCel will try to keep at least rows 3 and 4.
            Normally you will want to use higher level values completely inside groups with lower levels.
            If we called:
            <code>
              XlsFile.KeepRowsTogether(1, 10, 1, true);
              XlsFile.KeepRowsTogether(3, 4, 1, true);
            </code>
            The second call would do nothing, since the level is the same, and rows 1 to 10 are already linked.
            </example><param name="row1">First row of the group you want to keep together.</param><param name="row2">Last row of the group you want to keep together.</param><param name="level">Set this parameter to 0 to remove the condition to keep rows together. Any bigger than zero value will mean that
            the rows must be kept together. You can use more than one level to tell FlexCel to try to keep different groups together. 
            If all rows cannot be kept together in one page, FlexCel will try to keep as much rows with higher levels as possible. See the example for more information.</param><param name="replaceLowerLevels">If true, all existing level values in the row range will be replaced. If false, the new level values will be written 
            only if they are bigger than the existing ones. You can use the false setting to set many values in the any order. <br/>
            For example, if you first call KeepRowsTogether(2, 3, 5, false) and then KeepRowsTogether(1, 10, 1, false), rows 2 and 3 will keep the
            level in 5. If you did so with this parameter true, the second call would replace the levels of rows 2 and 3 to level 1, making all row levels between 1 and 10 equal to 1.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Tells FlexCel that it must try to keep together the columns between col1 and col2 (inclusive) when printing.  
            This method does nothing to the resulting Excel file since this is not an Excel feature. To actually
            do something, you need to call <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks"/> after calling this method.
            </summary><example>
            If you call:
            <code>
              XlsFile.KeepColsTogether(1, 10, 1, true);
              XlsFile.KeepColsTogether(3, 4, 2, true);
            </code>
            This will define two groups. FlexCel will try to keep columns 1 to 10 in one page. But if this is impossible, it will try to keep at least columns 3 and 4 together.<br/>
            Values of the "level" parameter mean the strongness of the link. Columns with higher level values have a stronger link, and if it is impossible to keep all columns together, FlexCel will try to keep the higher level columns.<br/>
            <br/>In this case, Columns 3 and 4 have a higher level, so if columns 1 to 10 cannot be kept together in one page, FlexCel will try to  keep at least columns 3 and 4.
            Normally you will want to use higher level values completely inside groups with lower levels.
            If we called:
            <code>
              XlsFile.KeepColsTogether(1, 10, 1, true);
              XlsFile.KeepColsTogether(3, 4, 1, true);
            </code>
            The second call would do nothing, since the level is the same, and columns 1 to 10 are already linked.
            </example><param name="col1">First column of the group you want to keep together.</param><param name="col2">Last column of the group you want to keep together.</param><param name="level">Set this parameter to 0 to remove the condition to keep columns together. Any bigger than zero value will mean that
            the rows must be kept together. You can use more than one level to tell FlexCel to try to keep different groups together,
            If all columns cannot be kept together in one page, FlexCel will try to keep as much columns with higher levels as possible. See the example for more information.</param><param name="replaceLowerLevels">If true, all existing level values in the column range will be replaced. If false, the new level values will be written 
            only if they are bigger than the existing ones. You can use the false setting to set many values in the any order. <br/>
            For example, if you first call KeepColsTogether(2, 3, 5,false) and then KeepColsTogether(1, 10, 1, false), columns 2 and 3 will keep the
            level in 5. If you did so with this parameter true, the second call would replace the levels of columns 2 and 3 to level 1, making all column levels between 1 and 10 equal to 1.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetKeepRowsTogether(System.Int32)">
            <summary>
            Returns the value of level for a row as set in <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. Note that the last value of a "keep together" range is 0.
            For example, if you set KeepRowsTogether(1, 3, 8, true); GetKeepRowsTogether will return 8 for rows 1 and 2, and 0 for row 3.
            </summary><param name="row">Row index. (1 based)</param><returns>The Keep together level of the row.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetKeepColsTogether(System.Int32)">
            <summary>
            Returns the value of level for a column as set in <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. Note that the last value of a "keep together" range is 0.
            For example, if you set KeepColsTogether(1, 3, 8, true); GetKeepColsTogether will return 8 for columns 1 and 2, and 0 for column 3.
            </summary><param name="col">Column index. (1 based)</param><returns>The Keep together level of the column.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasKeepRowsTogether">
            <summary>
            Returns true if there is any row marked as keeptogether in the sheet.
            This method traverses every row to find out, so it acn be somehow slow and you should not call it too often.
            </summary><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasKeepColsTogether">
            <summary>
            Returns true if there is any column marked as keeptogether in the sheet.
            This method traverses every column to find out, so it acn be somehow slow and you should not call it too often.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutoPageBreaks(System.Int32,System.Int32)">
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks"/>) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary><param name="PercentOfUsedSheet">Percentage of the sheet that must be used in any page when fitting the rows and columns.
            A value of zero means that no part of the sheet must be used, so FlexCel might add a page break after a single row in a page, leaving it almost completely blank.<br/>
            A value of 50% means that half of the page must be used. This means that FlexCel will add a page break only if there is 50% of the current page already used.<br/>
            A value of 100% will do nothing, since the sheet must be completely used, and so FlexCel can never add a page break.<br/></param><param name="PageScale">This parameter must be between 50 and 100, and means how much smaller page will be considered in order to calculate the page breaks.
            <br/> A value of 100 means that the size used in the calculation will be the real size of the page, and while this will always work fine when exporting to pdf 
            or exporting to images, when printing from Excel might result in a page break that is placed a little after where it should go and an empty page for ceirtain printers.
            (Page size in Excel is different for different printers) Normally a value around 95 is the recommended value for this parameter.<br/>
            If you need to do a finer grain adjustment, you can use <see cref="M:FlexCel.Core.ExcelFile.AutoPageBreaks(System.Int32,System.Drawing.RectangleF)"/>.
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutoPageBreaks(System.Int32,System.Drawing.RectangleF)">
            <summary>
            This method will create manual page breaks in the sheet to try to keep together the rows and columns marked with 
            <see cref="M:FlexCel.Core.ExcelFile.KeepRowsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/> and <see cref="M:FlexCel.Core.ExcelFile.KeepColsTogether(System.Int32,System.Int32,System.Int32,System.Boolean)"/>.
            It might be desirable to clear all manual page breaks (with <see cref="M:FlexCel.Core.ExcelFile.ClearPageBreaks"/>) before calling this method, so it has more freedom
            to place the new ones. If you call this method twice without removing the old page breaks, it will add the page breaks to the existing ones.
            </summary><param name="PercentOfUsedSheet">Percentage of the sheet that must be used in any page when fitting the rows and columns.
            A value of zero means that no part of the sheet must be used, so FlexCel might add a page break after a single row in a page, leaving it almost completely blank.<br/>
            A value of 50% means that half of the page must be used. This means that FlexCel will add a page break only if there is 50% of the current page already used.<br/>
            A value of 100% will do nothing, since the sheet must be completely used, and so FlexCel can never add a page break.<br/></param><param name="PageBounds">You can customize a custom page size here. If width or height of this parameter is 0, the paper size specified in the file
            will be used. There is normaly no need to set this parameter, unless you want to fine tune the results.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellValue(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads a Cell Value and Format.
            </summary><param name="row">Row, 1 based.</param><param name="col">Column, 1 based.</param><param name="XF">XF format.</param><returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula"/>, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/> or
             a <see cref="T:FlexCel.Core.TRichString"/>. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellValue(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads a Cell Value and Format from a sheet that is not the active sheet.
            </summary><param name="sheet">Sheet where is the cell you want to get the value.</param><param name="row">Row, 1 based.</param><param name="col">Column, 1 based.</param><param name="XF">XF format.</param><returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula"/>, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/> or
             a <see cref="T:FlexCel.Core.TRichString"/>. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellValueIndexed(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads a Cell Value and Format, using a column index for faster access. Normal GetCellValue(row, col)
            has to search for the column on a sorted list. If you are looping from 1 to <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)"/>
            this method is faster.
            </summary><param name="row">Row, 1 based.</param><param name="colIndex">Column index, 1 based.</param><param name="XF">XF format.</param><returns>Object with the value. It can be null, a double, a string, a boolean, a
             <see cref="T:FlexCel.Core.TFormula"/>, a <see cref="T:FlexCel.Core.TFlxFormulaErrorValue"/> or
             a <see cref="T:FlexCel.Core.TRichString"/>. Dates are returned as doubles. See the Reading Files demo to know how to use each type of the objects returned.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellValue(System.Int32,System.Int32,System.Object,System.Int32)">
            <summary>
            Sets the value and format on a cell.
            </summary><remarks>This method will enter the datatype of the object you pass to it. For example, if you set value="1"
            the string "1" will be entered on the cell. To convert a string to the best representation (on this case a number), use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32)"/>
            To enter a HTML formatted string, use <see cref="M:FlexCel.Core.ExcelFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)"/> 
            </remarks><param name="row">Row, 1 based.</param><param name="col">Column, 1 based.</param><param name="value">Value to set.</param><param name="XF">Format to Set. You normally get this number with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CalcInternalFormatId(System.String)">
            <summary>
            Will try to parse a date time string and find out if:
              1)it has a date
              2)it has a time
              This method does not intend to be foolproof, jut to give a good aproximation.
              There are too many issues with dates and internationalization.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ConvertString(FlexCel.Core.TRichString,System.Int32@)">
            <summary>
            Converts a string into the best datatype (a boolean, a number, etc)
            </summary><remarks>See <see cref="M:FlexCel.Core.ExcelFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32)"/> for more information.</remarks><param name="value">RichString to convert.</param><param name="XF">XF of the cell. It might be modified, for example, if you are entering a date.</param><returns>value converted to the best datatype.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFromString(System.Int32,System.Int32,FlexCel.Core.TRichString,System.Int32)">
            <summary>
            Converts a string to the best datatype, and the enters it into a cell.
            </summary><remarks>
            When using CellValue to set a cell value, you have to know the datatype you want to enter. 
            That is, if you have a string s="1/1/2002" and call SetCellValue(1,1,s); the cell A1 will 
            end up with a string "1/1/2002" and not with a date. The same if you have a string holding a number.
            <para></para>
            <para>SetCellFromString tries to solve this problem. When you call SetCellFromString(1,1,s) it will see:</para>
            <list type="number">
             <item> If s contains a valid number: If it does, it will enter the number into the cell, and not the string s</item>
             <item> If s contains a boolean:      If s equals the words "TRUE" or "FALSE" (or whatever you define on the constants TxtTrue and TxtFalse) it will enter the boolean into the cell</item>
             <item> If s contains a date:         If s is a valid date (according to your windows settings) it will enter a number into the cell and format the cell as a date. (see UsingFlexCelAPI.pdf)</item>
             <item> In any other case, it will enter the string s into the cell.</item>
             </list>
            </remarks><param name="row">Cell Row (1 based)</param><param name="col">Cell Column (1 based)</param><param name="value">Value to enter into the cell.</param><param name="XF">New XF of the cell. It can be modified, i.e. if you enter a date, the XF will be converted to a Date XF.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetStringFromCell(System.Int32,System.Int32,System.Int32@,System.Drawing.Color@)">
            <summary>
            This method will return a rich string that is formatted similar to the way Excel shows it.
            For example, if you have "1.0" on a cell, and the cell is formatted as exponential, this method will return "1.0e+1"
            It might also change the color depending on the value and format. (for example, red for negative numbers) 
            </summary><param name="row">Cell Row (1 based). </param><param name="col">Cell Column (1 based)</param><param name="XF">The resulting XF for the cell.</param><param name="aColor">Resulting color of the string. If for example you define red for negative numbers, and the result is red, this will
            be returned on aColor. If there is not color info on the format, it will remain unchanged.</param><returns>A rich string with the cell value.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFromHtml(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Enters an HTML formatted string into a cell, and tries to match the Excel formats with the Html formatting tags.
            Note that the rich text inside Excel is more limited than xls (you are limited to only changing font attributes),
            so many tags from the HTML tags might be ignored. Whenever a tag is not understood or cannot be mapped into Excel,
            it will just be omitted. For a list of supported tags, see the <b>Remarks</b> section.
            </summary><remarks>
            Any tag (between brackets) will be stripped from the entered text. If you want to
            enter a &lt; sign, you need to enter "&amp;lt;". For a list of all "&amp;" possible symbols
            consult any HTML reference. &amp;[HexadecimalUnicodeCharacer] are supported too. <br/>
            All tags are case insensitive. <br/>
            Spaces will be eliminated from the string as in normal HTML. To enter a "hard" space you can enter "&amp;nbsp;"
            (non breaking space). Also, if text is inside "pre" tags, spaces will be preserved.
            <br/><br/>
            
            The supported tags are: 
            <list type="bullet">
            <item><b>b</b> or <b>strong</b> - Bold.</item>
            <item><b>i</b> or <b>em</b>- Italics.</item>
            <item><b>u</b> - Underline.</item>
            <item><b>s</b> or <b>strike</b>- Strikeout.</item>
            <item><b>sub</b> - Subscript.</item>
            <item><b>sup</b> - Superscript.</item>
            <item><b>tt</b> - Use monospace font.</item>
            <item><b>pre</b> - Preserve spaces and returns. On normal mode, if you have 2 spaces on a string, only one will be kept.</item>
            <item><b>font</b> - Change the used font. This tag behaves as normal HTML, and you can specify 
            <i>color</i>, <i>face</i>, <i>point-size</i> or <i>size</i> as attributes. Size might be between 1 and 7, 
            and the size in points are 8, 9, 12, 14, 18, 24, 34 for each size. You can also specify relative sizes (for example -1)</item>
            <item><b>h1</b>..<b>h6</b> - Header fonts.</item>
            <item><b>small</b> - Use a smaller font. This is equivalent to &lt;font size = '-1'&gt;</item>
            <item><b>big</b> - Use a bigger font. This is equivalent to &lt;font size = '+1'&gt;</item>
            </list>
            </remarks><param name="row">Cell Row (1 based)</param><param name="col">Cell Column (1 based)</param><param name="htmlText">Text with an html formatted string.</param><param name="XF">Format for the cell. It can be -1 to keep the existing format.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHtmlFromCell(System.Int32,System.Int32,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.Encoding)">
            <summary>
            Returns the contents of formatted cell as HTML. Conditional formats are not applied, you need to call <see cref="M:FlexCel.Core.ExcelFile.ConditionallyModifyFormat(FlexCel.Core.TFlxFormat,System.Int32,System.Int32)"/> to the cell style for that. 
            If <see cref="P:FlexCel.Core.ExcelFile.ShowFormulaText"/> is true, it will return the formula text instead of the value.
             For a list of html tags that might be returned, see the <b>Remarks</b> section.
            </summary><remarks>
            Text will be returned as standard HTML, on the version specified. This means that 
            for example a &lt; sign will be returned as "&amp;lt;". For a list of all "&amp;" possible symbols
            consult any HTML reference. &amp;[HexadecimalUnicodeCharacer] might be returned too. <br/>
            <br/>
            Multiple spaces will be returned as "&amp;nbsp;"
            (non breaking space) and line breaks will be returned as &lt;br&gt; tags. 
            <br/><br/>
            
            The tags that might be returned by this method are: 
            If htmlStyle is Simple:
            <list type="bullet">
            <item><b>b</b> - Bold.</item>
            <item><b>i</b> - Italics.</item>
            <item><b>u</b> - Underline.</item>
            <item><b>s</b> - Strikeout.</item>
            <item><b>sub</b> - Subscript.</item>
            <item><b>sup</b> - Superscript.</item>
            <item><b>font</b> - Change the used font. This tag behaves as normal HTML, and you can specify 
            <i>color</i>, <i>face</i>, <i>point-size</i> or <i>size</i> as attributes. Size might be between 1 and 7, 
            and the size in points are 8, 9, 12, 14, 18, 24, 34 for each size. You can also specify relative sizes (for example -1)</item>
            </list>
            <br/>
            If htmlStlye is Css:
            The equivalent CSS style commands to the ones listed under htmlStyle = Simple.
            </remarks><param name="row">Cell Row (1 based)</param><param name="col">Cell Column (1 based)</param><param name="htmlVersion">Version of the html returned. In XHTML, single tags have a "/" at the end, while in 4.0 they don't.</param><param name="htmlStyle">Specifies if to use simple tags or for the returned HTML.</param><param name="encoding">Encoding for the returned string. Use UTF-8 if in doubt.</param><returns>An Html formatted string with the cell contents.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CopyCell(FlexCel.Core.ExcelFile,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TRangeCopyMode)">
            <summary>
            Copies <b>one</b> cell from one workbook to another. If the cell has a formula, it will be offset so it matches the new destination.
            <b>Note:</b> You will normally not need this method. To copy a range of cells from a workbook to another use 
            <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32)"/> instead.
            To copy a full sheet from one file to another, use <see cref="M:FlexCel.Core.ExcelFile.InsertAndCopySheets(System.Int32,System.Int32,System.Int32,FlexCel.Core.ExcelFile)"/>.
            </summary><param name="sourceWorkbook">File from where we want to copy the cell.</param><param name="sourceSheet">Sheet in sourceWorkbook where the data is.</param><param name="destSheet">Sheet in this file where we want to copy the data.</param><param name="sourceRow">Row on the source file of the cell (1 based)</param><param name="sourceCol">Column on the source file of the cell (1 based)</param><param name="destRow">Row on the destination file of the cell (1 based)</param><param name="destCol">Column on the destination file of the cell (1 based)</param><param name="copyMode">How the cell will be copied.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetFormat(System.Int32)">
            <summary>
            Returns the format definition for a given format index.
            </summary><param name="XF">Format index 0-Based</param><returns>Format definition</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddFormat(FlexCel.Core.TFlxFormat)">
            <summary>
            Adds a new format to the Excel format list. If it already exists, it doesn't add a new one, so you can use this method for searching too.
            </summary><param name="format">Format to add to the list.</param><returns>Position on the list for the format.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetFormat(System.Int32,FlexCel.Core.TFlxFormat)">
            <summary>
            Sets the font definition for a given format index. Normally it is of not use, (you should use AddFont or AddFormat instead) but could be used
            to change the default format. (using SetFormat(0, fmt); )
            </summary><param name="formatIndex">Format index. 0-based</param><param name="aFormat">Format definition</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetFont(System.Int32)">
            <summary>
            Returns the font definition for a given font index.
            </summary><param name="fontIndex">Font index. 0-based</param><returns>Font definition</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetFont(System.Int32,FlexCel.Core.TFlxFont)">
            <summary>
            Sets the font definition for a given font index. Normally it is of not use, (you should use AddFont or AddFormat instead) but could be used
            to change the default font format. (using SetFont(0, font); )
            </summary><param name="fontIndex">Font index. 0-based</param><param name="aFont">Font definition</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddFont(FlexCel.Core.TFlxFont)">
            <summary>
            Adds a new font to the excel font list.  If it already exists, it doesn't add a new one, so you can use this method for searching too.
            </summary><param name="font">Font to add to the list.</param><returns>The position on the list for the added font.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Cell format (XF) on a given cell.
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/>
            </summary><param name="row">Row index of the cell (1 based)</param><param name="col">Column index of the cell (1 based)</param><param name="XF">XF Format index. See Using FlexCel API.pdf.&gt;</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Cell format (XF) on a range of cells.
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.GetCellFormat(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/>
            </summary><param name="row1">Row index of the top cell on the range (1 based)</param><param name="col1">Column index of the left cell on the range (1 based)</param><param name="row2">Row index of the bottom cell on the range (1 based)</param><param name="col2">Column index of the right cell on the range (1 based)</param><param name="XF">XF Format index. See Using FlexCel API.pdf.&gt;</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCellFormat(System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <summary>
            Changes part of the Cell format on a range of cells. WARNING! This method is slower than the other SetCellFormat versions, use it only
            if you do not care about maximum performance or if you just can't use the other SetCellFormat versions.
            This particular version of SetCellFormat has to read the format on each cell, modify it and write it back.
            While still very fast, it is not as fast as just setting the format on a cell.
            </summary><remarks>
            You can use this method for example to add a border on the top of a row of cells, keeping the existing font and pattern styles on the range.
            </remarks><param name="row1">Row index of the top cell on the range (1 based)</param><param name="col1">Column index of the left cell on the range (1 based)</param><param name="row2">Row index of the bottom cell on the range (1 based)</param><param name="col2">Column index of the right cell on the range (1 based)</param><param name="newFormat">Format to apply to the cells.&gt;</param><param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param><param name="exteriorBorders">When true, the format for the border will be applied only to the outer cells in the range. This can
            be useful for example to draw a box around a range of cells, but not drawing borders inside the range. 
            Other parameters, like the cell background, will still be applied to the full range.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellFormat(System.Int32,System.Int32)">
            <summary>
            Cell Format for a given cell
            This method gets the Format number (XF) of a cell. 
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/>
            </summary><remarks>This method DOES NOT return format for an empty cell, even if it
            has a column or a row format. For the visible format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/></remarks><example>
            To copy the format on cell A1 to B2 you should write:
            <code>
            XlsFile.SetCellFormat(2,2,XlsFile.GetCellFormat(1,1));
            </code></example><param name="row">Row Index (1 based)</param><param name="col">Column Index (1 based)</param><returns>XF for the cell.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCellFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Cell Format for a given cell
            This method gets the Format number (XF) of a cell. 
            You can create new formats using the  <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/> function.
            <seealso cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetFormat(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/>
            </summary><remarks>This method DOES NOT return format for an empty cell, even if it
            has a column or a row format. For the visible format of the cell, see <see cref="M:FlexCel.Core.ExcelFile.GetCellVisibleFormat(System.Int32,System.Int32)"/></remarks><example>
            To copy the format on cell A1 to B2 you should write:
            <code>
            XlsFile.SetCellFormat(2,2,XlsFile.GetCellFormat(1,1));
            </code></example><param name="row">Row Index (1 based)</param><param name="col">Column Index (1 based)</param><returns>XF for the cell.</returns><param name="sheet">Sheet index (1 based).</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ConditionallyModifyFormat(FlexCel.Core.TFlxFormat,System.Int32,System.Int32)">
            <summary>
            Modifies the format of the specified cell if it has a conditional format active.
            Returns a modified format with the applied conditional format if there was any change, null otherwise.
            </summary><param name="format">Original format of the cell.</param><param name="row">Row of the cell (1 based)</param><param name="col">Column of the cell (1 based)</param><returns>If the format is modified by a conditional format, it returns the new format.
            If there are no changes returns null, to avoid creating new instances of TFlxFormat.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetStyleName(System.Int32)">
            <summary>
            Gets the name of the style at position index. (1 based).
            </summary><param name="index">Position in the list of styles (1 based).</param><returns>The name of the style.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetStyle(System.Int32)">
            <summary>
            Returns the named style at position index for the workbook
            </summary><param name="index">Position in the list of styles (1 based).</param><returns>The named style definition.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetStyle(System.String)">
            <summary>
            Returns a named style for the workbook. You can also use this method to check if a style exists or not.
            </summary><param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of buit.in names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)"/></param><returns>The style definition, or null if the style doesn't exists.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RenameStyle(System.String,System.String)">
            <summary>
            Renames an existing style. Note that this might be an user-defined style, you can't rename built-in styles.
            </summary><param name="oldName">Name of the existing style in the workbook.</param><param name="newName">New name for the style. It must not exist.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetStyle(System.String,FlexCel.Core.TFlxFormat)">
            <summary>
            Modifies an existing style if name already exists, or creates a new style if it doesn't. 
            </summary><param name="name">Name for the style. It might be an user defined name, or a built-in name. You can get
            a list of buit.in names with <see cref="M:FlexCel.Core.ExcelFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)"/></param><param name="fmt">The new style definition.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteStyle(System.String)">
            <summary>
            Returns a named style for the workbook.
            </summary><param name="name">Name for the style. It must be an user defined name.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetBuiltInStyleName(FlexCel.Core.TBuiltInStyle,System.Int32)">
            <summary>
            Returns the name for a built-in style.
            </summary><param name="style">Style you want find out the name.</param><param name="level">Used only if style is <see cref="F:FlexCel.Core.TBuiltInStyle.RowLevel"/> or <see cref="F:FlexCel.Core.TBuiltInStyle.ColLevel"/>. It specifies the level of the outline,
            and must be a number between 1 and 7. Keep it 0 for all other styles.</param><returns>The name for the Built in style.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CellMergedBounds(System.Int32,System.Int32)">
            <summary>
            Merged Range where the cell is.
            <seealso cref="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)"/><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)"/>
            </summary><example>
            If you have a merged cell in range A1: B2, calling CellMergedBounds on any of the cells: A1, B1, A2, B2 will return A1:B2.
            </example><param name="row">Row Index (1 based)</param><param name="col">Column Index (1 based)</param><returns>The range where the cell is</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges a number of cells into one.
            <seealso cref="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)"/><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)"/>
            </summary><param name="firstRow">First row of the merged cell.</param><param name="firstCol">First column of the merged cell.</param><param name="lastRow">Last row of the merged cell.</param><param name="lastCol">Last column of the merged cell.</param><remarks>This method might return a bigger range than the one you specify.
            For example, if you have a merged cell (A1:C1), calling MergeCells(1,2,2,2) will 
            merge the cell with the existing one, returning ONE merged cell (A1:C2), and not (B1:B2)
            <p></p>
            Other thing to consider, is that Excel honors individual linestyles inside a merged cell.
            That is, you can have only the first 2 columns of the merged cell with a line and the others without.
            Normally, after merging the cells, you will want to call <see cref="M:FlexCel.Core.ExcelFile.SetCellFormat(System.Int32,System.Int32,System.Int32)"/> on the range
            to make them all similar. FlexCel does not do it by default, to give the choice to you.</remarks>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.UnMergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Unmerges the range of cells. The coordinates have to be exact, if there is no
            merged cell with the exact coordinates, nothing will be done.
            <seealso cref="M:FlexCel.Core.ExcelFile.CellMergedBounds(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)"/><seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)"/>
            </summary><param name="firstRow">First row of the merged cell.</param><param name="firstCol">First column of the merged cell.</param><param name="lastRow">Last row of the merged cell.</param><param name="lastCol">Last column of the merged cell.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CellMergedList(System.Int32)">
            <summary>
            The Merged cell at position index on the mergedcell list.
            <seealso cref="P:FlexCel.Core.ExcelFile.CellMergedListCount"/>
            </summary><param name="index">index on the list (1 based)</param><returns>The merged cell at position index.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowCount(System.Int32)">
            <summary>
            Number of rows actually used on a given sheet. 
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsEmptyRow(System.Int32)">
            <summary>
            True if the specified row does not have any cells, nor any format on it.
            In short, this row has never been used.
            </summary><param name="row">Row to test (1-based)</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsNotFormattedCol(System.Int32)">
            <summary>
            True if the specified column does not have any format applied on it.
            </summary><param name="col">Column to test (1-based)</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowFormat(System.Int32)">
            <summary>
            Gets the XF format for the specified row, -1 if the row doesn't have format.
            </summary><param name="row">Row index (1-based)</param><returns>XF format.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowFormat(System.Int32,System.Int32)">
            <summary>
            Gets the XF format for the specified row, -1 if the row doesn't have format.
            </summary><param name="row">Row index (1-based)</param><returns>XF format.</returns><param name="sheet">Sheet index (1 based).</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowFormat(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the XF format for the entire row.
            </summary><param name="row">Row index (1-based)</param><param name="XF">XF format.</param><param name="resetRow">When true, all existing cells on the row will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowFormat(System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <summary>
            Sets the format characteristics specified in ApplyFormat for the entire row.
            </summary><param name="row">Row index (1-based)</param><param name="newFormat">Format to apply.</param><param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param><param name="resetRow">When true, all existing cells on the row will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>      
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColFormat(System.Int32)">
            <summary>
            Gets the XF format for the specified column, -1 if the column doesn't have format.
            </summary><param name="col">Column index (1-based)</param><returns>XF format.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColFormat(System.Int32,System.Int32)">
            <summary>
            Gets the XF format for the specified column, -1 if the column doesn't have format.
            </summary><param name="col">Column index (1-based)</param><returns>XF format.</returns><param name="sheet">Sheet index (1 based).</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColFormat(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the format for an entire column.
            </summary><param name="col">Column to set.</param><param name="XF">XF Format index.</param><param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>      
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColFormat(System.Int32,FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxApplyFormat,System.Boolean)">
            <summary>
            Sets the format characteristics specified in ApplyFormat for the entire column.
            </summary><param name="col">Column to set.</param><param name="newFormat">Format to apply.</param><param name="applyNewFormat">Indicates which properties of newFormat will be applied to the cells.</param><param name="resetColumn">When true, all existing cells on the column will be reset to this format.
            This is the standard Excel behavior and the recommended option. If you don't care about existing cells, 
            you can speed up this method by setting it to false.</param>      
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowOptions(System.Int32)">
            <summary>
            Returns all Row options at once (if the row is autosize, if it is hidden, etc). 
            </summary><param name="row">Row Index (1 based)</param><remarks>
            To get individual values, use the corresponding methods (i.e. <see cref="M:FlexCel.Core.ExcelFile.GetAutoRowHeight(System.Int32)"/>)
            Use this method only to copy the options from one row to another. 
            </remarks><example>
            To copy all the row options from row 1 to 2, use
            <code>SetRowOptions(2,GetRowOptions(1));</code>
            This is much faster than assigning each option alone.
            </example><returns>Row options</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowOptions(System.Int32,System.Int32)">
            <summary>
            Sets all Row options at once (if the row is autosize, if it is hidden, etc). 
            </summary><param name="row">Row Index (1 based)</param><param name="options">A flag with all row options</param><remarks>
            To set individual values, use the corresponding methods (i.e. <see cref="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)"/>)
            Use this method only to copy the options from one row to another. 
            </remarks><example>
            To copy all the row options from row 1 to 2, use
            <code>SetRowOptions(2,GetRowOptions(1));</code>
            This is much faster than assigning each option alone.
            </example>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColOptions(System.Int32)">
            <summary>
            Returns all Column options at once (if the column is hidden, etc). 
            </summary><param name="col">Column Index (1 based)</param><remarks>
            To get individual values, use the corresponding methods (i.e. <see cref="M:FlexCel.Core.ExcelFile.GetColHidden(System.Int32)"/>)
            Use this method only to copy the options from one column to another. 
            </remarks><example>
            To copy all the column options from column 1 to 2, use
            <code>SetColOptions(2,GetColOptions(1));</code>
            This is much faster than assigning each option alone.
            </example>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColOptions(System.Int32,System.Int32)">
            <summary>
            Sets all Column options at once (if the column is hidden, etc). 
            </summary><param name="col">Column Index (1 based)</param><param name="options">A flag with all column options.</param><remarks>
            To set individual values, use the corresponding methods (i.e. <see cref="M:FlexCel.Core.ExcelFile.SetColHidden(System.Int32,System.Boolean)"/>)
            Use this method only to copy the options from one column to another. 
            </remarks><example>
            To copy all the column options from column 1 to 2, use
            <code>SetColOptions(2,GetColOptions(1));</code>
            This is much faster than assigning each option alone.
            </example>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowHeight(System.Int32)">
            <summary>
            Returns the current Row height, in Excel internal units. (1/20th of a point)
            </summary><remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks><example><code>RowHeightInPixels=GetRowHeight(Row)/FlxConsts.RowMult;</code></example><param name="row">Row Index (1 based)</param><returns>Row height in internal excel units.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowHeight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the current Row height for a given sheet, in Excel internal units. (1/20th of a point)
            </summary><remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks><example><code>RowHeightInPixels=GetRowHeight(Row)/ExcelMetrics.RowMult(Workbook);</code></example><param name="sheet">Sheet where to look for the height.</param><param name="row">Row Index (1 based)</param><param name="HiddenIsZero">If true, the height returned for a hidden row will be 0 and not its real height.</param><returns>Row height in internal Excel units.(1/20th of a point)</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowHeight(System.Int32,System.Int32)">
            <summary>
            Sets the current Row height, in Excel internal units. (1/20th of a point)
            </summary><remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks><example><code>RowHeightInPixels=GetRowHeight(Row)/FlxConsts.RowMult;</code></example><param name="row">Row Index (1 based)</param><param name="height">Row height, in Excel internal units. (1/20th of a point). See <see cref="F:FlexCel.Core.FlxConsts.RowMult"/></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColWidth(System.Int32)">
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of "font 0" / 256)
            </summary><remarks>Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)"/> to convert the internal units to pixels.</remarks><example><code>ColWidthInPixels=GetColWidth(Col)/ExcelMetrics.ColMult(Workbook);</code></example><param name="col">Column Index (1 based)</param><returns>Column width in internal excel units.(Character width of "font 0" / 256)</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColWidth(System.Int32,System.Boolean)">
            <summary>
            Returns the current Column width, in Excel internal units. (Character width of font 0 / 256)
            </summary><remarks>Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)"/> to convert the internal units to pixels.</remarks><example><code>ColWidthInPixels=GetColWidth(Col)/ExcelMetrics.ColMult(Workbook);</code></example><param name="col">Column Index (1 based)</param><param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param><returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColWidth(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the current Column width for a given sheet, in Excel internal units. (Character width of font 0 / 256)
            </summary><remarks>Use <see cref="M:FlexCel.Core.ExcelMetrics.ColMult(FlexCel.Core.ExcelFile)"/> to convert the internal units to pixels.</remarks><example><code>ColWidthInPixels=GetColWidth(Col)/ExcelMetrics.ColMult(Workbook);</code></example><param name="sheet">Sheet where to look for the width.</param><param name="col">Column Index (1 based)</param><param name="HiddenIsZero">If true, the width returned for a hidden column will be 0 and not its real width.</param><returns>Column width in internal excel units.(Character width of font 0 / 256)</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColWidth(System.Int32,System.Int32)">
            <summary>
            Sets the current Column width, in Excel internal units. (Character width of font 0 / 256)
            </summary><remarks>Use <see cref="F:FlexCel.Core.FlxConsts.ColMult"/> to convert the internal units to pixels.</remarks><example><code>ColWidthInPixels=GetColWidth(Col)/FlxConsts.ColMult;</code></example><param name="col">Column Index (1 based)</param><param name="width">Column width, in Excel internal units. (Character width of font 0 / 256). See <see cref="F:FlexCel.Core.FlxConsts.ColMult"/></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowHidden(System.Int32)">
            <summary>
            Returns true if the row is hidden.
            </summary><param name="row">Row index (1 based).</param><returns>True if the row is hidden.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowHidden(System.Int32,System.Int32)">
            <summary>
            Returns true if the row is hidden. This method does not care about ActiveSheet.
            </summary><param name="sheet">Sheet index (1 based) for the row.</param><param name="row">Row index (1 based).</param><returns>True if the row is hidden.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowHidden(System.Int32,System.Boolean)">
            <summary>
            Hides or shows an specific row.
            </summary><param name="row">Row index (1 based)</param><param name="hide">If true, row will be hidden, if false it will be visible.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColHidden(System.Int32)">
            <summary>
            Returns true if the column is hidden.
            </summary><param name="col">Column index (1 based)</param><returns>True if the column is hidden.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColHidden(System.Int32,System.Boolean)">
            <summary>
            Hides or shows an specific column.
            </summary><param name="col">Column index (1 based).</param><param name="hide">If true, column will be hidden, if false it will be visible.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetAutoRowHeight(System.Int32)">
            <summary>
            Returns if the row is adjusting its size to the cell (the default) or if it has a fixed height.
            </summary><remarks>
            By default, Excel rows auto adapt their size to the font size. 
            If you set the row height manually, it will remain fixed to this size until you set 
            AutoFit (Menu-&gt;Format-&gt;Row-&gt;AutoFit) back. 
            </remarks><param name="row">Row index (1-based)</param><returns>True if AutoFit is on for the row, False if it has a fixed size</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetAutoRowHeight(System.Int32,System.Boolean)">
            <summary>
            Sets the current row to automatically autosize to the biggest cell or not.
            </summary><remarks>
            By default, Excel rows auto adapt their size to the font size. 
            If you set the row height manually, it will remain fixed to this size until you set 
            AutoFit (Menu-&gt;Format-&gt;Row-&gt;AutoFit) back. 
            </remarks><param name="row">Row index (1-based)</param><param name="autoRowHeight">If true, row will have autofit.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitRow(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits a range of rows so they adapt their height to show all the text inside. Note that due to GDI+ / GDI incompatibilities,
            the height calculated by FlexCel will not be exactly the same than the one calculated by Excel. So when you open this workbook
            in Excel, Excel will re calculate the row heights to what it believe is best. You can change this behaviour specifying keepHeightAutomatic = false.
            </summary><remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks><param name="row1">First row to autofit.</param><param name="row2">Last row to autofit.</param><param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param><param name="keepHeightAutomatic">If true, rows will be still autoheight when you open the file in Excel, so Excel
            will recalculate the values, probably changing the page breaks. If you set it to false, rows will be fixed in size,
            and when you open it on Excel they will remain so.</param><param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param><param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param><param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br/>A negative value on minHeight means the row size will be no smaller than the original height.</param><param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br/>maxHeight = 0 means no maxHeight.
            <br/>A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitCol(System.Int32,System.Int32,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits a range of columns so they adapt their width to show all the text inside. 
            </summary><remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks><param name="col1">First column to Autofit.</param><param name="col2">Last column to Autofit.</param><param name="ignoreStrings">When true, strings will not be considered for the autofit. Only numbers will.</param><param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param><param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the column will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param><param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br/>A negative value on minWidth means the column size will be no smaller than the original width.</param><param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br/>maxWidth = 0 means no maxWidth.
            <br/>A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitRowsOnWorkbook(System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits all rhe rows on all sheets on a workbook that are set to autofit so they adapt their height to show all the text inside. 
            Note that due to GDI+ / GDI incompatibilities,
            the heights calculated by FlexCel will not be exactly the same than the ones calculated by Excel. So when you open this workbook
            in Excel, Excel might re calculate the row heights to what it believe is best. You can change this behaviour specifying keepSizesAutomatic = false.
            <remarks>THIS METHOD DOES NOT WORK ON COMPACT FRAMEWORK.</remarks>
            </summary><param name="autofitNotAutofittingRows">When you are autofitting a range of rows, some rows might not be 
            set to Autofit in Excel. When this parameter is true, those rows will be autofitted anyway.</param><param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the printing/export to pdf from Excel will be the same as FlexCel.
            </param><param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param><param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param><param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br/>A negative value on minHeight means the row size will be no smaller than the original height.</param><param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br/>maxHeight = 0 means no maxHeight.
            <br/>A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a row as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the row 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single)"/>. To change the actual autofit status on the xls file, use <see cref="M:FlexCel.Core.ExcelFile.SetAutoRowHeight(System.Int32,System.Boolean)"/>
            <b>NOTE</b>: This method will not mark empty rows.
            </summary><remarks>
            You can use this method for "delay-marking" rows that you will want to autofit later, but that you cannot autofit yet since
            they are not filled with data. There is normally no need to use this method, but it is used on report generation to "mark" &lt;#row height(autofit)&gt;
            tags so those rows and columns can be autofitted once the data on the sheet has been filled.
            </remarks><param name="row">Row index (1 based)</param><param name="autofit">Set this to true to mark the row for autofitting, false for removing the row from autofitting list.</param><param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then rows will be adjusted to 110% percent of what their calculated height was. 
            Use this parameter to fine-tune autofiting, if for example rows are too small when opening the file in Excel.</param><param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param><param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br/>A negative value on minHeight means the row size will be no smaller than the original height.</param><param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br/>maxHeight = 0 means no maxHeight.
            <br/>A negative value on maxHeight means the row size will be no bigger than the original height.
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.MarkColForAutofit(System.Int32,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a column as candidate for future autofit. Note that this method will NOT change anything on the file. It just "marks" the column 
            so you can use it later with <see cref="M:FlexCel.Core.ExcelFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single)"/>.
            </summary><remarks>
            You can use this method for "delay-marking" columns that you will want to autofit later, but that you cannot autofit yet since
            they are not filled with data.There is normally no need to use this method, but it is used on report generation to "mark" &lt;#col width(autofit)&gt;
            tags so those rows and columns can be autofitted once the data on the sheet has been filled.
            </remarks><param name="col">Column index (1 based)</param><param name="autofit">Set this to true to mark the column for autofitting, false for removing the column from autofitting list.</param><param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns will be adjusted to 110% percent of what their calculated width was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param><param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the column
            and not a percentage. The final size of the column will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param><param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br/>A negative value on minWidth means the column size will be no smaller than the original width.</param><param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br/>maxWidth = 0 means no maxWidth.
            <br/>A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AutofitMarkedRowsAndCols(System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits all the rows and columns on a sheet that have been previously marked with the <see cref="M:FlexCel.Core.ExcelFile.MarkRowForAutofit(System.Int32,System.Boolean,System.Single)"/>  and <see cref="M:FlexCel.Core.ExcelFile.MarkColForAutofit(System.Int32,System.Boolean,System.Single)"/> methods.
            </summary><param name="keepSizesAutomatic">
            When true, no modifications will be done to the "autofit" status of the rows. When false, all rows will be marked as "no autofit", so when you open this file
            in Excel it will not be resized by Excel, and the sizes when printing/export to pdf from Excel will be the same as FlexCel, even when some cells might appear "cut" when printing on Excel.
            </param><param name="ignoreStringsOnColumnFit">When true, cells containing strings will not be autofitted.</param><param name="adjustment">You will normally want to set this parameter to 1, which means that autofit will be made with standard measurements.
            If you set it to for example 1.1, then columns and rows will be adjusted to 110% percent of what their calculated width and heigth was. 
            Use this parameter to fine-tune autofiting, if for example columns are too small when opening the file in Excel.</param><param name="adjustmentFixed">You will normally set this parameter to 0, which means standard autofit. If you set it to a value, the row will be
            made larger by that ammount from the calculated autofit. Different from the "adjustment" parameter, this parameter adds a fixed size to the row
            and not a percentage. The final size of the row will be:  FinalSize = CalulatedAutoFit * adjustment + adjusmentFixed</param><param name="minHeight">Minimum final height for the row to autofit. If the calculated value is less than minHeight, row size will be set to minHeight.
            <br/>A negative value on minHeight means the row size will be no smaller than the original height.</param><param name="maxHeight">Maximum final height for the row to autofit. If the calculated value is more than maxHeigth, row size will be set to maxHeight.
            <br/>maxHeight = 0 means no maxHeight.
            <br/>A negative value on maxHeight means the row size will be no bigger than the original height.
            </param><param name="minWidth">Minimum final width for the column to autofit. If the calculated value is less than minWidth, column size will be set to minWidth.
            <br/>A negative value on minWidth means the column size will be no smaller than the original width.</param><param name="maxWidth">Maximum final width for the column to autofit. If the calculated value is more than maxWidth, column size will be set to maxWidth.
            <br/>maxWidth = 0 means no maxWidth.
            <br/>A negative value on maxWidth means the column size will be no bigger than the original width.
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColCountInRow(System.Int32)">
            <summary>
             This method returns the existing columns on ONE ROW.
             You can use this together with <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)"/> to iterate faster on a block.
             </summary><param name="row">Row index. (1-based)</param><returns>The number of existing columns on one row.</returns><example>
             Instead of writing:
               <code>
               for (int r=1; r&lt;=File.RowCount;r++)
                 for (int c=1; clt;=File.ColCount;c++)
                   DoSomething(r,c);
               </code> 
              You can use:
               <code>
               for (int r=1; r&lt;=File.RowCount;r++)
                 for (int c=1; c&lt;=File.ColCountInRow(r);c++)
                   DoSomething(r,ColFromIndex(c));
               </code>   
            </example>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColCountInRow(System.Int32,System.Int32)">
            <summary>
             This method returns the existing columns on ONE ROW, for a given sheet.
             You can use this together with <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.ColToIndex(System.Int32,System.Int32)"/> to iterate faster on a block.
             </summary><param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param><param name="row">Row index. (1-based)</param><returns>The number of existing columns on one row.</returns><example>
             Instead of writing:
               <code>
               for (int r=1; r&lt;=File.RowCount;r++)
                 for (int c=1; clt;=File.ColCount;c++)
                   DoSomething(r,c);
               </code> 
              You can use:
               <code>
               for (int r=1; r&lt;=File.RowCount;r++)
                 for (int c=1; c&lt;=File.ColCountInRow(r);c++)
                   DoSomething(r,ColFromIndex(c));
               </code>   
            </example>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColFromIndex(System.Int32,System.Int32)">
            <summary>
            This is the column (1 based) for a given ColIndex. See <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)"/> for an example.
            </summary><param name="row">Row (1 based)</param><param name="colIndex">The index on the column list for the row. (1 based)</param><returns>The column (1 based) for the corresponding item.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColFromIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the column (1 based) for a given ColIndex and sheet. See <see cref="M:FlexCel.Core.ExcelFile.ColCountInRow(System.Int32)"/> for an example.
            </summary><param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param><param name="row">Row (1 based)</param><param name="colIndex">The index on the column list for the row. (1 based)</param><returns>The column (1 based) for the corresponding item.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColToIndex(System.Int32,System.Int32)">
            <summary>
            This is the inverse of <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)"/>. It will return the index on the 
            internal column array from the row for an existing column. If the column doesn't exist, it will return the 
            index of the "LAST existing column less than col", plus 1.
            </summary><example>
            To loop on all the existing cells on a row you can use:
            int LastCIndex = xls.ColToIndex(row, LastColumn + 1);
            if (xls.ColFromIndex(LastCIndex) &gt; LastColumn) LastCIndex --;  // LastColumn does not exist.
            for (int cIndex = xls.ColToIndex(FirstColumn); cIndex &lt;= LastCIndex; cIndex++)
            {
                xls.GetCellValueIndexed(row, cIndex, ref XF);
            }
            </example><param name="row">Row (1 based)</param><param name="col">Column (1 based)</param><returns>The index on the column list for the row. (1 based)</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ColToIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the inverse of <see cref="M:FlexCel.Core.ExcelFile.ColFromIndex(System.Int32,System.Int32)"/>. It will return the index on the 
            internal column array from the row for an existing column. If the column doesn't exist, it will return the 
            index of the "LAST existing column less than col", plus 1.
            </summary><example>
            To loop on all the existing cells on a row you can use:
            int LastCIndex = xls.ColToIndex(row, LastColumn + 1);
            if (xls.ColFromIndex(LastCIndex) &gt; LastColumn) LastCIndex --;  // LastColumn does not exist.
            for (int cIndex = xls.ColToIndex(FirstColumn); cIndex &lt;= LastCIndex; cIndex++)
            {
                xls.GetCellValueIndexed(row, cIndex, ref XF);
            }
            </example><param name="sheet">Sheet where we are working. It might be different from ActiveSheet.</param><param name="row">Row (1 based)</param><param name="col">Column (1 based)</param><returns>The index on the column list for the row. (1 based)</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColorPalette(System.Int32)">
            <summary>
            Returns a color from the color palette. This method will throw an exception if its "index" parameter
            is bigger than <see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount"/>, (for example, for an automatic color).
            To get the real color, use <see cref="M:FlexCel.Core.ExcelFile.GetColorPalette(System.Int32,System.Drawing.Color)"/>
            </summary><param name="index">Index of the entry to return. Must be 1&lt;=index&lt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount"/></param><returns>Color at position index.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColorPalette(System.Int32,System.Drawing.Color)">
            <summary>
            Changes a color on the Excel color palette.
            </summary><param name="index">Index of the entry to change. Must be 1&lt;=indexlt;=<see cref="P:FlexCel.Core.ExcelFile.ColorPaletteCount"/></param><param name="value">Color to set.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.NearestColorIndex(System.Drawing.Color)">
            <summary>
            Returns the most similar entry on the excel palette for a given color.
            </summary><param name="value">Color we want to use.</param><returns>Most similar color on the Excel palette.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.NearestColorIndex(System.Drawing.Color,System.Boolean[])">
            <summary>
            Returns the most similar entry on the excel palette for a given color.
            If UsedColors is not null, it will try to modify the Excel color palette
            to get a better match on the color, modifying among the not used colors. 
            Note that modifying the standard palette
            might result on a file that is not easy to edit on Excel later, since it does not have the standard Excel colors.
            </summary><param name="value">Color we want to use.</param><param name="UsedColors">If null, this behaves like the standard NearestColorIndex. 
            To get a list of used colors for the first call, use <see cref="P:FlexCel.Core.ExcelFile.GetUsedPaletteColors"/>.
            After the first call, keep using the same UsedColors structure and do not call GetUsedPaletteColors again, to avoid overwriting colors
            that are not yet inserted into the xls file with new ones. You can call GetUsedPaletteColors only after you added the format with <see cref="M:FlexCel.Core.ExcelFile.AddFormat(FlexCel.Core.TFlxFormat)"/>
            </param><returns>Most similar color on the Excel palette.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetNamedRange(System.Int32)">
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Range")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange"/>
            </summary><remarks><seealso cref="T:FlexCel.Core.InternalNameRange"/></remarks><param name="index">Index of the named range.</param><returns>Named Range</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetNamedRange(System.String,System.Int32)">
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Range")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange"/>
            </summary><remarks><seealso cref="T:FlexCel.Core.InternalNameRange"/></remarks><param name="Name">Name of the range we are looking for. Case insensitive.</param><param name="refersToSheetIndex">Sheet where the range refers to. A range with the same name might be defined on more than one sheet.
            To get the first range with the name, make refersToSheetIndex&lt;=0</param><returns>Named Range or null if the range does not exist.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetNamedRange(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the Named Range Definition. If the range is not user defined (like "Print_Range")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange"/>
            </summary><remarks><seealso cref="T:FlexCel.Core.InternalNameRange"/></remarks><param name="Name">Name of the range we are looking for. Case insensitive.</param><param name="refersToSheetIndex">Sheet where the range refers to. A range with the same name might be defined on more than one sheet.</param><param name="localSheetIndex">Sheet where the range is stored. A range might be stored local to a sheet, or global (Excel default).
            To get a global range, make localSheetIndex=0</param><returns>Named Range or null if the range does not exist.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.FindNamedRange(System.String,System.Int32)">
            <summary>
            Returns the index (0 based) on the list of named ranges for a given name and local sheet. If the range is not found, this method will return -1
            You could use <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.Int32)"/> to get the name definition, or directly call <see cref="M:FlexCel.Core.ExcelFile.GetNamedRange(System.String,System.Int32,System.Int32)"/>
            to get a named range knowing its name and sheet position.
            </summary><param name="Name">Name of the range we are looking for. Case insensitive.</param><param name="localSheetIndex">Sheet where the range is stored. A range might be stored local to a sheet, or global (Excel default).
            To get a global range, make localSheetIndex=0</param><returns>The index (0 based) in the list of named ranges, or -1 if the range is not found.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)">
            <summary>
            Modifies or adds a Named Range. If the named range exists, it will be modified, else it will be added.
            If the range is not user defined (like "Print_Range")
            it will have a one-char name, and the value is on the enum <see cref="T:FlexCel.Core.InternalNameRange"/>
            Look at the example for more information.
            </summary><example>
            This will create a range for repeating the first 2 columns and rows on each printed page (on sheet 1):
            <code>
               Xls.SetNamedRange(new TXlsNamedRange(TXlsNamedRange.GetInternalName(InternalNameRange.Print_Titles),1, 0, "=1:2,A:B"));
            </code>
            Note that in this example in particular (Print_Titles), the range has to have full rows/columns, as this is what Excel expects.
            You should also use "A:B" notation instead of the full "A1:B65535" name, so it will work in Excel 2007 too.
            </example><param name="rangeData">Data of the named range. You don't need to specify the RPN Array.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetNamedRange(System.Int32,FlexCel.Core.TXlsNamedRange)">
            <summary>
            Modifies a Named Range in the specified position. You could normally use <see cref="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)"/> to do this,
            but if you want to modify the name of the named range, then you need to use this overloaded version. <see cref="M:FlexCel.Core.ExcelFile.SetNamedRange(FlexCel.Core.TXlsNamedRange)"/>
            would add a new range instead of modifying the existing one if you change the name.
            Look at the example for more information on how to use it.
            </summary><example>
            This will modify the name of the named range at position 3:
            <code>
               TXlsNamedRange R = Xls.GetNamedRange(3);
               R.Name = "MyNewName";
               Xls.SetNamedRange(3, R);
            </code>
            </example><param name="index">Index of the named range we are trying to modify.</param><param name="rangeData">Data of the named range. You don't need to specify the RPN Array.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteNamedRange(System.Int32)">
            <summary>
            Deletes the name at the specified position. <b>Important:</b> If the name you are trying to delete is referenced by any formula/chart/whatever in your file,
            the name will <b>not actually be deleted</b> but hidden. <br/>
            You won't see the name in Excel or in the formula, but it will be there and you can see it from FlexCel.<br/>
            <i>Also, note that if you later delete the formulas that reference those ranges FlexCel will remove those hanging ranges when saving.</i>
            The only hidden ranges that will be present in the final file will be those that haev active formulas referencing them.
            <br/><br/><b>Important:</b>If the name wasn't deleted, <see cref="P:FlexCel.Core.ExcelFile.NamedRangeCount"/> will not change. This means that you can't have code like this:
            <code>
              while (xls.NamedRangeCount &gt; 0) //WRONG! This loop might never end.
              {
                xls.DeleteNamedRange(1);  //Might not be deleted, and NamedRangeCount will never be 0.
              }
            </code>
            <br/>
            The correct code in this case would be:
            <code>
              for (int i = xls.NamedRangeCount; i &gt; 0; i--) xls.DeleteNamedRange(i);
            </code>
            <br/>
            <code lang="vbnet">
              For i = xls.NamedRangeCount To 1 Step -1 xls.DeleteNamedRange(i);
            </code>
            <br/>
            <code lang="Delphi .NET" title="Delphi .NET">
              for i := xls.NamedRangeCount downto 1 do xls.DeleteNamedRange(i);
            </code>
            </summary><param name="index">Index of the name to delete (1 based).</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CopyToClipboardFormat(FlexCel.Core.TXlsCellRange,System.Text.StringBuilder,System.IO.Stream)">
            <summary>
            Copies a range on the active sheet to a clipboard stream, on native and text formats.
            </summary><remarks>See the copy and paste demo.</remarks><param name="range">Range with the cells to copy.</param><param name="textString">StringBuilder where the text will be copied. Leave it null to not copy to text.</param><param name="xlsStream">Stream where the xls native info will be copied.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.PasteFromTextClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.String)">
            <summary>
            Pastes the clipboard contents beginning on cells row, col.
            </summary><remarks>See the copy and paste demo.</remarks><param name="row">First row where to paste.</param><param name="col">First column where to paste.</param><param name="data">A string containing a tab separated text format.</param><param name="insertMode">How the pasted cells will be inserted on the file.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.PasteFromXlsClipboardFormat(System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,System.IO.Stream)">
            <summary>
            Pastes the clipboard contents beginning on cells row, col.
            </summary><remarks>See the copy and paste demo.</remarks><param name="row">First row where to paste.</param><param name="col">First column where to paste.</param><param name="data">A stream containing a Native xls format.</param><param name="insertMode">How the pasted cells will be inserted on the file.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.FillPageHeaderOrFooter(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Given a Page Header or footer string including macros (like [FileName] or [PageNo]), this method
            will return the strings that go into the left, right and middle sections.
            </summary><param name="fullText">Header or footer text.</param><param name="leftText">Text that should be left justified.</param><param name="centerText">Text that should be centered.</param><param name="rightText">Text that should be right justified.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetPageHeaderOrFooterAsHtml(System.String,System.String,System.Int32,System.Int32,FlexCel.Core.THtmlVersion,System.Text.Encoding,FlexCel.Core.IHtmlFontEvent)">
            <summary>
            Converts a section of a page header or footer into an HTML string. 
            </summary><param name="section">Text to convert. You will normally get this parameter calling <see cref="M:FlexCel.Core.ExcelFile.FillPageHeaderOrFooter(System.String,System.String@,System.String@,System.String@)"/></param><param name="imageTag">Tag to call an image for the section. It must be in the form: "&lt;img src=...&gt;" 
            and you can get the image with <see cref="M:FlexCel.Core.ExcelFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@)"/> . If null or empty, no img tag will be present in the resulting html, even if the section includes an image.</param><param name="pageNumber">Page we are printing. This parameter will be used if you have text like "Page 1 of 3" in the header.<br/>
            If you are exporting to html, this value should be 1, since there are no page breaks in an html doc.</param><param name="pageCount">Number of pages in the document. This parameter will be used if you have text like "Page 1 of 3" in the header.<br/>
            If you are exporting to html, this value should be 1, since there are no page breaks in an html doc</param><param name="htmlVersion">Version of html we are targeting. In Html 4 &lt;br&gt; is valid and &lt;br/&gt; is not. In XHtml the inverse is true.</param><param name="encoding">Code page used to encode the string. Normally this is UTF-8</param><param name="onFont">Method that can customize the fonts used in the resulting string. It can be null if you don't want to do any modification to the fonts.</param><returns>An html string with the section.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterPos,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <summary>
            This method returns the images associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            </summary><param name="section">Section of the header or footer for which we want to retrieve the image.</param><param name="imageType"><b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param><param name="outStream">Stream where the image data will be copied.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHeaderOrFooterImageProperties(FlexCel.Core.THeaderAndFooterPos)">
            <summary>
            Returns the image position and size.
            </summary><param name="section">Section of the header or footer for which we want to retrieve the image properties.</param><returns>Image properties. Null if there is no image on this section.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetHeaderOrFooterImage(FlexCel.Core.THeaderAndFooterPos,System.Byte[],FlexCel.Core.TXlsImgType,FlexCel.Core.THeaderOrFooterImageProperties)">
            <summary>
            This method sets the image associated to a given section of the header or footer.
            There can be only one image per section, and you refer it from the header string 
            (see <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> and <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>) by writing &amp;G.
            NOTE THAT YOU CAN ONLY USE HEADER AND FOOTER GRAPHICS ON EXCEL XP AND NEWER. Excel 2000 and 97
            will still open the file, but they will show no graphics.
            ALSO, NOTE that only setting the image will not display it. You need to write &amp;G in 
            the corresponding <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/> or <see cref="P:FlexCel.Core.ExcelFile.PageFooter"/>
            </summary><param name="section">Section of the header or footer for which we want to set the image.</param><param name="imageType">The image type for the data sent. (If it is a bmp, jpg or other)</param><param name="data">Image data.</param><param name="properties">Image size.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetPrintMargins">
            <summary>
            Gets the Margins on the active sheet.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetPrintMargins(FlexCel.Core.TXlsMargins)">
            <summary>
            Sets the Margins on the active sheet.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetPrinterDriverSettings">
            <summary>
            Returns printer driver settings. This method is not intended to be used alone,
            but together with <see cref="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)"/> to copy printer driver information from a file
            to another.
            </summary><remarks>
            Excel stores printer settings in <b>two places</b>
            <list type="number">
            <item>
            Standard printer settings: You can set/read this with <see cref="P:FlexCel.Core.ExcelFile.PrintPaperSize"/>, 
            <see cref="P:FlexCel.Core.ExcelFile.PrintScale"/>, <see cref="P:FlexCel.Core.ExcelFile.PrintOptions"/> (Landscape inside printOptions only),
            <see cref="P:FlexCel.Core.ExcelFile.PrintXResolution"/>, <see cref="P:FlexCel.Core.ExcelFile.PrintYResolution"/> and <see cref="P:FlexCel.Core.ExcelFile.PrintCopies"/>
            </item>
            <item>
            Printer driver settings: You can access this with GetPrinterDriverSettings and SetPrinterDriverSettings.
            </item>
            </list>
            <b>NOTE THAT THOSE PLACES STORE DUPLICATED INFORMATION.</b>  For example, Excel stores the PageSize on both <i>Standard printer settings</i>
            and <i>Printer driver settings.</i><p></p> Always that a value is stored on both places, <i>(1) Standard printer settings</i> takes preference.
            <p></p>If you set PaperSize=A4 on standard settings and PaperSize=A5 on driver settings, A4 will be used.
            </remarks><example>To copy the printer driver information from an empty template to the working file, use:
            <code>Xls1.SetPrinterDriverSettings(Xls.GetPrinterDriverSettings());</code>
            If you have defined a printer specific paper size, and you want to use it, you should call
            <code>Xls1.PrintPaperSize=Xls2.PrintPaperSize;</code>
            after copying the driver settings.
            </example><returns>The printer driver settings.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)">
            <summary>
            Sets printer driver information. This method is not intended to be used alone,
            but together with <see cref="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings"/> to copy printer driver information from a file
            to another.
            </summary><remarks>
            Excel stores printer settings in <b>two places</b>
            <list type="number">
            <item>
            Standard printer settings: You can set/read this with <see cref="P:FlexCel.Core.ExcelFile.PrintPaperSize"/>, 
            <see cref="P:FlexCel.Core.ExcelFile.PrintScale"/>, <see cref="P:FlexCel.Core.ExcelFile.PrintOptions"/> (Landscape inside printOptions only),
            <see cref="P:FlexCel.Core.ExcelFile.PrintXResolution"/>, <see cref="P:FlexCel.Core.ExcelFile.PrintYResolution"/> and <see cref="P:FlexCel.Core.ExcelFile.PrintCopies"/>
            </item>
            <item>
            Printer driver settings: You can access this with GetPrinterDriverSettings and SetPrinterDriverSettings.
            </item>
            </list>
            <b>NOTE THAT THOSE PLACES STORE DUPLICATED INFORMATION.</b>  For example, Excel stores the PageSize on both <i>Standard printer settings</i>
            and <i>Printer driver settings.</i><p></p> Always that a value is stored on both places, <i>(1) Standard printer settings</i> takes preference.
            <p></p>If you set PaperSize=A4 on standard settings and PaperSize=A5 on driver settings, A4 will be used.
            </remarks><example>To copy the printer driver information from an empty template to the working file, use:
            <code>Xls1.SetPrinterDriverSettings(Xls.GetPrinterDriverSettings());</code>
            If you have defined a printer specific paper size, and you want to use it, you should call
            <code>Xls1.PrintPaperSize=Xls2.PrintPaperSize;</code>
            after copying the driver settings.
            </example><param name="settings">Printer driver information obtained with <see cref="M:FlexCel.Core.ExcelFile.GetPrinterDriverSettings"/>. Use null to remove the printer settings.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetImage(System.Int32,System.Byte[],FlexCel.Core.TXlsImgType)">
            <summary>
            Sets the image data and / or image properties of an existing image.
            </summary><param name="imageIndex">Index of the image on the sheet array (1-based)</param><param name="data">Image data.</param><param name="imageType">Image type of the new data.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetImageProperties(System.Int32,FlexCel.Core.TImageProperties)">
            <summary>
            Sets the image properties of an existing image.
            </summary><param name="imageIndex">Index of the image on the sheet array (1-based)</param><param name="imageProperties">Image size, placement, etc. </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetImageName(System.Int32)">
            <summary>
            Returns the image name at position imageIndex.
            </summary><remarks>Normally image names are automatically assigned by Excel, and are on the form
            "picture1", "picture2", etc. But you can name an image on Excel by selecting and then typing its name
            on the name combo box. (the combobox at the upper left corner on Excel. After that, you can use its name
            to identify it here.</remarks><param name="imageIndex">Index of the image (1 based)</param><returns>Image name.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetImage(System.Int32,System.String,FlexCel.Core.TXlsImgType@,System.IO.Stream)">
            <summary>
            Returns an image bytes and type.
            </summary><param name="imageIndex">Index of the image. (1 based)</param><param name="objectPath">Object path to the image when it is a grouped image. For toplevel images you can use String.Empty. In other case, you need to use the value returned by <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param><param name="imageType"><b>Returns</b> the image type for the data returned. (If it is a bmp, jpg or other)</param><param name="outStream">Stream where the image data will be copied.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetImageProperties(System.Int32)">
            <summary>
            Returns image position and size.
            </summary><param name="imageIndex">Index of the image (1 based)</param><returns>Image position and size.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetImageReferences(System.Int32)">
            <summary>
            Only for internal testing. 
            </summary>
            <param name="imageIndex"></param>
            <returns>References to the blip on the workbook.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddImage(System.Byte[],FlexCel.Core.TXlsImgType,FlexCel.Core.TImageProperties)">
            <summary>
            Adds an image to the active sheet.
            </summary><param name="data">byte array with the image data.</param><param name="imageType">Type of image you are inserting (bmp, jpg, etc).</param><param name="imageProperties">Placement and other properties of the image.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteImage(System.Int32)">
            <summary>
            Deletes the image at position imageIndex.
            </summary><param name="imageIndex">Index of the image to delete. (1 based)</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearImage(System.Int32)">
            <summary>
            Clears the image at position imageIndex, leaving an empty white box.
            </summary><param name="imageIndex">Index of the image to clear. (1 based)</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ImageIndexToObjectIndex(System.Int32)">
            <summary>
            Returns the general index on the object list for an image. You can use then this index on SendToBack, for example.
            </summary><param name="imageIndex">Image index on the image array.</param><returns>Image index on the total objects array.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ObjectIndexToImageIndex(System.Int32)">
            <summary>
            Returns the index on the image collection of an object.
            </summary><param name="objectIndex">General index of the image on the Object collection.</param><returns>-1 if the object is not an image, else the index on the image collection.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectName(System.Int32)">
            <summary>
            Return the name of the object at objectIndex position.
            </summary><param name="objectIndex">Object index. (1-based)</param><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectAnchor(System.Int32)">
            <summary>
            Returns the placement of the object.
            </summary><param name="objectIndex">Index of the object (1-based)</param><returns>Coordinates of the object.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectAnchor(System.Int32,FlexCel.Core.TClientAnchor)">
            <summary>
            Sets the object placement.
            </summary><param name="objectIndex">Index of the object (1-based)</param><param name="objectAnchor">Coordinates of the object.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetObjectProperties(System.Int32,System.Boolean)">
            <summary>
            Returns information on an object and all of its children. 
            </summary><param name="objectIndex">Index of the object (1-based)</param><param name="GetShapeOptions">When true, shape options will be retrieved. As this can be a slow operation,
            only specify true when you really need those options.</param><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectText(System.Int32,System.String,FlexCel.Core.TRichString)">
            <summary>
            Sets the text for an autoshape. If the object does not accept text, this method will do nothing.
            </summary><param name="objectIndex">Index of the object (1-based)</param><param name="objectPath">Index to the child object you want to change the text.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param><param name="text">Text you want to use. Use null to delete text from an AutoShape.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Int64)">
            <summary>
            Sets a LONG property for an autoshape. Verify the property expects a LONG.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary><param name="objectIndex">Index of the object (1-based)</param><param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param><param name="shapeProperty">Property you want to change.</param><param name="value">Value you want to use.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.Int32,System.Boolean)">
            <summary>
            Sets a BOOLEAN property for an autoshape. Verify the property expects a BOOLEAN.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            Note that boolean properties are all stored in the same byte of the last property in the set.
            </summary><param name="objectIndex">Index of the object (1-based)</param><param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param><param name="shapeProperty">Property you want to change. MAKE SURE it is the LAST property in the set.</param><param name="positionInSet">Boolean properties are grouped so all properties on one set are in only
            one value. So, the last bool property on the set is the first bit, and so on. ONLY THE LAST PROPERTY
            ON THE SET IS PRESENT.</param><param name="value">Value you want to use.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,System.String,System.Boolean)">
            <summary>
            Sets a STRING property for an autoshape. Verify the property expects a STRING.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods. (like SetObjectText)
            </summary><param name="objectIndex">Index of the object (1-based)</param><param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param><param name="shapeProperty">Property you want to change.</param><param name="text">Text you want to use.</param><param name="ascii">If true, text will be encoded as ASCII, else it will be Unicode.
            Most properties are unicode, but there are some ASCII ones. Normally properties that start with "w" like
            <see cref="F:FlexCel.Core.TShapeOption.wzName"/> are Unicode, while the others (like <see cref="F:FlexCel.Core.TShapeOption.gtextRTF"/>) are not.
            This method is mostly for internal use, use it only if you know what you are doing.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetObjectProperty(System.Int32,System.String,FlexCel.Core.TShapeOption,FlexCel.Core.THyperLink)">
            <summary>
            Sets an Hyperlink property for an autoshape. Verify the property expects a Hyperlink, currently only <see cref="F:FlexCel.Core.TShapeOption.pihlShape"/> expects hyperlinks.
            This is an advanced method and should be used with care. For normal use, you should use one of the standard methods.
            </summary><param name="objectIndex">Index of the object (1-based)</param><param name="objectPath">Index to the child object you want to change the property.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param><param name="shapeProperty">Property you want to change. Fro hyperlinks it should be <see cref="F:FlexCel.Core.TShapeOption.pihlShape"/></param><param name="value">Value you want to use.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteObject(System.Int32)">
            <summary>
            Deletes the graphic object at objectIndex. Use it with care, there are some graphics objects you
            <b>don't</b> want to remove (like comment boxes when you don't delete the associated comment.)
            </summary><param name="objectIndex">Index of the object (1 based).</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RenderObject(System.Int32,System.Single,FlexCel.Core.TShapeProperties,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Drawing2D.InterpolationMode,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.PointF@,System.Drawing.RectangleF@,System.Drawing.Size@)">
            <summary>
            !WARNING! Not CF compliant. 
            This method renders any object (chart, image, autoshape, etc) into an image, and returns it.
            </summary><param name="objectIndex">Index of the object (1 based).</param><param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param><param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/></param><param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.SmoothingMode"/></param><param name="antiAliased">If true text will be antialiased when rendering for example a chart.</param><param name="returnImage">If false, this method will return null. Use it if you need to know the image dimensions, but do not care about the real image since it is faster and uses less resources.</param><param name="shapeProperties">Properties of the shape you are about to render. You can get them by calling <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/>.</param><param name="BackgroundColor">Color for the background of the image. For a transparent background, use Color.Empty.</param><param name="imageDimensions">Returns the image dimension of the rendered object in points. Note that this can be different from the image size reported by 
            <see cref="M:FlexCel.Core.ExcelFile.GetImageProperties(System.Int32)"/> because shadows or rotation of the image. You can get the image size in pixels just by looking at the image returned.</param><param name="origin">Top-left coordinates of the image in points. While this is normally the same as the image coordinates you get in the properties, 
            if there is a shadow to the right or to the top it might change. Use it to properly position the image where you want it.</param><param name="imageSizePixels">Size of the returned image in pixels. You only need to use this if returnImage is false, since the returned bitmap will be null. Otherwise, you can just read the bitmap size.</param><returns>Might return null if the image is not visible.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RenderCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Single,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Drawing2D.InterpolationMode,System.Boolean)">
            <summary>
            !WARNING! Not CF compliant. 
            This method renders a range of cells into an image, and returns it.<br/> 
            No objects will be drawn on the cells, you can use <see cref="M:FlexCel.Core.ExcelFile.RenderObject(System.Int32)"/> to draw those.<br/>
            <b>Important note:</b> This method will only render the text inside the cell, not the borders or anything else. If you want to 
            export an xls file to images, you probably want to use <see cref="T:FlexCel.Render.FlexCelImgExport"/>
            </summary><param name="row1">Index of the first row to render. (1 based).</param><param name="col1">Index of the first column to render (1 based).</param><param name="row2">Index of the last row to render. (1 based).</param><param name="col2">Index of the last column to render (1 based).</param><param name="drawBackground">If true, the image will have a solid background with the color of the cells. If false, the image will have
            a transparent background.</param><param name="dpi">Resolution of the image to create in dots per inch. If creating the image for the screen, use 96 dpi.</param><param name="aInterpolationMode">Interpolation mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/></param><param name="aSmoothingMode">Smoothing mode used to render the object. For more information, see <see cref="T:System.Drawing.Drawing2D.SmoothingMode"/></param><param name="antiAliased">If true text will be antialiased when rendering.</param><returns>An image with the rendered cells.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SendToBack(System.Int32)">
            <summary>
             Sends the graphical object to the bottom layer on the display (z-order) position. It will show below and will be covered by all other objects on the sheet. 
             </summary><remarks>This will change the order of the array, 
             so after calling SendToBack(i), position i will have a new object.
             <seealso cref="M:FlexCel.Core.ExcelFile.SendBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendForward(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.BringToFront(System.Int32)"/>
             </remarks><param name="objectIndex">Index of the object to move. (1 based)</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.BringToFront(System.Int32)">
            <summary>
            Sends the graphical object to the top layer on the display (z-order) position. It will show above and will cover all other objects on the sheet. 
            </summary><remarks>This will change the order of the array, 
            so after calling BringToFront(i), position i will have a new object.
            <seealso cref="M:FlexCel.Core.ExcelFile.SendToBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendForward(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendBack(System.Int32)"/>
            </remarks><param name="objectIndex">Index of the object to move. (1 based)</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SendForward(System.Int32)">
            <summary>
            Sends the graphical object one layer up on the display (z-order) position. It will show above and will cover the image at objectIndex+1. 
            </summary><remarks>This will change the order of the array, 
            so after calling SendForward(i), position i will have a new object.
            
            To move an object 2 steps down the correct code is:
            <code>
              SendForward(i);
              SendForward(i+1);
            </code>
            and not
            <code>
              SendForward(i);
              SendForward(i);
            </code>
            
            The second code would actually leave the array unmodified.
            <seealso cref="M:FlexCel.Core.ExcelFile.SendToBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.BringToFront(System.Int32)"/>
            </remarks><param name="objectIndex">Index of the object to move. (1 based)</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SendBack(System.Int32)">
            <summary>
            Sends the graphical object one layer down. It will show below and will be covered by image at objectIndex-1. 
            </summary><remarks>This will change the order of the array, 
            so after calling SendToBack(i), position i will have a new object.
            
            To move an object 2 steps down the correct code is:
            <code>
              SendBack(i);
              SendBack(i-1);
            </code>
            and not
            <code>
              SendBack(i);
              SendBack(i);
            </code>
            
            The second code would actually leave the array unmodified.
            <seealso cref="M:FlexCel.Core.ExcelFile.SendToBack(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SendForward(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.BringToFront(System.Int32)"/>
            </remarks><param name="objectIndex">Index of the object to move. (1 based)</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CommentRowCount">
            <summary>
            Maximum row index including comments.
            </summary><remarks>
            There are 2 groups of Comment related methods. One is used when you want to find out on a loop all existing comments on 
            a range, and the other is used to get/set comments at a specified position (row and col).
            
            To loop among all existing comments, you can use CommentRowCount together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>.
            Do not confuse them, even when they have similar names. CommentRowCount returns the maximum row with a comment,
            and <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> returns the number of comments in a given row.
            </remarks><example>
            You can loop on all the comments on a sheet with the following code:
            <code>
            for (int r=1; r&lt;= xls.CommentRowCount(); r++)
              for (int i=1; i&lt;= xls.CommentCountRow(r); i++)
              {
                 //Do something(GetCommentRow(r,i);
              }
            </code>
            </example><returns>The maximum row with a comment.</returns><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CommentCountRow(System.Int32)">
            <summary>
            Number of comments on a given row.
            </summary><param name="row">Row index (1 based)</param><remarks>
            There are 2 groups of Comment related methods. One is used when you want to find out on a loop all existing comments on 
            a range, and the other is used to get/set comments at a specified position (row and col).
            
            To loop among all existing comments, you can use <see cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/>  together with CommentCountRow.
            Do not confuse them, even when they have similar names. <see cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/> returns the maximum row with a comment,
            and CommentCountRow returns the number of comments in a given row.
            </remarks><example>
            You can loop on all the comments on a sheet with the following code:
            <code>
            for (int r=1; r&lt;= xls.CommentRowCount(); r++)
              for (int i=1; i&lt;= xls.CommentCountRow(r); i++)
              {
                 //Do something(GetCommentRow(r,i);
              }
            </code>
            </example><returns>The number of comments on a given row.</returns><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCommentRow(System.Int32,System.Int32)">
            <summary>
            Returns the comment at position commentIndex on the specified row.
            </summary><remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks><param name="row">Row index (1 based)</param><param name="commentIndex">Comment index (1 based). See <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/> </param><returns>Comment at the specified position.</returns><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCommentRowCol(System.Int32,System.Int32)">
            <summary>
            Returns the column for comment at position commentIndex
            </summary><remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks><param name="row">Row with the comment. (1 based)</param><param name="commentIndex">Index of the comment (1 based)</param><returns>The column index corresponding to the comment.</returns><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetComment(System.Int32,System.Int32)">
            <summary>
            Returns the comment at the specified row and column, or an empty string if there is no comment on that cell.
            </summary><remarks>Use this method when you are searching for a comment on a fixed position. To loop along all
            comments on a sheet, see <see cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/></remarks><param name="row">Row index (1 based)</param><param name="col">Column index (1 based)</param><returns>The comment on the specified cell, String.Empty if there is no comment on it.</returns><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCommentRow(System.Int32,System.Int32,FlexCel.Core.TRichString,FlexCel.Core.TImageProperties)">
            <summary>
            Changes the properties (text and position of the popup) for an existing comment at commentIndex.
            To delete a comment, set a String.Empty as the "value" param. To add a new comment, use <see cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/>. 
            </summary><remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks><param name="row">Row Index (1 based)</param><param name="commentIndex">Comment index (1 based)</param><param name="value">Text of the comment. Set it to String.Empty to remove the comment.</param><param name="commentProperties">Properties of the popup.</param><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString,System.String,FlexCel.Core.TImageProperties)">
            <summary>
            Sets or deletes a comment at the specified cell.
            </summary><remarks>To delete a comment, set its value to String.Empty.</remarks><param name="row">Row index (1 based)</param><param name="col">Column index (1 based)</param><param name="value">Text of the comment. Set it to String.Empty to delete the comment.</param><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><param name="author">Author of the comment.</param><param name="commentProperties">Properties of the popup.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCommentPropertiesRow(System.Int32,System.Int32)">
            <summary>
            Returns the comment properties for the popup at position commentIndex
            </summary><remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks><param name="row">Row index (1 based)</param><param name="commentIndex">Comment index (1 based)</param><returns>The comment properties.</returns><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetCommentProperties(System.Int32,System.Int32)">
            <summary>
            Gets the popup placement for an existing comment. If there is not a comment on cell (row,col), this will return null.
            </summary><remarks>Note that you can change the size but not the placement of the popup.
            This placement you set here is the one you see when you right click the cell and choose "Show comment". 
            The yellow popup box is placed automatically by excel.</remarks><param name="row">Row index (1 based).</param><param name="col">Column index (1 based)</param><returns>Placement of the comment popup.</returns><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)">
            <summary>
            Sets the comment properties at the specified index.
            </summary><remarks>This method is used together with <see cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/>. See the reference on it for an example.</remarks><param name="row">Row index (1 based)</param><param name="commentIndex">Comment index (1 based)</param><param name="commentProperties">Comment properties.</param><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentProperties(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetCommentProperties(System.Int32,System.Int32,FlexCel.Core.TImageProperties)">
            <summary>
            Sets the popup placement for an existing comment. If there is not a comment on cell (row,col), this will create an empty one.
            </summary><remarks>Note that you can change the size but not the placement of the popup.
            This placement you set here is the one you see when you right click the cell and choose "Show comment". 
            The yellow popup box is placed automatically by excel.</remarks><param name="row">Row index (1 based)</param><param name="col">Column index (1 based)</param><param name="commentProperties">Placement of the comment popup. Null if there is no comment on the cell.</param><seealso cref="M:FlexCel.Core.ExcelFile.CommentRowCount"/><seealso cref="M:FlexCel.Core.ExcelFile.CommentCountRow(System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentRowCol(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetComment(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentRow(System.Int32,System.Int32,System.String,FlexCel.Core.TImageProperties)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetComment(System.Int32,System.Int32,FlexCel.Core.TRichString)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentPropertiesRow(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.GetCommentProperties(System.Int32,System.Int32)"/><seealso cref="M:FlexCel.Core.ExcelFile.SetCommentPropertiesRow(System.Int32,System.Int32,FlexCel.Core.TImageProperties)"/>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.InsertAndCopyRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode,FlexCel.Core.TRangeCopyMode,FlexCel.Core.ExcelFile,System.Int32)">
            <summary>
            Inserts and/or copies a range of cells from one place to another.
            </summary><remarks>
            This method is one of the most important on FlexCel API, and it allows you to copy ranges of cells from one place to another,
            adapting the formulas, images and everything as Excel would do it.
            </remarks><param name="sourceRange">The range of cells you want to copy. If you specify full rows, they will
            be copied with Row format information and size. If you copy just a part of a row, Row format will not be copied.
            The same applies to columns. The only way to copy <b>all</b> row and columns, is to specify the full (A:IV) range.</param><param name="destRow">Destination row where the cells will be copied.</param><param name="destCol">Destination column where the cells will be copied.</param><param name="destCount">Number of times the sourceRange will be copied at (desRow, destCol).
            If you make for example destCount=2, sourceRange will be copied 2 times at (destRow, destCol)</param><param name="insertMode">How the cells on destination will be inserted. They can be shift down or left. 
            Specifying Row or Col as mode is equivalent to specify a sourceRange including full rows or columns respectively. </param><remarks>This overload version is useful for <b>inserting</b> only and not copying.</remarks><param name="copyMode">Which cells on sourceRange will be copied. If you intend to replace values on the copied cells,
             you might specify OnlyFormulas. If you just want to <b>insert</b> cells and not copy, specify None.</param><remarks>This overload is useful for <b>copying from another file.</b> It is not as fast or complete as the other
            overloaded versions because it has to do a lot of transforms on the data. But it is very useful anyway.</remarks><param name="sourceWorkbook">Workbook from where we are copying the cells. This might be the same workbook, and you would by copying from another sheet.</param><param name="sourceSheet">Sheet index on the source workbook. If sourceWorkbook is the same instance as this, and sourceSheet is the active sheet on the instance, this method is equivalent to the simpler overloaded version.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteRange(FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode)">
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary><param name="cellRange">Range of cells to delete.</param><param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteRange(System.Int32,System.Int32,FlexCel.Core.TXlsCellRange,FlexCel.Core.TFlxInsertMode)">
            <summary>
            Deletes a range of cells, and moves all cells below up or all cells to the right left, depending on the insert mode.
            </summary><param name="sheet1">First sheet where to delete cells.</param><param name="sheet2">Last sheet where to delete cells.</param><param name="cellRange">Range of cells to delete.</param><param name="insertMode">Mode of deletion. Note that Row and Col are equivalent to ShiftRight and ShiftDown with a 
            cell range of full rows or cols respectively.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.MoveRange(FlexCel.Core.TXlsCellRange,System.Int32,System.Int32,FlexCel.Core.TFlxInsertMode)">
            <summary>
            Moves a range of cells, the same way Excel does it. All references pointing to the old range will be relocated to the new, and all
            exisitng references to the new range will be relocated to #ref. 
            </summary><param name="cellRange">Range you want to move.</param><param name="newRow">Row where the range will be relocated.</param><param name="newCol">Column where the range will be relocated.</param><param name="insertMode">This parameter switches between 2 different working modes:
            <list type="bullet">
            <item>
            Modes NoneDown and NoneRight are the same, and work the same way as when you drag a range of cells in Excel to 
            a new location. Cells on the new range will be replaced by the old, and cells where the old range was located will be cleared(not deleted).
            No cells are insered or deleted.
            </item>
            <item>
            The other modes behave like when you select a range in Excel, cut it, and then right click and select "Insert Cut Cells...". The old range will be inserted
            where the new range goes, cells where the old range was will be deleted(not cleared). 
            Using for example MoveRange(CellRange, newRow, newCol, TFlxInsertMode.ShiftRight) is equivalent to:
            1) InsertAndCopyRange(CellRange, newRow, newCol, 1, TFlxInsertMode.ShiftRight, TRangeCopyMode.None); 
            2) MoveRange(CellRange, newRow, newCol, TFlxInsertMode.NoneRight);  
            3) DeleteRange(CellRange, TFlxInsertMode.ShiftRight);
            </item>
            </list>
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearDataValidation">
            <summary>
            Clears all data validation entries in the active sheet.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearDataValidation(FlexCel.Core.TXlsCellRange)">
            <summary>
            Clears all data validation entries inside the specified range.
            </summary><param name="range">Range of cells where data validation will be cleared.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddDataValidation(FlexCel.Core.TXlsCellRange,FlexCel.Core.TDataValidationInfo)">
            <summary>
            Adds a new Data Validation to a specified range.
            </summary><param name="range">Range of cells where we will apply the Data Validation.</param><param name="validationInfo">Validation information.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetDataValidation(System.Int32,System.Int32)">
            <summary>
            Returns the validation information for an specific cell. If the cell has no Data Validation associated, this method returns null.
            </summary><param name="row">Row of the cell (1 based)</param><param name="col">Column of the cell (1 based)</param><returns>The data validation for a cell, or null if the cell has no Data Validation associated.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetDataValidationInfo(System.Int32)">
            <summary>
            Returns the data validation information for an entry of the index.
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number">
            <item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)"/> to return the data validation in the cell.</item>
            <item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount"/>, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)"/> to loop over all existing data validations.</item>
            </list>
            </summary><param name="index">Position in the list of data validations. (1 based)</param><returns>Data validation information.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetDataValidationRanges(System.Int32)">
            <summary>
            Returns a list of ranges for which a data validation definition applies.
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number">
            <item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)"/> to return the data validation in the cell.</item>
            <item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount"/>, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)"/> to loop over all existing data validations.</item>
            </list>
            </summary><param name="index">Position in the list of data validations. (1 based)</param><returns>A list of cell ranges.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHyperLink(System.Int32)">
            <summary>
            Returns the hyperlink at position index on the list.
            </summary><param name="hyperLinkIndex">Index of the hyperlink (1 based).</param><returns>Hyperlink description.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetHyperLink(System.Int32,FlexCel.Core.THyperLink)">
            <summary>
            Modifies an existing Hyperlink. Use <see cref="M:FlexCel.Core.ExcelFile.AddHyperLink(FlexCel.Core.TXlsCellRange,FlexCel.Core.THyperLink)"/> to add a new one.
            </summary><param name="hyperLinkIndex">Index of the hyperlink (1 based).</param><param name="value">Hyperlink description.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetHyperLinkCellRange(System.Int32)">
            <summary>
            Returns the cell range a hyperlink refers to.
            </summary><param name="hyperLinkIndex">Index of the hyperlink (1 based).</param><returns>Range the hyperlink applies to.</returns><remarks>While normally hyperlinks refer to a single cell, you can make them point to
            a range. This method will return the first and last cell of the range that the hyperlink applies to.</remarks>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetHyperLinkCellRange(System.Int32,FlexCel.Core.TXlsCellRange)">
            <summary>
            Changes the cells an hyperlink is linked to.
            </summary><param name="hyperLinkIndex">Index of the hyperlink (1 based).</param><param name="cellRange">Range of cells the hyperlink will refer to.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddHyperLink(FlexCel.Core.TXlsCellRange,FlexCel.Core.THyperLink)">
            <summary>
            Adds a new hyperlink to the Active sheet. Use <see cref="M:FlexCel.Core.ExcelFile.SetHyperLink(System.Int32,FlexCel.Core.THyperLink)"/> to modify an existing one.
            </summary><param name="cellRange">Range of cells the hyperlink will refer to.</param><param name="value">Description of the hyperlink.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.DeleteHyperLink(System.Int32)">
            <summary>
            Deletes an existing hyperlink.
            </summary><param name="hyperLinkIndex">Index of the hyperlink (1 based).</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetRowOutlineLevel(System.Int32)">
            <summary>
            Returns the Outline level for a row.
            </summary><param name="row">Row index (1 based)</param><returns>Outline level for a row. It is a number between 0 and 7.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetRowOutlineLevel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Outline level for a row range.
            </summary><param name="firstRow">Row index of the first row on the range. (1 based)</param><param name="lastRow">Row index of the last row on the range. (1 based)</param><param name="level">Outline level. must be between 0 and 7.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetColOutlineLevel(System.Int32)">
            <summary>
            Returns the Outline level for a column.
            </summary><param name="col">Column index (1 based)</param><returns>Outline level for a column. It is a number between 0 and 7.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetColOutlineLevel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Outline level for a column range.
            </summary><param name="firstCol">Column index of the first column on the range. (1 based)</param><param name="lastCol">Column index of the last column on the range. (1 based)</param><param name="level">Outline level. must be between 0 and 7.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode,System.Int32,System.Int32)">
            <summary>
            Collapses or expands the row outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary><param name="level">Level that we want to show of the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the top of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param><param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param><param name="firstRow">This defines the first row of the range to collapse/expand. Only rows inside that range will be modified.</param><param name="lastRow">This defines the last row of the range to collapse/expand. Only rows inside that range will be modified.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode,System.Int32,System.Int32)">
            <summary>
            Collapses or expands the column outlines in a sheet to the specified level. It is equivalent to pressing the 
            numbers at the top of the outline gutter in Excel.
            </summary><param name="level">Level that we want to display from the outline. (1 based). 
            For example, setting Level = 3 is the same as pressing the "3" number at the left of the outline gutter in Excel.
            Setting Level = 1 will collapse all groups, Level = 8 will expand all groups.</param><param name="collapseChildren">Determines if the children of the collapsed nodes will be collapsed too.</param><param name="firstCol">This defines the first column of the range to collapse/expand. Only columns inside that range will be modified.</param><param name="lastCol">This defines the last column of the range to collapse/expand. Only columns inside that range will be modified.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsOutlineNodeRow(System.Int32)">
            <summary>
            Returns true when the row is the one that is used for collapsing an outline. (it has a "+" at the left).
            </summary><param name="row">Row to test (1 based)</param><returns>True if the node has a "+" mark.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsOutlineNodeCol(System.Int32)">
            <summary>
            Returns true when the column is the one that is used for collapsing an outline. (it has a "+" at the top).
            </summary><param name="col">Column to test (1 based)</param><returns>True if the node has a "+" mark.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsOutlineNodeCollapsedRow(System.Int32)">
            <summary>
            Returns true when the row is an outline node (it has a "+" at the left) and it is closed (all children are hidden).
            </summary><param name="row">Row to test (1 based)</param><returns>True if the row contains a node and it is collapsed, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsOutlineNodeCollapsedCol(System.Int32)">
            <summary>
            Returns true when the column is an outline node (it has a "+" at the top) and it is closed (all children are hidden).
            </summary><param name="col">Column to test (1 based)</param><returns>True if the column contains a node and it is collapsed, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CollapseOutlineNodeRow(System.Int32,System.Boolean)">
            <summary>
            Use this method to collapse a node of the outline. If the row is not a node (<see cref="M:FlexCel.Core.ExcelFile.IsOutlineNodeRow(System.Int32)"/> is false) this method does nothing.
            While this method allows a better control of the rows expanded and collapsed, you will normally use <see cref="M:FlexCel.Core.ExcelFile.CollapseOutlineRows(System.Int32,FlexCel.Core.TCollapseChildrenMode)"/> to collapse or
            expand all rows in a sheet.
            </summary><param name="row">Row to expand or collapse (1 based)</param><param name="collapse">If true, the node will be collapsed, else it will be expanded.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.CollapseOutlineNodeCol(System.Int32,System.Boolean)">
            <summary>
            Use this method to collapse a node of the outline. If the column is not a node (<see cref="M:FlexCel.Core.ExcelFile.IsOutlineNodeCol(System.Int32)"/> is false) this method does nothing.
            While this method allows a better control of the columns expanded and collapsed, you will normally use <see cref="M:FlexCel.Core.ExcelFile.CollapseOutlineCols(System.Int32,FlexCel.Core.TCollapseChildrenMode)"/> to collapse or
            expand all columns in a sheet.
            </summary><param name="col">Column to expand or collapse. (1 based)</param><param name="collapse">If true, the node will be collapsed, else it will be expanded.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SelectCells(FlexCel.Core.TXlsCellRange[])">
            <summary>
            Selects a group of cells on a given pane. If you just want to select just one cell, you can use the simpler method <see cref="M:FlexCel.Core.ExcelFile.SelectCell(System.Int32,System.Int32,System.Boolean)"/>
            </summary><param name="cellRange"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSelectedCells">
            <summary>
            Returns the selected ranges on a sheet.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ScrollWindow(FlexCel.Core.TPanePosition,System.Int32,System.Int32)">
            <summary>
            Scrolls the window to an specified place. 
            </summary><param name="panePosition">Pane to move. Note that if you move for example the left column of the upper left pane, you will also move the left column of the lower left pane.</param><param name="row">First visible row.</param><param name="col">First visible column.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetWindowScroll(FlexCel.Core.TPanePosition)">
            <summary>
            Returns the window scroll for a specified pane.
            </summary><param name="panePosition">Pane to return. </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.FreezePanes(FlexCel.Core.TCellAddress)">
            <summary>
            This command is equivalent to Menu-&gt;Window-&gt;Freeze Panes. It will freeze
            the rows and columns above and to the left from cell. Note that because Excel
            works this way, when you <see cref="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)"/> the panes are suppressed and vice-versa
            See also <see cref="M:FlexCel.Core.ExcelFile.GetFrozenPanes"/>
            </summary><param name="cell">All rows and columns above and to the left of this cell will be frozen. Set it to null or "A1" to unfreeze the panes.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetFrozenPanes">
            <summary>
            Returns the cell that is freezing the window, "A1" if no panes are frozen.
            See also <see cref="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)"/>
            </summary><returns>The cell that is freezing the window, "A1" if no panes are frozen.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SplitWindow(System.Int32,System.Int32)">
            <summary>
            This command is equivalent to Menu-&gt;Window-&gt;Split. It will split the
            window in 4 regions. Note that because Excel
            works this way, when you <see cref="M:FlexCel.Core.ExcelFile.FreezePanes(FlexCel.Core.TCellAddress)"/> the windows are unsplitted and vice-versa
            See also <see cref="M:FlexCel.Core.ExcelFile.GetSplitWindow"/>
            </summary><param name="xOffset">Offset from the left on 1/20 of a point. Zero for no vertical split.</param><param name="yOffset">Offset from the top on 1/20 of a point. Zero for no horizontal split.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSplitWindow">
            <summary>
            Returns the horizontal and vertical offsets for the split windows. Zero means no split.
            See also <see cref="M:FlexCel.Core.ExcelFile.SplitWindow(System.Int32,System.Int32)"/>
            </summary><returns>The horizontal and vertical offsets for the split windows. Zero means no split.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetChart(System.Int32,System.String)">
            <summary>
            Returns a chart from an object position and path. If the object does not contain a chart, it returns null.
            </summary><param name="objectIndex">Index of the object (1-based)</param><param name="objectPath">Index to the child object where the chart is.
            If it is a simple object, you can use String.Empty here, if not you need to get the ObjectPath from <see cref="M:FlexCel.Core.ExcelFile.GetObjectProperties(System.Int32,System.Boolean)"/></param><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Find(System.Object,FlexCel.Core.TXlsCellRange,FlexCel.Core.TCellAddress,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds a value inside a cell and returns the position for the cell, or null if nothing was found.
            </summary><param name="value">Value we are searching.</param><param name="Range">Range to Search. Null means the whole worksheet.</param><param name="Start">Cell where to start searching. For the first time, use null. After this, you can use the result of this method to get the next cell.</param><param name="ByRows">If true, the value will be searched down then left. If false, the search will go left then down. SEARCH IS FASTER WHEN BYROWS = FALSE</param><param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param><param name="SearchInFormulas">If true, the search will cover formulas too.</param><param name="WholeCellContents">If true, only whole cells will be replaced.</param><returns>Cell where the string is found, or null if it is not found.</returns><example>To find all cells on a sheet that contain the string "bolts":
            <code>
              do
              {
                 Cell = xls.Find("bolts", null, Cell, false, true, true, false);
                 if (Cell != null) MessageBox.Show(Cell.CellRef);
              }
                 while (Cell != null);
            </code>
            </example>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Replace(System.Object,System.Object,FlexCel.Core.TXlsCellRange,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Replaces the instances of oldValue by newValue in the active sheet.
            </summary><param name="oldValue">Value we want to replace.</param><param name="newValue">Value we want to use to replace oldValue.</param><param name="Range">Range to Search. Null means the whole worksheet.</param><param name="CaseInsensitive">If true, string searches will not be case sensitive, "a" = "A"</param><param name="SearchInFormulas">If true, the search will cover formulas too.</param><returns>The number of replacements done.</returns><param name="WholeCellContents">If true, only whole cells will be replaced.</param><example>To replace all cells on a sheet that contain "hello" with "hi":
            <code>
              xls.Replace("hello", "hi", null, true, true, false);
            </code>
            </example>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Sort(FlexCel.Core.TXlsCellRange,System.Boolean,System.Int32[],FlexCel.Core.TSortOrder[],System.Collections.IComparer)">
            <summary>
            Sorts a range on the current sheet.
            </summary><param name="Range">Range to sort. It must not include headers.</param><param name="ByRows">If true, rows will be sorted. If false, columns will.</param><param name="Keys">An array of integers indicating the columns or rows you want to use for sorting. Note that this number is absolute, for example column 1 always means column "A" no matter if the range we are sorting begins at column "B".
            A null array means sort by the first column or row, then by the second, etc. up to 8 entries.</param><param name="SortOrder">An array of flags indicating whether to sort ascending or descending for each Key. If null, all sorts will be ascending. If not null and the array size is less than the size of the "Keys" parameter, all missing entries are assumed to be Ascending.</param><param name="Comparer">Comparer to create a custom way to compare the different items. Set it to null to use default ordering.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.SetAutoFilter(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the AutoFilter in the Active sheet to point ot the range specified.
            </summary><param name="row">Row where the AutoFilter will be placed (1 based).</param><param name="col1">First column for the AutoFilter range (1 based).</param><param name="col2">Last column for the AutoFilter range (1 based).</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RemoveAutoFilter">
            <summary>
            Removes the AutoFilter from the active sheet. If there is no AutoFilter in the sheet, this method does nothing.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasAutoFilter">
            <summary>
            Returns true if the active sheet has any AutoFilter defined.
            </summary><returns>True if the active sheet has an AutoFilter, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasAutoFilter(System.Int32,System.Int32)">
            <summary>
            Returns true if a cell has an AutoFilter.
            </summary><param name="row">Row of the cell we want to find out. (1 based)</param><param name="col">Column of the cell we want to find out. (1 based)</param><returns>True if the cell has an AutoFilter, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetAutoFilterRange">
            <summary>
            Returns the range of cells with AutoFilter in the Active sheet, or null if there is not AutoFilter. The "Bottom"
            coordinate of the returned range has no meaning, only Top, left and right are used. (since AutoFilters only have one row).
            </summary><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.Recalc(System.Boolean)">
            <summary>
            When <see cref="P:FlexCel.Core.ExcelFile.RecalcMode"/> is manual, use this method to force a recalculation of the spreadsheet.
            </summary><param name="forced">When true this method will always perform a recalc. When false, only if there has been a change on the spreadsheet. </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RecalcAndVerify">
            <summary>
            Use this method to validate a file. FlexCel does not support all the range of functions from Excel
            when recalculating, so unknown functions will return "#NAME!" errors. Using this function you can validate
            your user worksheets and see if all the formulas they use are supported.
            </summary><remarks>Note that you *can* use unsupported functions on FlexCel. When you open the generated file
            on Excel it will show ok. The only problem is if you need to natively print or export to pdf the file.
            <p>Also, take in account that RecalcAndVerify is slower than recalc, as it has to do more work
            to locate the errors. Do not use it as a replace for <see cref="M:FlexCel.Core.ExcelFile.Recalc"/></p></remarks><returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.GetSupportingFile(System.String)">
            <summary>
            Returns a recalculating supporting file for this spreadsheet. Supporting files are added using a Workspace object.
            </summary><param name="fileName">File to return. It might be a full filename with path or only the name of the file.</param><returns>The supporting file with the given filename.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.RemoveMacros">
            <summary>
            If the file has macros, this method will remove them.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.HasMacros">
            <summary>
            Returns true if the file has any macros.
            </summary><returns>True if the file has macros.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ConvertFormulasToValues(System.Boolean)">
            <summary>
            Use it to convert formulas to their values. It can be useful if for example you are copying the sheet to
            another workbook, and you don't want any references to it. NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertExternalNamesToRefErrors"/> too.
            </summary><param name="onlyExternal">When true, it will only convert the formulas that do not refer to the same sheet.
            For example "=A1+Sheet2!A1" will be converted, but "=A2+A3" will not.
            </param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ConvertExternalNamesToRefErrors">
            <summary>
            Use it to convert the external names in a sheet to #REF! . It can be useful when you need to remove all external links in a file. 
            NOTE: You will probably want to use <see cref="M:FlexCel.Core.ExcelFile.ConvertFormulasToValues(System.Boolean)"/> too.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)">
            <summary>
            Adds a custom formula function to the FlexCel recalculation engine. Note that this formulas are only valid for Excel custom formulas, not for internal ones.
            For example, you could define "EDATE" since it is a custom formula defined in the Analisis Addin, but you cannot redefine "SUM". 
            Note that if a custom formula with the name already exists, it will be replaced. Names are Case insensitive ("Date" is the same as "DATE").
            For more information on adding Custom Formulas make sure you read the PDF documentation and take a look at the demo.
            </summary><param name="scope">Defines if the custom function will be available globally to all ExcelFile instances or only to the ExcelFile instance where
            it was added. It is recommended to add functions globally, unless you have different xls files with functions that might have the same name but could be implemented different.</param><param name="location">Defines if the function will be inserted as a reference to a macro in the local sheet or in an external book or addin.
            This parameter is used only when adding formulas with user defined functions to a sheet. It is not needed or used when recalculating those functions or when
            reading the text of a formula.</param><param name="function">Formula function we want to add.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.ClearUserDefinedFunctions(FlexCel.Core.TUserDefinedFunctionScope)">
            <summary>
            Removes all the custom formula functions from the FlexCel recalculation engine.
            </summary><param name="scope"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.EvaluateUserDefinedFunction(System.String,FlexCel.Core.TUdfEventArgs,System.Object[])">
            <summary>
            Evaluates a custom function you have added earlier with <see cref="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)"/>. You will not normally need to call this method, but it could be used for testing.
            If the function has not been added with <see cref="M:FlexCel.Core.ExcelFile.AddUserDefinedFunction(FlexCel.Core.TUserDefinedFunctionScope,FlexCel.Core.TUserDefinedFunctionLocation,FlexCel.Core.TUserDefinedFunction)"/>, this method will return <see cref="F:FlexCel.Core.TFlxFormulaErrorValue.ErrName"/>.
            </summary><param name="functionName">Function you want to evaluate.</param><param name="arguments">Extra arguments you can use to evaluate the formula.</param><param name="parameters">Parameters for the formula.</param><returns>The result of evaluating the formula. It might be a string, a double, a boolean, a TFlxFormulaError or an Array.</returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.XlsFile.IsDefinedFunction(System.String,FlexCel.Core.TUserDefinedFunctionLocation@)">
            <summary>
            Returns true if the Custom formula function has been added to the FlexCel recalculating engine.
            </summary><param name="formulaName">Name of the formula. Case insensitive.</param><param name="location">Returns if the function is defined as an internal or external function.</param><returns>True if the name has been added, false if not.</returns>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.IsXltTemplate">
            <summary>
            Determines if the file is a template (xlt format instead of xls). Both file formats are nearly identical, but there is an extra record
            needed so the file is a proper xlt template.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ActiveFileName">
            <summary>
            The file we are working on. When we save the file with another name, it changes.
            When we open a stream, it is set to "".
            This value is also used to get the text of Headers and Footers (when using the filename macro).
            When using the filename macro on headers/footers, make sure you set this value to what you want.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ActiveSheet">
            <summary>
            The Sheet where we are working on, 1-based(First sheet is 1, not 0). 
            Always set this property before working on a file.
            You can read or write this value.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ActiveSheetByName">
            <summary>
            The sheet where we are working on, referred by name instead of by index.
            To change the active sheet name, use <see cref="P:FlexCel.Core.ExcelFile.SheetName"/>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetCount">
            <summary>
            The number of sheets on the file.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetName">
            <summary>
            Reads and changes the name of the active sheet. To switch to another sheet by its name, use <see cref="P:FlexCel.Core.ExcelFile.ActiveSheetByName"/>
            </summary><remarks>
            This name must be unique in the file. It can be up to 31 characters long, and it can't contain the
            characters "/", "\", "?", "[", "]", "*"
            or ":"<para></para>
            </remarks>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetCodeName">
            <summary>
            Returns the codename of a sheet, that is an unique identifier assigned to the sheet when it is created. 
            Codenames are useful because they never change once the file is created, and they are what macros reference.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetVisible">
            <summary>
            Sets the visibility of the active sheet.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetZoom">
            <summary>
            Reads/Writes the zoom of the current sheet.
            Note that you can only set Zoom on Worksheets or Charts, not on any other place.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetTabColorIndex">
            <summary>
            Reads/Writes the color index of the current sheet tab. Use a number less or equal than 0 to specify no color.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ShowGridLines">
            <summary>
            True if the gray grid lines are shown on the Active sheet. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions"/>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ShowFormulaText">
            <summary>
            When true, the formula text will be displayed instead of the formula value. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions"/>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.GridLinesColorIndex">
            <summary>
            Color of the grid separator lines.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HideZeroValues">
            <summary>
            When true number 0 will be shown as empty. You can also set this option with <see cref="P:FlexCel.Core.ExcelFile.SheetOptions"/>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetType">
            <summary>
            Use this property to know it the <see cref="P:FlexCel.Core.ExcelFile.ActiveSheet"/> is a worksheet, a chart sheet or other.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetOptions">
            <summary>
            This property groups a lot of properties of the sheet, like for example if it is showing formula texts or the results.
            Most of this properties can be changed directly from XlsFile, but this method allows you to change them all together,
            or to easily copy the options from one file to another.  Look also at <see cref="P:FlexCel.Core.ExcelFile.SheetWindowOptions"/> for options that affect all sheets.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.SheetWindowOptions">
            <summary>
            This property groups a lot of properties of all the sheets in the workbook, like for example if the sheet tab bar at the bottom is visible.
             Look also at <see cref="P:FlexCel.Core.ExcelFile.SheetOptions"/> for options that affect only the active sheet.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.FormatCount">
            <summary>
            Number of custom formats defined in all the sheet. When calling GetFormat(XF), 0&lt;=XF&lt;FormatCount.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.GetDefaultFont">
            <summary>
            Returns Excel standard font for an empty cell.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.GetDefaultFontNormalStyle">
            <summary>
            Returns Excel font for the "normal" style. This style is used to draw the row and column headings.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.FontCount">
            <summary>
            Number of fonts defined in all the sheet. When calling GetFont(fontIndex), 0&lt;=fontIndex&lt;FormatCount.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.StyleCount">
            <summary>
            Returns the number of named styles in the file.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.CellMergedListCount">
            <summary>
            For using with <see cref="M:FlexCel.Core.ExcelFile.CellMergedList(System.Int32)"/> on a loop: for (int i=1;i &lt;= CellMergedListCount) CellMergedList(i)...
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.RowCount">
            <summary>
            Number of rows on the range.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ColCount">
            <summary>
            Number of columns on the range.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.DefaultRowHeight">
            <summary>
            The default height for empty rows, in Excel internal units. (1/20th of a point)
            </summary><remarks>Use <see cref="F:FlexCel.Core.FlxConsts.RowMult"/> to convert the internal units to pixels.</remarks><example><code>RowHeightInPixels=GetRowHeight(Row)/FlxConsts.RowMult;</code></example>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.DefaultColWidth">
            <summary>
            The default width for empty columns, in Excel internal units. (Character width of font 0 / 256)
            </summary><remarks>Use <see cref="F:FlexCel.Core.FlxConsts.ColMult"/> to convert the internal units to pixels.</remarks><example><code>ColWidthInPixels=GetColWidth(Col)/FlxConsts.ColMult;</code></example>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.GetUsedPaletteColors">
            <summary>
            Returns a list of the used colors on the palette. You can use it as an entry to <see cref="M:FlexCel.Core.ExcelFile.NearestColorIndex(System.Drawing.Color)"/>
            to modify the palette.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.NamedRangeCount">
            <summary>
            The count of all named ranges on the file.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PageHeader">
            <summary>
             Page header on the active sheet.
             A page header is a string that contains the text for the 3 parts of the header.<p></p>
             The Left section begins with &amp;L, the Center section with &amp;C and the Right with &amp;R<p></p>
             For example, the text"&amp;LThis goes at the left!&amp;CThis is centered!&amp;RThis is right aligned"
             will write text to all the sections.
             <p></p><p></p>
             This is the full list of macros you can include:
            <p></p>
             <list type="bullet">
             <item>&amp;&amp; The “&amp;” character itself</item>
             <item>&amp;L Start of the left section</item>
             <item>&amp;C Start of the centered section</item>
             <item>&amp;R Start of the right section</item>
             <item>&amp;P Current page number</item>
             <item>&amp;N Page count</item>
             <item>&amp;D Current date</item>
             <item>&amp;T Current time</item>
             <item>&amp;A Sheet name</item>
             <item>&amp;F File name without path</item>
             <item>&amp;Z File path without file name (XP or Newer)</item>
             <item>&amp;G Picture (XP or Newer)</item>
             <item>&amp;U Underlining on/off</item>
             <item>&amp;E Double underlining on/off</item>
             <item>&amp;S Strikeout on/off</item>
             <item>&amp;X Superscript on/off</item>
             <item>&amp;Y Subscript on/off</item>
             <item>&amp;"&lt;fontname&gt;" Set new font &lt;fontname&gt;</item>
             <item>&amp;"&lt;fontname&gt;,&lt;fontstyle&gt;" Set new font with specified style &lt;fontstyle&gt;. The style &lt;fontstyle&gt; is in most cases
             one of “Regular”, “Bold”, “Italic”, or “Bold Italic”. But this setting is dependent on the
             used font, it may differ (localized style names, or “Standard”, “Oblique”, ...).</item>
             <item>&amp;&lt;fontheight&gt; Set font height in points (&lt;fontheight&gt; is a decimal value). If this command is followed
             by a plain number to be printed in the header, it will be separated from the font height
             with a space character.</item>
             </list>
             <p></p>
             Normally, the easiest way to find out which header string you need is to create an xls file on Excel, add a header, open the file
             with FlexCel and take a look at the generated header (You can use the ApiMate tool for that).
             </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PageFooter">
            <summary>
            Page footer on the active sheet. For a description on the format of the string, see <see cref="P:FlexCel.Core.ExcelFile.PageHeader"/>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintGridLines">
            <summary>
            True if the gray grid lines are printed when printing the spreadsheet.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintHeadings">
            <summary>
            When true the row and column labels (A,B...etc for columns, 1,2... for rows) will be printed.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintHCentered">
            <summary>
            When true the sheet will print horizontally centered on the page.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintVCentered">
            <summary>
            When true the sheet will print vertically centered on the page.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintToFit">
            <summary>
            If true, sheet will be configured to fit on <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages"/> x <see cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages"/>.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintCopies">
            <summary>
            Number of copies to print.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintXResolution">
            <summary>
            Horizontal printer resolution on DPI.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintYResolution">
            <summary>
            Vertical printer resolution on DPI.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintOptions">
            <summary>
            Misc options.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintScale">
            <summary>
            Percent to grow/shrink the sheet.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintNumberOfHorizontalPages">
            <summary>
            If set, the sheet will be printed on at most this number of horizontal pages. <seealso cref="P:FlexCel.Core.ExcelFile.PrintNumberOfVerticalPages"/>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintNumberOfVerticalPages">
            <summary>
            If set, the sheet will be printed on at most this number of vertical pages. <seealso cref="P:FlexCel.Core.ExcelFile.PrintNumberOfHorizontalPages"/>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintPaperSize">
            <summary>
            Pre-defined standard paper size. If you want to set up a printer specific paper size, see <see cref="M:FlexCel.Core.ExcelFile.SetPrinterDriverSettings(FlexCel.Core.TPrinterDriverSettings)"/>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.PrintPaperDimensions">
            <summary>
            Returns the dimensions for the selected paper. See also <see cref="P:FlexCel.Core.ExcelFile.PrintPaperSize"/>.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ImageCount">
            <summary>
            The number of images on the active sheet.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ObjectCount">
            <summary>
            Count of all graphical objects on the sheet. They can be charts, images, shapes, etc.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.DataValidationCount">
            <summary>
            Returns the number of DataValidation structures in the active sheet. 
            There are 2 ways you can access the data validation
            information on a sheet: 
            <list type="number">
            <item>If you know the row and column where you want to look, you can use <see cref="M:FlexCel.Core.ExcelFile.GetDataValidation(System.Int32,System.Int32)"/> to return the data validation in the cell.</item>
            <item>If you want to find out all data validation structures in the sheet, you can use <see cref="P:FlexCel.Core.ExcelFile.DataValidationCount"/>, 
            <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationInfo(System.Int32)"/> and <see cref="M:FlexCel.Core.ExcelFile.GetDataValidationRanges(System.Int32)"/> to loop over all existing data validations.</item>
            </list>
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HyperLinkCount">
            <summary>
            The count of hyperlinks on the active sheet
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OutlineSummaryRowsBelowDetail">
            <summary>
            Determines whether the summary rows should be below or above details on outline.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OutlineSummaryColsRightToDetail">
            <summary>
            Determines whether the summary columns should be right to or left to the details on outline.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OutlineAutomaticStyles">
            <summary>
            This handles the setting of Automatic Styles inside the outline options.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.ChartCount">
            <summary>
            Returns the count of charts on this sheet.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsDates1904">
            <summary>
            Excel has 2 different date systems. On windows systems it uses 1900 based dates, and on Macintosh systems it uses 1904 dates.
            You can change this on Excel under Options, and this property allows you to know and change which format is being used.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsR1C1">
            <summary>
            Use this property to know or change the reference system used in Excel.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsSaveExternalLinkValues">
            <summary>
            This property has the value of the corresponding option on Excel options.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.OptionsPrecisionAsDisplayed">
            <summary>
            This property has the value of the corresponding option on Excel options.
            </summary>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.RecalcMode">
            <summary>
             Set this property to change how the file will be recalculated.
             </summary><remarks>
             Setting RecalcMode = Manual might be a little faster for big spreadsheets with *lots* of formulas,
             but they won't preview ok on Excel viewers as FlexCelPrintDocument. See also <see cref="P:FlexCel.Core.ExcelFile.RecalcForced"/>
             When Manual, you can still call <see cref="M:FlexCel.Core.ExcelFile.Recalc(System.Boolean)"/> with "forced" = true to recalculate the sheet.
             <p>Not all functions are supported, those that are not will return a #NAME! error on a viewer, and will be recalculated by Excel
             when you open the file. See SupportedFunctions.xls in the documentation to get a list of supported functions.</p>
            </remarks>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.RecalcForced">
            <summary>
             When false Excel will not recalculate the formulas when loading the generated file.
             </summary><remarks>
             If this property is true, Excel will recalculate all formulas when you load the file, so it will
             modify the workbook and will ask for saving changes when closing. Even if you just open and close the file.
             Note that this will only happen if there are formulas on the sheet.
            <p>
            <b>It is strongly advised to leave this property = true</b>. If you set it to false and there is an error on a formula
            calculated by FlexCel, it will show wrong when open on Excel too. For example, if you have the formula:
            <code>"=GETPIVOTDATA("a";"b")"</code> 
            FlexCel will return #NAME!, as it doesn't implement this function. If you open this file on Excel and 
            RecalcForced was false when saving, Excel will not calculate it and will show also #NAME!.
            If RecalcForced was true, Excel will show the right answer, but will ask for saving the file when closing.
            <b>Only set RecalcForced=false if you are in control of the formulas used on the spreadsheet</b>,
            so you can guarantee no unsupported formula will be used. If the final user can modify the templates, do not set it.
            </p>
            <p>
            Note that if <see cref="P:FlexCel.Core.ExcelFile.RecalcMode"/> = Smart and no modification is done to the file, Autorecalc info on formulas
            will not change, even if RecalcForced=true.
            </p>
            <example>
            The following code:
            <code>
            XlsFile xls= new XlsFile();
            xls.NewFile();
            xls.RecalcMode = TRecalcMode.Manual; //So the sheet is not recalculated before saving.
            xls.RecalcForced = false; //So Excel won't recalculate either.
            xls.SetCellValue(1,1, new TFormula("=1+1",3));  //We all know 1+1=3 ;-)
            xls.Save(OutFileName);
            </code>
            will create a file with a formula "1+1" and result = 3 on cell A1. If RecalcForced were true, Excel would show the correct value when opening.
            </example>
            </remarks>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.HeightCorrection">
            <summary>
            Factor to multiply default row heights. See remarks for a detailed explanation.
            </summary><remarks>
            Excel does not print the same things to all printers (or even the same printer with another resolution).
            Depending on the driver and resolution, printed columns and rows will be a little smaller or bigger. 
            <p></p>FlexCel uses .NET framework to print, and so it is resolution independent, it will always
            print the same no matter where. So FlexCel is tuned to print like Excel on a 600 dpi generic printer.
            This will probably be ok for most uses, but in some cases might cause FlexCel to print an Extra
            page with only one column or row.
            <p></p>You can use this property and <see cref="P:FlexCel.Core.ExcelFile.WidthCorrection"/> to manually fine tune FlexCel printing,
            previewing and exporting to pdf to make it smaller or larger. A normal value for this property might be 1.05 or 0.99,
            but don't use it unless you really need to.
            </remarks><example>
            To calculate the exact HeightCorrection and WidthCorrection for your printer create a new Excel sheet,
            make column A wide (almost a sheet wide) and row 1 larger (almost a sheet tall). 
            Set the borders around cell A1 to a solid line.
            Now, print this file from Excel and from FlexCel (you can use the PrintPreview demo for this) and compare
            the 2 resulting boxes. If for example the Excel printed box is 1.2 cm wide and Flexcel is 1.4, 
            WidthCorrection should be 1.4f/1.2f.  (A larger WidthCorrection means a smaller box)
            </example>
        </member>
        <member name="P:FlexCel.XlsAdapter.XlsFile.WidthCorrection">
            <summary>
            Factor to multiply default column widths. See remarks for a detailed explanation.
            </summary><remarks>
            Excel does not print the same things to all printers (or even the same printer with another resolution).
            Depending on the driver and resolution, printed columns and rows will be a little smaller or bigger. 
            <p></p>FlexCel uses .NET framework to print, and so it is resolution independent, it will always
            print the same no matter where. So FlexCel is tuned to print like Excel on a 600 dpi generic printer.
            This will probably be ok for most uses, but in some cases might cause FlexCel to print an Extra
            page with only one column or row.
            <p></p>You can use this property and <see cref="P:FlexCel.Core.ExcelFile.HeightCorrection"/> to manually fine tune FlexCel printing,
            previewing and exporting to pdf to make it smaller or larger. A normal value for this property might be 1.05 or 0.99,
            but don't use it unless you really need to.
            </remarks><example>
            To calculate the exact HeightCorrection and WidthCorrection for your printer create a new Excel sheet,
            make column A wide (almost a sheet wide) and row 1 larger (almost a sheet tall). 
            Set the borders around cell A1 to a solid line.
            Now, print this file from Excel and from FlexCel (you can use the PrintPreview demo for this) and compare
            the 2 resulting boxes. If for example the Excel printed box is 1.2 cm wide and Flexcel is 1.4, 
            WidthCorrection should be 1.4f/1.2f.  (A larger WidthCorrection means a smaller box).
            </example>
        </member>
        <member name="T:FlexCel.XlsAdapter.THeaderImageGroupRecord">
            <summary>
            Drawing Group record for header and footer images. There is only one of them on a xls file, and is on the global section.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.THeaderImageRecord">
            <summary>
            Drawing record for header and footer images. It appears on the sheets.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.EscherGraphToBSE">
            <summary>
            Converts a bitmap to BSE representation.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TMasterDetailLink">
            <summary>
            A parent table and a parent field used on a master-detail relationship.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TMasterDetailLink.#ctor(FlexCel.Report.VirtualDataTableState,System.Int32,System.String)">
            <summary>
            Creates a new instance of TMasterDetailLink with the given values.
            </summary>
            <param name="aParentDataSource">See <see cref="P:FlexCel.Report.TMasterDetailLink.ParentDataSource"/></param>
            <param name="aParentField">See <see cref="P:FlexCel.Report.TMasterDetailLink.ParentField"/></param>
            <param name="aChildFieldName">See <see cref="P:FlexCel.Report.TMasterDetailLink.ChildFieldName"/></param>
        </member>
        <member name="P:FlexCel.Report.TMasterDetailLink.ParentDataSource">
            <summary>
            A table that is acting as a master on a master detail relationship.
            </summary>
        </member>
        <member name="P:FlexCel.Report.TMasterDetailLink.ParentField">
            <summary>
            Column index of the key that acts as primary key on the relationship.
            </summary>
        </member>
        <member name="P:FlexCel.Report.TMasterDetailLink.ChildFieldName">
            <summary>
            Column name on the detail dataset that is related with <see cref="P:FlexCel.Report.TMasterDetailLink.ParentField"/>
            </summary>
        </member>
        <member name="T:FlexCel.Report.TSplitLink">
            <summary>
            Specifies a "Split" relation beteen two tables.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TSplitLink.#ctor(FlexCel.Report.VirtualDataTableState,System.Int32)">
            <summary>
            Create a new TSplitLink with the given values.
            </summary>
            <param name="aParentDataSource">See <see cref="P:FlexCel.Report.TSplitLink.ParentDataSource"/></param>
            <param name="aSplitCount">See <see cref="P:FlexCel.Report.TSplitLink.SplitCount"/></param>
        </member>
        <member name="P:FlexCel.Report.TSplitLink.SplitCount">
            <summary>
            Split the detail every &quot;SplitCount&quot; number of records. If for example Splitcount is 5 and 
            the detail table has 14 registers, it should be split as 5 records, 5 records, 4 records.
            </summary>
        </member>
        <member name="P:FlexCel.Report.TSplitLink.ParentDataSource">
            <summary>
            Table that acts as a parent on the split relationship. Read its <see cref="P:FlexCel.Report.VirtualDataTableState.Position"/> to know
            which group of splitted records to return.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TRelation">
            <summary>
            A data relation between two tables. Different from standard .NET datarelations, this class is not tied
            to ADO.NET, and allows you to specify relationships between any arbitray VirtualDataTable objects.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TRelation.#ctor(FlexCel.Report.VirtualDataTable,FlexCel.Report.VirtualDataTable,System.Int32[],System.Int32[])">
            <summary>
            Creates a new relation with the given values.
            </summary>
            <param name="aParentTable">See <see cref="P:FlexCel.Report.TRelation.ParentTable"/></param>
            <param name="aChildTable">See <see cref="P:FlexCel.Report.TRelation.ChildTable"/></param>
            <param name="aParentColumns">See <see cref="P:FlexCel.Report.TRelation.ParentColumns"/></param>
            <param name="aChildColumns">See <see cref="P:FlexCel.Report.TRelation.ChildColumns"/></param>
        </member>
        <member name="P:FlexCel.Report.TRelation.ParentColumns">
            <summary>
            And array of colum indexes on the Master table that are related to the detail
            ChildColumns[0] is related to ParentColumns[0], ChildColumns[1] to ParentColunns[1], and so on.
            </summary>
        </member>
        <member name="P:FlexCel.Report.TRelation.ChildColumns">
            <summary>
            And array of colum indexes on the Detail table that are related to the master.
            ChildColumns[0] is related to ParentColumns[0], ChildColumns[1] to ParentColunns[1], and so on.
            </summary>
        </member>
        <member name="P:FlexCel.Report.TRelation.ParentTable">
            <summary>
            Table that acts as a master on a Master-Detail relationship.
            </summary>
        </member>
        <member name="P:FlexCel.Report.TRelation.ChildTable">
            <summary>
            Table that acts as a detail on a Master-Detail relationship.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TRelationList">
            <summary>
            A list of <see cref="T:FlexCel.Report.TRelation"/> classes, that you can use to group all the relations on a VirtualDataTable.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TRelationList.#ctor">
            <summary>
            Creates a new TRelationList instance.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TRelationList.Clear">
            <summary>
            Clears all relations on this table.
            </summary>
        </member>
        <member name="M:FlexCel.Report.TRelationList.Add(FlexCel.Report.TRelation)">
            <summary>
            Adds a new relation to the list.
            </summary>
            <param name="relation">Relation to add.</param>
        </member>
        <member name="M:FlexCel.Report.TRelationList.GetEnumerator">
            <summary>
            Returns an enumarator to loop on all relations of this list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Report.TRelationList.Item(System.Int32)">
            <summary>
            Returns the specified Relation at index (0 based)
            </summary>
        </member>
        <member name="P:FlexCel.Report.TRelationList.Count">
            <summary>
            Returns the number of relations on this list.
            </summary>
        </member>
        <member name="T:FlexCel.Render.FlexCelRender">
            <summary>
            A class for viewing/printing Excel Files.
            </summary>
        </member>
        <member name="T:FlexCel.Render.IDrawObjectMethods">
            <summary>
            Some methods that might be implemented different depending on where we are rendering the images.
            </summary>
        </member>
        <member name="M:FlexCel.Render.IDrawObjectMethods.GetImageRectangle(FlexCel.Core.TXlsCellRange,System.Drawing.RectangleF,FlexCel.Core.TClientAnchor)">
            <summary>
            Used to know where to place the image in the canvas. 
            </summary>
        </member>
        <member name="M:FlexCel.Render.IDrawObjectMethods.SpawnCell(System.Int32,System.Int32,FlexCel.Render.TSpawnedCellList,FlexCel.Render.THAlign,System.Drawing.RectangleF@,System.Drawing.RectangleF@)">
            <summary>
            This does not make sense when rendering text in images, so the implementation can be empty.
            </summary>
            <param name="aCol"></param>
            <param name="aRow"></param>
            <param name="SpawnedCells"></param>
            <param name="HAlign"></param>
            <param name="TextRect"></param>
            <param name="ContainingRect"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelRender.SetCanvas(FlexCel.Render.IFlxGraphics)">
            <summary>
            Sets the canvas used by the renderer object. You always have to set it before using this class.
            </summary>
            <param name="aCanvas"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelRender.GetCellVisibleFormatDef(System.Int32,System.Int32)">
            <summary>
            A cache to speed up formats. As they are read-only, we can reutilize older format definitions and not create new ones.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.FlexCelRender.GetImageRectangle(FlexCel.Core.TXlsCellRange,System.Drawing.RectangleF,FlexCel.Core.TClientAnchor)">
            <summary>
            Interface for sheetmethods
            </summary>
            <param name="A"></param>
            <param name="PagePrintRange"></param>
            <param name="PaintClipRect"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.FlexCelRender.CreateFontCache">
            <summary>
            Always follow this call with a DisposeFontCache.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelRender.Workbook">
            <summary>
            The ExcelFile that we want to display.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelRender.ColCount">
            <summary>
            Number of columns to show.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelRender.RowCount">
            <summary>
            Number of rows to show.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelRender.MaxVisibleRow">
            <summary>
            This is the maximum row that should be displayed. If there are images on a sheet, it can be bigger than XlsFile.RowCount.
            If a row or cell has format but the format is not visible (for example a different height)it will not show.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelRender.MaxVisibleCol">
            <summary>
            This is the maximum column that should be displayed. If there are images on a sheet or a cell spans to the right, it can be bigger than XlsFile.ColCount.
            If a column has format but the format is not visible (for example a different width)it will not show.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelRender.HidePrintObjects">
            <summary>
            Select which kind of objects should not be printed or exported to pdf.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TSpanDirection">
            <summary>
            Directions on where the cell can span.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfTransparency">
            <summary>
            A class for storing ca/CA graphics states.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TEncryptionType">
            <summary>
            How the file is encrypted.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEncryptionType.Xor">
            <summary>
            Excel 95 XOR encryption.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEncryptionType.Standard">
            <summary>
            Excel 97/2000 encryption.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEncryptionType.Strong">
            <summary>
            Excel XP/2003 encryption. Not supported yet.
            </summary>
        </member>
        <member name="T:FlexCel.Core.OnPasswordEventArgs">
            <summary>
            Use this class to supply a password to open an encrypted file.
            </summary>
        </member>
        <member name="M:FlexCel.Core.OnPasswordEventArgs.#ctor(FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new Argument.
            </summary>
        </member>
        <member name="P:FlexCel.Core.OnPasswordEventArgs.Password">
            <summary>
            The password needed to open the file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.OnPasswordEventArgs.Xls">
            <summary>
            Excel file we are trying to open.
            </summary>
        </member>
        <member name="T:FlexCel.Core.OnPasswordEventHandler">
            <summary>
            This event fires when opening an encrypted file and no password has been supplied.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TWorkbookProtectionOptions">
            <summary>
            Options for protecting the workbook.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TWorkbookProtectionOptions.#ctor">
            <summary>
            Initializes empty protection.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TWorkbookProtectionOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes the class.
            </summary>
            <param name="aStructure">True if the structure will be protected.</param>
            <param name="aWindow">True if the window will be protected.</param>
        </member>
        <member name="P:FlexCel.Core.TWorkbookProtectionOptions.Window">
            <summary>
            Window is protected.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TWorkbookProtectionOptions.Structure">
            <summary>
            Structure is protected.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TProtectionType">
            <summary>
            Indicates how a sheet will be protected.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TProtectionType.All">
            <summary>
            All things will be protected.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TProtectionType.None">
            <summary>
            Nothing will be protected.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSheetProtectionOptions">
            <summary>
            Options for protecting a sheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TSheetProtectionOptions.#ctor">
            <summary>
            Initializes a not protected block.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TSheetProtectionOptions.#ctor(System.Boolean)">
            <summary>
            Creates a protected or unprotected sheet.
            </summary>
            <param name="allTrue">If true, all properties on this class will be set to true.
            This means cells on the sheet will be protected, and things like Cell formatting will be not. 
            If false, all properties will be set to false.</param>
        </member>
        <member name="M:FlexCel.Core.TSheetProtectionOptions.#ctor(FlexCel.Core.TProtectionType)">
            <summary>
            Creates a protected or unprotected sheet.
            </summary>
            <param name="protectAll">If true, all things in the sheet will be protected. this means a property like <see cref="P:FlexCel.Core.TSheetProtectionOptions.Contents"/> 
            will be true, and others like <see cref="P:FlexCel.Core.TSheetProtectionOptions.CellFormatting"/>  will be false.
            If false, nothing will.</param>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.Contents">
            <summary>
            Sheet contents are protected
            </summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.Objects">
            <summary>
            Objects on the sheet are protected.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.Scenarios">
            <summary>
            Scenarios on the sheet are protected.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.CellFormatting">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.ColumnFormatting">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.RowFormatting">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.InsertColumns">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.InsertRows">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.InsertHyperlinks">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.DeleteColumns">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.DeleteRows">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.SelectLockedCells">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.SortCellRange">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.EditAutoFilters">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.EditPivotTables">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="P:FlexCel.Core.TSheetProtectionOptions.SelectUnlockedCells">
            <summary>If TRUE, users are allowed to change this setting. Set it to FALSE to disable this property. Only on Excel >= XP.</summary>
        </member>
        <member name="T:FlexCel.Core.TProtection">
            <summary>
            Encryption data for an Excel sheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TProtection.#ctor(FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new TProtection instance and initializes it.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TProtection.SetModifyPassword(System.String,System.Boolean,System.String)">
            <summary>
            Sets the password for modifying the file. It won't encrypt the file, it just won't let Excel save the file. On Excel goto Options->Security to check it.
            Note that you can only set it, there is no way to retrieve an existing password.
            </summary>
            <param name="modifyPassword">The new password. Set it to null to clear it.</param>
            <param name="recommendReadOnly">When true, Excel will recommend read only when opening a file.</param>
            <param name="reservingUser">The user that reserves the file. It will appear on the password dialog on Excel.</param>
        </member>
        <member name="M:FlexCel.Core.TProtection.SetWorkbookProtection(System.String,FlexCel.Core.TWorkbookProtectionOptions)">
            <summary>
            Protects the workbook. On Excel goto Protect->Workbook to check it.
            </summary>
            <param name="workbookPassword">Password to protect the file. You can set it to null to clear it.</param>
            <param name="workbookProtectionOptions">The options to protect.</param>
        </member>
        <member name="M:FlexCel.Core.TProtection.GetWorkbookProtectionOptions">
            <summary>
            Reads the Workbook protection options for a file.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TProtection.SetWorkbookProtectionOptions(FlexCel.Core.TWorkbookProtectionOptions)">
            <summary>
            Sets the workbook protection options for a file.
            </summary>
            <param name="value">Workbook protection options.</param>
        </member>
        <member name="M:FlexCel.Core.TProtection.SetSheetProtection(System.String,FlexCel.Core.TSheetProtectionOptions)">
            <summary>
            Protects a sheet. On Excel goto Protect->Sheet to check it.
            </summary>
            <param name="sheetPassword">Password to protect the active sheet. You can set it to null to clear it.</param>
            <param name="sheetProtectionOptions">The options to protect.</param>
        </member>
        <member name="M:FlexCel.Core.TProtection.GetSheetProtectionOptions">
            <summary>
            Return the sheet protection options for the file.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TProtection.SetSheetProtectionOptions(FlexCel.Core.TSheetProtectionOptions)">
            <summary>
            Sets the sheet protection options for the file.
            </summary>
            <param name="value">Protection options.</param>
        </member>
        <member name="P:FlexCel.Core.TProtection.EncryptionType">
            <summary>
            Encryption algorithm for the file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TProtection.OpenPassword">
            <summary>
            Sets the password to open the file. When set, the file will be encrypted. On Excel go to Options->Security to check it.
            Set this to null to clear it.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TProtection.HasModifyPassword">
            <summary>
            Returns true if the file has a password to modify.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TProtection.RecommendReadOnly">
            <summary>
            Returns true if the file is recommended to open read-only.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TProtection.HasWorkbookPassword">
            <summary>
            Returns true if the workbook is protected with a password.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TProtection.HasSheetPassword">
            <summary>
            Returns true if the active sheet is protected with a password.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TProtection.OnPassword">
            <summary>
            It is called when opening a password protected file, so you can supply the correct password.
            If you know beforehand that the file is protected you do not need this event, just use the <see cref="P:FlexCel.Core.TProtection.OpenPassword"/> method on this object.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TProtection.WriteAccess">
            <summary>
            Reads or sets the user writing the file. Useful to know which user opened the file in Excel when
            you want to save and the file is in use.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseRowColList">
            <summary>
            A basic list for handling rows of records. It has a list of rows, and each one of them can have a list of columns.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TBaseRowColList.FixDeletedRowOffsets(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method moves the parts of the rows that go to a different parent row when deleting ranges.
            </summary>
            <param name="DestRow"></param>
            <param name="Left"></param>
            <param name="Right"></param>
            <param name="RowCount"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCellList">
            <summary>
            A list of Cells, agrupated by RowLists. Items are TCellRecordList
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCells">
            <summary>
            A list with both Cell records and ROW records.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRangeList">
            <summary>
            A list of range entries, parsed from RangeRecords. Records are TRangeEntry
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEvaluateRPNFormula">
            <summary>
            A class for parsing a RPN formula for evaluation.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TMsObj">
            <summary>
            Generic Object.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseClientData">
            <summary>
            Abstract class holding either a TextBox (TXO) or an ole Object (OBJ) on its 2 descendants.
            It gives a common interface to handle embedded objects.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TMsObj.CreateEmptyImg(System.Int32@)">
            <summary>
            CreateEmptyImg
            </summary>
            <param name="MaxId"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TMsObj.CreateEmptyNote(System.Int32@)">
            <summary>
            CreateEmptyNote
            </summary>
            <param name="MaxId"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TMsObj.CreateEmptyAutoFilter(System.Int32@)">
            <summary>
            CreateEmptyAutoFilter
            </summary>
            <param name="MaxId"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TTXO">
            
             <summary>
             TextBox Object.
             </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TTXO.#ctor(FlexCel.XlsAdapter.TFontRecordList,System.Int32)">
            <summary>
            Create from data
            </summary>
            <param name="aFontList">Pointer to the FontList. It should be a pointer, so it can be modified.</param>
            <param name="Dummy"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBlankRecord">
            <summary>
            A blank record.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TNumberRecord">
            <summary>
            A record containing an IEEE 8bytes double number.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRKRecord">
            <summary>
            A record containing a compressed 8 bytes double number into 4 bytes.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TMultipleValueRecord">
            <summary>
            A record containing multiple records of the same type for the same row.
            This is an optimization for saving the file, we will convert it to normal base records.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TMulBlankRecord">
            <summary>
            Multiple blanks.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TMulRKRecord">
            <summary>
            Multiple RK values.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCellRecordWrapper">
            <summary>
            Encapsulates a Cell record with the corresponding row, to store cell records on charts and unsuported sheets.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBaseRowColRecordList">
            <summary>
            Common ancestor for all list of records containing rows and columns.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TBaseRowColRecordList.GuessSearch(System.Int32,System.Int32@)">
            <summary>
            There are 2 reasons why we can perform better than a binary search here:
               1) blocks of cells are normally together, so it you know cell 1 is column 5, column 8 will probably be cell 3
               2) this is a discrete search. There is no col=5.5, so if you know cell 1 is column 5 and you look for column 8, it can't be more far away than 3 positions.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.TNameRecordList">
            <summary>
            List of NAME Records on Global Section
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCellRecordList">
            <summary>
            A list with cells.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRowRecordList">
            <summary>
            A list with ROW records. (the ones holding the row height, format, etc)
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TShrFmlaRecordList">
            <summary>
            A list with Shared formulas.
            </summary>
        </member>
        <member name="T:FlexCel.Render.FlexCelPdfExport">
            <summary>
            A component for exporting an Excel file to PDF.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.#ctor">
            <summary>
            Creates a new FlexCelPdfExport instance.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.#ctor(FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new FlexCelPdfExport and assigns it to an ExcelFile.
            </summary>
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.#ctor(FlexCel.Core.ExcelFile,System.Boolean)">
            <summary>
            Creates a new FlexCelPdfExport and assigns it to an ExcelFile, setting AllowOverwritingFiles to the desired value.
            </summary>
            <param name="aWorkbook">ExcelFile containing the data this component will export.</param>
            <param name="aAllowOverwritingFiles">When true, existing files will be overwrited.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.OnBeforeNewPage(FlexCel.Render.PageEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelPdfExport. See also <see cref="E:FlexCel.Render.FlexCelPdfExport.BeforeNewPage"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.OnBeforeGeneratePage(FlexCel.Render.PageEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelPdfExport. See also <see cref="E:FlexCel.Render.FlexCelPdfExport.BeforeGeneratePage"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.OnAfterGeneratePage(FlexCel.Render.PageEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelPdfExport. See also <see cref="E:FlexCel.Render.FlexCelPdfExport.AfterGeneratePage"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.OnGetBookmarkInformation(FlexCel.Render.GetBookmarkInformationArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelPdfExport.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.Cancel">
            <summary>
            Cancels a running export. This method is equivalent to setting <see cref="P:FlexCel.Render.FlexCelPdfExport.Canceled"/> = true.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.Export(System.IO.Stream)">
            <summary>
            Exports the active sheet of the associated xls workbook to a stream.
            </summary>
            <remarks>
            This method is a shortcut for calling <see cref="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)"/>/ <see cref="M:FlexCel.Render.FlexCelPdfExport.ExportSheet"/>/<see cref="M:FlexCel.Render.FlexCelPdfExport.EndExport"/>.
            </remarks>
            <param name="pdfStream">Stream where the result will be written.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.Export(System.String)">
            <summary>
            Exports the active sheet of the the associated xls workbook to a file.
            </summary>
            <remarks>
            This method is a shortcut for calling <see cref="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)"/>/ <see cref="M:FlexCel.Render.FlexCelPdfExport.ExportSheet"/>/<see cref="M:FlexCel.Render.FlexCelPdfExport.EndExport"/>.
            </remarks>
            <param name="fileName">File to export.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)">
            <summary>
            Initializes the PDF exporting to a new file. After calling this method
            you can call <see cref="M:FlexCel.Render.FlexCelPdfExport.ExportSheet"/> to export different xls files to the same pdf.
            You should always end the document with a call to <see cref="M:FlexCel.Render.FlexCelPdfExport.EndExport"/>
            </summary>
            <param name="pdfStream">Stream that will contain the new pdf file.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.EndExport">
            <summary>
            Writes the trailer information on a PDF file. Always call this method after calling <see cref="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)"/>
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.CalcPrintArea">
             <summary>
             Calculates the actual spreadsheet range that will be printed. This is given by:
             1)If you specified non zero values on PrintRange, this will be used.
             2)If any value in PrintRange is zero and there is a Print Area defined on the
             spreadsheet, the Print Area will be used.
             3)If there is no PrintRange and no Print Area defined, the visible cells on the
             sheet will be printed.
             </summary>
            <returns>The area that will be exported.</returns>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.TotalPagesInSheet">
            <summary>
            Returns the number of pages that the active sheet will use when exported to pdf.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ExportSheet">
            <summary>
            Exports the activesheet on the current XlsFile.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ExportSheet(System.Int32,System.Int32)">
            <summary>
            Exports the active sheet on the current XlsFile. You can define which is the first page to print and the global count of pages, so the 
            page numbers on headers and footers of the excel file correspond with the actual pages on the pdf.
            </summary>
            <param name="startPage">Fist page that the headers and footers on the xls file will show. If you are exporting only one sheet to the pdf file,
            this can be 1. If you are exporting more than one sheet to the same pdf file, you will want to set StartPage to the actual page on the pdf.</param>
            <param name="totalPages">The total number of pages to display on Excel headers and footers. If you are exporting only one sheet to the pdf file, set it to -1, and it will be calculated automatically. If not, please suply here the total number of pages the file will have so FlexCel can show footers like "page 1 of 50"</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.ExportAllVisibleSheets(System.Boolean,System.String)">
            <summary>
            This method will export all the visible sheets on an xls file to pdf.
            Different than calling ExportSheet for each sheet, this method can keep the page number growing on each sheet, without resetting it.
            </summary>
            <param name="bookmarkName">If not null, each sheet will be added as an entry on the Bookmarks in the pdf file, under the name specified here.
            If you want the Bookmark window to be visible when you open the pdf file, set <see cref="P:FlexCel.Pdf.PdfWriter.PageLayout"/> = <see cref="T:FlexCel.Pdf.TPageLayout"/> 
            Also, use the <see cref="E:FlexCel.Render.FlexCelPdfExport.GetBookmarkInformation"/> event to further customize what goes in each of the entries.
            </param>
            <param name="resetPageNumberOnEachSheet">If true, each new sheet will reset the page number shown on Excel headers and footers.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPdfExport.Sign(FlexCel.Pdf.TPdfSignature)">
            <summary>
            Signs the pdf documents with the specified <see cref="T:FlexCel.Pdf.TPdfSignature"/> or <see cref="T:FlexCel.Pdf.TPdfVisibleSignature"/>.
            <b>Note:</b> This method must be called <b>before</b> calling <see cref="M:FlexCel.Render.FlexCelPdfExport.BeginExport(System.IO.Stream)"/>
            </summary>
            <param name="aSignature">Signature used for signing. Set it to null to stop signing the next documents.</param>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Canceled">
            <summary>
            If true the export has been canceled with <see cref="M:FlexCel.Render.FlexCelPdfExport.Cancel"/> method.
            You can't set this variable to false, and setting it true is the same as calling <see cref="M:FlexCel.Render.FlexCelPdfExport.Cancel"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Progress">
            <summary>
            Progress of the export. This variable must be accessed from other thread.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Workbook">
            <summary>
            The ExcelFile to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.HidePrintObjects">
            <summary>
            Select which kind of objects should not be printed or exported to pdf.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Compress">
            <summary>
            When true, the pdf file will be compressed.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Kerning">
            <summary>
            By default, pdf does not do any kerning with the fonts. This is, on the string "AVANT", it won't
            compensate the spaces between "A" and "V". (they should be smaller) 
            If you turn this property on, FlexCel will calculate the kerning and add it to the generated file.
            The result file will be a little bigger because of the kerning info on all strings, but it will also
            look a little better.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.Properties">
            <summary>
            Pdf file properties.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PrintRangeLeft">
            <summary>
            First column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PrintRangeTop">
            <summary>
            First row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated. 
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PrintRangeRight">
            <summary>
            Last column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PrintRangeBottom">
            <summary>
            Last row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PageSize">
            <summary>
            Pdf page size. Set it to null to use the paper size on the xls file.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.AllowOverwritingFiles">
            <summary>
            Determines if FlexCel will automatically delete existing pdf files or not.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.FontEmbed">
            <summary>
            Determines what fonts will be embedded on the generated pdf. Note that when using UNICODE, fonts will be embedded anyway, no matter what this setting is.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.FontSubset">
            <summary>
            Determines if the full font will be embedded or only the characters used, when embedding fonts.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.FontMapping">
            <summary>
            Determines how fonts will be replaced on the generated pdf. Pdf comes with 4 standard font families,
            Serif, Sans-Serif, Monospace and Symbol. You can use for example the standard Helvetica instead of Arial and do not worry about embedding the font.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.FallbackFonts">
            <summary>
            A semicolon (;) separated list of font names to try when a character is not found in the used font.<br/>
            When a character is not found in a font, it will display as an empty square by default. By setting this
            property, FlexCel will try to find a font that supports this character in this list, and if found, use that font
            to render the character.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.PageLayout">
            <summary>
            Sets the default page layout when opening the document.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.CurrentPage">
            <summary>
            Returns the next page that we are going to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPdfExport.CurrentPageInSheet">
            <summary>
            Returns the next page we are going to print, on the current sheet.
            When not printing more than one sheet, it is equivalent to <see cref="P:FlexCel.Render.FlexCelPdfExport.CurrentPage"/>
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.BeforeNewPage">
            <summary>
            Fires before each new page is generated on the pdf.
            You can use this event to change the pagesize for the new sheet.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.BeforeGeneratePage">
            <summary>
            Fires after each new page is generated on the pdf, but before any content is written to the page. (The page is blank)
            You can use this event to add a watermark or a background image.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.AfterGeneratePage">
            <summary>
            Fires after each new page is generated on the pdf, and after all content is written to the page. (The page is written)
            You can use this event to add some text or images on top of the page contents.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.GetFontData">
            <summary>
            Use this event if you want to provide your own font information for embedding. 
            Note that if you don't assign this event, the default method will be used, and this 
            will try to find the font on the Fonts folder. To change the font folder, use <see cref="E:FlexCel.Render.FlexCelPdfExport.GetFontFolder"/> event
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.GetFontFolder">
            <summary>
            Use this event if you want to provide your own font information for embedding. 
            Normally FlexCel will search for fonts on [System]\Fonts folder. If your fonts are in 
            other location, you can tell FlexCel where they are here. If you prefer just to give FlexCel
            the full data on the font, you can use <see cref="E:FlexCel.Render.FlexCelPdfExport.GetFontData"/> event instead.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.OnFontEmbed">
            <summary>
            Use this event if you want to manually specify which fonts to embed into the pdf document.
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelPdfExport.GetBookmarkInformation">
            <summary>
            Use this event to customize what goes inside the bookmarks when exporting multiple sheets of an xls file.
            </summary>
        </member>
        <member name="T:FlexCel.Render.ArabicShaping">
            <summary> Shape Arabic text on a character basis.
            
            <p>ArabicShaping performs basic operations for "shaping" Arabic text. It is most
            useful for use with legacy data formats and legacy display technology
            (simple terminals). All operations are performed on Unicode characters.</p>
            
            <p>Text-based shaping means that some character code points in the text are
            replaced by others depending on the context. It transforms one kind of text
            into another. In comparison, modern displays for Arabic text select
            appropriate, context-dependent font glyphs for each text element, which means
            that they transform text into a glyph vector.</p>
            
            <p>Text transformations are necessary when modern display technology is not
            available or when text needs to be transformed to or from legacy formats that
            use "shaped" characters. Since the Arabic script is cursive, connecting
            adjacent letters to each other, computers select images for each letter based
            on the surrounding letters. This usually results in four images per Arabic
            letter: initial, middle, final, and isolated forms. In Unicode, on the other
            hand, letters are normally stored abstract, and a display system is expected
            to select the necessary glyphs. (This makes searching and other text
            processing easier because the same letter has only one code.) It is possible
            to mimic this with text transformations because there are characters in
            Unicode that are rendered as letters with a specific shape
            (or cursive connectivity). They were included for interoperability with
            legacy systems and codepages, and for unsophisticated display systems.</p>
            
            <p>A second kind of text transformations is supported for Arabic digits:
            For compatibility with legacy codepages that only include European digits,
            it is possible to replace one set of digits by another, changing the
            character code points. These operations can be performed for either
            Arabic-Indic Digits (U+0660...U+0669) or Eastern (Extended) Arabic-Indic
            digits (U+06f0...U+06f9).</p>
            
            <p>Some replacements may result in more or fewer characters (code points).
            By default, this means that the destination buffer may receive text with a
            length different from the source length. Some legacy systems rely on the
            length of the text to be constant. They expect extra spaces to be added
            or consumed either next to the affected character or at the end of the
            text.</p>
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LENGTH_GROW_SHRINK">
            <summary> Memory option: allow the result to have a different length than the source.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LENGTH_FIXED_SPACES_NEAR">
            <summary> Memory option: the result must have the same length as the source.
            If more room is necessary, then try to consume spaces next to modified characters.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LENGTH_FIXED_SPACES_AT_END">
            <summary> Memory option: the result must have the same length as the source.
            If more room is necessary, then try to consume spaces at the end of the text.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LENGTH_FIXED_SPACES_AT_BEGINNING">
            <summary> Memory option: the result must have the same length as the source.
            If more room is necessary, then try to consume spaces at the beginning of the text.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LENGTH_MASK">
            <summary> Bit mask for memory options. 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.TEXT_DIRECTION_LOGICAL">
            <summary> Direction indicator: the source is in logical (keyboard) order. 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.TEXT_DIRECTION_VISUAL_LTR">
            <summary> Direction indicator: the source is in visual (display) order, that is,
            the leftmost displayed character is stored first.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.TEXT_DIRECTION_MASK">
            <summary> Bit mask for direction indicators. 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LETTERS_NOOP">
            <summary> Letter shaping option: do not perform letter shaping. 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LETTERS_SHAPE">
            <summary> Letter shaping option: replace normative letter characters in the U+0600 (Arabic) block,
            by shaped ones in the U+FE70 (Presentation Forms B) block. Performs Lam-Alef ligature
            substitution.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LETTERS_UNSHAPE">
            <summary> Letter shaping option: replace shaped letter characters in the U+FE70 (Presentation Forms B) block
            by normative ones in the U+0600 (Arabic) block.  Converts Lam-Alef ligatures to pairs of Lam and
            Alef characters, consuming spaces if required.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LETTERS_SHAPE_TASHKEEL_ISOLATED">
            <summary> Letter shaping option: replace normative letter characters in the U+0600 (Arabic) block,
            except for the TASHKEEL characters at U+064B...U+0652, by shaped ones in the U+Fe70
            (Presentation Forms B) block.  The TASHKEEL characters will always be converted to
            the isolated forms rather than to their correct shape.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.LETTERS_MASK">
            <summary> Bit mask for letter shaping options. 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGITS_NOOP">
            <summary> Digit shaping option: do not perform digit shaping. 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGITS_EN2AN">
            <summary> Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGITS_AN2EN">
            <summary> Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGITS_EN2AN_INIT_LR">
            <summary> Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC). 
            The initial state at the start of the text is assumed to be not an Arabic,
            letter, so European digits at the start of the text will not change.
            Compare to DIGITS_ALEN2AN_INIT_AL.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGITS_EN2AN_INIT_AL">
            <summary> Digit shaping option:
            Replace European digits (U+0030...U+0039) by Arabic-Indic digits
            if the most recent strongly directional character
            is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC). 
            The initial state at the start of the text is assumed to be an Arabic,
            letter, so European digits at the start of the text will change.
            Compare to DIGITS_ALEN2AN_INT_LR.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGITS_MASK">
            <summary> Bit mask for digit shaping options. 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGIT_TYPE_AN">
            <summary> Digit type option: Use Arabic-Indic digits (U+0660...U+0669). 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGIT_TYPE_AN_EXTENDED">
            <summary> Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9). 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.DIGIT_TYPE_MASK">
            <summary> Bit mask for digit type options. 
            @stable ICU 2.0
            </summary>
        </member>
        <member name="F:FlexCel.Render.ArabicShaping.IRRELEVANT">
            CLOVER:ON
        </member>
        <member name="M:FlexCel.Render.ArabicShaping.shape(System.Char[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary> Convert a range of text in the source array, putting the result 
            into a range of text in the destination array, and return the number
            of characters written.
            
            </summary>
            <param name="source">An array containing the input text
            </param>
            <param name="sourceStart">The start of the range of text to convert
            </param>
            <param name="sourceLength">The length of the range of text to convert
            </param>
            <param name="dest">The destination array that will receive the result.
            It may be <code>NULL</code> only if  <code>destSize</code> is 0.  
            </param>
            <param name="destStart">The start of the range of the destination buffer to use.
            </param>
            <param name="destSize">The size (capacity) of the destination buffer.
            If <code>destSize</code> is 0, then no output is produced,
            but the necessary buffer size is returned ("preflighting").  This
            does not validate the text against the options, for example, 
            if letters are being unshaped, and spaces are being consumed
            following lamalef, this will not detect a lamalef without a 
            corresponding space.  An error will be thrown when the actual
            conversion is attempted.
            </param>
            <returns> The number of chars written to the destination buffer.
            If an error occurs, then no output was written, or it may be
            incomplete.
            @throws FlexCelException if the text cannot be converted according to the options.
            @stable ICU 2.0
            </returns>
        </member>
        <member name="M:FlexCel.Render.ArabicShaping.shape(System.Char[],System.Int32,System.Int32)">
            <summary> Convert a range of text in place.  This may only be used if the Length option
            does not grow or shrink the text.
            
            </summary>
            <param name="source">An array containing the input text
            </param>
            <param name="start">The start of the range of text to convert
            </param>
            <param name="length">The length of the range of text to convert
            @throws FlexCelException if the text cannot be converted according to the options.
            @stable ICU 2.0
            </param>
        </member>
        <member name="M:FlexCel.Render.ArabicShaping.shape(System.String)">
            <summary> Convert a string, returning the new string.
            
            </summary>
            <param name="text">the string to convert
            </param>
            <returns> the converted string
            @throws FlexCelException if the string cannot be converted according to the options.
            @stable ICU 2.0
            </returns>
        </member>
        <member name="M:FlexCel.Render.ArabicShaping.#ctor(System.Int32)">
            <summary> Construct ArabicShaping using the options flags.
            The flags are as follows:<br/>
            'LENGTH' flags control whether the text can change size, and if not,
            how to maintain the size of the text when LamAlef ligatures are 
            formed or broken.<br/>
            'TEXT_DIRECTION' flags control whether the text is read and written
            in visual order or in logical order.<br/>
            'LETTERS_SHAPE' flags control whether conversion is to or from
            presentation forms.<br/>
            'DIGITS' flags control whether digits are shaped, and whether from
            European to Arabic-Indic or vice-versa.<br/>
            'DIGIT_TYPE' flags control whether standard or extended Arabic-Indic
            digits are used when performing digit conversion.
            @stable ICU 2.0
            </summary>
        </member>
        <member name="M:FlexCel.Render.ArabicShaping.Equals(System.Object)">
            <summary> @stable ICU 2.0</summary>
        </member>
        <member name="M:FlexCel.Render.ArabicShaping.GetHashCode">
             <summary> @stable ICU 2.0</summary>
            CLOVER:OFF
        </member>
        <member name="M:FlexCel.Render.ArabicShaping.ToString">
            <summary> @stable ICU 2.0</summary>
        </member>
        <member name="T:FlexCel.Pdf.TUsedCharList">
            <summary>
            A list holding the characters used on an Unicode True Type font.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TGlyphMap">
            <summary>
            Maps a new glyph to an old one.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TBookmarkStyle">
            <summary>
            This enum indicates the text style for a bookmark entry.
            You can combine the entries by or'ing them together.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TBookmarkStyle.None">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TBookmarkStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TBookmarkStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TBookmark">
            <summary>
            An entry on the Bookmark list for a PDF file.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.#ctor(System.String,FlexCel.Pdf.TPdfDestination,System.Boolean)">
            <summary>
            Creates a new TBookmark instance.
            </summary>
            <param name="aTitle">Title of the bookmark item.</param>
            <param name="aDestination">Page where the bookmark points to.</param>
            <param name="aChildrenCollapsed">If true all children from this bookmark will be collapsed.</param>
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.#ctor(System.String,FlexCel.Pdf.TPdfDestination,System.Boolean,System.Drawing.Color,FlexCel.Pdf.TBookmarkStyle)">
            <summary>
            Creates a new TBookmark instance.
            </summary>
            <param name="aTitle">Title of the bookmark item.</param>
            <param name="aDestination">Page where the bookmark points to.</param>
            <param name="aChildrenCollapsed">If true all children from this bookmark will be collapsed.</param>
            <param name="aTextColor">Text color for the bookmark entry.</param>
            <param name="aTextStyle">Text style for the bookmark entry.</param>
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.AddChild(FlexCel.Pdf.TBookmark)">
            <summary>
            Adds a new child of this bookmark on the outline.
            </summary>
            <param name="child">Child bookmark to add.</param>
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.Child(System.Int32)">
            <summary>
            Returns one child of the current bookmark.
            </summary>
            <param name="i">Number of child to get.</param>
            <returns>i-th Child of the bookmark.</returns>
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.AllOpenCount">
            <summary>
            Returns a list of all open children of this bookmark. Mostly for internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Pdf.TBookmark.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.Title">
            <summary>
            Title of the bookmark item.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.Destination">
            <summary>
            Page where the bookmark points to.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.ChildrenCollapsed">
            <summary>
            If true, all children of this bookmark will be collapsed.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.TextColor">
            <summary>
            Text color for the bookmark entry.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.TextStyle">
            <summary>
            Text style for the bookmark entry.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TBookmark.ChildCount">
            <summary>
            Returns the number of children of this bookmark.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TZoomOptions">
            <summary>
            Zoom options for a PDF destination.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.None">
            <summary>
            None, leave the zoom unchanged.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.Fit">
            <summary>
            Display the page with its contents magnified just enough
            to fit the entire page within the window both horizontally and vertically. If
            the required horizontal and vertical magnification factors are different, use
            the smaller of the two, centering the page within the window in the other
            dimension.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.FitH">
            <summary>
            Display the page with the vertical coordinate top positioned
            at the top edge of the window and the contents of the page magnified
            just enough to fit the entire width of the page within the window.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TZoomOptions.FitV">
            <summary>
            Display the page with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified
            just enough to fit the entire height of the page within the window.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfDestination">
            <summary>
            Represents a destination inside a PDF document.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfDestination.#ctor(System.Int32)">
            <summary>
            Creates a new TPdfDestination instance.
            </summary>
            <param name="aPageNumber">Page where the destination points to. (1 based)</param>
        </member>
        <member name="M:FlexCel.Pdf.TPdfDestination.#ctor(System.Int32,FlexCel.Pdf.TZoomOptions)">
            <summary>
            Creates a new TPdfDestination instance.
            </summary>
            <param name="aPageNumber">Page where the destination points to. (1 based)</param>
            <param name="aZoomOptions">Zoom options for this destination.</param>
        </member>
        <member name="M:FlexCel.Pdf.TPdfDestination.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Pdf.TPdfDestination.PageNumber">
            <summary>
            Page where the destination will point to. (1 based)
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfDestination.ZoomOptions">
            <summary>
            Zoom options for this destination.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TBookmarkList">
            <summary>
            A list of bookmarks.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.#ctor">
            <summary>
            Creates a new instance of TBookmarkList.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.Add(FlexCel.Pdf.TBookmark)">
            <summary>
            Adds a new bookmark to the list.
            </summary>
            <param name="bookmark"></param>
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.Clear">
            <summary>
            Removes all items on the list.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.RemoveAt(System.Int32)">
            <summary>
            Removes item at position index on the list.
            </summary>
            <param name="index">Position where to remove the bookmark.</param>
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.AllOpenCount">
            <summary>
            Returns the count of all open bookmarks in all levels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.GetEnumerator">
            <summary>
            An enumerator for this collection.
            </summary>
            <returns>An enumerator for this collection.</returns>
        </member>
        <member name="M:FlexCel.Pdf.TBookmarkList.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Pdf.TBookmarkList.Item(System.Int32)">
            <summary>
            Returns item at position index on the list.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TBookmarkList.Count">
            <summary>
            Number of items on the list.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TWorkbookInfo.ShallowClone">
            <summary>
            Will not do a deep copy, so the debugstack will be the same.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Core.TAddress">
            <summary>
            Used to summarize a range of cells.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TParsedTokenListBuilder">
            <summary>
            Class used to create a TParsedTokenList. It uses an ArrayList internally, so it is not well suited to be stored. 
            (An arraylist can have multiple not used bytes in it)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TParsedTokenList">
            <summary>
            This could descend from Stack, but an expression can be evaluated multiple times, and
            with the current stack implementation, each time we evaluate it we have to call pop(), so the stack is destroyed.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TArgType">
            <summary>
            Argument types allowed on functions
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBaseParsedToken">
            <summary>
            This class will be the base for all parsed tokens. As many tokens can be created on a singleton pattern
            (only one instance on app), the constructor must be without parameters, and there can be no class variables.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseArithOpToken.ProcessArray(System.Object[0:,0:],System.Object[0:,0:])">
            <summary>
            a1 and are guaranteed not to be null.
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TStatDistToken.CalcCumulativeNormal(System.Double)">
            <summary>
            This method is ported from dcdflib, based on CODY's algorithm.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TStatDistToken.stvaln(System.Double)">
            <summary>
            provides starting values for the inverse of the normal distribution. ported from dcdflib
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TStatDistToken.CalcZ(System.Double)">
            <summary>
            Inverse of Cumulative Normal distribution. ported from dcdflib
            </summary>
            <param name="P"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TPoissonToken.fx2(System.Int32,System.Double,System.Boolean)">
            <summary>
            This is to consider numerical unstability when x is too big.
            see http://support.microsoft.com/default.aspx?scid=kb;en-us;828130
            </summary>
            <param name="x"></param>
            <param name="Mean"></param>
            <param name="Cumulative"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TBinomDistToken.fx2(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            This is to consider numerical unstability when x is too big.
            see http://support.microsoft.com/default.aspx?scid=kb;en-us;827459
            </summary>
            <param name="x"></param>
            <param name="Cumulative"></param>
            <param name="n"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.THypGeomDistToken.fx2(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is to consider numerical unstability when x is too big.
            see http://support.microsoft.com/default.aspx?kbid=828515&amp;product=xl2003
            </summary>
            <param name="x"></param>
            <param name="MM"></param>
            <param name="NN"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TGammaDistToken.IncGamma(System.Double,System.Double)">
            <summary>
            All Gamma code here is ported from Cephes Math Library
            </summary>
            <param name="a"></param>
            <param name="x"></param>
        </member>
        <member name="M:FlexCel.Core.TGammaInvToken.IncGammaInv(System.Double,System.Double,System.Double)">
            <summary>
            Note that the original function returned the *Complemented* result. For small p, 1-p = 0, and this function was not accurate.
            Here we have other method, that uses Newton when near and just halves the interval when far. 
            As the function is monotonous, we do not have convergence issues.
            </summary>
            <param name="a"></param>
            <param name="y0"></param>
            <param name="Beta"></param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Core.TImplementedFunction">
            <summary>
            Data of an implemented formula function.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TImplementedFunction.#ctor(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new TImplementedFunction with supplied values.
            </summary>
            <param name="aId">Formula ID</param>
            <param name="aFunctionName">Formula Name</param>
            <param name="aMinArgCount">Minimum argument count for the function.</param>
            <param name="aMaxArgCount">Maximum argument count for the function.</param>
        </member>
        <member name="P:FlexCel.Core.TImplementedFunction.Id">
            <summary>
            Formula ID. (Excel specific)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TImplementedFunction.FunctionName">
            <summary>
            Formula Name.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TImplementedFunction.MinArgCount">
            <summary>
            Minimum argument count for the function.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TImplementedFunction.MaxArgCount">
            <summary>
            Maximum argument count for the function.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TImplementedFunctionList">
            <summary>
            Holds a list of currently implemented formula functions on FlexCel.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TImplementedFunctionList.#ctor">
            <summary>
            Creates and initializes a list with all implemented functions.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TImplementedFunctionList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a serialized object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPaletteRecord">
            <summary>
            An Excel color Palette.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.THPageBreakRecord">
            <summary>
            Horizontal Page break.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TVPageBreakRecord">
            <summary>
            Vertical Page break.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPageBreakList">
            <summary>
            A base class for storing page breaks.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.THPageBreakList">
            <summary>
            List of Horizontal Page breaks.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TVPageBreakList">
            <summary>
            List of Vertical Page breaks.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEvaluateRPN">
            <summary>
            This static class takes an RPN formula and converts it to a text representation.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEvaluateRPN.GetString(System.Boolean,System.Byte[],System.Int32,System.Int64@)">
            <summary>
            Returns an string token
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSearchAndReplace">
            <summary>
            A class to perform search and /or replace on a sheet.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSearchOrReplace">
            <summary>
            An abstract class that will be used by specialized search or replace actions.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheetList">
            <summary>
            A list of sheets.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWorkbook">
            <summary>
            This class encapsulates the complete Excel workbook. It is the main class on XlsAdapter, and all Requests come through it.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TWorkbook.FixBoundSheetsOffset(FlexCel.XlsAdapter.TEncryptionData)">
            <summary>
            Fixes the offest for the sheets on the global section. If offsets are wrong, Excel will crash, even when flexcel
            will be able to read the file ok. (FlexCel does not use sheet offsets).
            </summary>
        </member>
        <member name="T:FlexCel.Render.FlexCelPrintDocument">
            <summary>
            A PrintDocument descendant that can be used to print and preview an Excel document.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.#ctor">
            <summary>
            Creates a new FlexCelPrintDocument instance.
            </summary>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.#ctor(FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new FlexCelPrintDocument and assigns it to an ExcelFile.
            </summary>
            <param name="aWorkbook">ExcelFile containing the data this PrintDocument will print.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.GetPagesToPrint(System.Drawing.Printing.PrintPageEventArgs,FlexCel.Render.IFlxGraphics,System.Drawing.RectangleF)">
            <summary>
            Returns the number of pages to print on the whole workbook or sheet (depending on the <see cref="P:FlexCel.Render.FlexCelPrintDocument.AllVisibleSheets"/> value).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.OnGetPrinterHardMargins(FlexCel.Render.PrintHardMarginsEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelPrintDocument.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Raises the BeginPrint event. It is called after the Print method is called and before the first page of the document prints.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs"/> that contains the event data.</param>
            <remarks>
            This method is overridden to print an Excel document. 
            Before doing its own initialization, it will call <see cref="M:System.Drawing.Printing.PrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)"/> so you can do your own.
            </remarks>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Raises the EndPrint event. It is called after the Print method has finished.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs"/> that contains the event data.</param>
            <remarks>
            This method is overridden to print an Excel document. 
            </remarks>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.OnBeforePrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Replace this event when creating a custom descendant of FlexCelPrintDocument.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Overrides the standard method to change landscape or portrait settings when <see cref="P:FlexCel.Render.FlexCelPrintDocument.AllVisibleSheets"></see> is true. You can override this method 
            on a descendant class to change the behavior./&gt;
            </summary>
            <param name="e">Arguments of the event.</param>
        </member>
        <member name="M:FlexCel.Render.FlexCelPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Raises the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage"/> event. It is called before a page prints.
            </summary>
            <remarks>
            This method is overridden to print an Excel document. 
            After doing its own work, it will call <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage"/> so you can draw your own thing over it.
            </remarks>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.Workbook">
            <summary>
            The ExcelFile to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.HidePrintObjects">
            <summary>
            Select which kind of objects should not be printed or exported to pdf.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.AntiAliasedText">
            <summary>
            When true, the text will be antialiased. Depending on the device display might look better, but it consumes more processor time.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.PrintRangeLeft">
            <summary>
            First column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.PrintRangeTop">
            <summary>
            First row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated. 
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.PrintRangeRight">
            <summary>
            Last column to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.PrintRangeBottom">
            <summary>
            Last row to print (1 based). if this or any other PrintRange property is 0, the range will be automatically calculated.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.AllVisibleSheets">
            <summary>
            If true, All visible sheets on the workbook will be printed. See <see cref="P:FlexCel.Render.FlexCelPrintDocument.ResetPageNumberOnEachSheet"/> for behavior of the page number when printing multiple sheets.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.ResetPageNumberOnEachSheet">
            <summary>
            This property only makes sense when <see cref="P:FlexCel.Render.FlexCelPrintDocument.AllVisibleSheets"/> is true. On that case, if this property is true each sheet of
            the workbook will have the page number reset. For example if the xls file has 2 sheets and each has 3 pages: 
            When ResetPageNumberOnEachSheet = true then footers will look like "Page 1 of 3". If false, they will look like "Page 5 of 6"
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.CurrentPage">
            <summary>
            Returns the next page that we are going to print.
            </summary>
        </member>
        <member name="P:FlexCel.Render.FlexCelPrintDocument.CurrentPageInSheet">
            <summary>
            Returns the next page we are going to print, on the current sheet.
            When not printing more than one sheet, it is equivalent to <see cref="P:FlexCel.Render.FlexCelPrintDocument.CurrentPage"/>
            </summary>
        </member>
        <member name="E:FlexCel.Render.FlexCelPrintDocument.GetPrinterHardMargins">
            <summary>
            On .NET there is no way to get the actual physical margins of a printer without a p/invoke.
            As FlexCel doesn't contain p/invokes (in order to be portable to any platform), it will try to guess the best value
            for them by averaging the printer visible clip area. If you are not getting good results, you can
            let FlexCel know the real printer margins on this event. Normally, you would call GetDeviceCaps for this.
            </summary>
            <remarks>
            See the printpreview demo to see how this event can be used.
            </remarks>
        </member>
        <member name="E:FlexCel.Render.FlexCelPrintDocument.BeforePrintPage">
            <summary>
            Fires before printing each sheet, so you can print and set up your own stuff before FlexCel renders the page.
            
            </summary>
        </member>
        <member name="T:FlexCel.Render.PrintHardMarginsEventArgs">
            <summary>
            Arguments passed on <see cref="E:FlexCel.Render.FlexCelPrintDocument.GetPrinterHardMargins"/>. 
            </summary>
        </member>
        <member name="M:FlexCel.Render.PrintHardMarginsEventArgs.#ctor(System.Drawing.Graphics,System.Single,System.Single)">
            <summary>
            Creates a new Argument.
            </summary>
        </member>
        <member name="P:FlexCel.Render.PrintHardMarginsEventArgs.XMargin">
            <summary>
            The X printer physical margin in inches / 100.
            </summary>
        </member>
        <member name="P:FlexCel.Render.PrintHardMarginsEventArgs.YMargin">
            <summary>
            The Y printer physical margin in inches / 100.
            </summary>
        </member>
        <member name="P:FlexCel.Render.PrintHardMarginsEventArgs.Graphics">
            <summary>
            Graphics context you can use to call GetHdc()
            </summary>
        </member>
        <member name="T:FlexCel.Render.PrintHardMarginsEventHandler">
            <summary>
            Delegate for getting the printer physical margins.
            </summary>
        </member>
        <member name="T:FlexCel.Render.DrawShape">
            <summary>
            Draws different types of autoshapes.
            </summary>
        </member>
        <member name="M:FlexCel.Render.DrawShape.ChangeFocus(System.Drawing.Drawing2D.ColorBlend,System.Single)">
            <summary>
            Sadly, we cannot change the focus on ColorBlended gradients with SetSigmaShape.
            </summary>
            <param name="Orig"></param>
            <param name="FillFocus"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Render.DrawShape.AddCorner(FlexCel.Core.TPointF[],System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Draws a quarter circle using splines.
            </summary>
            <param name="Points">Array to fill.</param>
            <param name="i">Position on points where we will fill.</param>
            <param name="rx">x radius.</param>
            <param name="ry">y radius.</param>
            <param name="Quad">0 is Top-Left, from there we move clockwise.</param>
        </member>
        <member name="T:FlexCel.Pdf.TPdfStream">
            <summary>
            A wrapper for a normal stream that could compress or encrypt the data.
            </summary>
        </member>
        <member name="T:FlexCel.Core.MD5">
            <summary>
            Summary description for MD5.
            </summary>
        </member>
        <member name="M:FlexCel.Core.MD5.ROTATE_LEFT(System.UInt32,System.Byte)">
            <summary>
            rotates x left n bits.
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.MD5.FF(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.UInt32)">
            FF, GG, HH, and II transformations 
            for rounds 1, 2, 3, and 4.
            Rotation is separate from addition to prevent recomputation.
        </member>
        <member name="F:FlexCel.Core.MD5.state">
            <summary>
            state (ABCD)
            </summary>
        </member>
        <member name="F:FlexCel.Core.MD5.count">
            <summary>
            number of bits, modulo 2^64 (lsb first)
            </summary>
        </member>
        <member name="F:FlexCel.Core.MD5.buffer">
            <summary>
            input buffer
            </summary>
        </member>
        <member name="M:FlexCel.Core.MD5.Initialize">
            <summary>
            MD5 initialization. Begins an MD5 operation, writing a new context.
            </summary>
            <remarks>
            The RFC named it "MD5Init"
            This code has been modified so it is not virtual. Adrian.
            </remarks>
        </member>
        <member name="M:FlexCel.Core.MD5.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            MD5 block update operation. Continues an MD5 message-digest
            operation, processing another message block, and updating the
            context.
            </summary>
            <param name="input"></param>
            <param name="offset"></param>
            <param name="acount"></param>
            <remarks>The RFC Named it MD5Update</remarks>
        </member>
        <member name="M:FlexCel.Core.MD5.HashFinal">
            <summary>
            MD5 finalization. Ends an MD5 message-digest operation, writing the
            the message digest and zeroizing the context.
            </summary>
            <returns>message digest</returns>
            <remarks>The RFC named it MD5Final</remarks>
        </member>
        <member name="M:FlexCel.Core.MD5.HashFinalEncryption">
            <summary>
            The encryption module doesn't use the same hashfinal as standard md5
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.MD5.ComputeHashEncryption(System.Byte[])">
            <summary>
            The encryption module doesn't use the same hashfinal as standard md5
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.MD5.Transform(System.Byte[],System.Int32)">
            <summary>
            MD5 basic transformation. Transforms state based on 64 bytes block.
            </summary>
            <param name="block"></param>
            <param name="offset"></param>
        </member>
        <member name="M:FlexCel.Core.MD5.Encode(System.Byte[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Encodes input (uint) into output (byte). Assumes len is
             multiple of 4.
            </summary>
            <param name="output"></param>
            <param name="outputOffset"></param>
            <param name="input"></param>
            <param name="inputOffset"></param>
            <param name="count"></param>
        </member>
        <member name="M:FlexCel.Core.MD5.Decode(System.UInt32[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes input (byte) into output (uint). Assumes len is
            a multiple of 4.
            </summary>
            <param name="output"></param>
            <param name="outputOffset"></param>
            <param name="input"></param>
            <param name="inputOffset"></param>
            <param name="count"></param>
        </member>
        <member name="M:FlexCel.Core.MD5.MD5_memcpy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            Note: Replace "for loop" with standard memcpy if possible.
        </member>
        <member name="T:FlexCel.XlsAdapter.TXFDat">
            <summary>
            A map from a byte array to a struct.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TXFRecord">
            <summary>
            XF format record
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TXFRecord.#ctor(FlexCel.Core.TFlxFormat,System.Boolean,FlexCel.XlsAdapter.TWorkbookGlobals)">
            <summary>
            CreateFromFormat.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TXFRecordList">
            <summary>
            A list with XF Records.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TFontRecord.Reuse">
            <summary>
            Font records used in chartfbi should not be used for anything else.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TFontRecord.#ctor(FlexCel.Core.TFlxFont,System.Boolean)">
            <summary>
            CreateFromFlxFont
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TFormatRecord.#ctor(System.String,System.Int32)">
            <summary>
            CreateFromData
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TFormatRecordList.#ctor">
            <summary>
            Use Create() to create an instance. This way we avoid calling virtual methods on a constructor.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TStrLenLength">
            <summary>
            An Excel unicode string.
            </summary>
            
        </member>
        <member name="T:FlexCel.XlsAdapter.TSxViewRecord">
            <summary>
            View definition.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.THLinkRecord">
            <summary>
            a Biff8 HyperLink.  (Hyperlinks might be obtained with formulas too, but those are a different thing)
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.THLinkList">
            <summary>
            A list of HLinks, Records are THLinkRecord
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherRecordHeader">
            <summary>
            An Escher Record Header, that is different from an Excel Record Header
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherRecord.Destroy">
            <summary>
            We don't have deterministic destructors here. So this works as a dispose call.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherDataRecord">
            <summary>
            An escher record containing data and not other Escher records
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherContainerRecord">
            <summary>
            Record containing other records. An escher record is a DataRecord or a ContainerRecord 
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherContainerRecord.FindRec(System.Type)">
            <summary>
             FindRec goes only one level down, it is not recursive.
            </summary>
            <param name="RecClass"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherContainerRecord.Navigate(System.String)">
            <summary>
            Navigates to a child object.
            </summary>
            <param name="ObjectPath"></param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherSpContainerRecord">
            <summary>
            SP Record.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherSpgrContainerRecord">
            <summary>
            Spgr Record.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherClientDataRecord">
            <summary>
            Client Data Record. It holds an OBJ inside
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherClientDataRecord.#ctor(FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            CreateFromData
            </summary>
            <param name="aDwgGroupCache"></param>
            <param name="aDwgCache"></param>
            <param name="aParent"></param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherSplitMenuRecord">
            <summary>
            Split Menu Record.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherSplitMenuRecord.#ctor(FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            Create from data
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherSpgrRecord">
            <summary>
            Spgr Record. Has the relative bounds on a grouped shape
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherHeaderAnchorRecord.#ctor(FlexCel.Core.THeaderOrFooterAnchor,FlexCel.XlsAdapter.TEscherRecordHeader,FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            Create from Data
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherImageAnchorRecord">
            <summary>
            Client Anchor Record for an image.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherImageAnchorRecord.CreateFromData(FlexCel.Core.TClientAnchor,FlexCel.XlsAdapter.TEscherRecordHeader,FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord,FlexCel.XlsAdapter.TWorkSheet)">
            <summary>
            Create from Data
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherBStoreRecord">
            <summary>
            BStore Record.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherBSERecord">
            <summary>
            BSE Record. It holds an individual image.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherBSERecord.CompareRec(FlexCel.XlsAdapter.TEscherRecord)">
            <summary>
            Search by signature
            </summary>
            <param name="aRecord">Another record to compare to</param>
            <returns>-1 if this less than aRecord, 0 if equal, 1 if bigger </returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherBSERecord.SaveGraphicToStream(System.Byte[],System.IO.Stream,FlexCel.Core.TXlsImgType@)">
            <summary>
            Converts and internal Excel image to a standard format. This is mostly for internal use, but might be necessary
            when parsing shape properties.
            </summary>
            <param name="Data">Source Image Data.</param>
            <param name="DestData">Destination Stream.</param>
            <param name="aDataType">Data type of the converted image.</param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherDgRecord">
            <summary>
            DG Record.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherDgRecord.#ctor(System.Int64,System.Int32,System.Int64,FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            Create from data
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherDggRecord">
            <summary>
            DGG Record.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherDggRecord.#ctor(FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            Create from data
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherSpRecord">
            <summary>
            SP Record.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherSpRecord.#ctor(System.Int64)">
            <summary>
            Only use to create a temp object for searching! SpRecord is not valid.
            </summary>
            <param name="aShapeId"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherSpRecord.#ctor(System.Int32,System.Int64,System.Int64,FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            Create from data
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherSolverContainerRecord">
            <summary>
            Solver Container Record.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherOPTRecord">
            <summary>
            OPT Record.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherOPTRecord.#ctor(System.Int32)">
            <summary>
            Creates a new object for searching. Do not use in general, the object is invalid!
            </summary>
            <param name="aRow"></param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherOPTRecord.#ctor(System.Byte[],FlexCel.Core.TXlsImgType,System.String,System.String,FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            CreateFromDataImg
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherOPTRecord.#ctor(FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord,System.Int32)">
            <summary>
            CreateFromDataNote
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherOPTRecord.#ctor(FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            GroupCreateFromData
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherOPTRecord.CreateFromDataAutoFilter(FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            CreateFromDataAutoFilter
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TKernedString">
            <summary>
            Holds a text string and the kerning with the latest block written.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.PdfFontFactory">
            <summary>
            Holds a list of system installed fonts and their postscript names.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlxErr">
            <summary>
            Error Codes. We use this and not actual strings to make sure all are correctly spelled.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTooManySheets">
            <summary>Trying to insert more than 255 sheets.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidCellValue">
            <summary>Can't convert the object into a valid value.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNotConnected">
            <summary>
            Adapter's "Connect" Method has not been called.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRow">
            <summary>
            Trying to access to an invalid row.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidColumn">
            <summary>
            Trying to access to an invalid column.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidValue">
            <summary>
            Generic out of range error. Params for this message should be taken from FlxParam.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNotFound">
            <summary>
            Can't find a dataset for a named range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSheet">
            <summary>
            Sheet name does not exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFormulaTooLong">
            <summary>
            Formula is longer than 0xFFFF
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNotAString">
            <summary>
            When parsing a formula and expecting a string.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnterminatedString">
            <summary>
            A string missing the ending "
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnexpectedId">
            <summary>
            A formula with an invalid identifier.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnexpectedChar">
            <summary>
            A formula with an invalid character.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMissingParen">
            <summary>
            A missing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidNumberOfParams">
            <summary>
            Invalid number of parameters for the function.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnexpectedEof">
            <summary>
            Unexpected end of formula.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFormulaStart">
            <summary>
            Formula must start with "="
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFormulaInvalid">
            <summary>
            Formula is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInternal">
            <summary>
            Logical error
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFunctionNotFound">
            <summary>
            Function on the formula does not exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCircularReference">
            <summary>
            A formula refers to itself.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRef">
            <summary>
            An invalid cell reference. A valid one is "A1"
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRange">
            <summary>
            An invalid range reference. A valid one is "A1:A2"
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMissingEOT">
            <summary>
            An invalid End of tag (for example, &lt;#...&gt;&gt;)
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMissingArgs">
            <summary>
            Missing arguments for a function.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTooMuchArgs">
            <summary>
            Too much arguments on a function.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrReadAfterEOF">
            <summary>
            Reading after the end of a datatable.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrReadBeforeBOF">
            <summary>
            Reading before the beginning of a datatable.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrIntersectingRanges">
            <summary>
            2 data ranges intersect on a report.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUndefinedFunction">
            <summary>function is not defined on file FunctionNames.resx</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUndefinedId">
            <summary>Id is not defined on file xxxx</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidFormat">
            <summary>
            Invalid format on report.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrColumNotFound">
            <summary>
            Column does not exits.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrPropertyNotFound">
            <summary>
            The property does not exist.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrMemberNotFound">
            <summary>
            Dataset does not have a field.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNotInRange">
            <summary>
            Dataset is not inside any named range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidImage">
            <summary>
            Image is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrOnIncludeReport">
            <summary>
            Error in an included report.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTooManyNestedIncludes">
            <summary>
            Too many nested includes, probably one file is recursively including itself.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantFindNamedRange">
            <summary>
            Cannot find the included named range.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUnknownRangeType">
            <summary>
            Range is not __, _, I_ or II_
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNotSupportedOnTrial">
            <summary>
            This feature is not supported on non commercial version of flexcel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUndefinedUserFunction">
            <summary>
            User defined function implementation is null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNotFoundInConfig">
            <summary>
            Can't find a dataset for a configsheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNotFoundInExpression">
            <summary>
            Can't find a dataset for an expression on the sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantChangeRecalcMode">
            <summary>
            RecalcMode can only be changed when no file is open.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrWorkbookNull">
            <summary>
            Workbook can't be null on this version of the method.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCompression">
            <summary>
            Error with the compression engine.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationshipNullValues">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationship2Tables">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationshipFields">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationshipDatasetNull">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRelationship2Fields">
            <summary>
            A relationship is invalid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSql2Params">
            <summary>
            SQL function should have only 2 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSplit2Params">
            <summary>
            SPLIT function should have only 2 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSplitCount">
            <summary>
            Second parameter of a split function must be a positive integer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidTop2Params">
            <summary>
            TOP function should have only 2 parameters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidTopCount">
            <summary>
            Second parameter of a TOP function must be a positive integer.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSplitParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidUserTableParen">
            <summary>
            Missing closing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlAdapterNotFound">
            <summary>
            Adapter not found.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlAdapterNoSelect">
            <summary>
            The adapter has not SQL select command defined.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlString">
            <summary>
            SQL string contains invalid characters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDataSetNull">
            <summary>
            DataSet should not be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrAdapterNull">
            <summary>
            Adapter should not be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidFilterParen">
            <summary>
            Missing parenthesis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrOnConfigTables">
            <summary>
            Error reading config tables.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidDistinctParams">
            <summary>
            Parameters for distinct filter should not be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidSqlParams">
            <summary>
            Parameters for SQL parameters should not be null.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrSqlParameterNotFound">
            <summary>
            The parameter for a direct sql query was not found.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrEofReached">
            <summary>EofReached</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrArrayNotSquared">
            <summary>All rows on an array must have the same number of columns.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidCols">
            <summary>The columns on an array must be between 1 and 256</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRows">
            <summary>The rows on an array must be between 1 and 65536</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidErrorCode">
            <summary>Invalid error code</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrEmptyFolder">
            <summary>The folder does not contain any file of the needed type.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTiffEncoderNotFound">
            <summary>Cannot find a Tiff Encoder.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidImageFormat">
            <summary>Invalid image format.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidHtmlParam">
            <summary>Invalid parameter for html tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColParameters">
            <summary>Invalid parameter for rowheight or columnwidth tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColParameters2">
            <summary>Invalid second parameter for rowheight or columnwidth tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColParameters3">
            <summary>Invalid third parameter for rowheight or columnwidth tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColParameters4">
            <summary>Invalid fourth parameter for rowheight or columnwidth tag.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRefTag">
            <summary>Invalid parameter for ref tag, 1 parameter version.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRefTag2">
            <summary>Invalid parameter for ref tag, 2 parameter version.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRefTag3">
            <summary>Invalid parameter for ref tag, 3 parameter version.</summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidGlobalAdjustment">
            <summary>
            Invalid parameter on Autofit settings tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidGlobalAdjustmentFixed">
            <summary>
            Invalid parameter on Autofit settings tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidGlobalAutofit">
            <summary>
            Invalid adjustment on Autofit settings tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrSplitNeedsOneAndOnlyOneDetail">
            <summary>
            When using Splitted tables, the detail must directly follow the master.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrSplitNeedsOnlyOneMaster">
            <summary>
            A table cannot be assigned to 2 different splits masters.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUserTableEventNotAssigned">
            <summary>
            The template has User table tags, but there is no UserTable event assigned to the report.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportFilter">
            <summary>
            This is a virtual table, and it didn't define the methods needed to filter it.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportTag">
            <summary>
            This is a virtual table, and it didn't define the methods needed to support this tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportMasterDetail">
            <summary>
            This is a virtual table, and it didn't define the methods needed to support master detail relationships.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrTableDoesNotSupportLookup">
            <summary>
            This is a virtual table, and it didn't define the methods needed to be used as a Lookpup source.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidEncodingForMIME">
            <summary>
            The encoding con not be used to create a MIME file.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrBeginExportNotCalled">
            <summary>
            Before exporting a sheet you need to call BeginExport
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNoDuplicatedPreprocess">
            <summary>
            A preprocess tag must not be nested.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidDefinedGlobal">
            <summary>
            If the Defined tag has 2 parameters, the second must be GLOBAL or LOCAL.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidRowColDelete">
            <summary>
            Invalide parameters for delete row/col
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNeedsUnmanaged">
            <summary>
            The operation needs unamanaged permissions in order to complete.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidApplyTag">
            <summary>
            A format definition in the config sheet is not valid.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrAtCell">
            <summary>
            Error at cell n.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.CellError">
            <summary>
            Message that will be written in a cell when there is an error in a report and <see cref="P:FlexCel.Report.FlexCelReport.ErrorsInResultFile"/> is true.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidIncludeStatic">
            <summary>
            Invalid parameter for include.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidIncludeRowCol">
            <summary>
            Invalid parameter for include.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidAutoPageBreaksPercent">
            <summary>
            Invalid value in the percent of page used in an automatic page break tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidAutoPageBreaksPageScale">
            <summary>
            Invalid PageScale in automatic page break tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidImgPosParameter">
            <summary>
            Invalid parameter for a ImgPos tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidImgFitParameter">
            <summary>
            Invalid parameter for a ImgFit tag.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrDuplicatedLinkedFile">
            <summary>
            Trying to add an xls file that already exists to a Workspace collection.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidAggParameter">
            <summary>
            Aggregate must be "SUM", "AVG", "MAX" or "MIN"
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFilterMustReturnABooleanValue">
            <summary>
            A filter must return a boolean value.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFontNotFound">
            <summary>
            Font was not found in the system.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrGlyphNotFound">
            <summary>
            Font doesn't contain the character.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrUsedFallbackFont">
            <summary>
            Font is missing a character and a fallback font was used instead.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrFauxBoldOrItalic">
            <summary>
            Font doesn't have italic or bold variant.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrInvalidEmptyName">
            <summary>
            Name cannot be empty.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrNameTooLong">
            <summary>
            Name is too long.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrStyleDoesntExists">
            <summary>
            Named style doesn't exists.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrStyleAlreadyExists">
            <summary>
            Style already exists.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantRenameBuiltInStyle">
            <summary>
            Built-in styles can't be renamed.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantDeleteBuiltInStyle">
            <summary>
            Built-in styles can't be deleted.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.ErrCantAddStyleFormats">
            <summary>
            Style formats haev to be added using SetStyle method, not with addformat.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxErr.CantMixCellAndStyleFormats">
            <summary>
            You can't replace a cell format with a style format or viceversa.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlxMessage">
            <summary>
            Some custom strings.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxMessage.CustomPageSize">
            <summary>
            Name of a custom page size.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxMessage.TxtSeries">
            <summary>
            Text that will be shown on chart legends when no data is assigned.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxMessage.TxtDefaultTimeAMString">
            <summary>
            Default text to show when AM time string is set to empty on the regional settings dialog from the control panel.
            When the default is empty, Excel defaults to AM, while .NET defaults to an empty string.
            As we want to behave the same as Excel, we provide this constant here.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlxMessage.TxtDefaultTimePMString">
            <summary>
            Default text to show when PM time string is set to empty on the regional settings dialog from the control panel.
            When the default is empty, Excel defaults to PM, while .NET defaults to an empty string.
            As we want to behave the same as Excel, we provide this constant here.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlxMessages">
            <summary>
            FlexCel Native XLS Constants. It reads the resources from the active locale, and
            returns the correct string.
            If your language is not supported and you feel like translating the messages,
            please send me a copy. I will include it on the next FlexCel version. 
            <para>To add a new language:
            <list type="number">
            <item>
               Copy the file flxmsg.resx to your language (for example, flxmsg.es.resx to translate to spanish)
            </item><item>
               Edit the new file and change the messages(you can do this visually with visual studio)
            </item><item>
               Add the .resx file to the FlexCel project
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:FlexCel.Core.FlxMessages.GetString(FlexCel.Core.FlxErr,System.Object[])">
            <summary>
            Returns a string based on the FlxErr enumerator, formatted with args.
            This method is used to get an Exception error message. 
            </summary>
            <param name="ResName">Error Code.</param>
            <param name="args">Params for this error.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.FlxMessages.GetString(FlexCel.Core.FlxMessage)">
            <summary>
            Returns a string from the FlxMessage enumeration.
            </summary>
            <param name="ResName">Message code.</param>
            <returns>Associated string.</returns>
        </member>
        <member name="M:FlexCel.Core.FlxMessages.ThrowException(FlexCel.Core.FlxErr,System.Object[])">
            <summary>
            Throws a standard FlexCelException.
            </summary>
            <param name="ResName">Error Code.</param>
            <param name="args">Parameters for this error.</param>
        </member>
        <member name="M:FlexCel.Core.FlxMessages.ThrowException(System.Exception,FlexCel.Core.FlxErr,System.Object[])">
            <summary>
            Throws a standard FlexCelException with innerException.
            </summary>
            <param name="e">Inner exception.</param>
            <param name="ResName">Error Code.</param>
            <param name="args">Parameters for this error.</param>
        </member>
        <member name="T:FlexCel.Core.FlexCelCoreException">
            <summary>
            Exception thrown when an exception on the core engine happens. 
            </summary>
        </member>
        <member name="M:FlexCel.Core.FlexCelCoreException.#ctor">
            <summary>
            Creates a new FlexCelCoreException
            </summary>
        </member>
        <member name="M:FlexCel.Core.FlexCelCoreException.#ctor(System.String)">
            <summary>
            Creates a new FlexCelCoreException with an error message.
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:FlexCel.Core.FlexCelCoreException.#ctor(System.String,FlexCel.Core.FlxErr)">
            <summary>
            Creates a new FlexCelCoreException with an error message and an exception code.
            </summary>
            <param name="message">Error Message</param>
            <param name="aErrorCode">Error code of the exception.</param>
        </member>
        <member name="M:FlexCel.Core.FlexCelCoreException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a nested Exception.
            </summary>
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:FlexCel.Core.FlexCelCoreException.#ctor(System.String,FlexCel.Core.FlxErr,System.Exception)">
            <summary>
            Creates a nested Exception.
            </summary>
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
            <param name="aErrorCode">Error code of the exception.</param>
        </member>
        <member name="M:FlexCel.Core.FlexCelCoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an exception from a serialization context.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming Context.</param>
        </member>
        <member name="M:FlexCel.Core.FlexCelCoreException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements standard GetObjectData.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:FlexCel.Core.FlexCelCoreException.ErrorCode">
            <summary>
            Error code on the Exception.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TOlePropertyName">
            <summary>
            One custom property name and its id.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TOlePropertyName.Id">
            <summary>
            Id of the property.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TOlePropertyName.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPropertyId">
            <summary>
            Standard properties of an ole file. There are two different sets of properties,
            the standard ones (properties that exist for any file) and the extended ones (properties that exist
            for Ms Office documents)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.None">
            <summary>This is not a valid property. It will do nothing.</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Title">
            <summary>Document Title. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Subject">
            <summary>Document Subject. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Author">
            <summary>Author. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Keywords">
            <summary>Keywords. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Comments">
            <summary>Comments. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Template">
            <summary>Template. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.LastSavedBy">
            <summary>Last user to save the file. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.RevisionNumber">
            <summary>Revision number. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.TotalEditingTime">
            <summary>Total editing time. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.LastPrinted">
            <summary>Last printed date. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.CreateTimeDate">
            <summary>Date of created. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.LastSavedTimeDate">
            <summary>Date last saved. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.NumberOfPages">
            <summary>Number of pages. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.NumberOfWords">
            <summary>Number of words. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.NumberOfCharacters">
            <summary>Number of characters. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Thumbnail">
            <summary>Thumbnail image. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.NameOfCreatingApplication">
            <summary>Application that created the file. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Security">
            <summary>Security. (Standard property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Category">
            <summary>A text string typed by the user that indicates what category the file belongs to (memo, proposal, and so on). It is useful for finding files of same type. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.PresentationTarget">
            <summary>Target format for presentation (35mm, printer, video, and so on). (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Bytes">
            <summary>Number of bytes. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Lines">
            <summary>Number of lines. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Paragraphs">
            <summary>Number of paragraphs. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Slides">
            <summary>Number of slides. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Notes">
            <summary>Number of pages that contain notes. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.HiddenSlides">
            <summary>Number of slides that are hidden. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.MMClips">
            <summary>Number of sound or video clips. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.ScaleCrop">
            <summary>Set to True (-1) when scaling of the thumbnail is desired. If not set, cropping is desired. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.HeadingPairs">
            <summary>Internally used property indicating the grouping of different document parts and the number of items in each group. The titles of the document parts are stored in the TitlesofParts property. The HeadingPairs property is stored as a vector of variants, in repeating pairs of VT_LPSTR (or VT_LPWSTR) and VT_I4 values. The VT_LPSTR value represents a heading name, and the VT_I4 value indicates the count of document parts under that heading. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.TitlesofParts">
            <summary>Names of document parts. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Manager">
            <summary>Manager of the project. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.Company">
            <summary>Company name. (Extended property)</summary>
        </member>
        <member name="F:FlexCel.Core.TPropertyId.LinksUpToDate">
            <summary>Boolean value to indicate whether the custom links are hampered by excessive noise, for all applications. (Extended property)</summary>
        </member>
        <member name="T:FlexCel.Core.TDocumentProperties">
            <summary>
            Properties for an Excel sheet.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.#ctor(FlexCel.Core.ExcelFile)">
            <summary>
            Creates a new TProtection instance and initializes it.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TDocumentProperties.GetStandardProperty(FlexCel.Core.TPropertyId)">
            <summary>
            Returns a standard document property (Like Author, Title, etc.). This method returns an object that might be:
            <list type="bullet">
            <item><b>null</b>: If the property is not assigned.</item>
            <item><b>Int16, Int32, Int64, Single, Double, Decimal</b>: If the property is a number.</item>
            <item><b>DateTime</b>: If the property is a Date or a DateTime.</item>
            <item><b>String</b>: If the property is a string.</item>
            <item><b>Boolean</b>: If the property is a boolean.</item>
            <item><b>An array of byte (byte[])</b>: If the property is a Blob.</item>
            <item><b>An array of object (object[])</b>: If the property is an array. Each one of the members of the array must be of one of the types specified here.</item> 
            </list>
            </summary>
            <param name="PropertyId"></param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.TXlsTokenArray">
            <summary>
            Class to handle insertion/deletion of rows/columns and sheets into a formula.
            This utilities are used by different objects (formulas, ranges, etc), and that's why they are on a common place.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TXlsTokenArray.IncWordRef(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Increments a word, up to a Maximum value. If Max is reached, then Max will be returned.
            If a value less than 0 is reached, or the row/col is in the deleted range, in invalid ref is created. 
            </summary>
            <param name="Pdata"> Data</param>
            <param name="tPos"> Position of the Word to increment</param>
            <param name="InsPos">  Row/Col where we insert. To know the deleted range</param>
            <param name="Offset"> Amount to increment. Might be negative</param>
            <param name="Max"> Maximum value</param>
            <param name="tkPos"> Token pos. To change it into an invalidref token</param>
            <param name="CheckInside">When true and the cell is inside the deleted range, an invalidref will be created.</param>
        </member>
        <member name="M:FlexCel.XlsAdapter.TXlsTokenArray.IncW(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Increments a SIGNED int. It might wrap.
            </summary>
            <param name="pData">Data</param>
            <param name="tPos">Position into array</param>
            <param name="Offset">Ammount to increment. Might be negative</param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TStandardEncryption">
            <summary>
            Excel 97-2000 Standard Encryption.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEncryptionEngine">
            <summary>
            Base for all encrtyption engines.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TStandardEncryption.Permutation">
            <summary>
            RC4 State variables.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TStandardEncryption.Block">
            <summary>
            State variables.
            </summary>
        </member>
        <member name="F:FlexCel.XlsAdapter.TStandardEncryption.FDocId">
            <summary>
            FilePass info.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRowHeightCalc">
            <summary>
            Class for calculating the automatic row heights. 
            This is a tricky thing because we are coupling GDI+ calls with 
            non-graphic code, but there is no other way to do it.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherRecordGroups">
            <summary>
            A record Group
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TRuleRecord">
            <summary>
            Base record for all Rules.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherConnectorRuleRecord">
            <summary>
            Connector Rule.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherAlignRuleRecord">
            <summary>
            Align rule record. Not implemented yet.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherArcRuleRecord">
            <summary>
            Arc Rule.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEscherCallOutRuleRecord">
            <summary>
            CallOut Rule.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TEscherClientTextBoxRecord.#ctor(FlexCel.XlsAdapter.TEscherDwgGroupCache,FlexCel.XlsAdapter.TEscherDwgCache,FlexCel.XlsAdapter.TEscherContainerRecord)">
            <summary>
            Create from data.
            </summary>
            <param name="aDwgGroupCache"></param>
            <param name="aDwgCache"></param>
            <param name="aParent"></param>
        </member>
        <member name="T:FlexCel.Report.ConfigTagEnum">
            <summary>
            Configuration strings. Internal use.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.SQL">
            <summary>
            SQL tag.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Relationship">
            <summary>
            Relationship tag.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Distinct">
            <summary>
            Distinct filter.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.SQLParam">
            <summary>
            Identifier for sql parameters on the config sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Split">
            <summary>
            Split Tag on config sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.UserTable">
            <summary>
            User table tag on config sheet.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ConfigTagEnum.Top">
            <summary>
            Top n records in a dataset.
            </summary>
        </member>
        <member name="T:FlexCel.Report.ApplyFormatTagEnum">
            <summary>
            Configuration strings used in applying a part of a format. Internal use.
            </summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.All">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Border">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderLeft">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderRight">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderTop">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderBottom">
            <summary></summary>        
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BorderExterior">
            <summary></summary>        
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Font">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontFamily">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontSize">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontColor">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontStyle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.FontUnderline">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.NumericFormat">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Background">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BackgroundPattern">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.BackgroundColor">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextAlign">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextAlignHoriz">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextAlignVert">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Locked">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Hidden">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextWrap">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.ShrinkToFit">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.Rotation">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Report.ApplyFormatTagEnum.TextIndent">
            <summary></summary>
        </member>
        <member name="T:FlexCel.Report.ReportTag">
            <summary>
            Tags used in reports.
            </summary>
        </member>
        <member name="M:FlexCel.Report.ReportTag.TagTable(System.String)">
            <summary>HashTable with all available tags.</summary>
        </member>
        <member name="M:FlexCel.Report.ReportTag.ConfigTag(FlexCel.Report.ConfigTagEnum)">
            <summary>Returns a particular configuration tag.</summary>
        </member>
        <member name="M:FlexCel.Report.ReportTag.ApplyFormatTag(System.String,System.String,FlexCel.Core.TFlxApplyFormat,System.Boolean@)">
            <summary>Modifies a format.(For example "Font-Name").</summary>
        </member>
        <member name="M:FlexCel.Report.ReportTag.ConfigTagParams(FlexCel.Report.ConfigTagEnum)">
            <summary>Returns the parameters for a particular configuration tag.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrOpen">
            <summary>Open a Tag.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrOpenHLink">
            <summary>**WARNING**Excel2003 does not let you write this either on hyperlinks, so use StrOpenHLink2.
            Open an Hyperlink Tag. As we can't use # on hyperlink texts, this gives an alternative.
            </summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrOpenHLink2">
            <summary>Open an Hyperlink Tag. As we can't use # on hyperlink texts, this gives an alternative.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrClose">
            <summary>Close a Tag.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCloseHLink">
            <summary>Close an Hyperlink Tag. As we can't use # on hyperlink texts, this gives an alternative.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.ParamDelim">
            <summary>Function delimiter. (for example: "&lt;#if(xx ; yy ; zz)&gt;</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrOpenParen">
            <summary>Open Parenthesis.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCloseParen">
            <summary>Close Parenthesis.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrQuote">
            <summary>Quote.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.DbSeparator">
            <summary>"."</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrFullDs">
            <summary>"*"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrFullDsCaptions">
            <summary>"**"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDeleteLastRow">
            <summary>"X"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDontInsertRanges">
            <summary>"FIXED"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrExcludeSheet">
            <summary>"."</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.RelationshipSeparator">
            <summary>"->"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.InternalDB">
            <summary>"__##INT_RNAL_"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrRowCountColumn">
            <summary>"#RecordCount"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrRowPosColumn">
            <summary>"#RecordPos"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrShow">
            <summary>"Show"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrHide">
            <summary>"Hide"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofit">
            <summary>"Autofit"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofitOn">
            <summary>"All"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAutofitOff">
            <summary>"Selected"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrKeepAutofit">
            <summary>"Keep"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDontKeepAutofit">
            <summary>"Fixed"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDefinedLocal">
            <summary>"Local"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDefinedGlobal">
            <summary>"Global"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrRelativeDelete">
            <summary>"Relative"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrFullDelete">
            <summary>"Full"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrStaticInclude">
            <summary>"Static"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDynamicInclude">
            <summary>"Dynamic"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCopyRows">
            <summary>"R"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCopyCols">
            <summary>"C"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrCopyRowsAndCols">
            <summary>"RC"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignLeft">
            <summary>"LEFT"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignCenter">
            <summary>"Center"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignRight">
            <summary>"Right"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignTop">
            <summary>"Top"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAlignBottom">
            <summary>"Bottom"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrInRow">
            <summary>"InRow"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrInCol">
            <summary>"InCol"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDontGrow">
            <summary>"DontGrow"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDontShrink">
            <summary>"DontShrink"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAggSum">
            <summary>"Sum"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAggAvg">
            <summary>"Avg"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAggMax">
            <summary>"Max"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrAggMin">
            <summary>"Min"</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.RowRange1">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.RowFull1">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.RowRange2">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.RowFull2">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.ColRange1">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.ColFull1">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.ColRange2">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.ColFull2">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.CrossTabRange1">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.CrossTabRange2">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.CrossTabFull1">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.CrossTabFull2">
            <summary>Range delimiter.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.KeepRowsTogether">
            <summary>
            Named Range starting with KeepRows_
            </summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.KeepColsTogether">
            <summary>
            Named Range starting with KeepColumns_
            </summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrEndKeepTogether">
            <summary>
            End of tag for keeprowstogether and keepcolstogether
            </summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.TagTableKeys">
            <summary>
            List of tag ids.
            </summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.TagParams">
            <summary>HashTable with number of params for all available tags.</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrEqual">
            <summary>=</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrConfigSheet">
            <summary>CONFIG</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrDebug">
            <summary>DEBUG</summary>
        </member>
        <member name="P:FlexCel.Report.ReportTag.StrErrorsInResultFile">
            <summary>ERRORSINRESULTFILE</summary>
        </member>
        <member name="T:FlexCel.Report.TPseudoColumn">
            <summary>
            Defines special meta-columns available for any table.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TDisposeMode">
            <summary>
            Indicates if FlexCel must dispose a table after it is done using it.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TDisposeMode.DoNotDispose">
            <summary>
            FlexCel will not dispose the table. Use this option for example when adding a table that was created on the designer.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TDisposeMode.DisposeAfterRun">
            <summary>
            FlexCel will dispose this table after it has finish using it. Use this option when adding temporary datasets, so you do not have to take care of disposing
            the table yourself.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TDrawObjects">
            <summary>
            This is the class that will render any object (images, charts, autoshapes...) inside a given IFlxCanvas.
            </summary>
        </member>
        <member name="T:FlexCel.Render.TEllipticalArc">
            <summary>
            Draws an Elliptical arc using Bezier curves
            </summary>
        </member>
        <member name="M:FlexCel.Render.TEllipticalArc.GetPoints(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the array of points needed to create an elliptical arc with bezier curves.
            </summary>
            <param name="cx">Center coordinate (x).</param>
            <param name="cy">Center coordinate (y).</param>
            <param name="a">Major radius.</param>
            <param name="b">Minor radius.</param>
            <param name="theta">Angle of the major axis respect to the x axis.</param>
            <param name="lambda1">Starting angle of the arc.</param>
            <param name="lambda2">Ending angle of the arc</param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Pdf.PdfWriter">
            <summary>
            A simple class for creating PDF files. It will not hold contents into memory, so it can be used with little memory.
            </summary>
            <remarks>
            This class is not intended for providing a complete API for writing PDFs, only
            what is necessary to create them from xls files.
            Even when this class could be used standalone, on most cases <see cref="T:FlexCel.Render.FlexCelPdfExport"/> should be used.
            </remarks>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.#ctor">
            <summary>
            Creates a new PDF file instance.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.BeginDoc(System.IO.Stream)">
            <summary>
            Call this method before starting the output.
            It will initialize a new page. After this you can call <see cref="M:FlexCel.Pdf.PdfWriter.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)"/>, <see cref="M:FlexCel.Pdf.PdfWriter.NewPage"/>, etc.
            Always end the document with a call to <see cref="M:FlexCel.Pdf.PdfWriter.EndDoc"/> and then remember to close the stream.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.EndDoc">
            <summary>
            Always call this method to write the final part of a pdf file.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.NewPage">
            <summary>
            Closes the active page and creates a new one. All following commands will go to the new page.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.t(System.Single)">
            <summary>
            This implementation is similar to tx, but concept is different. This is used to change
            a unit like width or height. If we introduced a XAxisGrowsRight, it would be different.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
            Writes a string to the current page.
            </summary>
            <param name="x">X coord. (default from bottom left)</param>
            <param name="aFont">Font to draw the text.</param>
            <param name="aBrush">Brush used for Color.</param>
            <param name="y">Y coord. (default from bottom left. Might change with <see cref="P:FlexCel.Pdf.PdfWriter.YAxisGrowsDown"/> value)</param>
            <param name="s">String to write.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawString(System.String,System.Drawing.Font,System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
            Writes a string to the current page.
            </summary>
            <param name="x">X coord. (default from bottom left)</param>
            <param name="aFont">Font to draw the text.</param>
            <param name="aPen">Pen to draw the text outline. If null, no outline will be drawn.</param>
            <param name="aBrush">Brush used for Color. If null, only the outline will be drawn.</param>
            <param name="y">Y coord. (default from bottom left. Might change with <see cref="P:FlexCel.Pdf.PdfWriter.YAxisGrowsDown"/> value)</param>
            <param name="s">String to write.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.UnderLine(System.String,FlexCel.Pdf.TPdfFont,System.Single,System.Drawing.Brush,System.Single,System.Single,System.Boolean)">
            <summary>
            Underline has to be done by writing a line below the text. There is no PDF command for underlined text.
            </summary>
            <param name="s"></param>
            <param name="aPdfFont"></param>
            <param name="SizeInPoints"></param>
            <param name="aBrush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="Strikeout"></param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Hyperlink(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates an Hyperlink on the selected region with the specified Url.
            </summary>
            <param name="x">x coord.</param>
            <param name="y">y coord.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <param name="url">Url where to navigate to.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Hyperlink(System.Single,System.Single,System.Single,System.Single,System.Uri)">
            <summary>
            Creates an Hyperlink on the selected region with the specified Url.
            </summary>
            <param name="x">x coord.</param>
            <param name="y">y coord.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <param name="url">Url where to navigate to.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Comment(System.Single,System.Single,System.Single,System.Single,System.String,FlexCel.Pdf.TPdfCommentProperties)">
            <summary>
            Creates a comment on the pdf file.
            </summary>
            <param name="x">x coord.</param>
            <param name="y">y coord.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
            <param name="comment">Text to put into the comment.</param>
            <param name="commentProperties">Properties for the comment.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.GetBookmarks">
            <summary>
            Retuns all the bookmarks on the file. Note that this will returna COPY of the bookmarks,
            so changing them will not change them in the file. You ned to use <see cref="M:FlexCel.Pdf.PdfWriter.SetBookmarks(FlexCel.Pdf.TBookmarkList)"/> to replace the new list.
            </summary>
            <returns>Existing bookmarks on the file.</returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.SetBookmarks(FlexCel.Pdf.TBookmarkList)">
            <summary>
            Replaces the bookmarks on the file with other list. The new list will be copied,
            so you can change the old list after setting it and it will not affect the file.
            </summary>
            <param name="bookmarks">List to replace. If null, bookmarks will be cleared.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.AddBookmark(FlexCel.Pdf.TBookmark)">
            <summary>
            Adds a new bookmark to the document. 
            </summary>
            <param name="bookmark"></param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.GetBody">
            <summary>
            For measurements where an actual body might not exist.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Returns the size of a string in points * Scale. (1/72 of an inch * Scale)
            </summary>
            <param name="text">String to measure.</param>
            <param name="aFont">Font to measure</param>
            <returns>Size of the string in points.</returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.FontHeight(System.Drawing.Font)">
            <summary>
            Returns the font height on points * Scale. (1/72 of an inch * Scale)
            </summary>
            <param name="aFont">Font to measure.</param>
            <returns>Font height.</returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.FontLinespacing(System.Drawing.Font)">
            <summary>
            Returns the font white space on points * Scale. (1/72 of an inch * Scale)
            </summary>
            <param name="aFont">Font to measure.</param>
            <returns>The blank space between lines.</returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.FontDescent(System.Drawing.Font)">
            <summary>
            Returns the font height on points * Scale. (1/72 of an inch * Scale)
            </summary>
            <param name="aFont">Font to measure.</param>
            <returns>Font height.</returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line on the current page.
            </summary>
            <param name="aPen">Pen used to draw the line. Width and color are used.</param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawLines(System.Drawing.Pen,FlexCel.Core.TPointF[])">
            <summary>
            Draws an array of line connecting pairs of points.
            </summary>
            <param name="aPen">The pen to draw the lines.</param>
            <param name="points">An array of points. Its length must be more than 2.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.
            No line is drawn around the rectangle.
            </summary>
            <param name="aBrush">Brush to fill.</param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height. 
            </summary>
            <param name="aPen">Pen for the line.</param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawAndFillRectangle(System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws and fills a rectangle specified by a coordinate pair, a width, and a height. 
            </summary>
            <param name="aPen">Pen for the line. Might be null.</param>
            <param name="aBrush">Brush for the fill. Might be null.</param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawAndFillBeziers(System.Drawing.Pen,System.Drawing.Brush,FlexCel.Core.TPointF[])">
            <summary>
            Draws and/or fills a bezier path. If Brush is not null, the shape will be closed for filling.
            </summary>
            <param name="aPen">Pen for the outline. If null, no outline will be drawn.</param>
            <param name="aBrush">Brush for filling. If null, the shape will not be filled.</param>
            <param name="aPoints">Array of points for the curve. See GDI+ DrawBeziers function for more information.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawAndFillPolygon(System.Drawing.Pen,System.Drawing.Brush,FlexCel.Core.TPointF[])">
            <summary>
            Draws and/or fills a polygon. The shape will be closed.
            </summary>
            <param name="aPen">Pen for the outline. If null, no outline will be drawn.</param>
            <param name="aBrush">Brush for filling. If null, the shape will not be filled.</param>
            <param name="aPoints">Array of points for the polygon.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.IntersectClipRegion(System.Drawing.RectangleF)">
            <summary>
            Intersects the current clipping region with the new one. 
            There is no command to reset or expand a clipping region, you need to use
            <see cref="M:FlexCel.Pdf.PdfWriter.SaveState"/> and <see cref="M:FlexCel.Pdf.PdfWriter.RestoreState"/>
            </summary>
            <param name="Rect"></param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ClipRectangle(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Intersect the clip region with a rectangle specified by a pair of coordinates, a width, and a height.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="exclude">When true, all region OUTSIDE the rectangle will be intersected with the current clipping region.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ClipPolygon(FlexCel.Core.TPointF[],System.Boolean)">
            <summary>
            Intersects the clipping area with a polygon. 
            </summary>
            <param name="aPoints">Array of points for the polygon.</param>
            <param name="exclude">When true, all region OUTSIDE the polygon will be intersected with the current clipping region.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ClipBeziers(FlexCel.Core.TPointF[],System.Boolean)">
            <summary>
            Intersects the clipping area with a bezier region. 
            </summary>
            <param name="aPoints">Array of points for the curve. See GDI+ DrawBeziers function for more information.</param>
            <param name="exclude">When true, all region OUTSIDE the region will be intersected with the current clipping region.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.IO.Stream)">
            <summary>
            Draws an image on the canvas. Image can be any type, but all except jpeg will be converted to PNG.
            </summary>
            <param name="image">Image to insert. If it is not JPEG or PNG, it will be converted to PNG.</param>
            <param name="rect">Rectangle where the image will be.</param>
            <param name="imageData">Stream with the raw image data. Not required, might be null.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            Draws an image on the canvas. Image can be any type, but all except jpeg will be converted to PNG.
            </summary>
            <param name="image">Image to insert. If it is not JPEG or PNG, it will be converted to PNG.</param>
            <param name="rect">Rectangle where the image will be.</param>
            <param name="imageData">Stream with the raw image data. Not required, might be null.</param>
            <param name="transparentColor">Color to make transparent. To specify no transparent color use <see cref="F:FlexCel.Core.FlxConsts.NoTransparentColor"/></param>
            <param name="defaultToJpg">When true and the image is not on a supported format (or imageData==null) the image will
            be converted to JPG. If false, the image will be converted to PNG.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the canvas around point (x,y).
            </summary>
            <param name="x">Point where the canvas is rotated.</param>
            <param name="y">Point where the canvas is rotated.</param>
            <param name="Alpha">Angle in degrees.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.ScaleBy(System.Single,System.Single)">
            <summary>
            Scales the canvas. It premultiplies the matrix, to keep the correct order.
            </summary>
            <param name="xScale">X Scale</param>
            <param name="yScale">Y Scale</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.GetMatrix">
            <summary>
            Returns the drawing matrix in use. The elements in this matrix are similar to the ones returned by
            <see cref="P:System.Drawing.Drawing2D.Matrix.Elements"/> and have the same meaning.
            <b>Important remark. This matrix is the real one, and does not consider things like <see cref="P:FlexCel.Pdf.PdfWriter.YAxisGrowsDown"/> or <see cref="P:FlexCel.Pdf.PdfWriter.Scale"/>.</b>
            You will probably want to use <see cref="M:FlexCel.Pdf.PdfWriter.Transform(FlexCel.Core.TPointF)"/> to find out the coordinates of a point.
            </summary>
            <returns>The internal transformation matrix.</returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Transform(FlexCel.Core.TPointF)">
            <summary>
            Transforms the point according to the current transformation Matrix. See <see cref="M:FlexCel.Pdf.PdfWriter.GetMatrix"/> to get the actual matrix.
            </summary>
            <param name="p">Point you want to map to the user coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.SaveState">
            <summary>
            Saves the current graphic state. Be sure to always call <see cref="M:FlexCel.Pdf.PdfWriter.RestoreState"/>
            each time you call this method.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.RestoreState">
            <summary>
            Restores the graphic state saved by a <see cref="M:FlexCel.Pdf.PdfWriter.SaveState"/> call.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.PdfWriter.Sign(FlexCel.Pdf.TPdfSignature)">
            <summary>
            Signs the pdf documents with the specified <see cref="T:FlexCel.Pdf.TPdfSignature"/> or <see cref="T:FlexCel.Pdf.TPdfVisibleSignature"/>.
            <b>Note:</b> This method must be called <b>before</b> calling <see cref="M:FlexCel.Pdf.PdfWriter.BeginDoc(System.IO.Stream)"/>
            </summary>
            <param name="aSignature">Signature used for signing. Set it to null to stop signing the next documents.</param>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.Compress">
            <summary>
            Set it to true to compress the text on the generated pdf file. 
            </summary>
            <value></value>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.Properties">
            <summary>
            Properties of the PDF file.
            </summary>
            <value></value>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.PageSize">
            <summary>
            Page size of the active page. You can change it *before* calling NewPage() and it will change for the new sheets.
            Note that once NewPage() (or BeginDoc() for the first page) is called, the page size will remain constant for that page.
            This property must be changed before.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.YAxisGrowsDown">
            <summary>
            When true, the y axis origin corresponds to the upper corner of a sheet and bigger Y coordinates will 
            move down on the paper. This is the standard GDI+ behavior.
            When false, the Y origin is at the bottom and it grows up into the page. This is the standard PDF behavior.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.AddFontDescent">
            <summary>
            When false, (the default) text base will be at the y coordinate. For example, DrawString(..., y=100,...)
            will draw a string with its base at 100. Font descent (for example the lower part of a "p") will be below
            100, and the ascent (the upper part) will be above. This is the standard PDF behavior.
            When true, all text will be drawn above the y coordinate. (both ascent and descent).
            This is the standard GDI+ behavior, when StringFormat.LineAlignment=StringAlignment.Far.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.Scale">
            <summary>
            A scale factor to change X and Y coordinates. When Scale=1, the using is the point (1/72 of an inch).
            Font size is not affected by scale, it is always in points.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.FontEmbed">
            <summary>
            Determines what fonts will be embedded on the generated pdf. 
            Note that when using UNICODE fonts WILL BE EMBEDDED no matter the value of this property.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.FontSubset">
            <summary>
            When <see cref="P:FlexCel.Pdf.PdfWriter.FontEmbed"/> is set to embed the fonts, this setting determines if the full font will be embedded,
            or only the characters used in the document. If the full font is embedded the resulting file will be larger, but 
            it will be possible to edit it with a third party tool once it has been generated.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.FontMapping">
            <summary>
            Determines how fonts will be replaced on the generated pdf. Pdf comes with 4 standard font families,
            Serif, Sans-Serif, Monospace and Symbol. You can use for example the standard Helvetica instead of Arial and do not worry about embedding the font.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.Kerning">
            <summary>
            By default, pdf does not do any kerning with the fonts. This is, on the string "AVANT", it won't
            compensate the spaces between "A" and "V". (they should be smaller) 
            If you turn this property on, FlexCel will calculate the kerning and add it to the generated file.
            The result file will be a little bigger because of the kerning info on all strings, but it will also
            look a little better.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.FallbackFonts">
            <summary>
            A semicolon (;) separated list of font names to try when a character is not found in the used font.<br/>
            When a character is not found in a font, it will display as an empty square by default. By setting this
            property, FlexCel will try to find a font that supports this character in this list, and if found, use that font
            to render the character.
            </summary>
            <example>
            You might set this property to "MS MINCHO;Arial Unicode MS". If a cell with font "Arial" has a character that
            is not in the "Arial" font, FlexCel will try to find the character first in MS Mincho, and if not found, in Arial Unicode.<br></br>
            If it can find it in any of the fallback fonts, it will use that font in the pdf file.
            </example>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.GetFontData">
            <summary>
            Use this event if you want to provide your own font information for embedding. 
            Note that if you don't assign this event, the default method will be used, and this 
            will try to find the font on the Fonts folder. To change the font folder, use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontFolder"/> event
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.GetFontFolder">
            <summary>
            Use this event if you want to provide your own font information for embedding. 
            Normally FlexCel will search for fonts on [System]\Fonts folder. If your fonts are in 
            other location, you can tell FlexCel where they are here. If you prefer just to give FlexCel
            the full data on the font, you can use <see cref="P:FlexCel.Pdf.PdfWriter.GetFontData"/> event instead.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.OnFontEmbed">
            <summary>
            Use this event if you want to manually specify which fonts to embed into the pdf document.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.PdfWriter.PageLayout">
            <summary>
            Sets the default page layout when opening the document.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfToken">
            <summary>
            Tokens for creating a PDF file. Internal use.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Header14">
            <summary>
            Pdf header for acrobat 5.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Header16">
            <summary>
            Pdf header for acrobat 7.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.HeaderComment">
            <summary>
            Comment with more than 4 bytes>128.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OpenString">
            <summary>
            (
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CloseString">
            <summary>
            )
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EscapeString">
            <summary>
            \
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StartDictionary">
            <summary>
            &lt;&lt;
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EndDictionary">
            <summary>
            &gt;&gt;
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NullText">
            <summary>
            null
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XRef">
            <summary>
            XRef section.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Trailer">
            <summary>
            Begin of a trailer section.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StartXRef">
            <summary>
            XRef subsection inside trailer.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Eof">
            <summary>
            Last line of the file.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SizeName">
            <summary>
            Size keyword.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.RootName">
            <summary>
            Root keyword.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.InfoName">
            <summary>
            Info Keyword.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TypeName">
            <summary>
            /Type
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.KidsName">
            <summary>
            /Kids
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CountName">
            <summary>
            /Count
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FirstName">
            <summary>
            /First
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LastName">
            <summary>
            /Last
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Obj">
            <summary>
            Indirect object
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EndObj">
            <summary>
            End of an indirect object.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CallObj">
            <summary>
            A call to an indirect object.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LengthName">
            <summary>
            /length
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Length1Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Stream">
            <summary>
            stream
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EndStream">
            <summary>
            endstream
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PagesName">
            <summary>
            Pages
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PageName">
            <summary>
            Page
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ContentsName">
            <summary>
            /Contents
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AnnotsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AnnotName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ParentName">
            <summary>
            /Parent
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CatalogName">
            <summary>
            Catalog
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OpenArray">
            <summary>
            [
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CloseArray">
            <summary>
            ]
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TitleName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AuthorName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SubjectName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.KeywordsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CreatorName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ProducerName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CreationDateName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Producer">
            <summary>
            Producer of the document.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FilterName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SubFilterName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FlateDecodeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ResourcesName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontPrefix">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImgPrefix">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PatternPrefix">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GradientPrefix">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GStatePrefix">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SubtypeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TrueTypeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BaseFontName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontNameName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontBBoxName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FirstCharName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LastCharName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EncodingName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WinAnsiEncodingName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Bold">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Italic">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BoldItalic">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsBold">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsItalic">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsBoldItalic">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsOblique">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsBoldOblique">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsCourier">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsHelvetica">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsTimes">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsRoman">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PsSymbol">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StArial">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StTimesNewRoman">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StCourier">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StCourierNew">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StMicrosoftSansSerif">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StMicrosoftSerif">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StFixedFonts">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StSerifFonts">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StSymbolFonts">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CIDFontType2Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Type0Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Type1Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DescendantFontsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.IdentityHName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CIDSystemInfo">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CIDToGIDMap">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandFont">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandBeginText">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandEndText">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetBrushColor">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetPenColor">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetAlphaBrush">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetAlphaPen">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandTextMove">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandTextWrite">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandTextRendering">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandTextKerningWrite">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandMove">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandLineToAndStroke">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandLineTo">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandBezier">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandLineWidth">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandSetLineStyle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandFillPath">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandFillAndStroke">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandStroke">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandClipPath">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandClipPathEvenOddRule">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandRectangle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandClosePath">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CommandDo">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Commandscn">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Commandcs">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Commandgs">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XObjectName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FormName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PatternName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ExtGStateName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WidthName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WidthsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.HeightName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DCTDecodeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BitsPerComponentName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DWName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ColorSpaceName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DeviceRGBName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DeviceGrayName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MediaBoxName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontDescriptorName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FlagsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontAscentName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontDescentName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontFile2Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ItalicAngleName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CapHeightName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.StemVName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ToUnicodeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ToUnicodeData">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ToUnicodeData2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PredictorName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.IndexedName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ColorsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ColumnsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DecodeParmsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MaskName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SMaskName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageMaskName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FontFolder">
            <summary>
            Windows font folder.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UpDir">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LinuxFontFolder">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TTFExtension">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TTCExtension">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FamilyItalic">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FamilyOblique">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FamilyBold">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.beginbfchar">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.endbfchar">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.beginbfrange">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.endbfrange">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LinkName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.RectName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LinkData">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BorderName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Border0">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NameName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TextName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CAName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ICName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BSName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PatternTypeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PaintTypeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TilingTypeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XStepName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.YStepName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BBoxName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PatternColorSpacePrefix">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MatrixName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ShadingName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ShadingTypeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CoordsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FunctionName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FunctionTypeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DomainName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.RangeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.C0Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.C1Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ExtendName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FunctionsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.BoundsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.EncodeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AlphaName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.GroupName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TransparencyName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.OutlinesName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PrevName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.NextName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.CName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PageModeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UseOutlinesName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.UseThumbsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FullScreenName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DestName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FitName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FitHName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FitVName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.XYZName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TrueText">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FalseText">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.AcroFormName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FieldsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SigFlagsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SigName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.VName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.WidgetName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FTName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FfName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.LocationName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ReasonName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ContactInfoName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.APName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ByteRangeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.adbe_pkcs7_detachedName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.Adobe_PPKLiteName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ReferenceName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TransformMethodName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.TransformParamsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DocMDPName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FieldMDPName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.MD5Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.SigRefName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.V1_2Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DigestMethodName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PermsName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DigestValueName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.DigestLocationName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.IDName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FormTypeName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageCName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageIName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ImageBName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.ProcSetName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.PDFName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.FRMName">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.n0Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.n2Name">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfToken.None">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfTokens.GetString(FlexCel.Pdf.TPdfToken)">
            <summary>
            Returns a token from the TPdfToken enumerator.
            </summary>
            <param name="Code">Code to search for.</param>
            <returns>The associated string.</returns>
        </member>
        <member name="T:FlexCel.Core.TEvaluateFormula">
            <summary>
            A class for parsing a formula into RPN format for evaluation.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TEvaluateFormula.DoError(FlexCel.Core.FlxErr,System.Int32)">
            <summary>
            This can be used both on evaluating formulas or report expressions. On the first case we just want to return an error code. On the second, throw an exception.
            </summary>
            <param name="Err"></param>
            <param name="ArgCount"></param>
        </member>
        <member name="T:FlexCel.Core.THFlxAlignment">
            <summary>
            Horizontal Alignment on a cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.general">
            <summary>
            General Alignment. (Text to the left, numbers to the right and Errors and booleans centered)
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.left">
            <summary>
            Aligned to the left.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.center">
            <summary>
            Horizontally centered on the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.right">
            <summary>
            Aligned to the right.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.fill">
            <summary>
            Repeat the text to fill the cell width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.justify">
            <summary>
            Justify with spaces the text so it fills the cell width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.center_across_selection">
            <summary>
            Centered on a group of cells.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THFlxAlignment.distributed">
            <summary>
            Justified.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TVFlxAlignment">
            <summary>
            Vertical Alignment on a cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.top">
            <summary>
            Aligned to the top.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.center">
            <summary>
            Vertically centered on the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.bottom">
            <summary>
            Aligned to the bottom.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.justify">
            <summary>
            Justified on the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TVFlxAlignment.distributed">
            <summary>
            Distributed on the cell.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxBorderStyle">
            <summary>
            Cell border style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.None">
            <summary>None</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Thin">
            <summary>Thin</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Medium">
            <summary>Medium</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Dashed">
            <summary>Dashed</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Dotted">
            <summary>Dotted</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Thick">
            <summary>Thick</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Double">
            <summary>Double</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Hair">
            <summary>Hair</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Medium_dashed">
            <summary>Medium_dashed</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Dash_dot">
            <summary>Dash_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Medium_dash_dot">
            <summary>Medium_dash_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Dash_dot_dot">
            <summary>Dash_dot_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Medium_dash_dot_dot">
            <summary>Medium_dash_dot_dot</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorderStyle.Slanted_dash_dot">
            <summary>Slanted_dash_dot</summary>
        </member>
        <member name="T:FlexCel.Core.TFlxPatternStyle">
            <summary>
            Pattern style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Automatic">
            <summary>Automatic </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.None">
            <summary>None </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Solid">
            <summary>Solid </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray50">
            <summary>Gray50 </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray75">
            <summary>Gray75 </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray25">
            <summary>Gray25 </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Horizontal">
            <summary>Horizontal </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Vertical">
            <summary>Vertical </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Down">
            <summary>Down </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Up">
            <summary>Up </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Checker">
            <summary>Diagonal hatch.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.SemiGray75">
            <summary>bold diagonal.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.LightHorizontal">
            <summary>thin horz lines </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.LightVertical">
            <summary>thin vert lines</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.LightDown">
            <summary>thin \ lines</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.LightUp">
            <summary>thin / lines</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Grid">
            <summary>thin horz hatch</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.CrissCross">
            <summary>thin diag</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray16">
            <summary>12.5 % gray</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxPatternStyle.Gray8">
            <summary>6.25 % gray</summary>
        </member>
        <member name="T:FlexCel.Core.TFlxDiagonalBorder">
            <summary>
            Diagonal border style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxDiagonalBorder.None">
            <summary>
            No diagonal line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxDiagonalBorder.DiagDown">
            <summary>
            A line going from left-top to right-bottom.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxDiagonalBorder.DiagUp">
            <summary>
            A line going from left-bottom to right-top.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxDiagonalBorder.Both">
            <summary>
            A diagonal cross.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxFontStyles">
            <summary>
            Font style. You can "or" on "and" it to get the actual styles.
            For example, to set style to bold+italic,  you should use TFlxFontStyles.Bold | TFlxFontStyles.Italic.
                         to check if style includes italic, use ((Style &amp; TFlxFontStyles.Italic)!=0)  
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.None">
            <summary>Normal font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Bold">
            <summary>Bold font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Italic">
            <summary>Italic font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.StrikeOut">
            <summary>Striked out font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Superscript">
            <summary>Superscript font.</summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFontStyles.Subscript">
            <summary>Subscript font.</summary>
        </member>
        <member name="T:FlexCel.Core.TFlxUnderline">
            <summary>
            Underline type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.Single">
            <summary>
            Simple underline.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.Double">
            <summary>
            Double underline.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.SingleAccounting">
            <summary>
            Underlines at the bottom of the cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxUnderline.DoubleAccounting">
            <summary>
            Double underline at the bottom of the cell.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxFont">
            <summary>
            Encapsulation of an Excel Font.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxFont.CopyTo(FlexCel.Core.TFlxFont)">
            <summary>
            Copies this font information to other font object.
            </summary>
            <param name="Dest">Existing Font object where new data will be copied.</param>
        </member>
        <member name="M:FlexCel.Core.TFlxFont.Clone">
            <summary>
            Returns a deep copy of the font.
            </summary>
            <returns>A copy of the font.</returns>
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Name">
            <summary>
            Font name. (For example, "Arial")
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Size20">
            <summary>
            Height of the font (in units of 1/20th of a point). A Size20=200 means 10 points.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFont.ColorIndex">
            <summary>
            Index on the color palette. 
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Style">
            <summary>
            Style of the font, such as bold or italics. Underline is a different option.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Underline">
            <summary>
            Underline type.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFont.Family">
            <summary>
            Font family, (see Windows API LOGFONT structure).
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFont.CharSet">
            <summary>
            Character set. (see Windows API LOGFONT structure)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxOneBorder">
            <summary>
            Border style and color for one of the 4 sides of a cell.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.#ctor(FlexCel.Core.TFlxBorderStyle,System.Int32)">
            <summary>
            Initializes the structure to its default values.
            </summary>
            <param name="aBorderStyle">See <see cref="P:FlexCel.Core.TFlxOneBorder.Style"/></param>
            <param name="aColorIndex">See <see cref="P:FlexCel.Core.TFlxOneBorder.ColorIndex"/></param>
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.Equals(System.Object)">
            <summary>
            Returns true when 2 borders are the same.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.op_Equality(FlexCel.Core.TFlxOneBorder,FlexCel.Core.TFlxOneBorder)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.op_Inequality(FlexCel.Core.TFlxOneBorder,FlexCel.Core.TFlxOneBorder)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFlxOneBorder.GetHashCode">
            <summary>
            Hash code for the border.
            </summary>
            <returns>hashcode.</returns>
        </member>
        <member name="P:FlexCel.Core.TFlxOneBorder.Style">
            <summary>
            Border style.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxOneBorder.ColorIndex">
            <summary>
            Index to color palette.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxBorders">
            <summary>
            Border style for a cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.Diagonal">
            <summary>
            Diagonal border.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxBorders.DiagonalStyle">
            <summary>
            When defined, there will be one or two diagonal lines across the cell.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxBorders.Clone">
            <summary>
            Returns a deep copy of the border.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Core.TFlxFillPattern">
            <summary>
            Fill pattern and color for the background of a cell.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFillPattern.Pattern">
            <summary>
            Fill style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFillPattern.FgColorIndex">
            <summary>
            Color for the foreground of the pattern. It is used when the pattern is solid, but not when it is automatic.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFillPattern.BgColorIndex">
            <summary>
            Color for the background of the pattern.  If the pattern is solid it has no effect, but it is used when pattern is automatic.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.op_Equality(FlexCel.Core.TFlxFillPattern,FlexCel.Core.TFlxFillPattern)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.op_Inequality(FlexCel.Core.TFlxFillPattern,FlexCel.Core.TFlxFillPattern)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFlxFillPattern.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:FlexCel.Core.TFlxFormat">
            <summary>
            Format for one cell or named style.
            Cell formats are used to format cells, Named styles to create styles. A Cell format can have a parent style format, even when normally this is null (parent is normal format).
            Named styles will have a non-null Style property. Cell formats will have style = null.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxFormat.#ctor">
            <summary>
            Creates an empty Format class.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormat.FillPattern">
            <summary>
            Fill pattern.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxFormat.IsStyle">
            <summary>
            When true this format is a named style, when false a cell format.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxFormat.Clone">
            <summary>
            Returns a deep copy of the format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Font">
            <summary>
            Cell Font.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Borders">
            <summary>
            Cell borders.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Format">
            <summary>
            Format string.  (For example, "yyyy-mm-dd" for a date format, or "#.00" for a numeric 2 decimal format)
            <br/>This format string is the same you use in Excel unde "Custom" format when formatting a cell, and it is documented
            in Excel documentation. Under <b>"Finding out what format string to use in TFlxFormat.Format"</b> section in <b>UsingFlexCelAPI.pdf</b>
            you can find more detailed information on how to create this string.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.HAlignment">
            <summary>
            Horizontal alignment on the cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.VAlignment">
            <summary>
            Vertical alignment on the cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Locked">
            <summary>
            Cell is locked.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Hidden">
            <summary>
            Cell is Hidden.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.WrapText">
            <summary>
            Cell wrap.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.ShrinkToFit">
            <summary>
            Shrink to fit.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Rotation">
            <summary>
            Text Rotation in degrees. <br/>
            0 - 90 is up, <br/>
            91 - 180 is down, <br/>
            255 is vertical.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.Indent">
            <summary>
            Indent value. (in characters)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.ParentStyle">
            <summary>
            Name of the Parent style. Normally you will want to keep it at null (parent is normal style), but you can write an exiting style here.
            If <see cref="F:FlexCel.Core.TFlxFormat.IsStyle"/> is true this property is not used.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxFormat.LinkedStyle">
            <summary>
            If this object holds a Cell format, LinkedStyle specifies which properties of the cell format are linked to its parent style.
            If this object holds a Style formt, LinkedStyle specifies the default set of properties that will be applied when you use this style from Excel.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxApplyFont">
            <summary>
            Encapsulation of an Excel Font.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFont.SetAllMembers(System.Boolean)">
            <summary>
            Sets all members to true or false
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFont.Apply(FlexCel.Core.TFlxFont,FlexCel.Core.TFlxFont)">
            <summary>
            This method will modify existingFormat with the properties from newFormat that are specified on this class
            </summary>
            <param name="existingFormat">Existing format that will be updated with the properties of newFormat specified.</param>
            <param name="newFormat">New format to apply</param>
            <returns>True if there was any change on existingFormat, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFont.Clone">
            <summary>
            Returns a deep copy of the font.
            </summary>
            <returns>A copy of the font.</returns>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Name">
            <summary>
            Font name. (For example, "Arial")
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Size20">
            <summary>
            Height of the font (in units of 1/20th of a point). A Size20=200 means 10 points.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.ColorIndex">
            <summary>
            Index on the color palette. 
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Style">
            <summary>
            Style of the font, such as bold or italics. Underline is a different option.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Underline">
            <summary>
            Underline type.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.Family">
            <summary>
            Font family, (see Windows API LOGFONT structure).
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.CharSet">
            <summary>
            Character set. (see Windows API LOGFONT structure)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFont.IsEmpty">
            <summary>
            Returns true if the format definition does not apply any setting.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxApplyBorders">
            <summary>
            Border style for a cell.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyBorders.SetAllMembers(System.Boolean)">
            <summary>
            Sets all members to true or false
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyBorders.Apply(FlexCel.Core.TFlxBorders,FlexCel.Core.TFlxBorders)">
            <summary>
            This method will modify existingFormat with the properties from newFormat that are specified on this class
            </summary>
            <param name="existingFormat">Existing format that will be updated with the properties of newFormat specified.</param>
            <param name="newFormat">New format to apply</param>
            <returns>True if there was any change on existingFormat, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyBorders.Clone">
            <summary>
            Returns a deep copy of the border.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.Diagonal">
            <summary>
            Diagonal border.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.DiagonalStyle">
            <summary>
            When defined, there will be one or two diagonal lines across the cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyBorders.IsEmpty">
            <summary>
            Returns true if the format does not apply any setting.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxApplyFillPattern">
            <summary>
            Fill pattern and color for the background of a cell.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.SetAllMembers(System.Boolean)">
            <summary>
            Sets all members to true or false
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.Apply(FlexCel.Core.TFlxFillPattern@,FlexCel.Core.TFlxFillPattern@)">
            <summary>
            This method will modify existingFormat with the properties from newFormat that are specified on this class
            </summary>
            <param name="existingFormat">Existing format that will be updated with the properties of newFormat specified.</param>
            <param name="newFormat">New format to apply</param>
            <returns>True if there was any change on existingFormat, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.op_Equality(FlexCel.Core.TFlxApplyFillPattern,FlexCel.Core.TFlxApplyFillPattern)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.op_Inequality(FlexCel.Core.TFlxApplyFillPattern,FlexCel.Core.TFlxApplyFillPattern)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFillPattern.GetHashCode">
            <summary></summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.Pattern">
            <summary>
            Fill style.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.FgColorIndex">
            <summary>
            Color for the foreground of the pattern.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.BgColorIndex">
            <summary>
            Color for the background of the pattern.  If the pattern is solid, has no effect.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFillPattern.IsEmpty">
            <summary>
            Returns true if the format does not apply any setting.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxApplyFormat">
            <summary>
            Defines which attributes of a <see cref="T:FlexCel.Core.TFlxFormat"/> will be applied for one cell. 
            Whatever member is set to false, it will not apply this member property to the cell.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFormat.#ctor">
            <summary>
            Creates an empty Format class.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFlxApplyFormat.FillPattern">
            <summary>
            Fill pattern.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFormat.SetAllMembers(System.Boolean)">
            <summary>
            Sets all members to true or false
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFormat.Apply(FlexCel.Core.TFlxFormat,FlexCel.Core.TFlxFormat)">
            <summary>
            This method will modify existingFormat with the properties from newFormat that are specified on this class
            </summary>
            <param name="existingFormat">Existing format that will be updated with the properties of newFormat specified.</param>
            <param name="newFormat">New format to apply</param>
            <returns>True if there was any change on existingFormat, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.TFlxApplyFormat.Clone">
            <summary>
            Returns a deep copy of the format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Font">
            <summary>
            Cell Font.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Borders">
            <summary>
            Cell borders.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Format">
            Format string.  (For example, "yyyy-mm-dd" for a date format, or "#.00" for a numeric 2 decimal format)
            <br/>This format string is the same you use in Excel unde "Custom" format when formatting a cell, and it is documented
            in Excel documentation. Under <b>"Finding out what format string to use in TFlxFormat.Format"</b> section in <b>UsingFlexCelAPI.pdf</b>
            you can find more detailed information on how to create this string.
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.HAlignment">
            <summary>
            Horizontal align on the cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.VAlignment">
            <summary>
            Vertical align on the cell.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Locked">
            <summary>
            Cell is locked.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Hidden">
            <summary>
            Cell is Hidden.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.ParentStyle">
            <summary>
            Parent style. This is the parent style name and all the properties that are linked to it.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.WrapText">
            <summary>
            Cell wrap.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.ShrinkToFit">
            <summary>
            Shrink to fit.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Rotation">
            <summary>
            Text Rotation on degrees. 
            0 - 90 is up, 
            91 - 180 is down, 
            255 is vertical.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.Indent">
            <summary>
            Indent value. (on characters)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.IsEmpty">
            <summary>
            Returns true if the format does not apply any setting.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxApplyFormat.HasOnlyBorders">
            <summary>
            Returns true if the format definition contains only borders.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLinkedStyle">
            <summary>
            This class is used as a part of a <see cref="T:FlexCel.Core.TFlxFormat"/> class, and stores how a cell format is linked to a style.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TLinkedStyle.Assign(FlexCel.Core.TLinkedStyle)">
            <summary>
            Copies a new style into this object.
            </summary>
            <param name="newStyle">Style with the values to copy.</param>
        </member>
        <member name="M:FlexCel.Core.TLinkedStyle.SameData(FlexCel.Core.TLinkedStyle)">
            <summary>
            Returns true if the 2 instances have the same data.
            </summary>
            <param name="otherStyle">Style with which we want to compare.</param>
            <returns>True i otherStyle has the same values as this object.</returns>
        </member>
        <member name="M:FlexCel.Core.TLinkedStyle.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns>A deep copy of the style. (without any references in common with the original object)</returns>
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.AutomaticChoose">
            <summary>
            When this property is true (the default) FlexCel will automatically choose which linked
            properties to apply depending on what changes from the base style. For example, if this style
            has a different font than the basic style, the font will be not linked, and when you change the base style it will keep the same. 
            Excel behaves this way when it adds styles. To manually choose what the format will affect, set this to none.
            This property doesn't correspond with any Excel property, and it is not stored in the file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedNumericFormat">
            <summary>
            If true, the numeric format will be linked to the parent style, and it will change when you change the style.
            If false the numeric format will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose"/> is false.</b>
            </summary>
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedFont">
            <summary>
            If true, the font will be linked to the parent style, and it will change when you change the style.
            If false the font will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose"/> is false.</b>
            </summary>
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedAlignment">
            <summary>
            If true, the alignment will be linked to the parent style, and it will change when you change the style.
            If false the alignment not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose"/> is false.</b>
            </summary>
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedBorder">
            <summary>
            If true, the border will be linked to the parent style, and it will change when you change the style.
            If false the border will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose"/> is false.</b>
            </summary>
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedFill">
            <summary>
            If true, the fill pattern will be linked to the parent style, and it will change when you change the style.
            If false the fill pattern will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose"/> is false.</b>
            </summary>
        </member>
        <member name="P:FlexCel.Core.TLinkedStyle.LinkedProtection">
            <summary>
            If true, the protection will be linked to the parent style, and it will change when you change the style.
            If false the protection will not change even if you change it in the base style.
            <b>Note that this property has no effect unless <see cref="P:FlexCel.Core.TLinkedStyle.AutomaticChoose"/> is false.</b>
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBuiltInStyle">
            <summary>
            Enumerator with all built-in styles in Excel.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Normal">
            <summary>Normal style, used in all non formatted cells.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.RowLevel">
            <summary>Style used in row outlines.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.ColLevel">
            <summary>Style used in column outlines.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Comma">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Currency">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Percent">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Comma0">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Currency0">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Hyperlink">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Followed_Hyperlink">
            <summary>Built-in Style.</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Note">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Warning_Text">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Emphasis_1">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Emphasis_2">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Emphasis_3">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Title">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Heading_1">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Heading_2">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Heading_3">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Heading_4">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Input">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Output">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Calculation">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Check_Cell">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Linked_Cell">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Total">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Good">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Bad">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Neutral">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent1">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent1_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent1_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent1_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent2">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent2_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent2_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent2_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent3">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent3_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent3_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent3_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent4">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent4_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent4_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent4_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent5">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent5_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent5_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent5_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent6">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent6_20_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent6_40_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Accent6_60_percent">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="F:FlexCel.Core.TBuiltInStyle.Explanatory_Text">
            <summary>Standard style (not actually built in).</summary>
        </member>
        <member name="T:FlexCel.Core.FlexCelError">
            <summary>
            An enumeration of all possible FlexCel non fatal errors that can be logged.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.Undefined">
            <summary>
            This error should never happen.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.XlsTooManyPageBreaks">
            <summary>
            There are more page breaks in this page than the maximum allowed, and page breaks over this maximum are being ignored.
            You can control if you want a "real" exception here with the <see cref="P:FlexCel.Core.ExcelFile.ErrorActions"/> and <see cref="P:FlexCel.Report.FlexCelReport.ErrorActions"/> properties.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RenderMetafile">
            <summary>
            There was a GDI+ error trying to draw or print a metafile. It will be rendered as a bitmap.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RenderCorruptImage">
            <summary>
            The image could not be rendered by GDI+.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.RenderErrorDrawingImage">
            <summary>
            An image could not be drawn. This error normally happens in .NET 1.1 if vj# is not installed.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfFontNotFound">
            <summary>
            The font was not found in the system. A substitute font will be used for the rendering, and it might not look the same.
            <br/> If you are seeing this message in a server, make sure the server has the same fonts installed as the machine where you
            developed the application.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfGlyphNotInFont">
            <summary>
            FlexCel is trying to render a character that is not in the font or the fallback fonts. This character will show as an empty square in the generated PDF
            file.<br/>Normally this means that Excel is replacing fonts, for example Arial with MS Mincho, and to fix this error you should provide a 
            suitable list of Fallback fonts. Look at the PDF documentation in Exporting
            to PDF for more information ("Dealing with missing fonts and glyps" section).
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfUsedFallbackFont">
            <summary>
            FlexCel is trying to render a character that is not in the font, but it is in the fallback font list. This character will be drawn with the
            fallback font.<br/>Normally this means that Excel is replacing fonts, for example Arial with MS Mincho. Look at the PDF documentation in Exporting
            to PDF for more information ("Dealing with missing fonts and glyps" section).
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfFauxBoldOrItalics">
            <summary>
            The font you are trying to ue does not have a "bold" or "italic" variation, and we will use "faux" font created by making the normal font heavier
            or slanting it to the right. This normally results in lower quality fonts, and will not work with fonts embedded. We recomend that you use
            fonts that have italics and bold variations. Look at the PDF documentation in Exporting
            to PDF for more information ("Dealing with missing fonts and glyps" section).
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.PdfCorruptFontInFontFolder">
            <summary>
            The "Fonts" folder in this machine has a file that could not be parsed by FlexCel and is probably corrupt. While this will not affect
            FlexCel in any way, you might want to look at the "Font" folder and remove this font, since it can make windows slower.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.HtmlSaveSharingViolation">
            <summary>
            There was a sharing violation when trying to save an html file, and <see cref="P:FlexCel.Render.FlexCelHtmlExport.IgnoreSharingViolations"/> is true.
            Normally this just means two parallel thread trying to write the same file and can be safely ignored.
            </summary>
        </member>
        <member name="F:FlexCel.Core.FlexCelError.MalformedUrl">
            <summary>
            A malformed Url was detected in the xls file and was not exported. An example of this might be: "mailto:test@test@test".
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlexCelTrace">
            <summary>
            This class reports al FlexCel non-fatal errors. Use it to diagnose when something is going wrong.
            </summary>
        </member>
        <member name="P:FlexCel.Core.FlexCelTrace.Enabled">
            <summary>
            Set this to false if you want to prevent FlexCel from tracing non fatal errors. Note that if you
            don't have any event attached to this class the result will be the same as having Enabled = false.
            </summary>
        </member>
        <member name="E:FlexCel.Core.FlexCelTrace.OnError">
            <summary>
            This event is called each time a non fatal error happens in FlexCel. Hook an even listener to it to be notified when this happens.
            </summary>
        </member>
        <member name="T:FlexCel.Core.FlexCelErrorEventHandler">
            <summary>
            Delegate for ErrorInfo events.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlexCelErrorInfo">
            <summary>
            This class contains generic information about a non fatal error that happened in FlexCel.
            Children classes might contain more information specific to the error type.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlexCelErrorInfo.#ctor(FlexCel.Core.FlexCelError,System.String)">
            <summary>
            Creates a new TFlexCelErrorInfo class.
            </summary>
            <param name="aError">Parameter indicating the type of error that happened.</param>
            <param name="aMessage">String detailing the error that happened.</param>
        </member>
        <member name="P:FlexCel.Core.TFlexCelErrorInfo.Error">
            <summary>
            Error type that this class is holding.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlexCelErrorInfo.Message">
            <summary>
            Error message with detailed information on what happened.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TXlsTooManyPageBreaksError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.XlsTooManyPageBreaks"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.XlsTooManyPageBreaks"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TXlsTooManyPageBreaksError.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TXlsTooManyPageBreaksError.FileName"/></param>
        </member>
        <member name="P:FlexCel.Core.TXlsTooManyPageBreaksError.FileName">
            <summary>
            File with too many page breaks.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TRenderMetafileError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.RenderMetafile"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.RenderMetafile"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TRenderMetafileError.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
        </member>
        <member name="T:FlexCel.Core.TRenderCorruptImageError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.RenderCorruptImage"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.RenderCorruptImage"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TRenderCorruptImageError.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
        </member>
        <member name="T:FlexCel.Core.TRenderErrorDrawingImageError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.RenderErrorDrawingImage"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.RenderErrorDrawingImage"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TRenderErrorDrawingImageError.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
        </member>
        <member name="T:FlexCel.Core.TPdfFontNotFoundError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfFontNotFound"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfFontNotFound"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPdfFontNotFoundError.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
            <param name="aFontName">See <see cref="P:FlexCel.Core.TPdfFontNotFoundError.FontName"/></param>
            <param name="aReplacementFontName">See <see cref="P:FlexCel.Core.TPdfFontNotFoundError.ReplacementFontName"/></param>
        </member>
        <member name="P:FlexCel.Core.TPdfFontNotFoundError.FontName">
            <summary>
            Font that was not found.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPdfFontNotFoundError.ReplacementFontName">
            <summary>
            Font that was used to replace <see cref="P:FlexCel.Core.TPdfFontNotFoundError.FontName"/>.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPdfUsedFallbackFontError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfUsedFallbackFont"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfUsedFallbackFont"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPdfUsedFallbackFontError.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
            <param name="aOriginalFontName">See <see cref="P:FlexCel.Core.TPdfUsedFallbackFontError.OriginalFontName"/></param>
            <param name="aSubstitutedFontName">See <see cref="P:FlexCel.Core.TPdfUsedFallbackFontError.SubstitutedFontName"/></param>
        </member>
        <member name="P:FlexCel.Core.TPdfUsedFallbackFontError.OriginalFontName">
            <summary>
            Font that should be used, but that doesn't contain the needed characters.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPdfUsedFallbackFontError.SubstitutedFontName">
            <summary>
            Fallback font that substituted <see cref="P:FlexCel.Core.TPdfUsedFallbackFontError.OriginalFontName"/>.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPdfGlyphNotInFontError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfGlyphNotInFont"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfGlyphNotInFont"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPdfGlyphNotInFontError.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
            <param name="aFontName">See <see cref="P:FlexCel.Core.TPdfGlyphNotInFontError.FontName"/></param>
            <param name="aMissingChar">See <see cref="P:FlexCel.Core.TPdfGlyphNotInFontError.MissingChar"/></param>
        </member>
        <member name="P:FlexCel.Core.TPdfGlyphNotInFontError.MissingChar">
            <summary>
            Character missing in the font.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPdfGlyphNotInFontError.FontName">
            <summary>
            Font that doesn't contain the character.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPdfFauxBoldOrItalicsError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfFauxBoldOrItalics"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfFauxBoldOrItalics"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPdfFauxBoldOrItalicsError.#ctor(System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
            <param name="aFontName">See <see cref="P:FlexCel.Core.TPdfFauxBoldOrItalicsError.FontName"/></param>
            <param name="aStyle">See <see cref="P:FlexCel.Core.TPdfFauxBoldOrItalicsError.Style"/></param>
        </member>
        <member name="P:FlexCel.Core.TPdfFauxBoldOrItalicsError.FontName">
            <summary>
            Name of the font that doesn't contain Italics or bold definition.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPdfFauxBoldOrItalicsError.Style">
            <summary>
            Style missing from the font.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPdfCorruptFontInFontFolderError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.PdfCorruptFontInFontFolder"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.PdfCorruptFontInFontFolder"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPdfCorruptFontInFontFolderError.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.TPdfCorruptFontInFontFolderError.FileName"/></param>
        </member>
        <member name="P:FlexCel.Core.TPdfCorruptFontInFontFolderError.FileName">
            <summary>
            Font file that FlexCel couldn't parse.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlSaveSharingViolationError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.HtmlSaveSharingViolation"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.HtmlSaveSharingViolation"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THtmlSaveSharingViolationError.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
            <param name="aFileName">See <see cref="P:FlexCel.Core.THtmlSaveSharingViolationError.FileName"/></param>
        </member>
        <member name="P:FlexCel.Core.THtmlSaveSharingViolationError.FileName">
            <summary>
            File with the sharing violation.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TMalformedUrlError">
            <summary>
            This class has information for a <see cref="F:FlexCel.Core.FlexCelError.MalformedUrl"/> error. Look at <see cref="F:FlexCel.Core.FlexCelError.MalformedUrl"/>
            for more information.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TMalformedUrlError.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aMessage">See <see cref="P:FlexCel.Core.TFlexCelErrorInfo.Message"/></param>
            <param name="aUrl">See <see cref="P:FlexCel.Core.TMalformedUrlError.Url"/></param>
        </member>
        <member name="P:FlexCel.Core.TMalformedUrlError.Url">
            <summary>
            Malformed url.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TExternNameRecord">
            <summary>
            Extern Name.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TExternNameRecordList">
            <summary>
            List of Extern Name records.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSupBookRecord">
            <summary>
            A Supbook with all the ExternNames linked to it.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TSupBookRecord.#ctor(System.Int32)">
            <summary>
            Creates an empty local supbook.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TSupBookRecord.CreateAddin">
            <summary>
            Creates an empty addin supbook.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TSupBookRecord.CreateExternalRef(System.String,System.String)">
            <summary>
            Creates an empty external file supbook.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TExternSheetRecord">
            <summary>
            Extern Sheet.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TExternRef">
            <summary>
            One external reference, parsed.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSupBookRecordList">
            <summary>
            List of SupBook records.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TNoteRecord">
            <summary>
            A cell Comment.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TNoteRecord.#ctor(System.Int32,System.Int32,FlexCel.Core.TRichString,System.String,FlexCel.XlsAdapter.TDrawing,FlexCel.Core.TImageProperties,FlexCel.XlsAdapter.TFontRecordList,FlexCel.XlsAdapter.TWorkSheet)">
            <summary>
            CreateFromData
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TNoteRecordList">
            <summary>
            A list of note records
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TNoteList">
            <summary>
            A list of TNoteRecordList lists.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSortRange">
            <summary>
            A static utility class to sort a range of cells.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPxlStream">
            <summary>
            A stream abstraction to write Pxl files.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPxlSaveData">
            <summary>
            Extra data needed to save a pxl file.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TFontEmbed">
            <summary>
            The way fonts will be embedded on the resulting pdf file.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontEmbed.None">
            <summary>
            No font will be embedded. The result file will be smaller, but the file might not look fine on a
            computer without the font installed. It is recomended that you embed the fonts.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontEmbed.Embed">
            <summary>
            All fonts will be embedded. The file will be larger than when not embedding fonts, but it will print on any computer. 
            Note that you can control which fonts to embed wnd which not with the OnFontEmbed event.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontEmbed.OnlySymbolFonts">
            <summary>
            This is a compromise between embedding all fonts and not embedding them. It will only embed fonts with symbols, and leave normal fonts
            not embedded.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TFontSubset">
            <summary>
            Determines if full fonts will be embedded in the generated pdf files, or only the characters being used.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontSubset.DontSubset">
            <summary>
            All characters of the font will be embedded into the file. This setting creates bigger files, but they can be edited after generated.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontSubset.Subset">
            <summary>
            Only characters actually used by the document will be embedded into the file. This will create smaller files than 
            embedding the full font, but it will be difficult to edit the document once it has been created. 
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TFontMapping">
            <summary>
            How fonts will be replaced on the generated PDF file.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontMapping.ReplaceStandardFonts">
            <summary>
            Arial will be replaced with Helvetica, Times new roman with Times and True type Courier with
            PS1 Courier. All other fonts will remain unchanged.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontMapping.ReplaceAllFonts">
            <summary>
            Serif fonts will be mapped to Times, MonoSpace to Courier, Sans-Serif to Helvetica and Symbol fonts to Symbol. Using this option
            you can get the smallest file sizes and 100% portability, but the resulting file will only use those fonts. Use it with care, specially if you use symbol fonts.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TFontMapping.DontReplaceFonts">
            <summary>
            All actual fonts will be used. If you use this option and do not embed fonts, the fonts will look bad on computers
            without them installed. If you embed fonts, files will be larger.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfProperties">
            <summary>
            Encapsulates the document properties for the PDF file.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfProperties.#ctor">
            <summary>
            Creates a new instance of the class. All properties are set to null.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfProperties.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the class with given properties.
            </summary>
            <param name="aTitle">Document title.</param>
            <param name="aAuthor">Document author.</param>
            <param name="aSubject">Document subject.</param>
            <param name="aKeywords">Keywords to search on the document.</param>
            <param name="aCreator">Application that created the document.</param>
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Title">
            <summary>
            Document title.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Author">
            <summary>
            Document author.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Subject">
            <summary>
            Document subject.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Keywords">
            <summary>
            Keywords to search on the document.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfProperties.Creator">
            <summary>
            Application that created the document.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfCommentIcon">
            <summary>
            Icon for a pdf comment
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Comment">
            <summary>A callout icon..</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Help">
            <summary>A ? inside a circle icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Insert">
            <summary>A triangle icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Key">
            <summary>A key icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.NewParagraph">
            <summary>A small triangle icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Note">
            <summary>A sheet of paper icon.</summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentIcon.Paragraph">
            <summary>A "Pi" icon.</summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfCommentType">
            <summary>
            Different types of comments.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentType.Text">
            <summary>
            An icon that will show the comment.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentType.Square">
            <summary>
            A rectangle including the comment.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPdfCommentType.Circle">
            <summary>
            A Circle or ellipsis including the comment.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfCommentProperties">
            <summary>
            Properties for a PDF comment.
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.TPdfCommentProperties.#ctor(FlexCel.Pdf.TPdfCommentType,FlexCel.Pdf.TPdfCommentIcon,System.Single,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a new instance of a comment object.
            </summary>
            <param name="aCommentType"></param>
            <param name="aIcon"></param>
            <param name="aOpacity"></param>
            <param name="aBackgroundColor"></param>
            <param name="aLineColor"></param>
        </member>
        <member name="M:FlexCel.Pdf.TPdfCommentProperties.#ctor(FlexCel.Pdf.TPdfCommentProperties)">
            <summary>
            Creates a new TPdfCommentProperties instance based on the data form another instance.
            </summary>
            <param name="aProps"></param>
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.CommentType">
            <summary>
            Type of comment.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.Icon">
            <summary>
            Icon for the comment. Only visible if <see cref="P:FlexCel.Pdf.TPdfCommentProperties.CommentType"/> is Text
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.Opacity">
            <summary>
            A value between 0 and 1 specifying the opacity of the note.
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.BackgroundColor">
            <summary>
            Background color for the comment. Only visible if <see cref="P:FlexCel.Pdf.TPdfCommentProperties.CommentType"/> is NOT Text
            </summary>
        </member>
        <member name="P:FlexCel.Pdf.TPdfCommentProperties.LineColor">
            <summary>
            Line color for the comment. Only visible if <see cref="P:FlexCel.Pdf.TPdfCommentProperties.CommentType"/> is NOT Text
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPageLayout">
            <summary>
            Viewer settings when the document is opened for the first time.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.None">
            <summary>
            Keep the layout as defined by the user.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.Outlines">
            <summary>
            Show the Outlines pane when opening the document.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.Thumbs">
            <summary>
            Show the thumbs pane when opening the document.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.TPageLayout.FullScreen">
            <summary>
            Open the document in FullScreen mode.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TMultipartType">
            <summary>
            Different ways to define a multipart arcvhive.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Related">
            <summary>
            Parts inside this container are related, for example this message could contain an HTML file and its external images.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Alternative">
            <summary>
            Parts inside this container ara an alternative one form the other. For example, a message could be sent in HTML and plain Text, once inside a
            different MIME part, and the mail reader should chose the best alternative of the parts to display.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Mixed">
            <summary>
            Parts inside this MIME container are not related, e.g. different attachments.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Digest">
            <summary>
            A compilation of messages, used in forwarded emails.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TMultipartType.Signed">
            <summary>
            A part containing files and one signature.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TContentTransferEncoding">
            <summary>
            Defines how a part of a MIME message will be coded.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TContentTransferEncoding.QuotedPrintable">
            <summary>
            Use the Quoted Printable algorithm (RFC 2045 section 6.7).
            You will normally use this encoding for text.
            When using this option, you need to write the part content using <see cref="M:FlexCel.Core.TMimeWriter.WriteQuotedPrintable(System.IO.TextWriter,System.String)"/> 
            or a similar method.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TContentTransferEncoding.Base64">
            <summary>
            Use base64 algorithm (RFC 2045 section 6.7).
            You would normally use this encoding for binary files.
            When using this option, you need to write the part content using <see cref="M:FlexCel.Core.TMimeWriter.WriteBase64(System.IO.TextWriter,System.Byte[])"/> 
            or a similar method.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TQEncodeMetaInfo">
            <summary>
            Defines how a string returned by Q-Encode will be handled.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TQEncodeMetaInfo.None">
            <summary>
            This will return the raw Q-Encoded string, without "=?charset?encoding?" at the beginning or "?=" at the end.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TQEncodeMetaInfo.Always">
            <summary>
            This will always return the Q-Encoded string with "=?charset?encoding?" at the beginning and "?=" at the end.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TQEncodeMetaInfo.OnlyIfNeeded">
            <summary>
            This will return the string with "=?charset?encoding?" only if the original string has special characters that need encoding,  if not it will return the original string without encoding.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TMimeWriter">
            <summary>
            A simple class used to create MIME formatted messages. While it does not provide much functionality, it gives enough to create simple multipart archives.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.CreateMultiPartMessage(System.IO.TextWriter,FlexCel.Core.TMultipartType,System.String,System.Uri)">
            <summary>
            Creates the headers for a multipart MIME file. This must be the first method to call in order to create a MIME file.
            After this, you need to call <see cref="M:FlexCel.Core.TMimeWriter.AddPartHeader(System.IO.TextWriter,System.String,FlexCel.Core.TContentTransferEncoding,System.Uri,System.String,System.String)"/> and start adding the parts of the message, and you <b>always</b>
            need to end the message by calling <see cref="M:FlexCel.Core.TMimeWriter.EndMultiPartMessage(System.IO.TextWriter)"/>.
            </summary>
            <param name="message"></param>
            <param name="multipartType">Type of multipart for this file.</param>
            <param name="contentType">Type of the header as defined in the MIME standard, e.g. "text/plain", "text/html", etc. This is the type of the main part on a related message. Set it to null if there is no main part.</param>
            <param name="contentLocation">The location for the whole mime file. null if you do not want to set a location. for this to work in ie/opera, etc, this should be something like "file:///filename.ext"</param>
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.AddPartHeader(System.IO.TextWriter,System.String,FlexCel.Core.TContentTransferEncoding,System.Uri,System.String,System.String)">
            <summary>
            Adds the header for a part in a multipart Mime message. After calling this method, you need to write your data content into
            the TextWriter using <see cref="M:FlexCel.Core.TMimeWriter.WriteQuotedPrintable(System.IO.TextWriter,System.String)"/> or <see cref="M:FlexCel.Core.TMimeWriter.WriteBase64(System.IO.TextWriter,System.Byte[])"/> and after that always call <see cref="M:FlexCel.Core.TMimeWriter.EndPart(System.IO.TextWriter)"/>.
            </summary>
            <param name="message">TextWriter where you are saving the message.</param>
            <param name="contentType">Type of the header as defined in the MIME standard, e.g. "text/plain", "text/html", etc.</param>
            <param name="contentTransferEncoding">How the part will be codified. Use base64 for binarty TextWriter and quotedprintable for text.</param>
            <param name="contentLocation">The location for this resource. null if you do not want to set a location.</param>
            <param name="contentId">Content id of the resource, if you want to use it in cid: links. Null if you do not want to specify a content-id. Note that this string will not be escaped by the framework, so make sure it 
            contains valid characters. As it needs to be globally unique, normally a GUID can be a good option here.</param>
            <param name="encodingName">Name for the encoding on this part. Null means do not write an encoding. (for example in binary parts)</param>
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.EndPart(System.IO.TextWriter)">
            <summary>
            Ends a MIME part started with <see cref="M:FlexCel.Core.TMimeWriter.AddPartHeader(System.IO.TextWriter,System.String,FlexCel.Core.TContentTransferEncoding,System.Uri,System.String,System.String)"/>.
            </summary>
            <param name="message">TextWriter where you are saving the message.</param>
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.EndMultiPartMessage(System.IO.TextWriter)">
            <summary>
            Call this method after the last call to EndPart, to finish the MIME message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.QEncode(System.String,FlexCel.Core.TQEncodeMetaInfo)">
            <summary>
            Returns the Q-encode of a string, used in the MIME Headers.  //RFC 2047
            </summary>
            <param name="s">String to encode</param>
            <param name="addMetaInfo">Defines if to add the string  "=?charset?encoding?" will be appended at the begining, and "?=" at the end.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.WriteQuotedPrintable(System.IO.TextWriter,System.String)">
            <summary>
            Writes the Quoted Printable encoding of a string, as defined in RFC 2045 section 6.7
            This method keeps state and breaks the line  every time it is longer than 76 characters. 
            The state is reset each time <see cref="M:FlexCel.Core.TMimeWriter.AddPartHeader(System.IO.TextWriter,System.String,FlexCel.Core.TContentTransferEncoding,System.Uri,System.String,System.String)"/> is called.
            </summary>
            <param name="Data">TextWriter where we will write the data.</param>
            <param name="s">String to Encode.</param>
        </member>
        <member name="M:FlexCel.Core.TMimeWriter.WriteBase64(System.IO.TextWriter,System.Byte[])">
            <summary>
            Writes the base64 encoding of a byte array, as defined in RFC 2045 section 6.8
            This method does not keep the state, so all binary data must be supplied at once.
            As an alternative you could use <see cref="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)"/>, but this method
            avoids creating a temporary string, and then doubling the memory needed for the encoding.
            This method will also correctly split the string at 76 characters, while Convert.ToBase64 in .NET 1.1 will not. (2.0 added this support)
            </summary>
            <param name="Data">TextWriter where we will write the data.</param>
            <param name="s">String to Encode.</param>
        </member>
        <member name="T:FlexCel.XlsAdapter.TXorEncryption">
            <summary>
            Excel 95 XOR Encryption.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TXorEncryption.Encode(System.UInt16,System.Int64,System.Int32)">
            <summary>
            This routine does not call Encode(Byte[]...) for performance reasons. We want it to be fast.
            </summary>
            <param name="Data"></param>
            <param name="StreamPosition"></param>
            <param name="RecordLen"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.XlsAdapter.TXorEncryption.Encode(System.UInt32,System.Int64,System.Int32)">
            <summary>
            This routine does not call Encode(Byte[]...) for performance reasons. We want it to be fast.
            </summary>
            <param name="Data"></param>
            <param name="StreamPosition"></param>
            <param name="RecordLen"></param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEncryptionData">
            <summary>
            Holds an encryption engine and a password. Engine has to be created on demand (and is polymorphical) so we need to store password in another place.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TFileEncryption">
            <summary>
            Saves the records for file encryption.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TWorkbookProtection">
            <summary>
            Saves the records for file protection.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheetProtection">
            <summary>
            Saves the records for sheet protection.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBOFRecord">
            <summary>
            Begin of File. Every section on an XLS file should Start with a TBOFRecord and end
            with a <see cref="T:FlexCel.XlsAdapter.TEOFRecord"/> record. This record is never encrypted.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TEOFRecord">
            <summary>
            End of File. Every section on an XLS file should Start with a <see cref="T:FlexCel.XlsAdapter.TBOFRecord"/>  and end
            with a TEOFRecord record
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TTemplateRecord">
            <summary>
            If this record is present, the file is an xlt template.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TInterfaceHdrRecord">
            <summary>
            Never encrypted
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TInterfaceEndRecord">
            <summary>
            End of interface section.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TObjRecord">
            <summary>
            Object Record. This record interacts with MSODRAWING ones.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TTXORecord">
            <summary>
            Text box.
            </summary>
        </member>
        <member name="M:FlexCel.XlsAdapter.TTXORecord.#ctor">
            <summary>
            Creates a new empty txo.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TBoundSheetRecord">
            <summary>
            Bound sheets. The file position is not encrypted.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCodeNameRecord">
            <summary>
            Name for the VBA sheet asociated to a sheet. This record is REQUIRED if there are macros, and can't be repeated.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TObProjRecord">
            <summary>
            When present, there are macros on the sheet.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TCellMergingRecord">
            <summary>
            A Cell merging.
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDValRecord">
            <summary>
            Data validation
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TDVRecord">
            <summary>
            Data validation
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TSheetExtRecord">
            <summary>
            SheetExt (currently only sheet tab color).
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPaneRecord">
            <summary>
            Window Freeze
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TGutsRecord">
            <summary>
            Guts record for grouping and outline.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TBandMoveType.Alone">
            <summary>
            Only this band, not its children. Faster, but use it with care.
            </summary>
        </member>
        <member name="F:FlexCel.Report.TBandMoveType.DirectChildren">
            <summary>
            Only direct children of the master band (1 level)
            </summary>
        </member>
        <member name="F:FlexCel.Report.TBandMoveType.AllChildren">
            <summary>
            Children and children of the children...
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TPdfBaseSection">
            <summary>
            Base section for all PDF sections on a file.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.THeaderSection">
            <summary>
            Header. It should only have a header and a comment record. The Comment record
            should have at lest 4 non ASCII 128 characters.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TBodySection">
            <summary>
            Where the data goes.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TXRefSection">
            <summary>
            Fixed form section.
            xref
            n l
            0000000000 00000 n
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.TTrailerSection">
            <summary>
            The trailer with XRefs offsets
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.PdfErr">
            <summary>
            Error Codes. We use this and not actual strings to make sure all are correctly spelled.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInternal">
            <summary>
            Internal error.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidPngImage">
            <summary>The png image is corrupt, invalid, or not in a format FlexCel can understand.</summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidPageSize">
            <summary>This PaperKind is not supported. Please use a custom Paper size.</summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidFont">
            <summary>
            The font file for this font cannot be found.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidPageNumber">
            <summary>
            Invalid page number.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrTryingToSignStartedDocument">
            <summary>
            A pdf file must be signed before calling BeginDoc.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrNoDotsInSigName">
            <summary>
            Signature names cannot contain dots.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrSigningLengthToSmall">
            <summary>
            The estimated size for the signature was smaller than the final size.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrUnassingedSignerFactory">
            <summary>
            There is no signer associated with the signature.
            </summary>
        </member>
        <member name="F:FlexCel.Pdf.PdfErr.ErrInvalidAllowedChanges">
            <summary>
            AllowedChanges value is invalid.
            </summary>
        </member>
        <member name="T:FlexCel.Pdf.PdfMessages">
            <summary>
            FlexCel Native PDF Constants. It reads the resources from the active locale, and
            returns the correct string.
            If your language is not supported and you feel like translating the messages,
            please send me a copy. I will include it on the next FlexCel version. 
            <para>To add a new language:
            <list type="number">
            <item>
               Copy the file pdfmsg.resx to your language (for example, pdfmsg.es.resx to translate to spanish)
            </item><item>
               Edit the new file and change the messages(you can do this visually with visual studio)
            </item><item>
               Add the .resx file to the FlexCel project
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.PdfMessages.GetString(FlexCel.Pdf.PdfErr,System.Object[])">
            <summary>
            Reruns a string based on the PdfErr enumerator, formatted with args.
            This method is used to get an Exception error message. 
            </summary>
            <param name="ResName">Error Code.</param>
            <param name="args">Params for this error.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Pdf.PdfMessages.ThrowException(FlexCel.Pdf.PdfErr,System.Object[])">
            <summary>
            Throws a standard FlexCelPdfException.
            </summary>
            <param name="ResName">Error Code.</param>
            <param name="args">Params for this error.</param>
        </member>
        <member name="M:FlexCel.Pdf.PdfMessages.ThrowException(System.Exception,FlexCel.Pdf.PdfErr,System.Object[])">
            <summary>
            Throws a standard FlexCelPdfException with innerException.
            </summary>
            <param name="e">Inner exception.</param>
            <param name="ResName">Error Code.</param>
            <param name="args">Params for this error.</param>
        </member>
        <member name="T:FlexCel.Pdf.FlexCelPdfException">
            <summary>
            Exception thrown when an exception on the PDF engine happens. 
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.FlexCelPdfException.#ctor">
            <summary>
            Creates a new FlexCelPdfException
            </summary>
        </member>
        <member name="M:FlexCel.Pdf.FlexCelPdfException.#ctor(System.String)">
            <summary>
            Creates a new FlexCelPdfException with an error message.
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:FlexCel.Pdf.FlexCelPdfException.#ctor(System.String,FlexCel.Pdf.PdfErr)">
            <summary>
            Creates a new FlexCelPdfException with an error message and an exception code.
            </summary>
            <param name="message">Error Message</param>
            <param name="aErrorCode">Error code of the exception.</param>
        </member>
        <member name="M:FlexCel.Pdf.FlexCelPdfException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a nested Exception.
            </summary>
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
        </member>
        <member name="M:FlexCel.Pdf.FlexCelPdfException.#ctor(System.String,FlexCel.Pdf.PdfErr,System.Exception)">
            <summary>
            Creates a nested Exception.
            </summary>
            <param name="message">Error Message.</param>
            <param name="inner">Inner Exception.</param>
            <param name="aErrorCode">Error code of the exception.</param>
        </member>
        <member name="M:FlexCel.Pdf.FlexCelPdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an exception from a serialization context.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming Context.</param>
        </member>
        <member name="M:FlexCel.Pdf.FlexCelPdfException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements standard GetObjectData.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:FlexCel.Pdf.FlexCelPdfException.ErrorCode">
            <summary>
            Error code on the Exception.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TWildcardMatch">
            <summary>
            A small class to do pattern matching using widcards.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TWildcardMatch.LiteralFindIndexes(System.String,System.String,System.Int32,System.Boolean[])">
            <summary>
            Returns all matches of pattern inside s, considering the special "?" character.
            </summary>
            <param name="pattern"></param>
            <param name="s"></param>
            <param name="start_s"></param>
            <param name="ProtectedChars"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TWildcardMatch.FindIndexes(System.String,System.String,System.Int32)">
            <summary>
            This will find pattern on s considering wildcards.
            </summary>
            <param name="pattern"></param>
            <param name="s"></param>
            <param name="start_s"></param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.XlsAdapter.XlsMetafiles">
            <summary>
            Converts Image formats from standard WMF to internal XLS WMF representation.
            For this class to work, you need to install Visual J# runtime from http://msdn.microsoft.com/vjsharp/downloads/howtoget.asp
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.WmfHeader">
            <summary>
            A wmf file header
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPxlVersion">
            <summary>
            Supported pxl versions
            </summary>
        </member>
        <member name="T:FlexCel.XlsAdapter.TPxlRecordLoader">
            <summary>
            A class to load pxl (Pocket Excel) files. (2.0 and 1.0)
            </summary>
        </member>
        <member name="T:FlexCel.Report.TRPNExpression">
            <summary>
            Holds a definition for a #IF or #evaluate tag.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TTagToken">
            <summary>
            A #tag.
            </summary>
        </member>
        <member name="T:FlexCel.Report.TEvaluateWithTags">
            <summary>
            Specialization of TEvaluateFormula that recognizes "&lt;#data&gt;" for using with &lt;#if&gt; and &lt;#evaluate&gt;
            </summary>
        </member>
        <member name="T:FlexCel.Render.RenderMetrics">
            <summary>
            Class for calculating widths and heights of strings. UCS32/surrogate enabled.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlVersion">
            <summary>
            Defines the HTML version that will be used when exporting.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlVersion.Html_401">
            <summary>
            The HTML generated will be 4.01 strict. See http://www.w3.org/TR/html401/
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlVersion.XHTML_10">
            <summary>
            HTML generated will be XHTML 1.0. See http://www.w3.org/TR/xhtml1/
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlStyle">
            <summary>
            Defines the way html is generated.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlStyle.Simple">
            <summary>
            Only HTML 3.2 tags (like &lt;b&gt;) will be used.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlStyle.Css">
            <summary>
            Cascading style sheets will be used.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlFileFormat">
            <summary>
            How the html page will be saved.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlFileFormat.Html">
            <summary>
            File will be saved as an html file with external images.
            </summary>
        </member>
        <member name="F:FlexCel.Core.THtmlFileFormat.MHtml">
            <summary>
            File will be saved in MHTML (Mime HTML) file format with all the data inside a single file.
            This format is the one used to encode emails.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TEnterStyle">
            <summary>
            Defines how characters will be converted when encoding a string as Html.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEnterStyle.Br">
            <summary>
            Enter characters in the input string will be converted to &lt;br&gt; tags. Multiple spaces will be converted to &amp;nbsp; entities.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEnterStyle.Char10">
            <summary>
            Enter characters in the input string will be converted to &amp;#0A; entities. Multiple spaces will be not converted.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TEnterStyle.Ignore">
            <summary>
            Enter and multiple spaces will be ignored.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TImageNaming">
            <summary>
            Defines how images will be automatically named by FlexCel, when you do not supply a better name.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TImageNaming.Default">
            <summary>
            The image will be named using standard naming, in a format similar to "filename_image_n.png"
            </summary>
        </member>
        <member name="F:FlexCel.Core.TImageNaming.Guid">
            <summary>
            The image will be named using a GUID. This ensures that any image will be unique even if you have many users
            requesting the same file at the same time. (Default naming will use the same name for all the users, so images would be overwritten).
            As a downside, everytime an image is called a new file will be created, so you can get a lot of images just from an user refreshing a page.
            </summary>
        </member>
        <member name="T:FlexCel.Core.HtmlFontEventArgs">
            <summary>
            Arguments passed on <see cref="M:FlexCel.Render.FlexCelHtmlExport.OnHtmlFont(FlexCel.Core.HtmlFontEventArgs)"/>, 
            </summary>
        </member>
        <member name="M:FlexCel.Core.HtmlFontEventArgs.#ctor(FlexCel.Core.ExcelFile,FlexCel.Core.TFlxFont,System.String)">
            <summary>
            Creates a new Argument.
            </summary>
            <param name="aWorkbook">See <see cref="P:FlexCel.Core.HtmlFontEventArgs.Workbook"/></param>
            <param name="aCellFont">See <see cref="P:FlexCel.Core.HtmlFontEventArgs.CellFont"/></param>
            <param name="aFontFamily">See <see cref="P:FlexCel.Core.HtmlFontEventArgs.FontFamily"/></param>
        </member>
        <member name="P:FlexCel.Core.HtmlFontEventArgs.Workbook">
            <summary>
            ExcelFile with the cell we are exporting.
            </summary>
        </member>
        <member name="P:FlexCel.Core.HtmlFontEventArgs.CellFont">
            <summary>
            Font we want to process.
            </summary>
        </member>
        <member name="P:FlexCel.Core.HtmlFontEventArgs.FontFamily">
            <summary>
            Use this property to return the new font you want for the cell, if you need to replace it.
            Note that you can return more than one font here, and the format for this string is the format on a font selector "font-family" in a CSS stylesheet.
            You could for example return the string @"Baskerville, "Heisi Mincho W3", Symbol, serif" here. Look for a complete description of 
            the "font-family" descriptor in the CSS reference. (http://www.w3.org/TR/REC-CSS2/)
            </summary>
        </member>
        <member name="T:FlexCel.Core.HtmlFontEventHandler">
            <summary>
            Delegate used to specify which fonts to use on a page.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlFixes">
            <summary>
            Defines special fixes to the generated files to workaround browser bugs.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THtmlFixes.Equals(System.Object)">
            <summary>
            True if both objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.THtmlFixes.op_Equality(FlexCel.Core.THtmlFixes,FlexCel.Core.THtmlFixes)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.THtmlFixes.op_Inequality(FlexCel.Core.THtmlFixes,FlexCel.Core.THtmlFixes)">
            <summary></summary>
        </member>
        <member name="M:FlexCel.Core.THtmlFixes.GetHashCode">
            <summary>
            Hash code for the struct.
            </summary>
            <returns>hashcode.</returns>
        </member>
        <member name="P:FlexCel.Core.THtmlFixes.IE6TransparentPngSupport">
            <summary>
            By default, Internet explorer does not support transparent PNGs. Normally this is not an issue, since Excel does not use 
            much transparency. But if you rely on transparent images and don't want to use gif images instead of png, you can set this
            property to true. It will add special code to the HTML file to support transparent images in IE6.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THtmlFixes.Outlook2007CssSupport">
            <summary>
            Outlook 2007 renders HTML worse than previous versions, since it switched to the Word 2007 rendering engine instead of
            Internet Explorer to show HTML emails. If you apply this fix, some code will be added to the generated HTML file to improve
            the display in Outlook 2007. Other browsers will not be affected and will still render the original file. Turn this option on if
            you plan to email the generated file as an HTML email or to edit them in Word 2007. Note that the pages will not validate with the
            w3c validator if this option is on.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THtmlFixes.WordWrapSupport">
            <summary>
            Some older browsers (and Word 2007) might not support the CSS white-space tag. In this case, if a line longer than a cell cannot be expanded to the right
            (because there is data in the next cell) it will wrap down instead of being cropped. This fix will cut the text on this cell to the displayable
            characters. If a letter was displayed by the half on the right, after applying this fix it will not display.
            This fix is automatically applied when <see cref="P:FlexCel.Core.THtmlFixes.Outlook2007CssSupport"/> is selected, so there is normally no reason to apply it. You might get 
            a smaller file with this fix (if you have a lot of hidden text), but the display will not be as accurate as when it is off, so it is recomended to keep it off.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlEntities">
            <summary>
            Contains a list of HTML entities and their values
            </summary>
        </member>
        <member name="M:FlexCel.Core.THtmlEntities.TryNameToCode(System.String,System.Int32@)">
            <summary>
            Converts an Html entity like "amp" into the unicode code for the character. The input string can also 
            be a # code, in decimal or hexadecimal. (for example &amp;#64).
            </summary>
            <param name="EntityName">Name of the entity without the starting "&amp;" and the trailing ";"</param>
            <param name="Code">Unicode representation of the entity.</param>
            <returns>True if the code exists, false otherwise.</returns>
        </member>
        <member name="M:FlexCel.Core.THtmlEntities.GetTag(System.String,System.Int32)">
            <summary>
            Returns the identifier of a tag.
            </summary>
            <param name="HtmlString">String containing the tag.</param>
            <param name="i">Position of the open "&lt;"</param>
            <returns>The tag name.</returns>
        </member>
        <member name="M:FlexCel.Core.THtmlEntities.EncodeAsHtml(System.String,FlexCel.Core.THtmlVersion,System.Text.Encoding)">
            <summary>
            Converts a normal string into a string that can be used inside an HTML file. This includes converting characters
            to entities, replacing carriage returns by &lt;br&gt; tags, replacing multiple spaces by nbsp and more. EnterStyle is TEnterStyle.Br if omitted.
            </summary>
            <param name="originalString">String we want to convert.</param>
            <param name="htmlVersion">Version of html we are targeting. In Html 4 &lt;br&gt; is valid and &lt;br/&gt; is not. In XHtml the inverse is true.</param>
            <param name="encoding">Code page used to encode the string. Normally this is UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.THtmlEntities.EncodeAsHtml(System.String,FlexCel.Core.THtmlVersion,System.Text.Encoding,FlexCel.Core.TEnterStyle)">
            <summary>
            Converts a normal string into a string that can be used inside an HTML file. This includes converting characters
            to entities, replacing carriage returns by &lt;br&gt; tags, replacing multiple spaces by nbsp and more. EnterStyle is TEnterStyle.Br if omitted.
            </summary>
            <param name="originalString">String we want to convert.</param>
            <param name="htmlVersion">Version of html we are targeting. In Html 4 &lt;br&gt; is valid and &lt;br/&gt; is not. In XHtml the inverse is true.</param>
            <param name="EnterStyle">How to convert enters and multiple spaces in the text.</param>
            <param name="encoding">Code page used to encode the string. Normally this is UTF-8</param>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.THtmlEntities.MaxNameLength">
            <summary>
            Returns the maximum length for a name. This includes decimal entities, that can have up to 7 numbers.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlTag">
            <summary>
            Contains an HTML tag and its position on the string.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THtmlTag.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new instance of a Tag.
            </summary>
            <param name="aPosition">Position of the final string where the tag is.</param>
            <param name="aText">Text of the tag. (not including brackets)</param>
        </member>
        <member name="P:FlexCel.Core.THtmlTag.Text">
            <summary>
            The tag text.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THtmlTag.Position">
            <summary>
            Position of this tag inside the converted string. (the string without tags)
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlParsedString">
            <summary>
            An Html string parsed into a C# string and tags.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THtmlParsedString.#ctor">
            <summary>
            Creates a new empty THtmlParsedString.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THtmlParsedString.#ctor(System.String)">
            <summary>
            Creates a new THtmlParsedString containing an existing Html string.
            </summary>
            <param name="HtmlString">Html string we want to parse.</param>
        </member>
        <member name="M:FlexCel.Core.THtmlParsedString.Parse(System.String)">
            <summary>
            Parses an Html string and fills this instance with the parsed values.
            </summary>
            <param name="HtmlString">Html string we want to parse.</param>
        </member>
        <member name="P:FlexCel.Core.THtmlParsedString.Text">
            <summary>
            The parsed html text.
            </summary>
        </member>
        <member name="P:FlexCel.Core.THtmlParsedString.Tags">
            <summary>
            A list of the tags on the parsed string.
            </summary>
        </member>
        <member name="T:FlexCel.Core.THtmlColors">
            <summary>
            Converts between Color structs and HTML values.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THtmlColors.GetColor(System.String)">
            <summary>
            Returns a Color struct from an HTML string
            </summary>
            <param name="Value">String with color on HTML format. (one of the 16 named colors or #notation)</param>
            <returns>The corresponding Color.</returns>
        </member>
        <member name="M:FlexCel.Core.THtmlColors.GetColor(System.Drawing.Color)">
            <summary>
            Returns an HTML color string from a Color struct.
            </summary>
            <param name="Value">The color we want to convert.</param>
            <returns>String with color on HTML format. (one of the 16 named colors or #notation).</returns>
        </member>
        <member name="T:FlexCel.Core.THtmlTagCreator">
            <summary>
            Creates html tags for different actions, and depending on the HTML style.
            </summary>
        </member>
        <member name="M:FlexCel.Core.THtmlTagCreator.StartFontColor(System.Drawing.Color,FlexCel.Core.THtmlStyle)">
            <summary>
            Returns a tag to change the font color. Remember to close it with <see cref="M:FlexCel.Core.THtmlTagCreator.EndFontColor(FlexCel.Core.THtmlStyle)"/>
            </summary>
            <param name="aColor">Color to use.</param>
            <param name="htmlStyle">Style of the generated HTML.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.THtmlTagCreator.EndFontColor(FlexCel.Core.THtmlStyle)">
            <summary>
            Returns a tag to end changing a font color that was started with <see cref="M:FlexCel.Core.THtmlTagCreator.StartFontColor(System.Drawing.Color,FlexCel.Core.THtmlStyle)"/>
            </summary>
            <param name="htmlStyle">Specifies if to use css or not.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.THtmlTagCreator.DiffFont(FlexCel.Core.ExcelFile,FlexCel.Core.TFlxFont,FlexCel.Core.TFlxFont,FlexCel.Core.TFlxFont,FlexCel.Core.THtmlVersion,FlexCel.Core.THtmlStyle,System.Text.StringBuilder@,FlexCel.Core.IHtmlFontEvent)">
            <summary>
            Returns the tags for a difference between one font and the next.
            </summary>
            <param name="lastFont"></param>
            <param name="nextFont"></param>
            <param name="htmlStyle"></param>
            <param name="htmlVersion"></param>
            <param name="originalFont"></param>
            <param name="xls"></param>
            <param name="tagsToClose">Tags that need to be closed. This method might decide to acumulate font tags or not, depending on the case.</param>
            <param name="OnHtmlFont"></param>
            <returns></returns>
        </member>
        <member name="T:FlexCel.Core.TShapeProperties">
            <summary>
            A class describing an Excel graphics object.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TShapeProperties.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TShapeProperties.Children(System.Int32)">
            <summary>
            Returns one of the shapes inside of this one.
            </summary>
            <param name="index">Index of the shape (1-based)</param>
            <returns>A child shape.</returns>
        </member>
        <member name="M:FlexCel.Core.TShapeProperties.AddChild(FlexCel.Core.TShapeProperties)">
            <summary>
            Adds a new child for this autoshape.
            </summary>
            <param name="sp">Shape to be added.</param>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ShapeType">
            <summary>
            Type of shape. Note that this is not the same as <see cref="P:FlexCel.Core.TShapeProperties.ObjectType"/>
            A comment might have a ShapeType=TShapeType.Rectangle, but its object type is TObjectType.Comment.
            A rectangle Autoshape will also have ShapeType=TShapeType.Rectangle, but its ObjectType will be
            TObjectType.Rectangle.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ObjectType">
            <summary>
            Type of object. Note that this is not the same as <see cref="P:FlexCel.Core.TShapeProperties.ShapeType"/>.
            A comment might have a ShapeType=TShapeType.Rectangle, but its object type is TObjectType.Comment.
            A rectangle Autoshape will also have ShapeType=TShapeType.Rectangle, but its ObjectType will be
            TObjectType.Rectangle.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ShapeName">
            <summary>
            Name of the shape if it is named, null otherwise.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ObjectPath">
            <summary>
            Use this string to identify the shape when it is not the first on the hierarchy.
            For Example, imagine you have a Group Shape A with 2 children, B and C.
            If you want to change the text on shape C, you need to call SetObjectText(n,ObjectPath);
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.Text">
            <summary>
            Text of the shape if is has some, null otherwise.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.TextFlags">
            <summary>
            Option flags for the Text shape.
            Mask: 0x000E
                   Horizontal text alignment:
                        1 = left-aligned
                        2 = centered
                        3 = right-aligned
                        4 = justified
            Mask: 0x0070
                   Vertical text alignment:
                        1 = top
                        2 = center
                        3 = bottom
                        4 = justify
            Mask: 0x0200
                    1 if the Lock Text option is on (Format Text Box dialog box, Protection tab)
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.TextRotation">
            <summary>
            Text rotation, in degrees * 0xFFFF
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ShapeOptions">
            <summary>
            A lot of personalized settings, like shadow type fill color, line type, etc.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.Anchor">
            <summary>
            Coordinates of the shape. Note that when the shape is a group, this value is null and the real anchor is 
            retruned in the first child of the shape.
            To get the real Anchor of a first level object, use <see cref="P:FlexCel.Core.TShapeProperties.NestedAnchor"/>
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.NestedOptions">
            <summary>
            When the shape is a group, the real properties of the shape are in its first children. This method 
            returns the correct shape options.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.NestedAnchor">
            <summary>
            Real Coordinates of the shape. Note that when the shape is a group, the value in <see cref="P:FlexCel.Core.TShapeProperties.Anchor"/> is null and the real anchor is 
            returned in the first child of the shape. 
            This method will get the real Anchor of a first level object.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.FlipH">
            <summary>
            True if the shape is flipped horizontally.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.FlipV">
            <summary>
            True if the shape is flipped vertically.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.Print">
            <summary>
            True if the shape should be printed.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TShapeProperties.ChildrenCount">
            <summary>
            Number of shapes that are inside this shape.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TShapePropertiesList">
            <summary>
            A list of shapes.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TShapeType">
            <summary>
            Enumeration with the different shapes.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.NotPrimitive">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Rectangle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.RoundRectangle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Ellipse">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Diamond">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.IsocelesTriangle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightTriangle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Parallelogram">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Trapezoid">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Hexagon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Octagon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Plus">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Star">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Arrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ThickArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.HomePlate">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Cube">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Balloon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Arc">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Line">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Plaque">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Can">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Donut">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextSimple">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextOctagon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextHexagon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCurve">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextRing">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextOnCurve">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextOnRing">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.StraightConnector1">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentConnector2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentConnector3">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentConnector4">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentConnector5">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedConnector2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedConnector3">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedConnector4">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedConnector5">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Callout1">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Callout2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Callout3">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentCallout1">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentCallout2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentCallout3">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BorderCallout1">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BorderCallout2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BorderCallout3">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentBorderCallout1">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentBorderCallout2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentBorderCallout3">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Ribbon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Ribbon2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Chevron">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Pentagon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.NoSmoking">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal8">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal16">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal32">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.WedgeRectCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.WedgeRRectCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.WedgeEllipseCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Wave">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FoldedCorner">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.DownArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.UpArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftRightArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.UpDownArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.IrregularSeal1">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.IrregularSeal2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LightningBolt">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Heart">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.PictureFrame">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.QuadArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftArrowCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightArrowCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.UpArrowCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.DownArrowCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftRightArrowCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.UpDownArrowCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.QuadArrowCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Bevel">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftBracket">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightBracket">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftBrace">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.RightBrace">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftUpArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentUpArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BentArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal24">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.StripedRightArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.NotchedRightArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BlockArc">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.SmileyFace">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.VerticalScroll">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.HorizontalScroll">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CircularArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.NotchedCircularArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.UturnArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedRightArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedLeftArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedUpArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CurvedDownArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.CloudCallout">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.EllipseRibbon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.EllipseRibbon2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartProcess">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartDecision">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartInputOutput">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartPredefinedProcess">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartInternalStorage">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartDocument">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMultidocument">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartTerminator">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartPreparation">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartManualInput">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartManualOperation">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartConnector">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartPunchedCard">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartPunchedTape">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartSummingJunction">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartOr">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartCollate">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartSort">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartExtract">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMerge">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartOfflineStorage">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartOnlineStorage">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMagneticTape">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMagneticDisk">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartMagneticDrum">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartDisplay">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartDelay">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextPlainText">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextStop">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextTriangle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextTriangleInverted">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextChevron">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextChevronInverted">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextRingInside">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextRingOutside">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextArchUpCurve">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextArchDownCurve">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCircleCurve">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextButtonCurve">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextArchUpPour">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextArchDownPour">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCirclePour">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextButtonPour">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCurveUp">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCurveDown">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCascadeUp">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCascadeDown">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave1">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave2">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave3">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextWave4">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextInflate">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflate">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextInflateBottom">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflateBottom">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextInflateTop">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflateTop">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflateInflate">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextDeflateInflateDeflate">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextFadeRight">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextFadeLeft">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextFadeUp">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextFadeDown">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextSlantUp">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextSlantDown">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCanUp">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextCanDown">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartAlternateProcess">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.FlowChartOffpageConnector">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Callout90">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentCallout90">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BorderCallout90">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.AccentBorderCallout90">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.LeftRightUpArrow">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Sun">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Moon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BracketPair">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.BracePair">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Seal4">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.DoubleWave">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonBlank">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonHome">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonHelp">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonInformation">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonForwardNext">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonBackPrevious">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonEnd">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonBeginning">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonReturn">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonDocument">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonSound">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.ActionButtonMovie">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.HostControl">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.TextBox">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TShapeType.Nil">
            <summary></summary>
        </member>
        <member name="T:FlexCel.Core.TObjectType">
            <summary>
            A type of object. Do not confuse this with a type of shape ( <see cref="T:FlexCel.Core.TShapeType"/> ) This does not describe the shape
            form (like if it is a rectangle or a circle) but the shape kind (for example if it is a comment, an image or an autoshape)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Undefined">
            <summary>Unknown object type.</summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Group">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Line">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Rectangle">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Oval">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Arc">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Chart">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Text">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Button">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Picture">
            <summary>An image inserted on Excel</summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Polygon">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.CheckBox">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.OptionButton">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.EditBox">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Label">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.DialogBox">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Spinner">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.ScrollBar">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.ListBox">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.GroupBox">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.ComboBox">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.Comment">
            <summary></summary>
        </member>
        <member name="F:FlexCel.Core.TObjectType.MicrosoftOfficeDrawing">
            <summary></summary>
        </member>
        <member name="T:FlexCel.Core.TShapeOption">
            <summary>
            Many different configuration options for a shape.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.None">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.Rotation">
            <summary>
            Rotation in 1/65536 degrees.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.LockRotation">
            <summary>
            No rotation
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockAspectRatio">
            <summary>
            Don't allow changes in aspect ratio
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockPosition">
            <summary>
            Don't allow the shape to be moved
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockAgainstSelect">
            <summary>
            Shape may not be selected
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockCropping">
            <summary>
            No cropping this shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockVertices">
            <summary>
            Edit Points not allowed
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockText">
            <summary>
            Do not edit text
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockAdjustHandles">
            <summary>
            Do not adjust
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockAgainstGrouping">
            <summary>
            Do not group this shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lTxid">
            <summary>
            id for the text, value determined by the host
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxTextLeft">
            <summary>
            margins relative to shape's inscribed text rectangle (in EMUs)
            1/10 inch
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dyTextTop">
            <summary>
            margins relative to shape's inscribed text rectangle (in EMUs)
            1/20 inch
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxTextRight">
            <summary>
            margins relative to shape's inscribed text rectangle (in EMUs)
            1/10 inch
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dyTextBottom">
            <summary>
            margins relative to shape's inscribed text rectangle (in EMUs)
            1/20 inch
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.WrapText">
            <summary>
            	Wrap text at shape margins
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.scaleText">
            <summary>
            Text zoom/scale (used if fFitTextToShape)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.anchorText">
            <summary>
            How to anchor the text
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.txflTextFlow">
            <summary>
            Text flow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cdirFont">
            <summary>
            Font rotation
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.hspNext">
            <summary>
            ID of the next shape (used by Word for linked textboxes)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.txdir">
            <summary>
            Bi-Di Text direction
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fSelectText">
            <summary>
            TRUE if single click selects text, FALSE if two clicks
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fAutoTextMargin">
            <summary>
            use host's margin calculations
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fRotateText">
            <summary>
            Rotate text with shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFitShapeToText">
            <summary>
            Size shape to fit text size
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFitTextToShape">
            <summary>
            Size text to fit shape size
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextUNICODE">
            <summary>
            UNICODE text string
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextRTF">
            <summary>
            RTF text string
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextAlign">
            <summary>
            alignment on curve
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextSize">
            <summary>
            default point size
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextSpacing">
            <summary>
            fixed point 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFont">
            <summary>
            font family name
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFReverseRows">
            <summary>
            Reverse row order
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fGtext">
            <summary>
            Has text effect
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFVertical">
            <summary>
            Rotate characters
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFKern">
            <summary>
            Kern characters
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFTight">
            <summary>
            Tightening or tracking
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFStretch">
            <summary>
            Stretch to fit shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFShrinkFit">
            <summary>
            Char bounding box
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFBestFit">
            <summary>
            Scale text-on-path
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFNormalize">
            <summary>
            Stretch char height
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFDxMeasure">
            <summary>
            Do not measure along path
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFBold">
            <summary>
            Bold font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFItalic">
            <summary>
            Italic font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFUnderline">
            <summary>
            Underline font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFShadow">
            <summary>
            Shadow font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFSmallcaps">
            <summary>
            Small caps font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.gtextFStrikethrough">
            <summary>
            Strike through font
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cropFromTop">
            <summary>
            16.16 fraction times total image width or height, as appropriate.	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cropFromBottom">
            <summary>
            16.16 fraction times total image width or height, as appropriate.	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cropFromLeft">
            <summary>
            16.16 fraction times total image width or height, as appropriate.	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cropFromRight">
            <summary>
            16.16 fraction times total image width or height, as appropriate.	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pib">
            <summary>
            Blip to display	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pibName">
            <summary>
            Blip file name	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pibFlags">
            <summary>
            Blip flags	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureTransparent">
            <summary>
            transparent color (none if ~0UL)	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureContrast">
            <summary>
            contrast setting	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureBrightness">
            <summary>
            brightness setting	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureGamma">
            <summary>
            16.16 gamma	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureId">
            <summary>
            Host-defined ID for OLE objects (usually a pointer)	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureDblCrMod">
            <summary>
            Modification used if shape has double shadow	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pibPrintName">
            <summary>
            Blip file name	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pibPrintFlags">
            <summary>
            Blip flags	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fNoHitTestPicture">
            <summary>
            Do not hit test the picture	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureGray">
            <summary>
            grayscale display	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureBiLevel">
            <summary>
            bi-level display	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pictureActive">
            <summary>
            Server is active (OLE objects only)	
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.geoLeft">
            <summary>
            Defines the G (geometry) coordinate space. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.geoTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.geoRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.geoBottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shapePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pVertices">
            <summary>
            
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pSegmentInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjustValue">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust2Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust3Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust4Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust5Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust6Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust7Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust8Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust9Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.adjust10Value">
            <summary>
            Adjustment values corresponding to the positions of the adjust handles of the shape. The number of values used and their allowable ranges vary from shape type to shape type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fShadowOK">
            <summary>
            Shadow may be set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.f3DOK">
            <summary>
            3D may be set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLineOK">
            <summary>
            Line style may be set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fGtextOK">
            <summary>
            Text effect (WordArt) supported
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFillShadeShapeOK">
            <summary>
            
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFillOK">
            <summary>
            OK to fill the shape through the UI or VBAs
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillType">
            <summary>
            Type of fill
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillOpacity">
            <summary>
            Fixed 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBackColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBackOpacity">
            <summary>
            Shades only
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillCrMod">
            <summary>
            Modification for BW views
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBlip">
            <summary>
            Pattern/texture
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBlipName">
            <summary>
            Blip file name
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillBlipFlags">
            <summary>
            Blip flags
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillWidth">
            <summary>
            How big (A units) to make a metafile texture.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillAngle">
            <summary>
            Fade angle - degrees in 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillFocus">
            <summary>
            Linear shaded fill focus percent
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillToLeft">
            <summary>
            Fraction 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillToTop">
            <summary>
            Fraction 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillToRight">
            <summary>
            Fraction 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillToBottom">
            <summary>
            Fraction 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillRectLeft">
            <summary>
            For shaded fills, use the specified rectangle instead of the shape's bounding rect to define how large the fade is going to be.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillRectTop">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillRectRight">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillRectBottom">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillDztype">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShadePreset">
            <summary>
            Special shades
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShadeColors">
            <summary>
            a preset array of colors
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillOriginX">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillOriginY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShapeOriginX">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShapeOriginY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShadeType">
            <summary>
            Type of shading, if a shaded (gradient) fill.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fFilled">
            <summary>
            Is shape filled?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fHitTestFill">
            <summary>
            Should we hit test fill? 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillShape">
            <summary>
            Register pattern on shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fillUseRect">
            <summary>
            Use the large rect?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fNoFillHitTest">
            <summary>
            Hit test a shape as though filled
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineColor">
            <summary>
            Color of line
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineOpacity">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineBackColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineCrMod">
            <summary>
            Modification for BW views
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineType">
            <summary>
            Type of line
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillBlip">
            <summary>
            Pattern/texture
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillBlipName">
            <summary>
            Blip file name
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillBlipFlags">
            <summary>
            Blip flags
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillWidth">
            <summary>
            How big (A units) to make a metafile texture.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillHeight">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillDztype">
            <summary>
            How to interpret fillWidth/Height numbers.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineWidth">
            <summary>
            A units; 1pt == 12700 EMUs
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineMiterLimit">
            <summary>
            ratio (16.16) of width
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineStyle">
            <summary>
            Draw parallel lines?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineDashing">
            <summary>
            Can be overridden by:
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineDashStyle">
            <summary>
            As Win32 ExtCreatePen
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineStartArrowhead">
            <summary>
            Arrow at start
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineEndArrowhead">
            <summary>
            Arrow at end
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineStartArrowWidth">
            <summary>
            Arrow at start
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineStartArrowLength">
            <summary>
            Arrow at end
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineEndArrowWidth">
            <summary>
            Arrow at start
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineEndArrowLength">
            <summary>
            Arrow at end
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineJoinStyle">
            <summary>
            How to join lines
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineEndCapStyle">
            <summary>
            How to end lines
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fArrowheadsOK">
            <summary>
            Allow arrowheads if prop. is set
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLine">
            <summary>
            Any line?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fHitTestLine">
            <summary>
            Should we hit test lines? 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lineFillShape">
            <summary>
            Register pattern on shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fNoLineDrawDash">
            <summary>
            Draw a dashed line if no line
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowType">
            <summary>
            Type of effect
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowHighlight">
            <summary>
            Embossed color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowCrMod">
            <summary>
            Modification for BW views
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOpacity">
            <summary>
            Fixed 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOffsetX">
            <summary>
            Offset shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOffsetY">
            <summary>
            Offset shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowSecondOffsetX">
            <summary>
            Double offset shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowSecondOffsetY">
            <summary>
            Double offset shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowScaleXToX">
            <summary>
            16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowScaleYToX">
            <summary>
            16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowScaleXToY">
            <summary>
            16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowScaleYToY">
            <summary>
            16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowPerspectiveX">
            <summary>
            16.16 / weight
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowPerspectiveY">
            <summary>
            16.16 / weight
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowWeight">
            <summary>
            scaling factor
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOriginX">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.shadowOriginY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fShadow">
            <summary>
            Any shadow?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fshadowObscured">
            <summary>
            Excel5-style shadow
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveType">
            <summary>
            Where transform applies
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveOffsetX">
            <summary>
            The LONG values define a transformation matrix, effectively, each value is scaled by the perspectiveWeight parameter.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveOffsetY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveScaleXToX">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveScaleYToX">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveScaleXToY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveScaleYToY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectivePerspectiveX">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectivePerspectiveY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveWeight">
            <summary>
            Scaling factor
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveOriginX">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.perspectiveOriginY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fPerspective">
            <summary>
            On/off
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DSpecularAmt">
            <summary>
            Fixed-point 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DDiffuseAmt">
            <summary>
            Fixed-point 16.16
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DShininess">
            <summary>
            Default gives OK results
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DEdgeThickness">
            <summary>
            Specular edge thickness
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DExtrudeForward">
            <summary>
            Distance of extrusion in EMUs
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DExtrudeBackward">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DExtrudePlane">
            <summary>
            Extrusion direction
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DExtrusionColor">
            <summary>
            Basic color of extruded part of shape; the lighting model used will determine the exact shades used when rendering. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DCrMod">
            <summary>
            Modification for BW views
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.f3D">
            <summary>
            Does this shape have a 3D effect?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DMetallic">
            <summary>
            Use metallic specularity?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DUseExtrusionColor">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DLightFace">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DYRotationAngle">
            <summary>
            degrees (16.16) about y axis
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DXRotationAngle">
            <summary>
            degrees (16.16) about x axis
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationAxisX">
            <summary>
            These specify the rotation axis; only their relative magnitudes matter.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationAxisY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationAxisZ">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationAngle">
            <summary>
            degrees (16.16) about axis
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationCenterX">
            <summary>
            rotation center x (16.16 or g-units)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationCenterY">
            <summary>
            rotation center y (16.16 or g-units)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRotationCenterZ">
            <summary>
            rotation center z (absolute (emus))
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DRenderMode">
            <summary>
            Full,wireframe, or bcube
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DTolerance">
            <summary>
            pixels (16.16)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DXViewpoint">
            <summary>
            X view point (emus)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DYViewpoint">
            <summary>
            Y view point (emus)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DZViewpoint">
            <summary>
            Z view distance (emus)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DOriginX">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DOriginY">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DSkewAngle">
            <summary>
            degree (16.16) skew angle
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DSkewAmount">
            <summary>
            Percentage skew amount
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DAmbientIntensity">
            <summary>
            Fixed point intensity
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DKeyX">
            <summary>
            Key light source direction; only their relative
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DKeyY">
            <summary>
            Key light source direction; only their relative
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DKeyZ">
            <summary>
            magnitudes matter
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DKeyIntensity">
            <summary>
            Fixed point intensity
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DFillX">
            <summary>
            Fill light source direction; only their relative
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DFillY">
            <summary>
            Fill light source direction; only their relative
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DFillZ">
            <summary>
            magnitudes matter
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.c3DFillIntensity">
            <summary>
            Fixed point intensity
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DConstrainRotation">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DRotationCenterAuto">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DParallel">
            <summary>
            Parallel projection?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DKeyHarsh">
            <summary>
            Is key lighting harsh?
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fc3DFillHarsh">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.hspMaster">
            <summary>
            master shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.cxstyle">
            <summary>
            Type of connector
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.bWMode">
            <summary>
            Settings for modifications to be made when in different forms of black-and-white mode.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.bWModePureBW">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.bWModeBW">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fOleIcon">
            <summary>
            For OLE objects, whether the object is in icon form
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fPreferRelativeResize">
            <summary>
            For UI only. Prefer relative resizing. 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fLockShapeType">
            <summary>
            Lock the shape type (don't allow Change Shape)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fDeleteAttachedObject">
            <summary>
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fBackground">
            <summary>
            If TRUE, this is the background shape.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.spcot">
            <summary>
            Callout type  (TwoSegment)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxyCalloutGap">
            <summary>
            Distance from box to first point.(EMUs) (1/12 inch)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.spcoa">
            <summary>
            Callout angle (Any)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.spcod">
            <summary>
            Callout drop type (Specified)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxyCalloutDropSpecified">
            <summary>
            if msospcodSpecified, the actual drop distance (9 points)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxyCalloutLengthSpecified">
            <summary>
            if fCalloutLengthSpecified, the actual distance (0)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCallout">
            <summary>
            Is the shape a callout? (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutAccentBar">
            <summary>
            does callout have accent bar? (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutTextBorder">
            <summary>
            does callout have a text border? (TRUE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutMinusX">
            <summary>
            (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutMinusY">
            <summary>
            FALSE
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutDropAuto">
            <summary>
            If true, then we occasionally invert the drop distance (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fCalloutLengthSpecified">
            <summary>
            if true, we look at dxyCalloutLengthSpecified (FALSE)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TShapeOption.wzName">
            Shape Name (present only if explicitly set)
        </member>
        <member name="F:FlexCel.Core.TShapeOption.wzDescription">
            alternate text
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pihlShape">
            The hyperlink in the shape.
        </member>
        <member name="F:FlexCel.Core.TShapeOption.pWrapPolygonVertices">
            The polygon that text will be wrapped around (Word)
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxWrapDistLeft">
            Left wrapping distance from text (Word)
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dyWrapDistTop">
            Top wrapping distance from text (Word)
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dxWrapDistRight">
            Right wrapping distance from text (Word)
        </member>
        <member name="F:FlexCel.Core.TShapeOption.dyWrapDistBottom">
            Bottom wrapping distance from text (Word)
        </member>
        <member name="F:FlexCel.Core.TShapeOption.lidRegroup">
            Regroup ID 
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fEditedWrap">
            Has the wrap polygon been edited?
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fBehindDocument">
            Word-only (shape is behind text)
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fOnDblClickNotify">
            Notify client on a double click
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fIsButton">
            A button shape (i.e., clicking performs an action). Set for shapes with attached hyperlinks or macros.
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fOneD">
            1D adjustment
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fHidden">
            Do not display
        </member>
        <member name="F:FlexCel.Core.TShapeOption.fPrint">
            Print this shape
        </member>
        <member name="T:FlexCel.Core.TShapeOptionList">
            <summary>
            This class holds a list of key/values pairs specifying the options for a shape.
            To Get a value from it, use: ShapeOptionList[TShapeOption.xxx];
            </summary>
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsLong(FlexCel.Core.TShapeOption,System.Int64)">
            <summary>
            Returns a long property if it exists, otherwise the default value.
            </summary>
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.As1616(FlexCel.Core.TShapeOption,System.Single)">
            <summary>
            Returns a float (Expressed as 16.16) property if it exists, otherwise the default value.
            </summary>
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsBool(FlexCel.Core.TShapeOption,System.Boolean,System.Int32)">
            <summary>
            Returns a bool property if it exists, otherwise the default value.
            </summary>
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <param name="PositionInSet">Boolean properties are grouped so all properties on one set are in only
            one value. So, the last bool property on the set is the first bit, and so on. ONLY THE LAST PROPERTY
            ON THE SET IS PRESENT.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsUnicodeString(FlexCel.Core.TShapeOption,System.String)">
            <summary>
            Returns an unicode property if it exists, otherwise the default value.
            </summary>
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsHyperLink(FlexCel.Core.TShapeOption,FlexCel.Core.THyperLink)">
            <summary>
            Returns an hyperlink property if it exists, otherwise the default value.
            You will normally want to use this property with <see cref="F:FlexCel.Core.TShapeOption.pihlShape"/>
            since that is the property that holds the link for the objects.
            </summary>
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.AsASCIIString(FlexCel.Core.TShapeOption,System.String)">
            <summary>
            Returns an ASCII property if it exists, otherwise the default value.
            NOTE: MOST PROPERTIES ARE UNICODE, SO YOU SHOULD USE AsUniCodeString. This 
            method applies to only a few cases.
            </summary>
            <param name="key">Property Name.</param>
            <param name="Default">What to return if the property does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.GetEnumerator">
            <summary>
            Gets the enumerator for this class. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TShapeOptionList.Clone">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TShapeOptionList.Item(FlexCel.Core.TShapeOption)">
            <summary>
            Gets the value for a key. Value can be a long or a string, depending on the type of property.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFillType">
            <summary>
            Type of fill for an autoshape.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Solid">
            <summary>
            Fill with a solid color
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Pattern">
            <summary>
            Fill with a pattern (bitmap)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Texture">
            <summary>
            A texture (pattern with its own color map)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Picture">
            <summary>
            Center a picture in the shape
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Shade">
            <summary>
            Shade from start to end points
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.ShadeCenter">
            <summary>
            Shade from bounding rectangle to end point
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.ShadeShape">
            <summary>
            Shade from shape outline to end point
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.ShadeScale">
            <summary>
            Similar to msofillShade, but the fillAngle
            is additionally scaled by the aspect ratio of
            the shape. If shape is square, it is the
            same as msofillShade.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.ShadeTitle">
            <summary>
            special type - shade to title ---  for PP 
            </summary>
        </member>
        <member name="F:FlexCel.Core.TFillType.Background">
            <summary>
            the background fill color/pattern
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartType">
            <summary>
            Chart style.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Unknown">
            <summary>
            FlexCel cannot determine the chart type.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Area">
            <summary>
            Area chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Bar">
            <summary>
            Bar chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Line">
            <summary>
            Line chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Pie">
            <summary>
            Pie chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Radar">
            <summary>
            Radar chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Scatter">
            <summary>
            Scatter chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartType.Surface">
            <summary>
            Surface chart.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TStackedMode">
            <summary>
            Way the series stack one to the other. This does not apply to all chart types.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStackedMode.None">
            <summary>
            Data is not Stacked.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStackedMode.Stacked">
            <summary>
            Data is Stacked. (for example in stacked bar chart)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TStackedMode.Stacked100">
            <summary>
            Data is stacked and normalized to 100%. (This is a 100% stacked bar/column chart)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TPlotEmptyCells">
            <summary>
            Defines how empty cells will be plotted in the chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPlotEmptyCells.NotPlotted">
            <summary>
            The cell will not be plotted. There will be a gap in the chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPlotEmptyCells.Zero">
            <summary>
            The cell will be plotted with value = 0.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TPlotEmptyCells.Interpolated">
            <summary>
            The cell will be plotted with value interpolated between its nearest points.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartLineStyle">
            <summary>
            Line styles for a chart object.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.Solid">
            <summary>
            Sloid line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.Dash">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.Dot">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.DashDotDot">
            <summary>
            Dash dot dot line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.DarkGray">
            <summary>
            Dark gray line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.MediumGray">
            <summary>
            Medium gray line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineStyle.LightGray">
            <summary>
            Light gray line.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartMarkerType">
            <summary>
            Kind of marker.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.None">
            <summary>
            No marker.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Square">
            <summary>
            Square.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Diamond">
            <summary>
            Diamond.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Triangle">
            <summary>
            Up triangle.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.X">
            <summary>
            X sign.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Star">
            <summary>
            Star.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.DowJones">
            <summary>
            Dow jones symbol. (small horizontal line)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.StandardDeviation">
            <summary>
            Standard deviation symbol. (big horizontal line)
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartMarkerType.Plus">
            <summary>
            Plus sign.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartLineWeight">
            <summary>
            Different widths for chart lines.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineWeight.Hair">
            <summary>
            Minimum width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineWeight.Narrow">
            <summary>
            Single width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineWeight.Medium">
            <summary>
            Double width.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLineWeight.Wide">
            <summary>
            Triple width.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartSeries">
            <summary>
            The definiton for a series, and the values of it.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartSeries.#ctor">
            <summary>
            Creates a new empty instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartSeries.#ctor(System.String,System.String,System.String,System.Object,System.Object[],System.Object[],System.String[],System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance and fills it with default values.
            </summary>
            <param name="aTitleDefinition">Title of the series.</param>
            <param name="aDataDefinition">Formula defining the Data for the series.</param>
            <param name="aCategoriesDefinition">Formula defining the Categories for the series.</param>
            <param name="aTitleValue">Evalueated value of the series title.</param>
            <param name="aCategoriesValues">Actual values for the series.</param>
            <param name="aDataValues">Actual values for the categories.</param>
            <param name="aChartOptionsIndex">Index to the ChartOptions object that applies to this series.</param>
            <param name="aSeriesIndex">Index of this series on the file.</param>
            <param name="aSeriesNumber">Series number as shown on the Legend box. This might be different from the SeriesIndex if the order of the series is changed.</param>
            <param name="aDataFormats">See <see cref="P:FlexCel.Core.ChartSeries.DataFormats"/></param>
            <param name="aCategoriesFormats">See <see cref="P:FlexCel.Core.ChartSeries.CategoriesFormats"/></param>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.TitleDefinition">
            <summary>
            Formula or text defining the Series caption. Start with an &quot;=&quot; sign to enter a formula.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.DataDefinition">
            <summary>
            Formula or values that define the series. For example, &quot;=A1:A5&quot; or {1,2,3}. Start with an &quot;=&quot; sign to enter a formula.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.CategoriesDefinition">
            <summary>
            Formula or text defining the Series Categories (normally the x Axis). Start with an &quot;=&quot; sign to enter a formula.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.TitleValue">
            <summary>
            Evaluated text of the title.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.DataValues">
            <summary>
            Actual values for the series.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.CategoriesValues">
            <summary>
            Actual values for the Series Categories (normally the x Axis).
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.DataFormats">
            <summary>
            Format on the cell where the data is. This format should be appied to the data if the data format for the axis or the label is null.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.CategoriesFormats">
            <summary>
            Format on the cell where the data is. This format should be appied to the data if the data format for the axis or the label is null.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.ChartOptionsIndex">
            <summary>
            Index to the ChartOptions object that applies to this series.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.SeriesIndex">
            <summary>
            Index of this series on the file.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.SeriesNumber">
            <summary>
            Series number as shown on the Legend box. This might be different from the <see cref="P:FlexCel.Core.ChartSeries.SeriesIndex"/> if the order of the series is changed.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.Options">
            <summary>
            Options for this series and their data points. -1 means the whole series, and n is options for the n-point.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeries.LegendOptions">
            <summary>
            Options for the legend entry associated with this series. (when legend is showing series), or
            with a point on the series. (when legend is showing all the entries on series[0], for example on pie charts)
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartSeriesOptions">
            <summary>
            Options for the whole series or for a data point inside it.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesOptions.#ctor(System.Int32,FlexCel.Core.ChartSeriesFillOptions,FlexCel.Core.ChartSeriesLineOptions,FlexCel.Core.ChartSeriesPieOptions,FlexCel.Core.ChartSeriesMarkerOptions,FlexCel.Core.ChartSeriesMiscOptions)">
            <summary>
            Creates a new instance of ChartSeriesOptions. Objects will be cloned, so you can change their values later and they will not
            change the value on this class.
            </summary>
            <param name="aPointNumber">Point number where this options apply. -1 means that the options apply for the whole series.</param>
            <param name="aFillOptions">Fill options for the series or point.</param>
            <param name="aLineOptions">Line options for the series or point.</param>
            <param name="aPieOptions">If the chart type is pie, options for the pie. If it is not a pie chart, this value has no meaning.</param>
            <param name="aMarkerOptions">Color and shape of the markers on Line and Scatter charts.</param>
            <param name="aMiscOptions">Misc Options.</param>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.PointNumber">
            <summary>
            Point number where this options apply. -1 means that the options apply for the whole series.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.FillOptions">
            <summary>
            Fill options for the series or point.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.LineOptions">
            <summary>
            Line options for the series or point.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.PieOptions">
            <summary>
            If the chart type is pie, options for the pie. If it is not a pie chart, this value has no meaning.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.MarkerOptions">
            <summary>
            Color and shape of the markers on Line and Scatter charts.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.MiscOptions">
            <summary>
            Other options not related to the specific parts.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesOptions.ExtraOptions">
            <summary>
            Extra options used to specify gradients, textures, etc. If this is no null, the color values are not used.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartPatternStyle">
            <summary>
            Fill style used in a pattern inside chart elements.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartPatternStyle.None">
            <summary>
            Transparent pattern.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartPatternStyle.Automatic">
            <summary>
            Pattern defined by the context.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartFillOptions">
            <summary>
            Fill options for a chart element.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartFillOptions.#ctor(System.Drawing.Color,System.Drawing.Color,FlexCel.Core.TChartPatternStyle)">
            <summary>
            Creates a new instance of this object.
            </summary>
            <param name="aFgColor">Foreground color for the pattern.</param>
            <param name="aBgColor">Background color for the pattern.</param>
            <param name="aPattern">Pattern style.</param>
        </member>
        <member name="M:FlexCel.Core.ChartFillOptions.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.ChartFillOptions.FgColor">
            <summary>
            Foreground color for the pattern.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartFillOptions.BgColor">
            <summary>
            Background color for the pattern.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartFillOptions.Pattern">
            <summary>
            Pattern style.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartSeriesFillOptions">
            <summary>
            Fill options for a series or a point inside a series.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesFillOptions.#ctor(System.Drawing.Color,System.Drawing.Color,FlexCel.Core.TChartPatternStyle,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of this object.
            </summary>
            <param name="aFgColor">Foreground color for the pattern.</param>
            <param name="aBgColor">Background color for the pattern.</param>
            <param name="aPattern">Pattern style.</param>
            <param name="aAutomaticColors">When true, fill colors are assigned automatically.</param>
            <param name="aInvertNegativeValues">When true and values of the series are negative, foreground and background colors are reversed.</param>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesFillOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesFillOptions.AutomaticColors">
            <summary>
            When true, fill colors are assigned automatically.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesFillOptions.InvertNegativeValues">
            <summary>
            When true and values of the series are negative, foreground and background colors are reversed.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartLineOptions">
            <summary>
            Line style options for an element of a chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartLineOptions.#ctor(System.Drawing.Color,FlexCel.Core.TChartLineStyle,FlexCel.Core.TChartLineWeight)">
            <summary>
            Creates a new ChartSeriesLineOptions instance.
            </summary>
            <param name="aLineColor">Line color.</param>
            <param name="aStyle">Line style.</param>
            <param name="aLineWeight">Line weight.</param>
        </member>
        <member name="M:FlexCel.Core.ChartLineOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.ChartLineOptions.LineColor">
            <summary>
            Line color.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartLineOptions.Style">
            <summary>
            Line style.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartLineOptions.LineWeight">
            <summary>
            Line weight.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartSeriesLineOptions">
            <summary>
            Line style options for a series or a point inside a series.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesLineOptions.#ctor(System.Drawing.Color,FlexCel.Core.TChartLineStyle,FlexCel.Core.TChartLineWeight,System.Boolean)">
            <summary>
            Creates a new ChartSeriesLineOptions instance.
            </summary>
            <param name="aLineColor">Line color.</param>
            <param name="aStyle">Line style.</param>
            <param name="aLineWeight">Line weight.</param>
            <param name="aAutomaticColors">When true, line colors are assigned automatically.</param>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesLineOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesLineOptions.AutomaticColors">
            <summary>
            When true, line colors are assigned automatically.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartSeriesPieOptions">
            <summary>
            Pie options for a series or a slice of the series when the chart is a pie chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesPieOptions.#ctor(System.Int32)">
            <summary>
            Creates a new ChartSeriesPieOptions instance.
            </summary>
            <param name="aSliceDistance">Distance of the pie slice from the center on percent of the pie diemeter.</param>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesPieOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesPieOptions.SliceDistance">
            <summary>
            Distance of the pie slice from the center on percent of the pie diammeter.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartSeriesMarkerOptions">
            <summary>
            Marker options for the whole series or a point in the series when the chart is line or scatter.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesMarkerOptions.#ctor(System.Drawing.Color,System.Drawing.Color,FlexCel.Core.TChartMarkerType,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a new ChartSeriesMarkerOptions instance.
            </summary>
            <param name="aFgColor">Color of the marker lines.</param>
            <param name="aBgColor">Color of the marker fill.</param>
            <param name="aMarkerType">Type of marker.</param>
            <param name="aAutomaticColors">When true, marker colors are assigned automatically.</param>
            <param name="aNoBackground">When true, the marker has no fill.</param>
            <param name="aNoForeground">When true, the marker has no lines.</param>
            <param name="aMarkerSize">Marker size.</param>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesMarkerOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.FgColor">
            <summary>
            Color of the marker lines.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.BgColor">
            <summary>
            Color of the marker fill.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.MarkerType">
            <summary>
            Type of marker.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.AutomaticColors">
            <summary>
            When true, marker colors are assigned automatically.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.NoBackground">
            <summary>
            When true, the marker has no fill.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.NoForeground">
            <summary>
            When true, the marker has no lines.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMarkerOptions.MarkerSize">
            <summary>
            Size of the marker.
            </summary>
        </member>
        <member name="T:FlexCel.Core.ChartSeriesMiscOptions">
            <summary>
            Misc options for the whole series or a point in the series that do no enter in any other category.
            </summary>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesMiscOptions.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new ChartSeriesMiscOptions instance.
            </summary>
            <param name="aBubbles3D">Draw bubbles with 3D effects.</param>
            <param name="aHasShadow">Series has shadow.</param>
            <param name="aSmoothedLines">Lines should be smoothed (line and scatter charts).</param>
        </member>
        <member name="M:FlexCel.Core.ChartSeriesMiscOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMiscOptions.SmoothedLines">
            <summary>
            Lines should be smoothed (line and scatter charts).
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMiscOptions.Bubbles3D">
            <summary>
            Draw bubbles with 3D effects.
            </summary>
        </member>
        <member name="P:FlexCel.Core.ChartSeriesMiscOptions.HasShadow">
            <summary>
            Series has shadow.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TSeriesOptionsList">
            <summary>
            A list of options for the whole series and for specific data points inside thes series.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TSeriesOptionsList.#ctor">
            <summary>
            Creates a new TSeriesOptionsList instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TSeriesOptionsList.Add(FlexCel.Core.ChartSeriesOptions)">
            <summary>
            Adds a new option to the list. If the option is null, nothing will be done.
            </summary>
            <param name="Options">Options to add.</param>
        </member>
        <member name="M:FlexCel.Core.TSeriesOptionsList.GetValues">
            <summary>
            Gets all the values of the series.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TSeriesOptionsList.GetEnumerator">
            <summary>
            Gets the enumerator for this class. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TSeriesOptionsList.Item(System.Int32)">
            <summary>
            Gets or sets the value for a data point or for the whole series (when key = -1).
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLegendOptionsList">
            <summary>
            A list of options for the legend on the whole series and for specific data points inside thes series.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TLegendOptionsList.#ctor">
            <summary>
            Creates a new TLegendOptionsList instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TLegendOptionsList.Add(System.Int32,FlexCel.Core.TLegendEntryOptions)">
            <summary>
            Adds a new option to the list. If the option is null, nothing will be done.
            </summary>
            <param name="PointNumber">Point where this value applies. -1 means the whole series.</param>
            <param name="Options">Options to add.</param>
        </member>
        <member name="M:FlexCel.Core.TLegendOptionsList.GetValues">
            <summary>
            Gets all the values of the series.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TLegendOptionsList.GetEnumerator">
            <summary>
            Gets the enumerator for this class. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TLegendOptionsList.Item(System.Int32)">
            <summary>
            Gets or sets the value for a data point or for the whole series (when key = -1).
            </summary>
        </member>
        <member name="T:FlexCel.Core.IStackedOptions">
            <summary>
            Interface for charts that can be stacked.
            </summary>
        </member>
        <member name="P:FlexCel.Core.IStackedOptions.StackedMode">
            <summary>
            Stacked mode for a series.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartOptions">
            <summary>
            Base class for options specific to the type of chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChartOptions.#ctor(FlexCel.Core.TChartType,System.Boolean,System.Int32,System.Int32,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TDataLabel)">
            <summary>
            Creates a new TChartOptions instance.
            </summary>
            <param name="aChartType">Type of the chart.</param>
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area line style and fill settings. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels on this series group.</param>
        </member>
        <member name="M:FlexCel.Core.TChartOptions.CompareTo(System.Object)">
            <summary>
            Orders the chart options depending on their z-order.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>-1, 0 or 1 depending if the series has a bigger z-order than obj.</returns>
        </member>
        <member name="M:FlexCel.Core.TChartOptions.Equals(System.Object)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TChartOptions.op_Equality(FlexCel.Core.TChartOptions,FlexCel.Core.TChartOptions)">
            <summary>
            Returns true if both objects are equal.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TChartOptions.op_Inequality(FlexCel.Core.TChartOptions,FlexCel.Core.TChartOptions)">
            <summary>
            Returns true if both objects do not have the same value.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TChartOptions.op_GreaterThan(FlexCel.Core.TChartOptions,FlexCel.Core.TChartOptions)">
            <summary>
            Returns true if o1 is bigger than o2.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TChartOptions.op_LessThan(FlexCel.Core.TChartOptions,FlexCel.Core.TChartOptions)">
            <summary>
            Returns true if o1 is less than o2.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:FlexCel.Core.TChartOptions.GetHashCode">
            <summary>
            Returns a hashcode for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TChartOptions.ChartType">
            <summary>
            Chart Type.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartOptions.ChangeColorsOnEachSeries">
            <summary>
            If false, all series will be the same color.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartOptions.ZOrder">
            <summary>
            Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartOptions.AxisNumber">
            <summary>
            Axis where this chart group belongs, 0 is primary, 1 is secondary.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartOptions.SeriesOptions">
            <summary>
            Global options for all the series on this chart group.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartOptions.PlotArea">
            <summary>
            Plot area for this chart group.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartOptions.DefaultLabel">
            <summary>
            Default label properties for this group of charts.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TUnknownChartOptions">
            <summary>
            Options for an unknown chart. This class does not have any information except the charttype.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TUnknownChartOptions.#ctor">
            <summary>
            Creates a new TUnknownChartOptions instance.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBarChartOptions">
            <summary>
            Options for a Bar or Column chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBarChartOptions.#ctor(System.Int32,System.Boolean,System.Int32,System.Single,System.Single,System.Boolean,FlexCel.Core.TStackedMode,System.Boolean,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TDataLabel,FlexCel.Core.ChartLineOptions)">
            <summary>
            Creates a new TBarChartOptions instance.
            </summary>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aBarOverlap">Space between bars in percent of the bar width.</param>
            <param name="aCategoriesOverlap">Space between categories in percent of bar width.</param>
            <param name="aHorizontal">If true, bars are horizontal and this is a bar chart. If false, bars are vertical and this is a column chart.</param>
            <param name="aStackedMode"><see cref="T:FlexCel.Core.TStackedMode"/> of the chart.</param>
            <param name="aHasShadow">True if the bars have shadows.</param>
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
            <param name="aSeriesLines">See <see cref="P:FlexCel.Core.TBarChartOptions.SeriesLines"/></param>
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.BarOverlap">
            <summary>
            Space between bars in percent of the bar width.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.CategoriesGap">
            <summary>
            Space between categories in percent of bar width.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.Horizontal">
            <summary>
            If true, bars are horizontal and this is a bar chart. If false, bars are vertical and this is a column chart.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.StackedMode">
            <summary>
            <see cref="T:FlexCel.Core.TStackedMode"/> of the chart.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.HasShadow">
            <summary>
            True if the bars have shadows.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBarChartOptions.SeriesLines">
            <summary>
            Line style for the Lines between Series if they exist, null otherwise.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAreaLineChartOptions">
            <summary>
            Options specific for a Line or Area chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TAreaLineChartOptions.#ctor(FlexCel.Core.TChartType,System.Int32,System.Boolean,System.Int32,FlexCel.Core.TStackedMode,System.Boolean,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TChartDropBars,FlexCel.Core.TDataLabel)">
            <summary>
            Creates a new TAreaLineChartOptions instance.
            </summary>
            <param name="aStackedMode"><see cref="T:FlexCel.Core.TStackedMode"/> of the chart.</param>
            <param name="aHasShadow">True if the chart lines have shadows.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aChartType">Type of chart. Must be Area or line.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDropBars">Drop Bars, lines and Hi/lo information. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
        </member>
        <member name="P:FlexCel.Core.TAreaLineChartOptions.StackedMode">
            <summary>
            <see cref="T:FlexCel.Core.TStackedMode"/> of the chart.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAreaLineChartOptions.HasShadow">
            <summary>
            True if the chart lines have shadows.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAreaLineChartOptions.DropBars">
            <summary>
            If the chart group has drop lines, the line information. Null otherwise.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLineChartOptions">
            <summary>
            Options specific for a Line chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TLineChartOptions.#ctor(System.Int32,System.Boolean,System.Int32,FlexCel.Core.TStackedMode,System.Boolean,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TChartDropBars,FlexCel.Core.TDataLabel)">
            <summary>
            Creates a new TLineChartOptions instance.
            </summary>
            <param name="aStackedMode"><see cref="T:FlexCel.Core.TStackedMode"/> of the chart.</param>
            <param name="aHasShadow">True if the chart lines have shadows.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDropBars">Drop bars and lines information. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
        </member>
        <member name="T:FlexCel.Core.TAreaChartOptions">
            <summary>
            Options specific for an Area chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TAreaChartOptions.#ctor(System.Int32,System.Boolean,System.Int32,FlexCel.Core.TStackedMode,System.Boolean,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TChartDropBars,FlexCel.Core.TDataLabel)">
            <summary>
            Creates a new TAreaChartOptions instance.
            </summary>
            <param name="aStackedMode"><see cref="T:FlexCel.Core.TStackedMode"/> of the chart.</param>
            <param name="aHasShadow">True if the chart lines have shadows.</param>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aDropBars">Drop bars and lines information. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
        </member>
        <member name="T:FlexCel.Core.TPieChartOptions">
            <summary>
            Options specific for a Pie chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TPieChartOptions.#ctor(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,FlexCel.Core.ChartLineOptions,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,FlexCel.Core.TDataLabel)">
            <summary>
            Creates a new TPieChartOptions instance.
            </summary>
            <param name="aChangeColorsOnEachSeries">If false, all series will be the same color.</param>
            <param name="aZOrder">Z-Order of this chart group, with 0 being the bottom. Chart groups with lower z-Order are drawn below the ones with higher ones.</param>
            <param name="aFirstSliceAngle">Angle of the first slice in degrees. It can go from 0 to 359.</param>
            <param name="aDonutRadius">Radius of the center of the donut in Percet. 0 Means a Pie without hole.</param>
            <param name="aHasShadow">True if the chart lines have shadows.</param>
            <param name="aLeaderLines">True if there are lines from the slices to the labels.</param>
            <param name="aAxisNumber">Axis where this chart group belongs, 0 is primary, 1 is secondary.</param>
            <param name="aSeriesOptions">Global options that apply to all the series on this group. This instance will be copied.</param>
            <param name="aPlotArea">Plot area fill and line style for this group.</param>
            <param name="aLeaderLineStyle">Line style for the leader lines, only has meaning if <see cref="P:FlexCel.Core.TPieChartOptions.LeaderLines"/> is true. This value will be copied.</param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.FirstSliceAngle">
            <summary>
            Angle of the first slice in degrees. It can go from 0 to 359.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.DonutRadius">
            <summary>
            Radius of the center of the donut in Percet. 0 Means a Pie without hole.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.HasShadow">
            <summary>
            True if the chart lines have shadows.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.LeaderLines">
            <summary>
            True if there are lines from the slices to the labels.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TPieChartOptions.LeaderLineStyle">
            <summary>
            Line style for the leader lines, only has smeaning if <see cref="P:FlexCel.Core.TPieChartOptions.LeaderLines"/> is true.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBubbleSizeType">
            <summary>
            What the bubble size means.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBubbleSizeType.None">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBubbleSizeType.BubbleSizeIsArea">
            <summary>
            Bubble size represents the area.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBubbleSizeType.BubbleSizeIsWidth">
            <summary>
            Bubble size represents the width.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TScatterChartOptions">
            <summary>
            Options specific for a Scatter/Bubble chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TScatterChartOptions.#ctor(System.Int32,System.Boolean,System.Int32,FlexCel.Core.ChartSeriesOptions,FlexCel.Core.TChartPlotArea,System.Int32,FlexCel.Core.TBubbleSizeType,System.Boolean,System.Boolean,System.Boolean,FlexCel.Core.TDataLabel)">
            <summary>
            Creates a new TScatterChartOptions instance.
            </summary>
            <param name="aAxisNumber">See <see cref="P:FlexCel.Core.TChartOptions.AxisNumber"/></param>
            <param name="aChangeColorsOnEachSeries">See <see cref="P:FlexCel.Core.TChartOptions.ChangeColorsOnEachSeries"/></param>
            <param name="aZOrder">See <see cref="P:FlexCel.Core.TChartOptions.ZOrder"/></param>
            <param name="aSeriesOptions">See <see cref="P:FlexCel.Core.TChartOptions.SeriesOptions"/></param>
            <param name="aPlotArea">See <see cref="P:FlexCel.Core.TChartOptions.PlotArea"/></param>
            <param name="aBubblePercentRatio">See <see cref="P:FlexCel.Core.TScatterChartOptions.BubblePercentRatio"/></param>
            <param name="aBubbleSizeType">See <see cref="P:FlexCel.Core.TScatterChartOptions.BubbleSizeType"/></param>
            <param name="aIsBubbleChart">See <see cref="P:FlexCel.Core.TScatterChartOptions.IsBubbleChart"/></param>
            <param name="aShowNegativeBubbles">See <see cref="P:FlexCel.Core.TScatterChartOptions.ShowNegativeBubbles"/></param>
            <param name="aBubblesHaveShadow">See <see cref="P:FlexCel.Core.TScatterChartOptions.BubblesHaveShadow"/></param>
            <param name="aDefaultLabel">Default label properties for labels in this group.</param>
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.BubblePercentRatio">
            <summary>
            Percent of largest bubble compared to chart in general.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.BubbleSizeType">
            <summary>
            What the bubble size represents.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.IsBubbleChart">
            <summary>
            True if this is a bubble chart, false if it is a scatter chart.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.ShowNegativeBubbles">
            <summary>
            True if negative bubbles should be shwown.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TScatterChartOptions.BubblesHaveShadow">
            <summary>
            True if the bubbles have shadows.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartFrameOptions">
            <summary>
            Description of a box, its coordinates, fill style and line style.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChartFrameOptions.#ctor(FlexCel.Core.ChartLineOptions,FlexCel.Core.ChartFillOptions,FlexCel.Core.TShapeOptionList)">
            <summary>
            Creates a new TChartFrameOptions instance.
            </summary>
            <param name="aLineOptions">See <see cref="P:FlexCel.Core.TChartFrameOptions.LineOptions"/></param>
            <param name="aFillOptions">See <see cref="P:FlexCel.Core.TChartFrameOptions.FillOptions"/></param>
            <param name="aExtraOptions">See <see cref="P:FlexCel.Core.TChartFrameOptions.ExtraOptions"/></param>
        </member>
        <member name="M:FlexCel.Core.TChartFrameOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TChartFrameOptions.FillOptions">
            <summary>
            Fill options for the frame.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartFrameOptions.LineOptions">
            <summary>
            Line options for the frame.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartFrameOptions.ExtraOptions">
            <summary>
            Extra options used to specify gradients, textures, etc. If this is no null, the color values are not used.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartTextOptions">
            <summary>
            Optins for text inside the chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChartTextOptions.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Font">
            <summary>
            Font style for the text.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.TextColor">
            <summary>
            Color of the text.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.BackgoundMode">
            <summary>
            Background mode, transparent or opaque.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.HAlign">
            <summary>
            Horizontal alginment for the text.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.VAlign">
            <summary>
            Vertical alignment for the text.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Rotation">
            <summary>
            Text Rotation on degrees. 
            0 - 90 is up, 
            91 - 180 is down, 
            255 is vertical.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.X">
            <summary>
            X coordinate on 1/4000 units of chart area.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Y">
            <summary>
            Y coordinate on 1/4000 units of chart area.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Height">
            <summary>
            Hieght of the bounding box, on 1/4000 units of chart size.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartTextOptions.Width">
            <summary>
            Width of the bounding box, on 1/4000 units of chart size.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartPlotArea">
            <summary>
            Line and fill styles for the Plot Area.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChartPlotArea.#ctor(FlexCel.Core.TChartFrameOptions)">
            <summary>
            Creates a new PlotArea instance.
            </summary>
            <param name="aChartFrameOptions">See <see cref="P:FlexCel.Core.TChartPlotArea.ChartFrameOptions"/></param>
        </member>
        <member name="M:FlexCel.Core.TChartPlotArea.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TChartPlotArea.ChartFrameOptions">
            <summary>
            Line and fill style for this PlotArea.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAxisType">
            <summary>
            Type of axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisType.Category">
            <summary>
            Category Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisType.Value">
            <summary>
            Value Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisType.Series">
            <summary>
            Series Axis.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAxisLineOptions">
            <summary>
            Line options for an Axis.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TAxisLineOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.MainAxis">
            <summary>
            Line options for the main axis line.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.MajorGridLines">
            <summary>
            Line options for the major gridlines along the axis.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.MinorGridLines">
            <summary>
            Line options for the minor gridlines along the axis.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.WallLines">
            <summary>
            Line options for the walls if this axis is <see cref="F:FlexCel.Core.TAxisType.Category"/> or <see cref="F:FlexCel.Core.TAxisType.Series"/> or 
            line options for the floor otherwise.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisLineOptions.DoNotDrawLabelsIfNotDrawingAxis">
            <summary>
            If true and the line format is none, the axis labels will not be drawn.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TTickType">
            <summary>
            Ticks for an axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTickType.None">
            <summary>
            No Ticks.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTickType.Inside">
            <summary>
            Inside axis line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTickType.Outside">
            <summary>
            Outside axis line.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TTickType.Cross">
            <summary>
            Crosses the axis line.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAxisLabelPosition">
            <summary>
            Position of the labels on the axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisLabelPosition.None">
            <summary>
            This axis has no labels.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisLabelPosition.LowEnd">
            <summary>
            Labels go at the left of the chart, or to the bottom if axis is vertical.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisLabelPosition.HighEnd">
            <summary>
            Labels go at the right of the chart, or to the top if axis is vertical.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TAxisLabelPosition.NextToAxis">
            <summary>
            Labels go next the axis, not to the chart.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBackgroundMode">
            <summary>
            How to draw backgrounds of text.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBackgroundMode.Automatic">
            <summary>
            This is equivalent to transparent.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBackgroundMode.Transparent">
            <summary>
            Text will be drawn transpaerntly.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TBackgroundMode.Opaque">
            <summary>
            Text will be drawn on a box.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAxisTickOptions">
            <summary>
            Properties for the ticks and labels of an axis.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TAxisTickOptions.#ctor(FlexCel.Core.TTickType,FlexCel.Core.TTickType,FlexCel.Core.TAxisLabelPosition,FlexCel.Core.TBackgroundMode,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a new TAxisTickOptions instance.
            </summary>
            <param name="aMajorTickType">See <see cref="P:FlexCel.Core.TAxisTickOptions.MajorTickType"/></param>
            <param name="aMinorTickType">See <see cref="P:FlexCel.Core.TAxisTickOptions.MinorTickType"/></param>
            <param name="aLabelPosition">See <see cref="P:FlexCel.Core.TAxisTickOptions.LabelPosition"/></param>
            <param name="aBackgroundMode">See <see cref="P:FlexCel.Core.TAxisTickOptions.BackgroundMode"/></param>
            <param name="aLabelColor">See <see cref="P:FlexCel.Core.TAxisTickOptions.LabelColor"/></param>
            <param name="aRotation">See <see cref="P:FlexCel.Core.TAxisTickOptions.Rotation"/></param>
        </member>
        <member name="M:FlexCel.Core.TAxisTickOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.MinorTickType">
            <summary>
            Majot ticks type.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.MajorTickType">
            <summary>
            Minor ticks type.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.LabelPosition">
            <summary>
            Position of the label relative to the axis.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.BackgroundMode">
            <summary>
            how the background of text will be rendered.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.LabelColor">
            <summary>
            Color of labels in this axis.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisTickOptions.Rotation">
            <summary>
            Text Rotation on degrees. 
            0 - 90 is up, 
            91 - 180 is down, 
            255 is vertical.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TAxisRangeOptions">
            <summary>
            Properties for the ranges of an axis.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TAxisRangeOptions.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new TAxisRangeOptions instance.
            </summary>
            <param name="aLabelFrequency">See <see cref="P:FlexCel.Core.TAxisRangeOptions.LabelFrequency"/></param>
            <param name="aTickFrequency">See <see cref="P:FlexCel.Core.TAxisRangeOptions.TickFrequency"/></param>
            <param name="aValueAxisBetweenCategories">See <see cref="P:FlexCel.Core.TAxisRangeOptions.ValueAxisBetweenCategories"/></param>
            <param name="aValueAxisAtMaxCategory">See <see cref="P:FlexCel.Core.TAxisRangeOptions.ValueAxisAtMaxCategory"/></param>
            <param name="aReverseCategories">See <see cref="P:FlexCel.Core.TAxisRangeOptions.ReverseCategories"/></param>
        </member>
        <member name="M:FlexCel.Core.TAxisRangeOptions.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.LabelFrequency">
            <summary>
            Frequency at what the labels on categories are displayed. 1 means display all labels, 2 display one label and skip one, and so on.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.TickFrequency">
            <summary>
            Frequency at what the ticks on categories are displayed. 1 means display all ticks, 2 display one tick and skip one, and so on.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.ValueAxisBetweenCategories">
            <summary>
            Specifies if the Y Axis crosses between categories or in the middle of one. Normally a Column Chart 
            cross in the middle, and an area chart will cross between.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.ValueAxisAtMaxCategory">
            <summary>
            True if the Y axis is at the left.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TAxisRangeOptions.ReverseCategories">
            <summary>
            True if categories should be printed in reverse order.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TBaseAxis">
            <summary>
            Common ancestor for all Axis types.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TBaseAxis.#ctor(FlexCel.Core.TFlxChartFont,System.String,FlexCel.Core.TAxisLineOptions,FlexCel.Core.TAxisTickOptions,FlexCel.Core.TAxisRangeOptions,FlexCel.Core.TDataLabel)">
            <summary>
            Creates a new TBAseAxis instance.
            </summary>
            <param name="aFont">See <see cref="P:FlexCel.Core.TBaseAxis.Font"/></param>
            <param name="aNumberFormat">See <see cref="P:FlexCel.Core.TBaseAxis.NumberFormat"/></param>
            <param name="aAxisLineOptions">See <see cref="P:FlexCel.Core.TBaseAxis.AxisLineOptions"/></param>
            <param name="aTickOptions">See <see cref="P:FlexCel.Core.TBaseAxis.TickOptions"/></param>
            <param name="aRangeOptions">See <see cref="P:FlexCel.Core.TBaseAxis.RangeOptions"/></param>
            <param name="aCaption">See <see cref="P:FlexCel.Core.TBaseAxis.Caption"/></param>
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.Font">
            <summary>
            Font used on this axis.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.NumberFormat">
            <summary>
            Format for the numbers on this axis.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.AxisLineOptions">
            <summary>
            Linestyles for the different lines of this axis.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.TickOptions">
            <summary>
            Options for the ticks and the font used on the labels.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.RangeOptions">
            <summary>
            Options for the range of this axis.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TBaseAxis.Caption">
            <summary>
            Axis Caption.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCategoryAxis">
            <summary>
            Information about an Axis of categories. (normally the x axis)
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCategoryAxis.#ctor">
            <summary>
            Constructs a new TCategoryAxisOption instance with all values set to automatic.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TCategoryAxis.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,FlexCel.Core.TCategoryAxisOptions,FlexCel.Core.TFlxChartFont,System.String,FlexCel.Core.TAxisLineOptions,FlexCel.Core.TAxisTickOptions,FlexCel.Core.TAxisRangeOptions,FlexCel.Core.TDataLabel)">
            <summary>
            Constructs a new TCategoryAxisOptions instance.
            </summary>
            <param name="aAxisOptions">See <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/></param>
            <param name="aBaseUnit">See <see cref="P:FlexCel.Core.TCategoryAxis.BaseUnit"/></param>
            <param name="aCrossValue">See <see cref="P:FlexCel.Core.TCategoryAxis.CrossValue"/></param>
            <param name="aMajorUnit">See <see cref="P:FlexCel.Core.TCategoryAxis.MajorUnit"/></param>
            <param name="aMajorValue">See <see cref="P:FlexCel.Core.TCategoryAxis.MajorValue"/></param>
            <param name="aMax">See <see cref="P:FlexCel.Core.TCategoryAxis.Max"/></param>
            <param name="aMin">See <see cref="P:FlexCel.Core.TCategoryAxis.Min"/></param>
            <param name="aMinorUnit">See <see cref="P:FlexCel.Core.TCategoryAxis.MinorUnit"/></param>
            <param name="aMinorValue">See <see cref="P:FlexCel.Core.TCategoryAxis.MinorValue"/></param>
            <param name="aFont">See <see cref="T:System.Drawing.Font"/></param>
            <param name="aNumberFormat">See <see cref="P:FlexCel.Core.TBaseAxis.NumberFormat"/></param>
            <param name="aAxisLineOptions">See <see cref="P:FlexCel.Core.TBaseAxis.AxisLineOptions"/>. This parameter will be cloned.</param>
            <param name="aTickOptions">See <see cref="P:FlexCel.Core.TBaseAxis.TickOptions"/> This parameter will be cloned.</param>
            <param name="aRangeOptions">See <see cref="P:FlexCel.Core.TBaseAxis.RangeOptions"/> This parameter will be cloned.</param>
            <param name="aCaption">See <see cref="P:FlexCel.Core.TBaseAxis.Caption"/> This parameter will be cloned.</param>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.Min">
            <summary>
            Minimum value for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.Max">
            <summary>
            Maximum value for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.MajorValue">
            <summary>
            Value for the major unit, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.MajorUnit">
            <summary>
            Units for the major unit, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.MinorValue">
            <summary>
            Value for the minor unit, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.MinorUnit">
            <summary>
            Units for the minor unit, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.BaseUnit">
            <summary>
            Base units for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.CrossValue">
            <summary>
            Value where the other Axis will cross this one, when not set to automatic in <see cref="P:FlexCel.Core.TCategoryAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TCategoryAxis.AxisOptions">
            <summary>
            Enumerates which of the other options contain valid values or are automatic.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TCategoryAxisOptions">
            <summary>
            Options for a Category Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.None">
            <summary>
            All magnitudes will be manual.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoMin">
            <summary>
            Use automatic minimum.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoMax">
            <summary>
            Use automatic maximum.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoMajor">
            <summary>
            Use automatic major units.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoMinor">
            <summary>
            Use automatic minor units.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.DateAxis">
            <summary>
            This is a date Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoBase">
            <summary>
            Use automatic base unit.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoCrossDate">
            <summary>
            Use automatic date crossing point.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TCategoryAxisOptions.AutoDate">
            <summary>
            Use automatic date settings.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TValueAxis">
            <summary>
            Information about an Axis of values. (normally the y axis)
            </summary>
        </member>
        <member name="M:FlexCel.Core.TValueAxis.#ctor">
            <summary>
            Constructs a new TValueAxisOptions instance with all values set to automatic.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TValueAxis.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,FlexCel.Core.TValueAxisOptions,FlexCel.Core.TFlxChartFont,System.String,FlexCel.Core.TAxisLineOptions,FlexCel.Core.TAxisTickOptions,FlexCel.Core.TAxisRangeOptions,FlexCel.Core.TDataLabel)">
            <summary>
            Constructs a new TValueAxisOptions instance.
            </summary>
            <param name="aMin">See <see cref="P:FlexCel.Core.TValueAxis.Min"/></param>
            <param name="aMax">See <see cref="P:FlexCel.Core.TValueAxis.Max"/></param>
            <param name="aMajor">See <see cref="P:FlexCel.Core.TValueAxis.Major"/></param>
            <param name="aMinor">See <see cref="P:FlexCel.Core.TValueAxis.Minor"/></param>
            <param name="aCrossValue">See <see cref="P:FlexCel.Core.TValueAxis.CrossValue"/></param>
            <param name="aAxisOptions">See <see cref="P:FlexCel.Core.TValueAxis.AxisOptions"/></param>
            <param name="aFont">See <see cref="T:System.Drawing.Font"/>. This parameter will be cloned.</param>
            <param name="aNumberFormat">See <see cref="P:FlexCel.Core.TBaseAxis.NumberFormat"/></param>
            <param name="aAxisLineOptions">See <see cref="P:FlexCel.Core.TBaseAxis.AxisLineOptions"/>. This parameter will be cloned.</param>
            <param name="aTickOptions">See <see cref="P:FlexCel.Core.TBaseAxis.TickOptions"/>. This parameter will be cloned.</param>
            <param name="aRangeOptions">See <see cref="P:FlexCel.Core.TBaseAxis.RangeOptions"/> This parameter will be cloned.</param>
            <param name="aCaption">See <see cref="P:FlexCel.Core.TBaseAxis.Caption"/> This parameter will be cloned.</param>
        </member>
        <member name="P:FlexCel.Core.TValueAxis.Min">
            <summary>
            Minimum value for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TValueAxis.Max">
            <summary>
            Maximum value for the axis, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TValueAxis.Major">
            <summary>
            Value for the major unit, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TValueAxis.Minor">
            <summary>
            Value for the minor unit, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TValueAxis.CrossValue">
            <summary>
            Value where the other Axis will cross this one, when not set to automatic in <see cref="P:FlexCel.Core.TValueAxis.AxisOptions"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TValueAxis.AxisOptions">
            <summary>
            Enumerates which of the other options contain valid values or are automatic.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TValueAxisOptions">
            <summary>
            Options for a Value Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.None">
            <summary>
            All magnitudes will be manual.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoMin">
            <summary>
            Use automatic minimum.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoMax">
            <summary>
            Use automatic maximum.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoMajor">
            <summary>
            Use automatic major units.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoMinor">
            <summary>
            Use automatic minor units.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.AutoCross">
            <summary>
            Use automatic crossing point.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.LogScale">
            <summary>
            Use logarithmic scale.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.Reverse">
            <summary>
            Values will be in reverse order.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TValueAxisOptions.MaxCross">
            <summary>
            The category Axis will cross at the maximum value.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartAxis">
            <summary>
            A class encapsulating the information of an axis
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChartAxis.#ctor(System.Int32,System.Drawing.Rectangle,FlexCel.Core.TBaseAxis,FlexCel.Core.TValueAxis)">
            <summary>
            Creates a new ChartAxis instance.
            </summary>
            <param name="aIndex">Axis Index. 0 means primary, 1 secundary.</param>
            <param name="aAxisLocation">Location of the axis, in 1/4000 units of the current chart dimensions.</param>
            <param name="aCategoryAxis">Data of the Category Axis. This might be a CategoryAxis for line or bar charts, or a ValuesAxis for a Scatter Chart.</param>
            <param name="aValueAxis">Data of the value Axis.</param>
        </member>
        <member name="P:FlexCel.Core.TChartAxis.Index">
            <summary>
            Axis Index. 0 means primary, 1 secundary.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartAxis.AxisLocation">
            <summary>
            Returns the Axis coordinates on 1/4000 parts of the chart area.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartAxis.CategoryAxis">
            <summary>
            Returns information about the Category Axis (X-Axis on a non rtated chart). Note that this might be a <see cref="T:FlexCel.Core.TValueAxis"/> axis for scatter charts, or a <see cref="T:FlexCel.Core.TCategoryAxis"/> for line or bar charts.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartAxis.ValueAxis">
            <summary>
            Returns information about the Value Axis (Y-Axis on a non rotated chart).
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartLegendPos">
            <summary>
            Position of hte legend inside the chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Bottom">
            <summary>
            At bottom.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Corner">
            <summary>
            At the corner.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Top">
            <summary>
            At the top.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Right">
            <summary>
            At the right.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.Left">
            <summary>
            At the left.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TChartLegendPos.NotDocked">
            <summary>
            The legend is not docked inside the chart area.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartLegend">
            <summary>
            Description of the chart's legend box.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChartLegend.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,FlexCel.Core.TChartLegendPos,FlexCel.Core.TChartFrameOptions,FlexCel.Core.TChartTextOptions)">
            <summary>
            Creates a new TChartLegend instance.
            </summary>
            <param name="aX">See <see cref="P:FlexCel.Core.TChartLegend.X"/></param>
            <param name="aY">See <see cref="P:FlexCel.Core.TChartLegend.Y"/></param>
            <param name="aWidth">See <see cref="P:FlexCel.Core.TChartLegend.Width"/></param>
            <param name="aHeight">See <see cref="P:FlexCel.Core.TChartLegend.Height"/></param>
            <param name="aFrame">See <see cref="P:FlexCel.Core.TChartLegend.Frame"/></param>
            <param name="aPlacement">See <see cref="P:FlexCel.Core.TChartLegend.Placement"/></param>
            <param name="aTextOptions">See <see cref="P:FlexCel.Core.TChartLegend.TextOptions"/></param>
        </member>
        <member name="M:FlexCel.Core.TChartLegend.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TChartLegend.X">
            <summary>
            X coordinate on 1/4000 units of chart area.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartLegend.Y">
            <summary>
            Y coordinate on 1/4000 units of chart area.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartLegend.Height">
            <summary>
            Height of the bounding box, on 1/4000 units of chart size.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartLegend.Width">
            <summary>
            Width of the bounding box, on 1/4000 units of chart size.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartLegend.Placement">
            <summary>
            Placement of the legend inside of the chart.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartLegend.Frame">
            <summary>
            Line and fill style options for the frame.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartLegend.TextOptions">
            <summary>
            Global font options for the legend labels.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLegendEntryOptions">
            <summary>
            Description of one particular entry on the Legend box.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TLegendEntryOptions.#ctor(System.Boolean,FlexCel.Core.TChartTextOptions)">
            <summary>
            Creates a new TLegendEntryOptions instance.
            </summary>
            <param name="aEntryDeleted">See <see cref="P:FlexCel.Core.TLegendEntryOptions.EntryDeleted"/></param>
            <param name="aTextFormat">See <see cref="P:FlexCel.Core.TLegendEntryOptions.TextFormat"/></param>
        </member>
        <member name="M:FlexCel.Core.TLegendEntryOptions.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TLegendEntryOptions.EntryDeleted">
            <summary>
            If true, this series has been deleted from the legend box, and it should not be displayed.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TLegendEntryOptions.TextFormat">
            <summary>
            Font to use on this particular entry. If null, the default font for the legend box should be used.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartDropBars">
            <summary>
            Information about a Drop Bar.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChartDropBars.#ctor(FlexCel.Core.ChartLineOptions,FlexCel.Core.ChartLineOptions,FlexCel.Core.TChartOneDropBar,FlexCel.Core.TChartOneDropBar)">
            <summary>
            Creates a new TChartDropBars instance.
            </summary>
            <param name="aDropLines">See <see cref="P:FlexCel.Core.TChartDropBars.DropLines"/></param>
            <param name="aUpBar">See <see cref="P:FlexCel.Core.TChartDropBars.UpBar"/></param>
            <param name="aDownBar">See <see cref="P:FlexCel.Core.TChartDropBars.DownBar"/></param>
            <param name="aHiLoLines">See <see cref="P:FlexCel.Core.TChartDropBars.HiLoLines"/></param>
        </member>
        <member name="M:FlexCel.Core.TChartDropBars.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TChartDropBars.DropLines">
            <summary>
            Line style for the drop lines if they exist, null otherwise.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartDropBars.HiLoLines">
            <summary>
            Lie srtyle for the High-Low lines if they exist, null otherwise.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartDropBars.UpBar">
            <summary>
            The data for the up drop bar.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartDropBars.DownBar">
            <summary>
            The data for the down drop bar.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TChartOneDropBar">
            <summary>
            Information about one specific drop bar.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TChartOneDropBar.#ctor(FlexCel.Core.TChartFrameOptions,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="aFrame">See <see cref="P:FlexCel.Core.TChartOneDropBar.Frame"/></param>
            <param name="aGapWidth">See <see cref="P:FlexCel.Core.TChartOneDropBar.GapWidth"/></param>
        </member>
        <member name="M:FlexCel.Core.TChartOneDropBar.Clone">
            <summary>
            Returns a deep copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TChartOneDropBar.Frame">
            <summary>
            Properties for the drop bar.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TChartOneDropBar.GapWidth">
            <summary>
            Gap width on percent.(0 to 100)
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLinkOption">
            <summary>
            Specifies to which object the label is linked to.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.None">
            <summary>
            Not used. It means the label is not linked.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.ChartTitle">
            <summary>
            This is the chart title.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.YAxisTitle">
            <summary>
            This is the caption for the Y-Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.XAxisTitle">
            <summary>
            This is the caption for the X-Axis.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.DataLabel">
            <summary>
            This is a Data Label, linked to a series or a point in the series.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLinkOption.ZAxisTitle">
            <summary>
            This is the caption for the Z-Axis.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TLabelDataValue">
            <summary>
            Defines what information a DataLabel should show.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLabelDataValue.Manual">
            <summary>
            This label has a manually entered value.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TLabelDataValue.SeriesInfo">
            <summary>
            This label shows the values and/or categories of the series.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataLabelPosition">
            <summary>
            Defines where a label is displayed on a chart.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Automatic">
            <summary>
            Label is placed on the default position. This is AutoPie for Pie charts, Right for Line Charts, Outside for BarCharts and Center for Stacked Bar charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Outside">
            <summary>
            Label is outside the data. Applies to Bar, pie charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Inside">
            <summary>
            Label is inside the data. Applies to Bar, pie charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Center">
            <summary>
            Label is centered on the data. Applies to Bar, line, pie charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Axis">
            <summary>
            Label is placed on the Axis. Applies to Bar charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Above">
            <summary>
            Label is placed Above the data. Applies to Line charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Below">
            <summary>
            Label is placed Below the data. Applies to Line charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Left">
            <summary>
            Label is placed Left of the data. Applies to Line charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Right">
            <summary>
            Label is placed Right of the data. Applies to Line charts.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.AutoPie">
            <summary>
            Label is placed automatically on the chart. This applies to Pie charts, and it is equivalent to TDataLabelPosition.Automatic.
            </summary>
        </member>
        <member name="F:FlexCel.Core.TDataLabelPosition.Any">
            <summary>
            Label has been manually moved and it is placed at an arbitrary place.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataLabelOptions">
            <summary>
            Options for a data label.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TDataLabelOptions.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.AutoColor">
            <summary>
            True if this label will use automatic coloring, false if the color is user defined.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowLegendKey">
            <summary>
            If true, the legend key will be shown along with the label. 
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowSeriesName">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType"/> is SeriesInfo, this label will display the Series name.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowCategories">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType"/> is SeriesInfo, this label will display the Categories.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowValues">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType"/> is SeriesInfo, this label will display the actual value of the data.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowPercents">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType"/> is SeriesInfo, this label will display the percentage of the total data. This value only applies to PIE charts.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.ShowBubbles">
            <summary>
            If true and this label <see cref="P:FlexCel.Core.TDataLabelOptions.DataType"/> is SeriesInfo, this label will display the percentage bubble size. This value only applies to BUBBLE charts.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.DataType">
            <summary>
            Defines which information this label displays.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.Deleted">
            <summary>
            If true, this label has been manually deleted by the user and should not be displayed.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabelOptions.Position">
            <summary>
            Where the label is placed.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TDataLabel">
            <summary>
            Represents one data label on the chart.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TDataLabel.Clone">
            <summary>
            Returns a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.TextOptions">
            <summary>
            Formatting options for this label.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.LabelOptions">
            <summary>
            Data options for the label.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.Frame">
            <summary>
            Background for the label, if there is one. Null otherwise.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.LabelValues">
            <summary>
            A list with the actual values for the label, evaluated from the formula at <see cref="P:FlexCel.Core.TDataLabel.LabelDefinition"/>
            IMPORTANT NOTE: The values here only are valid if <see cref="P:FlexCel.Core.TDataLabel.LabelOptions"/> indicates a manual DataType.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.LabelDefinition">
            <summary>
            The formula defining the values on this label. You can access the actual values of the labels with <see cref="P:FlexCel.Core.TDataLabel.LabelValues"/>.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.LinkedTo">
            <summary>
            Defines to which object this label is linked.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.SeriesIndex">
            <summary>
            Series number for the series this label displays. This value only has meaning if <see cref="P:FlexCel.Core.TDataLabel.LinkedTo"/> is TLinkOptions.DataLabel
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.DataPointIndex">
            <summary>
            Point index of of the point this label displays.  This value only has meaning if <see cref="P:FlexCel.Core.TDataLabel.LinkedTo"/> is TLinkOptions.DataLabel
            and the label is for only one point. When the label is for the whole series, DataPointIndex is -1.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TDataLabel.NumberFormat">
            <summary>
            Numeric format for this label.
            </summary>
        </member>
        <member name="T:FlexCel.Core.TFlxChartFont">
            <summary>
            A TFlxFont with Scaling factor. Scaling factor might be different than 1 if
            the chart has Autosize Fonts. To get the real value of the font, you need to multiply by the factor.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxChartFont.#ctor">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="M:FlexCel.Core.TFlxChartFont.Clone">
            <summary>
            Return a deep copy of the copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlexCel.Core.TFlxChartFont.Scale">
            <summary>
            Scale for the font. Multiply by this value to get the real size in points.
            </summary>
        </member>
        <member name="P:FlexCel.Core.TFlxChartFont.Font">
            <summary>
            Actual information for the font.
            </summary>
        </member>
    </members>
</doc>
