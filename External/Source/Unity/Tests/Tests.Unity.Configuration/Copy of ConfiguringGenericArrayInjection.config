<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
  </configSections>

  <system.serviceModel>
  </system.serviceModel>
  <unity>
    <typeAliases>
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="string" type="System.String, mscorlib" />
      <typeAlias alias="ILogger" type="Microsoft.Practices.Unity.TestSupport.ILogger, TestSupport.Unity" />
      <typeAlias alias="MockLogger" type="Microsoft.Practices.Unity.TestSupport.MockLogger, TestSupport.Unity" />
      <typeAlias alias="SpecialLogger" type="Microsoft.Practices.Unity.TestSupport.SpecialLogger, TestSupport.Unity" />
      <typeAlias alias="GenericArrayConstructor" type="Microsoft.Practices.Unity.TestSupport.GenericObjectArrayConstructorDependency`1, Tests.Unity.Configuration" />
      <typeAlias alias="GenericArrayProperty" type="Microsoft.Practices.Unity.TestSupport.GenericObjectArrayPropertyDependency`1, Tests.Unity.Configuration" />
      <typeAlias alias="DependentConstructor" type="Microsoft.Practices.Unity.TestSupport.ObjectWithOneConstructorDependency, TestSupport.Unity" />
    </typeAliases>

    <containers>
      <container name="emptyArray">
        <types>
          <type type="GenericArrayConstructor">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="loggers" genericParameterName="T[]">
                  <array/>
                </param>
              </constructor>
            </typeConfig>
          </type>
        </types>
        <extensionConfig>
          <add name="interception" 
               type="Microsoft.Practices.Unity.Configuration.InterceptionElement, Microsoft.Practices.Unity.Configuration">
            <policies>
              <policy name="Foo">
                <matchingRules>
                  <matchingRule name="" type=""/>

                  <matchingRule name="" type="">
                    <constructor>

                    </constructor>
                    <property name="blah"/>
                  </matchingRule>

                  <matchingRule name="">
                    <lifetime blah=""/>
                    <!-- consistent but verbose; cannot reuse the existing config object -->
                    <constructor>

                    </constructor>
                    <property name="blah"/>
                  </matchingRule>

                  <matchingRule name="" singleton="">
                    <!-- not consistent with type; terse -->
                    <constructor>

                    </constructor>
                    <property name="blah"/>
                  </matchingRule>

                  <matchingRule name="" singleton="">
                    <!-- not consistent with type; terse -->
                    <constructor>

                    </constructor>
                    <property name="blah"/>
                  </matchingRule>

                  <matchingRule name="">
                    <!-- consistent but verbose; cannot reuse the existing config object -->
                    <lifetime blah=""/>
                    <injection>
                      <constructor>

                      </constructor>
                      <property name="blah"/>
                    </injection>
                  </matchingRule>
                </matchingRules>
                <callHandlers>

                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>

      <container name="populatedArray">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="GenericArrayConstructor">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="loggers" genericParameterName="T[]">
                  <array/>
                </param>
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="populatedArrayWithDefaultInstance">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" >
            <lifetime type="singleton" />
          </type>
          <type type="GenericArrayConstructor">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="loggers" genericParameterName="T[]">
                  <array/>
                </param>
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="populatedArrayWithValues">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger3">
            <lifetime type="singleton" />
          </type>
          <type type="GenericArrayConstructor">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="loggers" genericParameterName="T[]">
                  <array>
                    <dependency name="logger2"/>
                    <dependency name="logger1"/>
                  </array>
                </param>
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="constructorParameterNotArray">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger3">
            <lifetime type="singleton" />
          </type>
          <type type="DependentConstructor">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="logger" parameterType="ILogger">
                  <array/>
                </param>
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="emptyArrayForProperty">
        <types>
          <type type="GenericArrayProperty">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="Values" genericParameterName="T[]">
                <array/>
              </property>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="populatedArrayForProperty">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="GenericArrayProperty">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="Values" genericParameterName="T[]">
                <array/>
              </property>
            </typeConfig>
          </type>
        </types>
      </container>
    </containers>
  </unity>
</configuration>