<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
  </configSections>

  <unity>
    <typeAliases>
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="string" type="System.String, mscorlib" />
      <typeAlias alias="ILogger" type="Microsoft.Practices.Unity.TestSupport.ILogger, TestSupport.Unity" />
      <typeAlias alias="ILoggerArray" type="Microsoft.Practices.Unity.TestSupport.ILogger[], TestSupport.Unity" />
      <typeAlias alias="MockLogger" type="Microsoft.Practices.Unity.TestSupport.MockLogger, TestSupport.Unity" />
      <typeAlias alias="SpecialLogger" type="Microsoft.Practices.Unity.TestSupport.SpecialLogger, TestSupport.Unity" />
      <typeAlias alias="ArrayConstructor" type="Microsoft.Practices.Unity.TestSupport.ObjectArrayConstructorDependency, Tests.Unity.Configuration" />
      <typeAlias alias="ArrayProperty" type="Microsoft.Practices.Unity.TestSupport.ObjectArrayPropertyDependency, Tests.Unity.Configuration" />
      <typeAlias alias="DependentConstructor" type="Microsoft.Practices.Unity.TestSupport.ObjectWithOneConstructorDependency, TestSupport.Unity" />
    </typeAliases>

    <containers>
      <container name="emptyArray">
        <types>
          <type type="ArrayConstructor">
            <typeConfig>
              <constructor>
                <param name="loggers" parameterType="ILoggerArray" />
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="populatedArray">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ArrayConstructor">
            <typeConfig>
              <constructor>
                <param name="loggers" parameterType="ILoggerArray" />
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="populatedArrayWithDefaultInstance">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" >
            <lifetime type="singleton" />
          </type>
          <type type="ArrayConstructor">
            <typeConfig>
              <constructor>
                <param name="loggers" parameterType="ILoggerArray" />
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="populatedArrayWithValues">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger3">
            <lifetime type="singleton" />
          </type>
          <type type="ArrayConstructor">
            <typeConfig>
              <constructor>
                <param name="loggers" parameterType="ILoggerArray">
                  <array>
                    <dependency name="logger2"/>
                    <dependency name="logger1"/>
                  </array>
                </param>
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="constructorParameterNotArray">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger3">
            <lifetime type="singleton" />
          </type>
          <type type="DependentConstructor">
            <typeConfig>
              <constructor>
                <param name="logger" parameterType="ILogger">
                  <array />
                </param>
              </constructor>
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="emptyArrayForProperty">
        <types>
          <type type="ArrayProperty">
            <typeConfig>
              <property name="Loggers" propertyType="ILoggerArray" />
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="populatedArrayForProperty">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ArrayProperty">
            <typeConfig>
              <property name="Loggers" propertyType="ILoggerArray" />
            </typeConfig>
          </type>
        </types>
      </container>

      <container name="explicitlyInjectingEmptyArray">
        <types>
          <type type="ILogger" mapTo="MockLogger" name="logger1">
            <lifetime type="singleton" />
          </type>
          <type type="ILogger" mapTo="SpecialLogger" name="logger2">
            <lifetime type="singleton" />
          </type>
          <type type="ArrayProperty">
            <typeConfig>
              <property name="Loggers" propertyType="ILoggerArray">
                <array/>
              </property>
            </typeConfig>
          </type>
        </types>
      </container>
    </containers>
  </unity>
</configuration>
