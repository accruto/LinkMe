<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="unity-matchingRule-lifetime_but_no_type" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="unity-matchingRule-injection_but_no_type" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="unity-callHandler-lifetime_but_no_type" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
    <section name="unity-callHandler-injection_but_no_type" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
  </configSections>
  <unity>
    <typeAliases>
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="int" type="System.Int32, mscorlib" />
      <typeAlias alias="string" type="System.String, mscorlib" />
      <typeAlias alias="IMatchingRule"
                 type="Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="AlwaysMatchingRule"
                 type="TestSupport.Unity.AlwaysMatchingRule, TestSupport.Unity" />
      <typeAlias alias="ICallHandler"
                 type="Microsoft.Practices.Unity.InterceptionExtension.ICallHandler, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="GlobalCountCallHandler"
                 type="TestSupport.Unity.GlobalCountCallHandler, TestSupport.Unity" />
    </typeAliases>

    <containers>
      <container name="extensionOnly">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
      </container>

      <container name="extensionAndExtensionConfig">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
          </add>
        </extensionConfig>
      </container>

      <container name="CanConfigureAnEmptyPolicy">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>

      <container name="CanSetUpSeveralEmptyRules">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
              </policy>
              <policy name="bar">
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>

      <container name="CanSetUpAPolicyWithGivenRulesAndHandlersTypes">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
                <matchingRules>
                  <matchingRule name="rule1" type="AlwaysMatchingRule"/>
                </matchingRules>
                <callHandlers>
                  <callHandler name="handler1" type="GlobalCountCallHandler"/>
                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>

      <container name="CanSetUpAPolicyWithExternallyConfiguredRulesAndHandlers">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <types>
          <type name="rule1" type="IMatchingRule" mapTo="AlwaysMatchingRule">
          </type>
          <type name="handler1" type="ICallHandler" mapTo="GlobalCountCallHandler">
            <typeConfig>
              <constructor>
                <param name="name" parameterType="string">
                  <value value="handler1" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="handler2" type="ICallHandler" mapTo="GlobalCountCallHandler">
            <typeConfig>
              <constructor>
                <param name="name" parameterType="string">
                  <value value="handler2" />
                </param>
              </constructor>
              <property name="Order" propertyType="int">
                <value value="10" type="int"/>
              </property>
            </typeConfig>
          </type>
        </types>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
                <matchingRules>
                  <matchingRule name="rule1"/>
                </matchingRules>
                <callHandlers>
                  <callHandler name="handler1"/>
                  <callHandler name="handler2"/>
                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>

      <container name="CanSetUpAPolicyWithInjectedRulesAndHandlers">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
                <matchingRules>
                  <matchingRule name="rule1" type="AlwaysMatchingRule">
                    <injection/>
                  </matchingRule>
                </matchingRules>
                <callHandlers>
                  <callHandler name="handler1" type="GlobalCountCallHandler">
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler1" />
                        </param>
                      </constructor>
                    </injection>
                  </callHandler>
                  <callHandler name="handler2" type="GlobalCountCallHandler">
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler2" />
                        </param>
                      </constructor>
                      <property name="Order" propertyType="int">
                        <value value="10" type="int"/>
                      </property>
                    </injection>
                  </callHandler>
                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>

      <container name="CanSetUpAPolicyWithLifetimeManagedInjectedRulesAndHandlers">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
                <matchingRules>
                  <matchingRule name="rule1" type="AlwaysMatchingRule">
                    <lifetime type="singleton" />
                  </matchingRule>
                  <matchingRule name="rule2" type="AlwaysMatchingRule"/>
                </matchingRules>
                <callHandlers>
                  <callHandler name="handler1" type="GlobalCountCallHandler">
                    <lifetime type="singleton" />
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler1" />
                        </param>
                      </constructor>
                    </injection>
                  </callHandler>
                  <callHandler name="handler2" type="GlobalCountCallHandler">
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler2" />
                        </param>
                      </constructor>
                      <property name="Order" propertyType="int">
                        <value value="10" type="int"/>
                      </property>
                    </injection>
                  </callHandler>
                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>
    </containers>
  </unity>

  <unity-matchingRule-lifetime_but_no_type>
    <typeAliases>
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="int" type="System.Int32, mscorlib" />
      <typeAlias alias="string" type="System.String, mscorlib" />
      <typeAlias alias="IMatchingRule"
                 type="Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="AlwaysMatchingRule"
                 type="TestSupport.Unity.AlwaysMatchingRule, TestSupport.Unity" />
      <typeAlias alias="ICallHandler"
                 type="Microsoft.Practices.Unity.InterceptionExtension.ICallHandler, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="GlobalCountCallHandler"
                 type="TestSupport.Unity.GlobalCountCallHandler, TestSupport.Unity" />
    </typeAliases>

    <containers>
      <container name="ConfiguringAMatchingRuleWithNoTypeButWithLifetimeManagerThrows">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
                <matchingRules>
                  <matchingRule name="rule1">
                    <lifetime type="singleton" />
                  </matchingRule>
                  <matchingRule name="rule2" type="AlwaysMatchingRule"/>
                </matchingRules>
                <callHandlers>
                  <callHandler name="handler1" type="GlobalCountCallHandler">
                    <lifetime type="singleton" />
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler1" />
                        </param>
                      </constructor>
                    </injection>
                  </callHandler>
                  <callHandler name="handler2" type="GlobalCountCallHandler">
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler2" />
                        </param>
                      </constructor>
                      <property name="Order" propertyType="int">
                        <value value="10" type="int"/>
                      </property>
                    </injection>
                  </callHandler>
                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>
    </containers>
  </unity-matchingRule-lifetime_but_no_type>

  <unity-matchingRule-injection_but_no_type>
    <typeAliases>
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="int" type="System.Int32, mscorlib" />
      <typeAlias alias="string" type="System.String, mscorlib" />
      <typeAlias alias="IMatchingRule"
                 type="Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="AlwaysMatchingRule"
                 type="TestSupport.Unity.AlwaysMatchingRule, TestSupport.Unity" />
      <typeAlias alias="ICallHandler"
                 type="Microsoft.Practices.Unity.InterceptionExtension.ICallHandler, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="GlobalCountCallHandler"
                 type="TestSupport.Unity.GlobalCountCallHandler, TestSupport.Unity" />
    </typeAliases>

    <containers>
      <container name="ConfiguringAMatchingRuleWithNoTypeButWithLifetimeManagerThrows">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
                <matchingRules>
                  <matchingRule name="rule1">
                    <injection>
                      <constructor>
                      </constructor>
                    </injection>
                  </matchingRule>
                  <matchingRule name="rule2" type="AlwaysMatchingRule"/>
                </matchingRules>
                <callHandlers>
                  <callHandler name="handler1" type="GlobalCountCallHandler">
                    <lifetime type="singleton" />
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler1" />
                        </param>
                      </constructor>
                    </injection>
                  </callHandler>
                  <callHandler name="handler2" type="GlobalCountCallHandler">
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler2" />
                        </param>
                      </constructor>
                      <property name="Order" propertyType="int">
                        <value value="10" type="int"/>
                      </property>
                    </injection>
                  </callHandler>
                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>
    </containers>
  </unity-matchingRule-injection_but_no_type>

  <unity-callHandler-lifetime_but_no_type>
    <typeAliases>
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="int" type="System.Int32, mscorlib" />
      <typeAlias alias="string" type="System.String, mscorlib" />
      <typeAlias alias="IMatchingRule"
                 type="Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="AlwaysMatchingRule"
                 type="TestSupport.Unity.AlwaysMatchingRule, TestSupport.Unity" />
      <typeAlias alias="ICallHandler"
                 type="Microsoft.Practices.Unity.InterceptionExtension.ICallHandler, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="GlobalCountCallHandler"
                 type="TestSupport.Unity.GlobalCountCallHandler, TestSupport.Unity" />
    </typeAliases>

    <containers>
      <container name="ConfiguringAMatchingRuleWithNoTypeButWithLifetimeManagerThrows">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
                <matchingRules>
                  <matchingRule name="rule1"/>
                  <matchingRule name="rule2" type="AlwaysMatchingRule"/>
                </matchingRules>
                <callHandlers>
                  <callHandler name="handler1">
                    <lifetime type="singleton" />
                  </callHandler>
                  <callHandler name="handler2" type="GlobalCountCallHandler">
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler2" />
                        </param>
                      </constructor>
                      <property name="Order" propertyType="int">
                        <value value="10" type="int"/>
                      </property>
                    </injection>
                  </callHandler>
                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>
    </containers>
  </unity-callHandler-lifetime_but_no_type>

  <unity-callHandler-injection_but_no_type>
    <typeAliases>
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="int" type="System.Int32, mscorlib" />
      <typeAlias alias="string" type="System.String, mscorlib" />
      <typeAlias alias="IMatchingRule"
                 type="Microsoft.Practices.Unity.InterceptionExtension.IMatchingRule, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="AlwaysMatchingRule"
                 type="TestSupport.Unity.AlwaysMatchingRule, TestSupport.Unity" />
      <typeAlias alias="ICallHandler"
                 type="Microsoft.Practices.Unity.InterceptionExtension.ICallHandler, Microsoft.Practices.Unity.Interception" />
      <typeAlias alias="GlobalCountCallHandler"
                 type="TestSupport.Unity.GlobalCountCallHandler, TestSupport.Unity" />
    </typeAliases>

    <containers>
      <container name="ConfiguringAMatchingRuleWithNoTypeButWithLifetimeManagerThrows">
        <extensions>
          <add type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception" />
        </extensions>
        <extensionConfig>
          <add name="interception"
               type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationElement, Microsoft.Practices.Unity.Interception.Configuration">
            <policies>
              <policy name="foo">
                <matchingRules>
                  <matchingRule name="rule1"/>
                  <matchingRule name="rule2" type="AlwaysMatchingRule"/>
                </matchingRules>
                <callHandlers>
                  <callHandler name="handler1">
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler1" />
                        </param>
                      </constructor>
                    </injection>
                  </callHandler>
                  <callHandler name="handler2" type="GlobalCountCallHandler">
                    <injection>
                      <constructor>
                        <param name="name" parameterType="string">
                          <value value="handler2" />
                        </param>
                      </constructor>
                      <property name="Order" propertyType="int">
                        <value value="10" type="int"/>
                      </property>
                    </injection>
                  </callHandler>
                </callHandlers>
              </policy>
            </policies>
          </add>
        </extensionConfig>
      </container>
    </containers>
  </unity-callHandler-injection_but_no_type>
</configuration>