<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAnt.Core</name>
    </assembly>
    <members>
        <member name="T:NAnt.Core.Attributes.BooleanValidatorAttribute">
            <summary>
            Used to indicate that a property should be able to be converted into a 
            <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="T:NAnt.Core.Attributes.ValidatorAttribute">
            <summary>
            Base class for all validator attributes.
            </summary>
        </member>
        <member name="M:NAnt.Core.Attributes.ValidatorAttribute.Validate(System.Object)">
            <summary>
            Validates the specified value.
            </summary>
            <param name="value">The value to be validated.</param>
            <exception cref="T:NAnt.Core.ValidationException">The validation fails.</exception>
        </member>
        <member name="M:NAnt.Core.Attributes.BooleanValidatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.BooleanValidatorAttribute"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Attributes.BooleanValidatorAttribute.Validate(System.Object)">
            <summary>
            Checks if the specified value can be converted to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value to be checked.</param>
            <exception cref="T:NAnt.Core.ValidationException"><paramref name="value"/> cannot be converted to a <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="T:NAnt.Core.Attributes.BuildAttributeAttribute">
            <summary>
            Indicates that property should be treated as a XML attribute for the 
            task.
            </summary>
            <example>
              Examples of how to specify task attributes
              <code>
            #region Public Instance Properties
            
            [BuildAttribute("out", Required=true)]
            public string Output {
                get { return _out; }
                set { _out = value; }
            }
            
            [BuildAttribute("optimize")]
            [BooleanValidator()]
            public bool Optimize {
                get { return _optimize; }
                set { _optimize = value; }
            }
            
            [BuildAttribute("warnlevel")]
            [Int32Validator(0,4)] // limit values to 0-4
            public int WarnLevel {
                get { return _warnLevel; }
                set { _warnLevel = value; }
            }
            
            [BuildElement("sources")]
            public FileSet Sources {
                get { return _sources; }
                set { _sources = value; }
            }
            
            #endregion Public Instance Properties
            
            #region Private Instance Fields
            
            private string _out = null;
            private bool _optimize = false;
            private int _warnLevel = 4;
            private FileSet _sources = new FileSet();
            
            #endregion Private Instance Fields
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Attributes.BuildAttributeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.BuildAttributeAttribute"/> with the 
            specified name.
            </summary>
            <param name="name">The name of the attribute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is a zero-length <see cref="T:System.String"/>.</exception>
        </member>
        <member name="P:NAnt.Core.Attributes.BuildAttributeAttribute.Name">
            <summary>
            Gets or sets the name of the XML attribute.
            </summary>
            <value>
            The name of the XML attribute.
            </value>
        </member>
        <member name="P:NAnt.Core.Attributes.BuildAttributeAttribute.Required">
            <summary>
            Gets or sets a value indicating whether the attribute is required.
            </summary>
            <value>
            <see langword="true" /> if the attribute is required; otherwise, 
            <see langword="false" />. The default is <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Attributes.BuildAttributeAttribute.ExpandProperties">
            <summary>
            Gets or sets a value indicating whether property references should 
            be expanded.
            </summary>
            <value>
            <see langword="true" /> if properties should be expanded; otherwise 
            <see langword="false" />. The default is <see langword="true" />.
            </value>
        </member>
        <member name="T:NAnt.Core.Attributes.BuildElementArrayAttribute">
            <summary>
            Indicates that property should be treated as a XML arrayList
            </summary>
            <remarks>
            <para>
            Should only be applied to properties exposing strongly typed arrays or 
            strongly typed collections.
            </para>
            <para>
            The XML format is like this:
            <code>
                <![CDATA[
            <task>
                <elementName .../>
                <elementName .../>
                <elementName .../>
                <elementName .../>
            </task>]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Core.Attributes.BuildElementAttribute">
            <summary>
            Indicates that the property should be treated as an XML element and further processing should be done.
            </summary>
            <remarks>
            <para>
            Should only be applied to properties exposing strongly typed arrays or 
            strongly typed collections.
            </para>
            <para>
            The XML format is like this:
            <code>
                <![CDATA[
            <task>
                <elementName ...>
                    <morestuff />
                </elementName>
            </task>
                ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:NAnt.Core.Attributes.BuildElementAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.BuildElementAttribute"/> with the 
            specified name.
            </summary>
            <param name="name">The name of the attribute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is a zero-length <see cref="T:System.String"/>.</exception>
        </member>
        <member name="P:NAnt.Core.Attributes.BuildElementAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>
            The name of the attribute.
            </value>
        </member>
        <member name="P:NAnt.Core.Attributes.BuildElementAttribute.Required">
            <summary>
            Gets or sets a value indicating whether the attribute is required.
            </summary>
            <value>
            <see langword="true" /> if the attribute is required; otherwise, 
            <see langword="false" />. The default is <see langword="false" />.
            </value>
        </member>
        <member name="M:NAnt.Core.Attributes.BuildElementArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.BuildElementArrayAttribute"/> 
            with the specified name.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="P:NAnt.Core.Attributes.BuildElementArrayAttribute.ElementType">
            <summary>
            Gets or sets the type of objects that this container holds.
            </summary>
            <value>
            The type of the elements that this container holds.
            </value>
            <remarks>
            <para>
            This can be used for validation and schema generation.
            </para>
            <para>
            If not specified, the type of the elements will be determined using
            reflection.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Core.Attributes.BuildElementCollectionAttribute">
            <summary>
            Indicates that the property should be treated as a container for a 
            collection of build elements.
            </summary>
            <remarks>
            <para>
            Should only be applied to properties exposing strongly typed arrays or 
            strongly typed collections.
            </para>
            <para>
            The XML format is like this:
            <code>
                <![CDATA[
            <task>
                <collectionName>
                    <elementName .../>
                    <elementName .../>
                    <elementName .../>
                    <elementName .../>
                </collectionName>
            </task>
                ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:NAnt.Core.Attributes.BuildElementCollectionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.BuildElementCollectionAttribute"/> with the 
            specified name and child element name.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <param name="childName">The name of the child elements in the collection</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is a zero-length <see cref="T:System.String"/>.</exception>
        </member>
        <member name="P:NAnt.Core.Attributes.BuildElementCollectionAttribute.ChildElementName">
            <summary>
            The name of the child element within the collection		
            </summary>
            <value>
            The name to check for in the XML of the elements in the collection.
            </value>
            <remarks>
            This can be used for validation and schema generation.
            </remarks>
        </member>
        <member name="T:NAnt.Core.Attributes.ElementNameAttribute">
            <summary>
            Indicates that class should be treated as a NAnt element.
            </summary>
            <remarks>
            Attach this attribute to a subclass of Element to have NAnt be able
            to recognize it.  The name should be short but must not confict
            with any other element already in use.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Attributes.ElementNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.ElementNameAttribute"/> with the 
            specified name.
            </summary>
            <param name="name">The name of the attribute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is a zero-length <see cref="T:System.String"/>.</exception>
        </member>
        <member name="P:NAnt.Core.Attributes.ElementNameAttribute.Name">
            <summary>
            Gets or sets the name of the attribute.
            </summary>
            <value>
            The name of the attribute.
            </value>
        </member>
        <member name="T:NAnt.Core.Attributes.FileSetAttribute">
            <summary>
            Indicates that a property should be treated as a XML file set for the task.
            </summary>
        </member>
        <member name="M:NAnt.Core.Attributes.FileSetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.FileSetAttribute"/> with the
            specified name.
            </summary>
            <param name="name">The name of the attribute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is a zero-length <see cref="T:System.String"/>.</exception>
        </member>
        <member name="T:NAnt.Core.Attributes.FrameworkConfigurableAttribute">
            <summary>
            Indicates that the value of the property to which the attribute is 
            assigned, can be configured on the framework-level in the NAnt application 
            configuration file.
            </summary>
            <example>
            <para>
            The following example shows a property of which the value can be 
            configured for a specific framework in the NAnt configuration file.
            </para>
            <code lang="C#">
            [FrameworkConfigurable("exename", Required=true)]
            public virtual string ExeName {
                get { return _exeName; }
                set { _exeName = value; }
            }
            </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Attributes.FrameworkConfigurableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.FrameworkConfigurableAttribute"/>
            with the specified attribute name.
            </summary>
            <param name="name">The name of the framework configuration attribute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is a zero-length <see cref="T:System.String"/>.</exception>
        </member>
        <member name="P:NAnt.Core.Attributes.FrameworkConfigurableAttribute.Name">
            <summary>
            Gets or sets the name of the framework configuration attribute.
            </summary>
            <value>The name of the framework configuration attribute.</value>
        </member>
        <member name="P:NAnt.Core.Attributes.FrameworkConfigurableAttribute.Required">
            <summary>
            Gets or sets a value indicating whether the configuration attribute 
            is required.
            </summary>
            <value>
            <see langword="true" /> if the configuration attribute is required; 
            otherwise, <see langword="true" />. The default is <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Attributes.FrameworkConfigurableAttribute.ExpandProperties">
            <summary>
            Gets or sets a value indicating whether property references should 
            be expanded.
            </summary>
            <value>
            <see langword="true" /> if properties should be expanded; otherwise 
            <see langword="false" />. The default is <see langword="true" />.
            </value>
        </member>
        <member name="T:NAnt.Core.Attributes.Int32ValidatorAttribute">
            <summary>
            Indicates that property should be able to be converted into a <see cref="T:System.Int32"/> 
            within the given range.
            </summary>
        </member>
        <member name="M:NAnt.Core.Attributes.Int32ValidatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.Int32ValidatorAttribute"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Attributes.Int32ValidatorAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.Int32ValidatorAttribute"/> 
            class with the specied minimum and maximum values.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="M:NAnt.Core.Attributes.Int32ValidatorAttribute.Validate(System.Object)">
            <summary>
            Checks whether the specified value can be converted to an <see cref="T:System.Int32"/> 
            and whether the value lies within the range defined by the <see cref="P:NAnt.Core.Attributes.Int32ValidatorAttribute.MinValue"/> 
            and <see cref="P:NAnt.Core.Attributes.Int32ValidatorAttribute.MaxValue"/> properties.
            </summary>
            <param name="value">The value to be checked.</param>
            <exception cref="T:NAnt.Core.ValidationException">
              <para>
              <paramref name="value"/> cannot be converted to an <see cref="T:System.Int32"/>.
              </para>
              <para>-or-</para>
              <para>
              <paramref name="value"/> is not in the range defined by <see cref="P:NAnt.Core.Attributes.Int32ValidatorAttribute.MinValue"/>
              and <see cref="P:NAnt.Core.Attributes.Int32ValidatorAttribute.MaxValue"/>.
              </para>
            </exception>
        </member>
        <member name="P:NAnt.Core.Attributes.Int32ValidatorAttribute.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value. The default is <see cref="F:System.Int32.MinValue"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.Attributes.Int32ValidatorAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value. The default is <see cref="F:System.Int32.MaxValue"/>.
            </value>
        </member>
        <member name="T:NAnt.Core.Attributes.LocationType">
            <summary>
            Defines possible locations in which a task executable can be located.
            </summary>
        </member>
        <member name="F:NAnt.Core.Attributes.LocationType.FrameworkDir">
            <summary>
            Locates the task executable in the current Framework directory.
            </summary>
        </member>
        <member name="F:NAnt.Core.Attributes.LocationType.FrameworkSdkDir">
            <summary>
            Locates the task executable in the current Framework SDK directory.
            </summary>
        </member>
        <member name="T:NAnt.Core.Attributes.ProgramLocationAttribute">
            <summary>
            Indicates the location that a task executable can be located in.
            </summary>
        </member>
        <member name="M:NAnt.Core.Attributes.ProgramLocationAttribute.#ctor(NAnt.Core.Attributes.LocationType)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.ProgramLocationAttribute"/> 
            with the specified location.
            </summary>
            <param type="type">The <see cref="P:NAnt.Core.Attributes.ProgramLocationAttribute.LocationType"/> of the attribute.</param>
        </member>
        <member name="P:NAnt.Core.Attributes.ProgramLocationAttribute.LocationType">
            <summary>
            Gets or sets the <see cref="P:NAnt.Core.Attributes.ProgramLocationAttribute.LocationType"/> of the task.
            </summary>
            <value>
            The location type of the task to which the attribute is assigned.
            </value>
        </member>
        <member name="T:NAnt.Core.Attributes.StringValidatorAttribute">
            <summary>
            Used to indicate whether a <see cref="T:System.String"/> property should allow 
            an empty string value or not.
            </summary>
        </member>
        <member name="M:NAnt.Core.Attributes.StringValidatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.StringValidatorAttribute"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Attributes.StringValidatorAttribute.Validate(System.Object)">
            <summary>
            Checks if the specified value adheres to the rules defined by the 
            properties of the <see cref="T:NAnt.Core.Attributes.StringValidatorAttribute"/>.
            </summary>
            <param name="value">The value to be checked.</param>
            <exception cref="T:NAnt.Core.ValidationException"><paramref name="value"/> is an empty string value and <see cref="P:NAnt.Core.Attributes.StringValidatorAttribute.AllowEmpty"/> is set to <see langword="false"/>.</exception>
        </member>
        <member name="P:NAnt.Core.Attributes.StringValidatorAttribute.AllowEmpty">
            <summary>
            Gets or sets a value indicating whether an empty string or
            <see langword="null" /> should be a considered a valid value.
            </summary>
            <value>
            <see langword="true" /> if an empty string or <see langword="null" />
            should be considered a valid value; otherwise, <see langword="false" />.
            The default is <see langword="true" />.
            </value>
        </member>
        <member name="T:NAnt.Core.Attributes.TaskAttributeAttribute">
            <summary>
            Indicates that property should be treated as a XML attribute for the 
            task.
            </summary>
            <example>
            Examples of how to specify task attributes
            <code>
            // task XmlType default is string
            [TaskAttribute("out", Required=true)]
            string _out = null; // assign default value here
            
            [TaskAttribute("optimize")]
            [BooleanValidator()]
            // during ExecuteTask you can safely use Convert.ToBoolean(_optimize)
            string _optimize = Boolean.FalseString;
            
            [TaskAttribute("warnlevel")]
            [Int32Validator(0,4)] // limit values to 0-4
            // during ExecuteTask you can safely use Convert.ToInt32(_optimize)
            string _warnlevel = "0";
            
            [BuildElement("sources")]
            FileSet _sources = new FileSet();
            </code>
            NOTE: Attribute values must be of type of string if you want
            to be able to have macros.  The field stores the exact value during
            InitializeTask.  Just before ExecuteTask is called NAnt will expand
            all the macros with the current values.
            </example>
        </member>
        <member name="M:NAnt.Core.Attributes.TaskAttributeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.TaskAttributeAttribute"/>
            with the specified attribute name.
            </summary>
            <param name="name">The name of the task attribute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is a zero-length <see cref="T:System.String"/>.</exception>
        </member>
        <member name="T:NAnt.Core.Attributes.TaskNameAttribute">
            <summary>
            Indicates that class should be treated as a task.
            </summary>
            <remarks>
            Attach this attribute to a subclass of Task to have NAnt be able
            to recognize it.  The name should be short but must not confict
            with any other task already in use.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Attributes.TaskNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Attributes.TaskNameAttribute"/> class
            with the specified name.
            </summary>
            <param name="name">The name of the task.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="name"/> is a zero-length <see cref="T:System.String"/>.</exception>
        </member>
        <member name="P:NAnt.Core.Attributes.TaskNameAttribute.Name">
            <summary>
            Gets or sets the name of the task.
            </summary>
            <value>
            The name of the task.
            </value>
        </member>
        <member name="T:NAnt.Core.Tasks.AttribTask">
            <summary>
            Changes the file attributes of a file or set of files.
            </summary>
            <remarks>
            <para>
            <see cref="T:NAnt.Core.Tasks.AttribTask"/> does not have the concept of turning file 
            attributes off.  Instead you specify all the attributes that you want 
            turned on and the rest are turned off by default.
            </para>
            <para>
            Refer to the <see cref="T:System.IO.FileAttributes"/> enumeration in the .NET SDK 
            for more information about file attributes.
            </para>
            </remarks>
            <example>
              <para>Set the <c>read-only</c> file attribute for the specified file in the project directory.</para>
              <code>
                <![CDATA[
            <attrib file="myfile.txt" readonly="true" />
                ]]>
              </code>
              <para>Set the <c>normal</c> file attribute for the specified file.</para>
              <code>
                <![CDATA[
            <attrib file="myfile.txt" normal="true" />
                ]]>
              </code>
              <para>Set the <c>normal</c> file attribute for all executable files in the current project directory and sub-directories.</para>
              <code>
                <![CDATA[
            <attrib normal="true">
                <fileset>
                    <includes name="**/*.exe" />
                    <includes name="**/*.dll" />
                </fileset>
            </attrib>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Core.Task">
            <summary>
            Provides the abstract base class for tasks.
            </summary>
            <remarks>
            A task is a piece of code that can be executed.
            </remarks>
        </member>
        <member name="T:NAnt.Core.Element">
            <summary>
            Models a NAnt XML element in the build file.
            </summary>
            <remarks>
            <para>
            Automatically validates attributes in the element based on attributes 
            applied to members in derived classes.
            </para>
            </remarks>
        </member>
        <member name="M:NAnt.Core.Element.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Element"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Element.#ctor(NAnt.Core.Element)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Element"/> class
            from the specified element.
            </summary>
            <param name="e">The element that should be used to create a new instance of the <see cref="T:NAnt.Core.Element"/> class.</param>
        </member>
        <member name="M:NAnt.Core.Element.Initialize(System.Xml.XmlNode)">
            <summary>
            Performs default initialization.
            </summary>
            <remarks>
            Derived classes that wish to add custom initialization should override 
            the <see cref="M:NAnt.Core.Element.InitializeElement(System.Xml.XmlNode)"/> method.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Element.Log(NAnt.Core.Level,System.String)">
            <summary>
            Logs a message with the given priority.
            </summary>
            <param name="messageLevel">The message priority at which the specified message is to be logged.</param>
            <param name="message">The message to be logged.</param>
            <remarks>
            The actual logging is delegated to the project.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Element.Log(NAnt.Core.Level,System.String,System.Object[])">
            <summary>
            Logs a message with the given priority.
            </summary>
            <param name="messageLevel">The message priority at which the specified message is to be logged.</param>
            <param name="message">The message to log, containing zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
            <remarks>
            The actual logging is delegated to the project.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Element.InitializeElement(System.Xml.XmlNode)">
            <summary>
            Derived classes should override to this method to provide extra 
            initialization and validation not covered by the base class.
            </summary>
            <param name="elementNode">The XML node of the element to use for initialization.</param>
        </member>
        <member name="M:NAnt.Core.Element.Initialize(System.Xml.XmlNode,NAnt.Core.PropertyDictionary,NAnt.Core.FrameworkInfo)">
            <summary>
            Performs initialization using the given set of properties.
            </summary>
        </member>
        <member name="M:NAnt.Core.Element.InitializeXml(System.Xml.XmlNode,NAnt.Core.PropertyDictionary,NAnt.Core.FrameworkInfo)">
            <summary>
            Initializes all build attributes and child elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Element.GetAttributeConfigurationNode(NAnt.Core.FrameworkInfo,System.String)">
            <summary>
            Locates the XML node for the specified attribute in NAnt configuration
            file.
            </summary>
            <param name="attributeName">The name of attribute for which the XML configuration node should be located.</param>
            <param name="framework">The framework to use to obtain framework specific information.</param>
            <returns>
            The XML configuration node for the specified attribute, or 
            <see langword="null" /> if no corresponding XML node could be 
            located.
            </returns>
            <remarks>
            If there's a valid current framework, the configuration section for
            that framework will first be searched.  If no corresponding 
            configuration node can be located in that section, the framework-neutral
            section of NAnt configuration file will be searched.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Element.GetElementNameFromType(System.Type)">
            <summary>
            Returns the <see cref="P:NAnt.Core.Attributes.ElementNameAttribute.Name"/> of the 
            <see cref="T:NAnt.Core.Attributes.ElementNameAttribute"/> assigned to the specified
            <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of which the assigned <see cref="P:NAnt.Core.Attributes.ElementNameAttribute.Name"/> should be retrieved.</param>
            <returns>
            The <see cref="P:NAnt.Core.Attributes.ElementNameAttribute.Name"/> assigned to the specified 
            <see cref="T:System.Type"/> or a null reference is no <see cref="P:NAnt.Core.Attributes.ElementNameAttribute.Name"/>
            is assigned to the <paramref name="type"/>.
            </returns>
        </member>
        <member name="P:NAnt.Core.Element.Parent">
            <summary>
            Gets or sets the parent of the element.
            </summary>
            <value>
            The parent of the element.
            </value>
            <remarks>
            This will be the parent <see cref="T:NAnt.Core.Task"/>, <see cref="T:NAnt.Core.Target"/>, or 
            <see cref="P:NAnt.Core.Element.Project"/> depending on where the element is defined.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Element.Name">
            <summary>
            Gets the name of the XML element used to initialize this element.
            </summary>
            <value>
            The name of the XML element used to initialize this element.
            </value>
        </member>
        <member name="P:NAnt.Core.Element.Project">
            <summary>
            Gets or sets the <see cref="P:NAnt.Core.Element.Project"/> to which this element belongs.
            </summary>
            <value>
            The <see cref="P:NAnt.Core.Element.Project"/> to which this element belongs.
            </value>
        </member>
        <member name="P:NAnt.Core.Element.Properties">
            <summary>
            Gets the properties local to this <see cref="T:NAnt.Core.Element"/> and the <see cref="P:NAnt.Core.Element.Project"/>.
            </summary>
            <value>
            The properties local to this <see cref="T:NAnt.Core.Element"/> and the <see cref="P:NAnt.Core.Element.Project"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.Element.XmlNode">
            <summary>
            Gets or sets the XML node of the element.
            </summary>
            <value>
            The XML node of the element.
            </value>
        </member>
        <member name="P:NAnt.Core.Element.Location">
            <summary>
            Gets or sets the location in the build file where the element is 
            defined.
            </summary>
            <value>
            The location in the build file where the element is defined.
            </value>
        </member>
        <member name="T:NAnt.Core.Element.AttributeConfigurator">
            <summary>
            Configures an <see cref="P:NAnt.Core.Element.AttributeConfigurator.Element"/> using meta-data provided by
            assigned attributes.
            </summary>
        </member>
        <member name="M:NAnt.Core.Element.AttributeConfigurator.#ctor(NAnt.Core.Element)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Element.AttributeConfigurator"/>
            class for the given <see cref="P:NAnt.Core.Element.AttributeConfigurator.Element"/>.
            </summary>
            <param name="element">The <see cref="P:NAnt.Core.Element.AttributeConfigurator.Element"/> for which an <see cref="T:NAnt.Core.Element.AttributeConfigurator"/> should be created.</param>
        </member>
        <member name="M:NAnt.Core.Element.AttributeConfigurator.CreateChildBuildElement(System.Reflection.PropertyInfo,System.Xml.XmlNode,NAnt.Core.PropertyDictionary,NAnt.Core.FrameworkInfo)">
            <summary>
            Creates a child <see cref="P:NAnt.Core.Element.AttributeConfigurator.Element"/> using property set/get methods.
            </summary>
            <param name="propInf">The <see cref="T:System.Reflection.PropertyInfo"/> instance that represents the property of the current class.</param>
            <param name="xml">The <see cref="P:NAnt.Core.Element.AttributeConfigurator.XmlNode"/> used to initialize the new <see cref="P:NAnt.Core.Element.AttributeConfigurator.Element"/> instance.</param>
            <param name="properties">The collection of property values to use for macro expansion.</param>
            <param name="framework">The <see cref="T:NAnt.Core.FrameworkInfo"/> from which to obtain framework-specific information.</param>
            <returns>The <see cref="P:NAnt.Core.Element.AttributeConfigurator.Element"/> child.</returns>
        </member>
        <member name="M:NAnt.Core.Element.AttributeConfigurator.CreateAttributeSetter(System.Type)">
            <summary>
            Creates an <see cref="T:NAnt.Core.Element.AttributeConfigurator.IAttributeSetter"/> for the given 
            <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The <see cref="T:System.Type"/> for which an <see cref="T:NAnt.Core.Element.AttributeConfigurator.IAttributeSetter"/> should be created.</param>
            <returns>
            An <see cref="T:NAnt.Core.Element.AttributeConfigurator.IAttributeSetter"/> for the given <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="F:NAnt.Core.Element.AttributeConfigurator._element">
            <summary>
            Holds the <see cref="P:NAnt.Core.Element.AttributeConfigurator.Element"/> that should be initialized.
            </summary>
        </member>
        <member name="F:NAnt.Core.Element.AttributeConfigurator.logger">
            <summary>
            Holds the logger for the current class.
            </summary>
        </member>
        <member name="F:NAnt.Core.Element.AttributeConfigurator.AttributeSetters">
            <summary>
            Holds the cache of <see cref="T:NAnt.Core.Element.AttributeConfigurator.IAttributeSetter"/> instances.
            </summary>
        </member>
        <member name="T:NAnt.Core.Element.AttributeConfigurator.IAttributeSetter">
            <summary>
            Internal interface used for setting element attributes. 
            </summary>
        </member>
        <member name="M:NAnt.Core.Task.Execute">
            <summary>
            Executes the task unless it is skipped.
            </summary>
        </member>
        <member name="M:NAnt.Core.Task.Log(NAnt.Core.Level,System.String)">
            <summary>
            Logs a message with the given priority.
            </summary>
            <param name="messageLevel">The message priority at which the specified message is to be logged.</param>
            <param name="message">The message to be logged.</param>
            <remarks>
            <para>
            The actual logging is delegated to the project.
            </para>
            <para>
            If the <see cref="P:NAnt.Core.Task.Verbose"/> attribute is set on the task and a 
            message is logged with level <see cref="F:NAnt.Core.Level.Verbose"/>, the 
            priority of the message will be increased to <see cref="F:NAnt.Core.Level.Info"/>.
            when the threshold of the build log is <see cref="F:NAnt.Core.Level.Info"/>.
            </para>
            <para>
            This will allow individual tasks to run in verbose mode while
            the build log itself is still configured with threshold 
            <see cref="F:NAnt.Core.Level.Info"/>.
            </para>
            </remarks>
        </member>
        <member name="M:NAnt.Core.Task.Log(NAnt.Core.Level,System.String,System.Object[])">
            <summary>
            Logs a formatted message with the given priority.
            </summary>
            <param name="messageLevel">The message priority at which the specified message is to be logged.</param>
            <param name="message">The message to log, containing zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
            <remarks>
            <para>
            The actual logging is delegated to the project.
            </para>
            <para>
            If the <see cref="P:NAnt.Core.Task.Verbose"/> attribute is set on the task and a 
            message is logged with level <see cref="F:NAnt.Core.Level.Verbose"/>, the 
            priority of the message will be increased to <see cref="F:NAnt.Core.Level.Info"/>.
            when the threshold of the build log is <see cref="F:NAnt.Core.Level.Info"/>.
            </para>
            <para>
            This will allow individual tasks to run in verbose mode while
            the build log itself is still configured with threshold 
            <see cref="F:NAnt.Core.Level.Info"/>.
            </para>
            </remarks>
        </member>
        <member name="M:NAnt.Core.Task.InitializeTaskConfiguration">
            <summary>
            Initializes the configuration of the task using configuration 
            settings retrieved from the NAnt configuration file.
            </summary>
            <remarks>
            TO-DO : Remove this temporary hack when a permanent solution is 
            available for loading the default values from the configuration
            file if a build element is constructed from code.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Task.InitializeElement(System.Xml.XmlNode)">
            <summary><note>Deprecated (to be deleted).</note></summary>
        </member>
        <member name="M:NAnt.Core.Task.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes the task.</summary>
        </member>
        <member name="M:NAnt.Core.Task.ExecuteTask">
            <summary>Executes the task.</summary>
        </member>
        <member name="P:NAnt.Core.Task.FailOnError">
            <summary>
            Determines if task failure stops the build, or is just reported. 
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Task.Verbose">
            <summary>
            Determines whether the task should report detailed build log messages. 
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Task.IfDefined">
            <summary>
            If <see langword="true" /> then the task will be executed; otherwise, 
            skipped. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Task.UnlessDefined">
            <summary>
            Opposite of <see cref="P:NAnt.Core.Task.IfDefined"/>. If <see langword="false"/> 
            then the task will be executed; otherwise, skipped. The default is 
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Task.Name">
            <summary>
            The name of the task.
            </summary>
        </member>
        <member name="P:NAnt.Core.Task.LogPrefix">
            <summary>
            The prefix used when sending messages to the log.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AttribTask.FileName">
            <summary>
            The name of the file which will have its attributes set. This is 
            provided as an alternate to using the task's fileset.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AttribTask.AttribFileSet">
            <summary>
            All the files in this fileset will have their file attributes set.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AttribTask.ArchiveAttrib">
            <summary>
            Set the archive attribute. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AttribTask.HiddenAttrib">
            <summary>
            Set the hidden attribute. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AttribTask.NormalAttrib">
            <summary>
            Set the normal file attributes. This attribute is only valid if used 
            alone. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AttribTask.ReadOnlyAttrib">
            <summary>
            Set the read-only attribute. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AttribTask.SystemAttrib">
            <summary>
            Set the system attribute. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.AvailableTask">
            <summary>
            Checks if a resource is available at runtime.
            </summary>
            <remarks>
            <para>
            The specified property is set to <see langword="true" /> if the requested 
            resource is available at runtime, and <see langword="false" /> if the 
            resource is not available.
            </para>
            </remarks>
            <example>
              <para>
              Sets the <c>myfile.present</c> property to <see langword="true" /> if the 
              file is available on the filesystem and <see langword="false" /> if the 
              file is not available.
              </para>
              <code>
                <![CDATA[
            <available type="File" resource="myfile.txt" property="myfile.present" />
                ]]>
              </code>
              <para>
              Sets the <c>build.dir.present</c> property to <see langword="true" /> 
              if the directory is available on the filesystem and <see langword="false" /> 
              if the directory is not available.
              </para>
              <code>
                <![CDATA[
            <available type="Directory" resource="build" property="build.dir.present" />
                ]]>
              </code>
              <para>
              Sets the <c>mono-0.21.framework.present</c> property to <see langword="true" /> 
              if the Mono 0.21 framework is available on the current system and 
              <see langword="false" /> if the framework is not available.
              </para>
              <code>
                <![CDATA[
            <available type="Framework" resource="mono-0.21" property="mono-0.21.framework.present" />
                ]]>
              </code>
              <para>
              Sets the <c>net-1.1.frameworksdk.present</c> property to <see langword="true" /> 
              if the .NET 1.1 Framework SDK is available on the current system and 
              <see langword="false" /> if the SDK is not available.
              </para>
              <code>
                <![CDATA[
            <available type="FrameworkSDK" resource="net-1.1" property="net-1.1.frameworksdk.present" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.AvailableTask.ExecuteTask">
            <summary>
            Executes the task.
            </summary>
            <remarks>
            <para>
            Sets the property identified by <see cref="P:NAnt.Core.Tasks.AvailableTask.PropertyName"/> to 
            <see langword="true"/> when the resource exists and to <see langword="false"/> 
            when the resource doesn't exist.
            </para>
            </remarks>
            <exception cref="T:NAnt.Core.BuildException">The availability of the resource could not be evaluated.</exception>
        </member>
        <member name="M:NAnt.Core.Tasks.AvailableTask.Evaluate">
            <summary>
            Evaluates the availability of a resource.
            </summary>
            <returns>
            <see langword="true"/> if the resource is available; otherwise, 
            <see langword="false"/>.
            </returns>
            <exception cref="T:NAnt.Core.BuildException">The availability of the resource could not be evaluated.</exception>
        </member>
        <member name="M:NAnt.Core.Tasks.AvailableTask.CheckFile">
            <summary>
            Checks if the file specified in the <see cref="P:NAnt.Core.Tasks.AvailableTask.Resource"/> property is 
            available on the filesystem.
            </summary>
            <returns>
            <see langword="true"/> when the file exists; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Tasks.AvailableTask.CheckDirectory">
            <summary>
            Checks if the directory specified in the <see cref="P:NAnt.Core.Tasks.AvailableTask.Resource"/> 
            property is available on the filesystem.
            </summary>
            <returns>
            <see langword="true"/> when the directory exists; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Tasks.AvailableTask.CheckFramework">
            <summary>
            Checks if the framework specified in the <see cref="P:NAnt.Core.Tasks.AvailableTask.Resource"/> 
            property is available on the current system.
            </summary>
            <returns>
            <see langword="true"/> when the framework is available; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Tasks.AvailableTask.CheckFrameworkSDK">
            <summary>
            Checks if the SDK for the framework specified in the <see cref="P:NAnt.Core.Tasks.AvailableTask.Resource"/> 
            property is available on the current system.
            </summary>
            <returns>
            <see langword="true"/> when the SDK for the specified framework is 
            available; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:NAnt.Core.Tasks.AvailableTask.Resource">
            <summary>
            The resource which must be available.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AvailableTask.Type">
            <summary>
            The type of resource which must be present - either <see cref="F:NAnt.Core.Tasks.AvailableTask.ResourceType.File"/>, 
            <see cref="F:NAnt.Core.Tasks.AvailableTask.ResourceType.Directory"/>, <see cref="F:NAnt.Core.Tasks.AvailableTask.ResourceType.Framework"/> 
            or <see cref="F:NAnt.Core.Tasks.AvailableTask.ResourceType.FrameworkSDK"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.AvailableTask.PropertyName">
            <summary>
            The property that must be set if the resource is available.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.AvailableTask.ResourceType">
            <summary>
            Defines the possible resource checks.
            </summary>
        </member>
        <member name="F:NAnt.Core.Tasks.AvailableTask.ResourceType.File">
            <summary>
            Determines whether a given file exists.
            </summary>
        </member>
        <member name="F:NAnt.Core.Tasks.AvailableTask.ResourceType.Directory">
            <summary>
            Determines whether a given directory exists.
            </summary>
        </member>
        <member name="F:NAnt.Core.Tasks.AvailableTask.ResourceType.Framework">
            <summary>
            Determines whether a given framework is available.
            </summary>
        </member>
        <member name="F:NAnt.Core.Tasks.AvailableTask.ResourceType.FrameworkSDK">
            <summary>
            Determines whether a given SDK is available.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.CallTask">
            <summary>
            Calls a NAnt target in the current project.
            </summary>
            <example>
              <para>Call the target &quot;build&quot;.</para>
              <code>
                <![CDATA[
            <call target="build" />
                ]]>
              </code>
              <para>This shows how a project could 'compile' a debug and release build using a common compile target.</para>
              <code>
                <![CDATA[
            <project default="build">
                <target name="compile">
                    <echo message="compiling with debug = ${debug}" />
                </target>
                <target name="build">
                    <property name="debug" value="false" />
                    <call target="compile"/>
                    <property name="debug" value="true" />
                    <call target="compile" />
                </target>
            </project>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.CallTask.ExecuteTask">
            <summary>
            Executes the specified target.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.CallTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Makes sure the <see cref="T:NAnt.Core.Tasks.CallTask"/> is not calling its own 
            parent.
            </summary>
            <param name="taskNode">The task XML node.</param>
        </member>
        <member name="P:NAnt.Core.Tasks.CallTask.TargetName">
            <summary>
            NAnt target to call.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CallTask.ForceExecute">
            <summary>
            Force an execute even if the target has already been executed. The 
            default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.CopyTask">
            <summary>
            Copies a file or set of files to a new file or directory.
            </summary>
            <remarks>
              <para>
              Files are only copied if the source file is newer than the destination 
              file, or if the destination file does not exist.  However, you can 
              explicitly overwrite files with the <see cref="P:NAnt.Core.Tasks.CopyTask.Overwrite"/> attribute.
              </para>
              <para>
              A <see cref="T:NAnt.Core.Types.FileSet"/> can be used to select files to copy. To use 
              a <see cref="T:NAnt.Core.Types.FileSet"/>, the <see cref="P:NAnt.Core.Tasks.CopyTask.ToDirectory"/> attribute 
              must be set.
              </para>
            </remarks>
            <example>
              <para>Copy a single file.</para>
              <code>
                <![CDATA[
            <copy file="myfile.txt" tofile="mycopy.txt" />
                ]]>
              </code>
              <para>Copy a set of files to a new directory.</para>
              <code>
                <![CDATA[
            <copy todir="${build.dir}">
                <fileset basedir="bin">
                    <includes name="*.dll" />
                </fileset>
            </copy>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.CopyTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Checks whether the given encoding is supported on the current 
            platform.
            </summary>
            <param name="taskNode">The <see cref="T:System.Xml.XmlNode"/> used to initialize the task.</param>
        </member>
        <member name="M:NAnt.Core.Tasks.CopyTask.ExecuteTask">
            <summary>
            Executes the Copy task.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">A file that has to be copied does not exist or could not be copied.</exception>
        </member>
        <member name="M:NAnt.Core.Tasks.CopyTask.DoFileOperations">
            <summary>
            Actually does the file copies.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.SourceFile">
            <summary>
            The file to copy.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.ToFile">
            <summary>
            The file to copy to.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.ToDirectory">
            <summary>
            The directory to copy to.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.Overwrite">
            <summary>
            Overwrite existing files even if the destination files are newer. 
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.Flatten">
            <summary>
            Ignore directory structure of source directory, copy all files into 
            a single directory, specified by the <see cref="P:NAnt.Core.Tasks.CopyTask.ToDirectory"/> 
            attribute. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.IncludeEmptyDirs">
            <summary>
            Copy any empty directories included in the <see cref="T:NAnt.Core.Types.FileSet"/>. 
            The default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.CopyFileSet">
            <summary>
            Used to select the files to copy. To use a <see cref="T:NAnt.Core.Types.FileSet"/>, 
            the <see cref="P:NAnt.Core.Tasks.CopyTask.ToDirectory"/> attribute must be set.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.EncodingName">
            <summary>
            The encoding to assume when filter-copying the files.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.CopyTask.Encoding">
            <summary>
            Gets the encoding that will be used when filter-copying the files.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.DeleteTask">
            <summary>
            Deletes a file, fileset or directory.
            </summary>
            <remarks>
              <para>
              Deletes either a single file, all files in a specified directory and 
              its sub-directories, or a set of files specified by one or more filesets.
              </para>
              <note>
              If the <see cref="P:NAnt.Core.Tasks.DeleteTask.FileName"/> attribute is set then the fileset contents 
              will be ignored. To delete the files in the fileset ommit the 
              <see cref="P:NAnt.Core.Tasks.DeleteTask.FileName"/> attribute in the <c>&lt;delete&gt;</c> element.
              </note>
              <note>
              Read-only files cannot be deleted.  Use the <see cref="T:NAnt.Core.Tasks.AttribTask"/> first 
              to remove the read-only attribute.
              </note>
            </remarks>
            <example>
              <para>Delete a single file.</para>
              <code>
                <![CDATA[
            <delete file="myfile.txt" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Delete a directory and the contents within. If the directory does not 
              exist, the task does nothing.
              </para>
              <code>
                <![CDATA[
            <delete dir="${build.dir}" failonerror="false" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Delete a set of files.  Note the lack of <see cref="P:NAnt.Core.Tasks.DeleteTask.FileName"/> 
              attribute in the <c>&lt;delete&gt;</c> element.
              </para>
              <code>
                <![CDATA[
            <delete>
                <fileset>
                    <includes name="${basename}-??.exe" />
                    <includes name="${basename}-??.pdb" />
                </fileset>
            </delete>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.DeleteTask.FileName">
            <summary>
            The file to delete.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.DeleteTask.DirectoryName">
            <summary>
            The directory to delete.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.DeleteTask.DeleteFileSet">
            <summary>
            All the files in the file set will be deleted.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.DescriptionTask">
            <summary>
            An empty task that allows a build file to contain a description.
            </summary>
            <example>
              <para>Set a description.</para>
              <code>
                <![CDATA[
            <description>This is a description.</description>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Core.Tasks.EchoTask">
            <summary>
            Writes a message to the build log.
            </summary>
            <remarks>
              <para>
              The message can be specified using the <see cref="P:NAnt.Core.Tasks.EchoTask.Message"/> attribute 
              or as inline content.
              </para>
              <para>Macros in the message will be expanded.</para>
            </remarks>
            <example>
              <para>Writes a message with level <see cref="F:NAnt.Core.Level.Debug"/> to the build log.</para>
              <code>
                <![CDATA[
            <echo message="Hello, World!" level="Debug" />
                ]]>
              </code>
            </example>
            <example>
              <para>Writes a message with expanded macro to the build log.</para>
              <code>
                <![CDATA[
            <echo message="Base build directory = ${nant.project.basedir}" />
                ]]>
              </code>
            </example>
            <example>
              <para>Functionally equivalent to the previous example.</para>
              <code>
                <![CDATA[
            <echo>Base build directory = ${nant.project.basedir}</echo>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.EchoTask.ExecuteTask">
            <summary>
            Outputs the message to the build log.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.EchoTask.Message">
            <summary>
            The message to display.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.EchoTask.Contents">
            <summary>
            Gets or sets the inline content that should be output in the build
            log.
            </summary>
            <value>
            The inline content that should be output in the build log.
            </value>
        </member>
        <member name="P:NAnt.Core.Tasks.EchoTask.MessageLevel">
            <summary>
            The logging level with which the message should be output - either 
            <see cref="F:NAnt.Core.Level.Debug"/>, <see cref="F:NAnt.Core.Level.Verbose"/>,
            <see cref="F:NAnt.Core.Level.Info"/>, <see cref="F:NAnt.Core.Level.Warning"/> or 
            <see cref="F:NAnt.Core.Level.Error"/>. The default is <see cref="F:NAnt.Core.Level.Info"/>.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.ExecTask">
            <summary>
            Executes a system command.
            </summary>
            <example>
              <para>Ping nant.sourceforge.net.</para>
              <code>
                <![CDATA[
            <exec program="ping" commandline="nant.sourceforge.net" />
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Core.Tasks.ExternalProgramBase">
            <summary>
            Provides the abstract base class for tasks that execute external applications.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.ExternalProgramBase.ExecuteTask">
            <summary>
            Starts the external process and captures its output.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">
              <para>The external process did not finish within the configured timeout.</para>
              <para>-or-</para>
              <para>The exit code of the external process indicates a failure.</para>
            </exception>
        </member>
        <member name="M:NAnt.Core.Tasks.ExternalProgramBase.PrepareProcess(System.Diagnostics.Process)">
            <summary>
            Updates the <see cref="T:System.Diagnostics.ProcessStartInfo"/> of the specified 
            <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> of which the <see cref="T:System.Diagnostics.ProcessStartInfo"/> should be updated.</param>
        </member>
        <member name="M:NAnt.Core.Tasks.ExternalProgramBase.StartProcess">
            <summary>
            Starts the process and handles errors.
            </summary>
            <returns>The <see cref="T:System.Diagnostics.Process"/> that was started.</returns>
        </member>
        <member name="M:NAnt.Core.Tasks.ExternalProgramBase.StreamReaderThread_Output">
            <summary>            Reads from the stream until the external program is ended.            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.ExternalProgramBase.StreamReaderThread_Error">
            <summary>            Reads from the stream until the external program is ended.            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.ExternalProgramBase.DetermineFilePath">
            <summary>
            Determines the path of the external program that should be executed.
            </summary>
            <returns>A fully qualifies pathname including the program name.</returns>
            <exception cref="T:NAnt.Core.BuildException">The task is not available or not configured for the current framework.</exception>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.ExeName">
            <summary>
            The name of the executable that should be used to launch the 
            external program.
            </summary>
            <value>
            The name of the executable that should be used to launch the external
            program, or <see langword="null" /> if no name is specified.
            </value>
            <remarks>
            If available, the configured value in the NAnt configuration
            file will be used if no name is specified.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>The filename of the external program.</value>
            <remarks> Override in derived classes to explicitly set the location of the external tool </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.OutputFile">
            <summary>
            Gets the file to which the standard output should be redirected.
            </summary>
            <value>
            The file to which the standard output should be redirected, or 
            <see langword="null" /> if the standard output should not be
            redirected.
            </value>
            <remarks>
            The default implementation will never allow the standard output
            to be redirected to a file.  Deriving classes should override this 
            property to change this behaviour.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.OutputAppend">
            <summary>
            Gets a value indicating whether output will be appended to the 
            <see cref="P:NAnt.Core.Tasks.ExternalProgramBase.OutputFile"/>.
            </summary>
            <value>
            <see langword="true"/> if output should be appended to the <see cref="P:NAnt.Core.Tasks.ExternalProgramBase.OutputFile"/>; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.BaseDirectory">
            <summary>
            Gets the working directory for the application.
            </summary>
            <value>
            The working directory for the application.
            </value>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.TimeOut">
            <summary>
            The maximum amount of time the application is allowed to execute, 
            expressed in milliseconds.  Defaults to no time-out.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.Arguments">
            <summary>
            The command-line arguments for the external program.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.UseRuntimeEngine">
            <summary>
            Specifies whether the external program should be executed using a 
            runtime engine, if configured. The default is <see langword="false" />.
            </summary>
            <value>
            <see langword="true" /> if the external program should be executed 
            using a runtime engine; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Tasks.ExternalProgramBase.CommandLine">
            <summary>
            Gets the command-line arguments, separated by spaces.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.ExecTask.ExecuteTask">
            <summary>
            Executes the external program.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.FileName">
            <summary>
            The program to execute without command arguments.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.CommandLineArguments">
            <summary>
            The command-line arguments for the program.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.Environment">
            <summary>
            Environment variables to pass to the program.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.WorkingDirectory">
            <summary>
            The directory in which the command will be executed.
            </summary>
            <remarks>
            <para>
            The working directory will be evaluated relative to the project's
            baseDirectory if it is relative.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.UseRuntimeEngine">
            <summary>
            Specifies whether the external program should be executed using a 
            runtime engine, if configured. The default is <see langword="false" />.
            </summary>
            <value>
            <see langword="true" /> if the external program should be executed 
            using a runtime engine; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.ProgramFileName">
            <summary>
            Gets the filename of the external program to start.
            </summary>
            <value>
            The filename of the external program.
            </value>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.ProgramArguments">
            <summary>
            Gets the command-line arguments for the external program.
            </summary>
            <value>
            The command-line arguments for the external program.
            </value>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.BaseDirectory">
            <summary>
            The directory the program is in.
            </summary>
            <remarks>
            <para>
            The basedir will be evaluated relative to the project's baseDirectory 
            if it is relative.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.OutputFile">
            <summary>
            The file to which the standard output will be redirected.
            </summary>
            <remarks>
            By default, the standard output is redirected to the console.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.ExecTask.OutputAppend">
            <summary>
            Gets or sets a value indicating whether output should be appended 
            to the output file. The default is <see langword="false"/>.
            </summary>
            <value>
            <see langword="true"/> if output should be appended to the <see cref="P:NAnt.Core.Tasks.ExecTask.OutputFile"/>; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:NAnt.Core.Tasks.FailTask">
            <summary>
            Exits the current build by throwing a <see cref="T:NAnt.Core.BuildException"/>, 
            optionally printing additional information.
            </summary>
            <remarks>
              <para>
              The cause of the build failure can be specified using the <see cref="P:NAnt.Core.Tasks.FailTask.Message"/> 
              attribute or as inline content.
              </para>
              <para>
              Macros in the message will be expanded.
              </para>
            </remarks>
            <example>
              <para>Exits the current build without giving further information.</para>
              <code>
                <![CDATA[
            <fail />
                ]]>
              </code>
            </example>
            <example>
              <para>Exits the current build and writes a message to the build log.</para>
              <code>
                <![CDATA[
            <fail message="Something wrong here." />
                ]]>
              </code>
            </example>
            <example>
              <para>Functionally equivalent to the previous example.</para>
              <code>
                <![CDATA[
            <fail>Something wrong here.</fail>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.FailTask.Message">
            <summary>
            A message giving further information on why the build exited.
            </summary>
            <remarks>
            Inline content and <see cref="P:NAnt.Core.Tasks.FailTask.Message"/> are mutually exclusive.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.FailTask.Contents">
            <summary>
            Gets or sets the inline content that should be output in the build
            log, giving further information on why the build exited.
            </summary>
            <value>
            The inline content that should be output in the build log.
            </value>
            <remarks>
            Inline content and <see cref="P:NAnt.Core.Tasks.FailTask.Message"/> are mutually exclusive.
            </remarks>
        </member>
        <member name="T:NAnt.Core.Tasks.GetTask">
            <summary>
            Gets a particular file from a URL source.
            </summary>
            <remarks>
              <para>
              Options include verbose reporting and timestamp based fetches.
              </para>
              <para>
              Currently, only HTTP and UNC protocols are supported. FTP support may 
              be added when more pluggable protocols are added to the System.Net 
              assembly.
              </para>
              <para>
              The <see cref="P:NAnt.Core.Tasks.GetTask.UseTimeStamp"/> option enables you to control downloads 
              so that the remote file is only fetched if newer than the local copy. 
              If there is no local copy, the download always takes place. When a file 
              is downloaded, the timestamp of the downloaded file is set to the remote 
              timestamp.
              </para>
              <note>
              This timestamp facility only works on downloads using the HTTP protocol.
              </note>
            </remarks>
            <example>
              <para>
              Gets the index page of the NAnt home page, and stores it in the file 
              <c>help/index.html</c> relative to the project base directory.
              </para>
              <code>
                <![CDATA[
            <get src="http://nant.sourceforge.org/" dest="help/index.html" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Gets the index page of a secured web site using the given credentials, 
              while connecting using the specified password-protected proxy server.
              </para>
              <code>
                <![CDATA[
            <get src="http://password.protected.site/index.html" dest="secure/index.html">
                <credentials username="user" password="guess" domain="mydomain" />
                <proxy host="proxy.company.com" port="8080">
                    <credentials username="proxyuser" password="dunno" />
                </proxy>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.GetTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Core.Tasks.GetTask.ExecuteTask">
            <summary>
            This is where the work is done 
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.GetTask.TouchFile(System.String,System.DateTime)">
            <summary>
            Sets the timestamp of a given file to a specified time.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.GetTask.Source">
            <summary>
            The URL from which to retrieve a file.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.GetTask.Destination">
            <summary>
            The file where to store the retrieved file.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.GetTask.HttpProxy">
            <summary>
            If inside a firewall, proxy server/port information
            Format: {proxy server name}:{port number}
            Example: proxy.mycompany.com:8080 
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.GetTask.Proxy">
            <summary>
            The network proxy to use to access the Internet resource.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.GetTask.Credentials">
            <summary>
            The network credentials used for authenticating the request with 
            the Internet resource.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.GetTask.IgnoreErrors">
            <summary>
            Log errors but don't treat as fatal. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.GetTask.UseTimeStamp">
            <summary>
            Conditionally download a file based on the timestamp of the local 
            copy. HTTP only. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.GetTask.Timeout">
            <summary>
            The length of time, in milliseconds, until the request times out.
            The default is <c>100000</c> milliseconds.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.IfTask">
            <summary>
            Checks the conditional attributes and executes the children if
            <see langword="true"/>.
            </summary>
            <remarks>
                <para>
                If no conditions are checked, all child tasks are executed. 
                </para>
                <para>
                If more than one attribute is used, they are &amp;&amp;'d. The first 
                to fail stops the check.
                </para>
                <para>
                The order of condition evaluation is, <see cref="P:NAnt.Core.Tasks.IfTask.TargetNameExists"/>, 
                <see cref="P:NAnt.Core.Tasks.IfTask.PropertyNameExists"/>, <see cref="P:NAnt.Core.Tasks.IfTask.PropertyNameTrue"/>, 
                <see cref="P:NAnt.Core.Tasks.IfTask.UpToDateFile"/>.
                </para>
            </remarks>
            <example>
              <para>Check that a target exists.</para>
              <code>
              <![CDATA[
            <target name="myTarget" />
            <if targetexists="myTarget">
                <echo message="myTarget exists" />
            </if>
              ]]>
              </code>
            </example>
            <example>
              <para>Check existence of a property.</para>
              <code>
                <![CDATA[
            <if propertyexists="myProp">
                <echo message="myProp Exists. Value='${myProp}'" />
            </if>
                ]]>
              </code>
              <para>Check that a property value is true.</para>
              <code>
                <![CDATA[
            <if propertytrue="myProp">
                <echo message="myProp is true. Value='${myProp}'" />
            </if>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Check that a property exists and is <see langword="true"/> (uses multiple conditions).
              </para>
              <code>
                <![CDATA[
            <if propertyexists="myProp" propertytrue="myProp">
                <echo message="myProp is '${myProp}'" />
            </if>
                ]]>
              </code>
              <para>which is the same as</para>
              <code>
                <![CDATA[
            <if propertyexists="myProp">
                <if propertytrue="myProp">
                    <echo message="myProp is '${myProp}'" />
                </if>
            </if>
                ]]>
              </code>
            </example>
            <example>
              <para>
              Check file dates. If <c>myfile.dll</c> is uptodate, then do stuff.
              </para>
              <code>
                <![CDATA[
            <if uptodatefile="myfile.dll" comparefile="myfile.cs">
                <echo message="myfile.dll is newer/same-date as myfile.cs" />
            </if>
                ]]>
              </code>
              <para>or</para>
              <code>
                <![CDATA[
            <if uptodatefile="myfile.dll">
                <comparefiles>
                    <includes name="*.cs" />
                </comparefiles>
                <echo message="myfile.dll is newer/same-date as myfile.cs" />
            </if>
                ]]>
              </code>
              <para>or</para>
              <code>
                <![CDATA[
            <if>
                <uptodatefiles>
                    <includes name="myfile.dll" />
                </uptodatefiles>
                <comparefiles>
                    <includes name="*.cs" />
                </comparefiles>
                <echo message="myfile.dll is newer/same-date as myfile.cs" />
            </if>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Core.TaskContainer">
            <summary>
            Executes embedded tasks. First inherit from TaskContainer, then call ExecuteChildTasks during Exec.
            </summary>
            <remarks>
               <para>
               All build elements (like a <see cref="T:NAnt.Core.Types.FileSet"/>) are automatically 
               excluded from things that get executed. They are evaluated normally 
               during XML task initialization.
               </para>
               <para>
               For an example, see <see cref="T:NAnt.Core.Tasks.IfTask"/> or <see cref="T:NAnt.Core.Tasks.LoopTask"/>.
               </para>
            </remarks>
        </member>
        <member name="M:NAnt.Core.TaskContainer.ExecuteChildTasks">
            <summary>
            Creates and executes the embedded (child XML nodes) elements.
            </summary>
            <remarks>
            Skips any element defined by the host <see cref="T:NAnt.Core.Task"/> that has 
            a <see cref="T:NAnt.Core.Attributes.BuildElementAttribute"/> defined.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.IfTask.UpToDateFile">
            <summary>
            The file to compare if uptodate.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.IfTask.CompareFile">
            <summary>
            The file to check against for the uptodate file.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.IfTask.CompareFiles">
            <summary>
            The <see cref="T:NAnt.Core.Types.FileSet"/> that contains the comparison files for 
            the <see cref="P:NAnt.Core.Tasks.IfTask.UpToDateFile"/>(s) check.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.IfTask.UpToDateFiles">
            <summary>
            The <see cref="T:NAnt.Core.Types.FileSet"/> that contains the uptodate files for 
            the <see cref="P:NAnt.Core.Tasks.IfTask.CompareFile"/>(s) check.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.IfTask.PropertyNameTrue">
            <summary>
            Used to test whether a property is true.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.IfTask.PropertyNameExists">
            <summary>
            Used to test whether a property exists.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.IfTask.TargetNameExists">
            <summary>
            Used to test whether a target exists.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.IfNotTask">
            <summary>
            The opposite of the <c>if</c> task.
            </summary>
            <example>
              <para>Check that a property does not exist.</para>
              <code>
                <![CDATA[
            <ifnot propertyexists="myProp">
                <echo message="myProp does not exist."/>
            </if>
                ]]>
              </code>
              <para>Check that a property value is not true.</para>
              <code>
                <![CDATA[
            <ifnot propertytrue="myProp">
                <echo message="myProp is not true."/>
            </if>
                ]]>
              </code>
            </example>
            <example>
              <para>Check that a target does not exist.</para>
              <code>
                <![CDATA[
            <ifnot targetexists="myTarget">
                <echo message="myTarget does not exist."/>
            </if>
                ]]>
              </code>
            </example>
        </member>
        <member name="T:NAnt.Core.Tasks.IncludeTask">
            <summary>
            Includes an external build file.
            </summary>
            <remarks>
              <para>
              This task is used to break your build file into smaller chunks.  You 
              can load a partial build file and have it included into the build file.
              </para>
              <note>
              Any global (project level) tasks in the included build file are executed 
              when this task is executed.  Tasks in target elements are only executed 
              if that target is executed.
              </note>
              <note>
              The project element attributes are ignored.
              </note>
              <note>
              This task can only be in the global (project level) section of the 
              build file.
              </note>
            </remarks>
            <example>
              <para>
              Include a task that fetches the project version from the 
              <c>GetProjectVersion.include</c> build file.
              </para>
              <code>
                <![CDATA[
            <include buildfile="GetProjectVersion.include" />
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Core.Tasks.IncludeTask._includedFileNames">
            <summary>
            Used to check for recursived includes.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.IncludeTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Verifies parameters.
            </summary>
            <param name="taskNode">Xml taskNode used to define this task instance.</param>
        </member>
        <member name="P:NAnt.Core.Tasks.IncludeTask.BuildFileName">
            <summary>
            Build file to include.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.LoadTasksTask">
             <summary>
             Loads tasks form a given assembly or all assemblies in a given directory
             or <see cref="T:NAnt.Core.Types.FileSet"/>.
             </summary>
             <remarks></remarks>
             <example>
               <para>
               Load tasks from a single assembly.
               </para>
               <code>
                 <![CDATA[
             <loadtasks assembly="c:foo\NAnt.Contrib.Tasks.dll" />
                 ]]>
               </code>
               <para>
               Scan a single directory for task assemblies.
               </para>
               <code>
                 <![CDATA[
             <loadtasks path="c:\foo" />
                 ]]>
               </code>
               <para>
               Use a <see cref="P:NAnt.Core.Tasks.LoadTasksTask.TaskFileSet"/> containing both a directory and an 
               assembly.
               </para>
               <code>
                 <![CDATA[
             <loadtasks>
                <fileset>
                    <includes name="C:\cvs\NAntContrib\build" />
                    <includes name="C:\cvs\NAntContrib\build\NAnt.Contrib.Tasks.dll" />
                </fileset>
            </loadtasks>
                 ]]>
               </code>
             </example>
        </member>
        <member name="M:NAnt.Core.Tasks.LoadTasksTask.ExecuteTask">
            <summary>
            Executes the Load Tasks task.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">Specified Assembly does not exist or specified directory does not exist.</exception>
        </member>
        <member name="M:NAnt.Core.Tasks.LoadTasksTask.ValidateAttributes">
            <summary>
            Validates the attributes.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">Both <see cref="P:NAnt.Core.Tasks.LoadTasksTask.AssemblyPath"/> and <see cref="P:NAnt.Core.Tasks.LoadTasksTask.Path"/> are set.</exception>
        </member>
        <member name="P:NAnt.Core.Tasks.LoadTasksTask.AssemblyPath">
            <summary>
            An assembly to load tasks from.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.LoadTasksTask.Path">
            <summary>
            A directory to scan for task assemblies.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.LoadTasksTask.TaskFileSet">
            <summary>
            Used to select which directories or individual assemblies to scan.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.LoopTask">
            <summary>
            Loops over a set of items.
            </summary>
            <remarks>
              <para>
              Can loop over files in directory, lines in a file, etc.
              </para>
              <para>
              The property value is stored before the loop is done, and restored 
              when the loop is finished.
              </para>
              <para>
              The property is returned to its normal value once it is used. Read-only 
              parameters cannot be overridden in this loop.
              </para>
            </remarks>
            <example>
              <para>Loops over the files in <c>c:\</c>.</para>
              <code>
                <![CDATA[
            <foreach item="File" in="c:\" property="filename">
                <echo message="${filename}" />
            </foreach>
                ]]>
              </code>
              <para>Loops over all files in the project directory.</para>
              <code>
                <![CDATA[
            <foreach item="File" property="filename">
                <in>
                    <items>
                        <includes name="**" />
                    </items>
                </in>
                <do>
                    <echo message="${filename}" />
                </do>
            </foreach>
                ]]>
              </code>
              <para>Loops over the folders in <c>c:\</c>.</para>
              <code>
                <![CDATA[
            <foreach item="Folder" in="c:\" property="foldername">
                <echo message="${foldername}" />
            </foreach>
                ]]>
              </code>
              <para>Loops over all folders in the project directory.</para>
              <code>
                <![CDATA[
            <foreach item="Folder" property="foldername">
                <in>
                    <items>
                        <includes name="**" />
                    </items>
                </in>
                <do>
                    <echo message="${foldername}" />
                </do>
            </foreach>
                ]]>
              </code>
              <para>Loops over a list.</para>
              <code>
                <![CDATA[
            <foreach item="String" in="1 2,3" delim=" ," property="count">
                <echo message="${count}" />
            </foreach>
                ]]>
              </code>
              <para>
              Loops over lines in the file <c>properties.csv</c>, where each line 
              is of the format name,value.
              </para>
              <code>
                <![CDATA[
            <foreach item="Line" in="properties.csv" delim="," property="x,y">
                <echo message="Read pair ${x}=${y}" />
            </foreach>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.LoopTask.Property">
            <summary>
            The NAnt property name(s) that should be used for the current 
            iterated item.
            </summary>
            <remarks>
            If specifying multiple properties, separate them with a comma.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.LoopTask.ItemType">
            <summary>
            The type of iteration that should be done - either <see cref="F:NAnt.Core.Tasks.LoopTask.LoopItem.File"/>,
            <see cref="F:NAnt.Core.Tasks.LoopTask.LoopItem.Folder"/>, <see cref="F:NAnt.Core.Tasks.LoopTask.LoopItem.String"/> or
            <see cref="F:NAnt.Core.Tasks.LoopTask.LoopItem.Line"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.LoopTask.TrimType">
            <summary>
            The type of whitespace trimming that should be done - either
            <see cref="F:NAnt.Core.Tasks.LoopTask.LoopTrim.None"/>, <see cref="F:NAnt.Core.Tasks.LoopTask.LoopTrim.End"/>,
            <see cref="F:NAnt.Core.Tasks.LoopTask.LoopTrim.Start"/> or <see cref="F:NAnt.Core.Tasks.LoopTask.LoopTrim.Both"/>.
            The default is <see cref="F:NAnt.Core.Tasks.LoopTask.LoopTrim.None"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.LoopTask.Source">
            <summary>
            The source of the iteration.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.LoopTask.Delimiter">
            <summary>
            The deliminator char.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.LoopTask.InElement">
            <summary>
            Stuff to operate in. Just like the <see cref="P:NAnt.Core.Tasks.LoopTask.Source"/> 
            attribute, but supports more complicated things like a <see cref="T:NAnt.Core.Types.FileSet"/> 
            and such.
            <note>
            Please remove the <see cref="P:NAnt.Core.Tasks.LoopTask.Source"/> attribute if you 
            are using this element.
            </note>
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.LoopTask.StuffToDo">
            <summary>
            Tasks to execute for each matching item.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.MailTask">
            <summary>
            Sends an SMTP message.
            </summary>
            <remarks>
            <para>
            Text and text files to include in the message body may be specified as 
            well as binary attachments.
            </para>
            </remarks>
            <example>
              <para>
              Sends an email from <c>nant@sourceforge.net</c> to three recipients 
              with a subject about the attachments. The body of the message will be
              the combined contents of all <c>.txt</c> files in the base directory.
              All zip files in the base directory will be included as attachments.  
              The message will be sent using the <c>smtpserver.anywhere.com</c> SMTP 
              server.
              </para>
              <code>
                <![CDATA[
            <mail 
                from="nant@sourceforge.net" 
                tolist="recipient1@sourceforge.net" 
                cclist="recipient2@sourceforge.net" 
                bcclist="recipient3@sourceforge.net" 
                subject="Msg 7: With attachments" 
                mailhost="smtpserver.anywhere.com">
                <files>
                    <includes name="*.txt" />
                </files>   
                <attachments>
                    <includes name="*.zip" />
                </attachments>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.MailTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes task and ensures the supplied attributes are valid.
            </summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:NAnt.Core.Tasks.MailTask.ExecuteTask">
            <summary>
            This is where the work is done.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.MailTask.ReadFile(System.String)">
            <summary>
            Reads a text file and returns the content
            in a string.
            </summary>
            <param name="filename">The file to read content of.</param>
            <returns>
            The content of the specified file.
            </returns>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.From">
            <summary>
            Email address of sender.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.ToList">
            <summary>
            Comma- or semicolon-separated list of recipient email addresses.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.CcList">
            <summary>
            Comma- or semicolon-separated list of CC: recipient email addresses.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.BccList">
            <summary>
            Comma- or semicolon-separated list of BCC: recipient email addresses.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.Mailhost">
            <summary>
            Host name of mail server. The default is <c>localhost</c>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.Message">
            <summary>
            Text to send in body of email message.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.Subject">
            <summary>
            Text to send in subject line of email message.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.Format">
            <summary>
            Format of the message - either <see cref="F:System.Web.Mail.MailFormat.Html"/>
            or <see cref="F:System.Web.Mail.MailFormat.Text"/>. Defaults is <see cref="F:System.Web.Mail.MailFormat.Text"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.Files">
            <summary>
            Files that are transmitted as part of the body of the email message.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MailTask.Attachments">
            <summary>
            Attachments that are transmitted with the message.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.MkDirTask">
            <summary>
            Creates a directory and any non-existent parent directory if necessary.
            </summary>
            <example>
              <para>Create the directory <c>build</c>.</para>
              <code>
                <![CDATA[
            <mkdir dir="build" />
                ]]>
              </code>
              <para>Create the directory tree <c>one/two/three</c>.</para>
              <code>
                <![CDATA[
            <mkdir dir="one/two/three" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.MkDirTask.ExecuteTask">
            <summary>
            Creates the directory specified by the <see cref="P:NAnt.Core.Tasks.MkDirTask.Dir"/> property.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">The directory could not be created.</exception>
        </member>
        <member name="P:NAnt.Core.Tasks.MkDirTask.Dir">
            <summary>
            The directory to create.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.MoveTask">
            <summary>
            Moves a file or set of files to a new file or directory.
            </summary>
            <remarks>
              <para>
              Files are only moved if the source file is newer than the destination 
              file, or if the destination file does not exist.  However, you can 
              explicitly overwrite files with the <see cref="P:NAnt.Core.Tasks.CopyTask.Overwrite"/> attribute.
              </para>
              <para>
              A <see cref="T:NAnt.Core.Types.FileSet"/> can be used to select files to move. To use 
              a <see cref="T:NAnt.Core.Types.FileSet"/>, the <see cref="P:NAnt.Core.Tasks.CopyTask.ToDirectory"/> attribute 
              must be set.
              </para>
            </remarks>
            <example>
              <para>Move a single file.</para>
              <code>
                <![CDATA[
            <move file="myfile.txt" tofile="mytarget.txt" />
                ]]>
              </code>
              <para>Move a set of files.</para>
              <code>
                <![CDATA[
            <move todir="${build.dir}">
                <fileset basedir="bin">
                    <includes name="*.dll" />
                </fileset>
            </move>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.MoveTask.DoFileOperations">
            <summary>
            Actually does the file (and possibly empty directory) moves.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MoveTask.SourceFile">
            <summary>
            The file to move.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MoveTask.ToFile">
            <summary>
            The file to move to.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MoveTask.ToDirectory">
            <summary>
            The directory to move to.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MoveTask.CopyFileSet">
            <summary>
            Used to select the files to move. To use a <see cref="T:NAnt.Core.Types.FileSet"/>, 
            the <see cref="P:NAnt.Core.Tasks.MoveTask.ToDirectory"/> attribute must be set.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.MoveTask.Flatten">
            <summary>
            Ignore directory structure of source directory, move all files into 
            a single directory, specified by the <see cref="P:NAnt.Core.Tasks.MoveTask.ToDirectory"/> 
            attribute. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.NAntSchemaTask">
            <summary>
            Creates an XSD File for all available tasks.
            </summary>
            <remarks>
              <para>
              This can be used in conjuntion with the command-line option to do XSD 
              Schema validation on the build file.
              </para>
            </remarks>
            <example>
              <para>Creates a <c>NAnt.xsd</c> file in the current project directory.</para>
              <code>
                <![CDATA[
            <nantschema output="NAnt.xsd" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.NAntSchemaTask.WriteSchema(System.IO.Stream,System.Type[],System.String)">
            <summary>
            Creates a NAnt Schema for given types
            </summary>
            <param name="stream">The output stream to save the schema to. If null, writing is ignored, no exception generated</param>
            <param name="tasks">The list of Types to generate Schema for</param>
            <param name="targetNS">The target Namespace to output</param>
            <returns>The new NAnt Schema</returns>
        </member>
        <member name="M:NAnt.Core.Tasks.NAntSchemaTask.CreateXsdAttribute(System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Xml.Schema.XmlSchemaAttribute"/> instance.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="required">Value indicating whether the attribute should be required.</param>
            <returns>The new <see cref="T:System.Xml.Schema.XmlSchemaAttribute"/> instance.</returns>
        </member>
        <member name="M:NAnt.Core.Tasks.NAntSchemaTask.CreateXsdComplexType(System.String,System.String,System.Xml.Schema.XmlSchemaAttribute[])">
            <summary>
            Create a new <see cref="T:System.Xml.Schema.XmlSchemaComplexType"/> instance.
            </summary>
            <param name="name">The name of the complex type.</param>
            <param name="id">The id of the complex type.</param>
            <param name="attributes">The attributes of the complex type; null indicates none.</param>
            <returns>The new <see cref="T:System.Xml.Schema.XmlSchemaComplexType"/> instance.</returns>
        </member>
        <member name="M:NAnt.Core.Tasks.NAntSchemaTask.CreateXsdChoice(System.Decimal,System.Decimal)">
            <summary>
            Creates a new <see cref="T:System.Xml.Schema.XmlSchemaChoice"/> instance.
            </summary>
            <param name="min">The minimum value to allow for this choice</param>
            <param name="max">The maximum value to allow, Decimal.MaxValue sets it to 'unbound'</param>
            <returns>The new <see cref="T:System.Xml.Schema.XmlSchemaChoice"/> instance.</returns>
        </member>
        <member name="M:NAnt.Core.Tasks.NAntSchemaTask.CreateXsdSequence(System.Decimal,System.Decimal)">
            <summary>
            Creates a new <see cref="T:System.Xml.Schema.XmlSchemaSequence"/> instance.
            </summary>
            <param name="min">The minimum value to allow for this choice</param>
            <param name="max">The maximum value to allow, Decimal.MaxValue sets it to 'unbound'</param>
            <returns>The new <see cref="T:System.Xml.Schema.XmlSchemaSequence"/> instance.</returns>
        </member>
        <member name="M:NAnt.Core.Tasks.NAntSchemaTask.GetDerivedAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Searches throught custom attributes for any attribute based on
            <paramref name="attributeType" />.
            </summary>
            <param name="member">Member that should be searched for custom attributes based on <paramref name="attributeType" />.</param>
            <param name="attributeType">Custom attribute type that should be searched for; meaning that you want something derived by it.</param>
            <param name="searchMemberHierarchy">Value indicating whether the <paramref name="member" /> class hierarchy should be searched for custom attributes.</param>
            <param name="searchAttributeHierarchy">Value indicating whether the <paramref name="attributeType" /> class hierarchy should be searched for a match.</param>
            <returns>
            A custom attribute matching the search criteria or a null reference 
            when no matching custom attribute is found.
            </returns>
        </member>
        <member name="P:NAnt.Core.Tasks.NAntSchemaTask.OutputFile">
            <summary>
            The name of the output file to which the XSD should be written.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.NAntSchemaTask.TargetNamespace">
            <summary>
            The target namespace for the output. Defaults to "http://tempuri.org/nant-donotuse.xsd"
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.NAntSchemaTask.ForType">
            <summary>
            The <see cref="T:System.Type"/> for which an XSD should be created. If not
            specified, an XSD will be created for all available tasks.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.NAntSchemaTask.NAntSchemaGenerator.#ctor(System.Type[],System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NAnt.Core.Tasks.NAntSchemaTask.NAntSchemaGenerator"/>
            class.
            </summary>
            <param name="tasks">Tasks for which a schema should be generated.</param>
            <param name="targetNS">The namespace to use.
            <example> http://tempuri.org/nant.xsd </example>
            </param>
        </member>
        <member name="M:NAnt.Core.Tasks.NAntSchemaTask.NAntSchemaGenerator.#ctor(System.Type[])">
            <summary>
            Creates a new SchemaGenerator without a TargetNamespace.
            </summary>
            <param name="tasks">The Collection of Type(s) that represent the Task Classes to generation XSD for.</param>
        </member>
        <member name="T:NAnt.Core.Tasks.NAntTask">
            <summary>
            Runs NAnt on a supplied build file. This can be used to build subprojects.
            </summary>
            <example>
              <para>
              Build a project located in a different directory if the <c>debug</c> 
              property is not <see langword="true" />.
              </para>
              <code>
                <![CDATA[
            <nant buildfile="${src.dir}/Extras/BuildServer/BuildServer.build" unless="${debug}" />
                ]]>
              </code>
            </example>
            <example>
              <para>
              Build a project while adding a set of properties to that project.
              </para>
              <code>
                <![CDATA[
            <nant buildfile="${src.dir}/Extras/BuildServer/BuildServer.build">
                <properties>
                    <property name="build.dir" value="c:/buildserver" />
                    <property name="build.debug" value="false" />
                    <property name="lib.dir" value="c:/shared/lib" readonly="true" />
                </properties>
            </nant>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.NAntTask.BuildFileName">
            <summary>
            The build file to build. If not specified, use the current build file.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.NAntTask.DefaultTarget">
            <summary>
            The target to execute. To specify more than one target seperate 
            targets with a space. Targets are executed in order if possible. 
            The default is to use target specified in the project's default 
            attribute.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.NAntTask.InheritAll">
            <summary>
            Specifies whether current property values should be inherited by 
            the executed project. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.NAntTask.OverrideProperties">
            <summary>
            Specifies a collection of properties that should be created in the
            executed project.  Note, existing properties with identical names 
            that are not read-only will be overwritten.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.PropertyTask">
            <summary>
            Sets a property in the current project.
            </summary>
            <remarks>
              <note>NAnt uses a number of predefined properties.</note>
            </remarks>
            <example>
              <para>
              Define a <c>debug</c> property with value <see langword="true" />.
              </para>
              <code>
                <![CDATA[
            <property name="debug" value="true" />
                ]]>
              </code>
              <para>
              Use the user-defined <c>debug</c> property.
              </para>
              <code>
                <![CDATA[
            <property name="trace" value="${debug}" />
                ]]>
              </code>
              <para>
              Define a read-only property. This is just like passing in the param 
              on the command line.
              </para>
              <code>
                <![CDATA[
            <property name="do_not_touch_ME" value="hammer" readonly="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.PropertyTask.PropertyName">
            <summary>
            The name of the NAnt property to set.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.PropertyTask.Value">
            <summary>
            The value to assign to the NAnt property.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.PropertyTask.ReadOnly">
            <summary>
            Specifies whether the property is read-only or not. 
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.PropertyTask.Dynamic">
            <summary>
            Specifies whether references to other properties should not be 
            expanded when the value of the property is set, but expanded when
            the property is actually used.  The default is <see langword="false" />, 
            meaning references to other properties will be expanded when the 
            property value is set.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.PropertyTask.Overwrite">
            <summary>
            Specifies whether the value of a property should be overwritten if
            the property already exists (unless the property is readonly). 
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.ReadRegistryTask">
            <summary>
            Reads a value or set of values from the Windows Registry into one or 
            more NAnt properties.
            </summary>
            <example>
              <para>Read a single value from the registry.</para>
              <code>
                <![CDATA[
            <readregistry property="sdkRoot" key="SOFTWARE\Microsoft\.NETFramework\sdkInstallRoot" hive="LocalMachine" />
                ]]>
              </code>
              <para>Read all the registry values in a key.</para>
              <code>
                <![CDATA[
            <readregistry prefix="dotNetFX" key="SOFTWARE\Microsoft\.NETFramework\sdkInstallRoot" hive="LocalMachine" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.ReadRegistryTask.PropertyName">
            <summary>
                <para>The property to set to the specified registry key value.</para>
                <para>If this attribute is used then a single value will be read.</para>
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.ReadRegistryTask.PropertyPrefix">
            <summary>
                <para>The prefix to use for the specified registry key values.</para>
                <para>If this attribute is used then all registry values will be read and stored as properties with this prefix.</para>
            </summary>
            <example>
                <para>Registry values a, b, c will be turned into prefixa, prefixb, prefixc named properties</para>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.ReadRegistryTask.RegistryKey">
            <summary>
            The registry key to read, including the path.
            </summary>
            <example>
            SOFTWARE\Microsoft\.NETFramework\sdkInstallRoot
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.ReadRegistryTask.RegistryHiveName">
            <summary>
            The registry hive to use - either <see cref="F:Microsoft.Win32.RegistryHive.LocalMachine"/>,
            <see cref="F:Microsoft.Win32.RegistryHive.Users"/>, <see cref="F:Microsoft.Win32.RegistryHive.CurrentUser"/> or
            <see cref="F:Microsoft.Win32.RegistryHive.ClassesRoot"/>. 
            The default is <see cref="F:Microsoft.Win32.RegistryHive.LocalMachine"/>.
            </summary>
            <remarks>
            <seealso cref="T:Microsoft.Win32.RegistryHive"/>
            </remarks>
        </member>
        <member name="T:NAnt.Core.Tasks.RegexTask">
            <summary>
            Sets project properties based on the evaluatuion of a regular expression.
            </summary>
            <remarks>
            <para>
            The <see cref="P:NAnt.Core.Tasks.RegexTask.Pattern"/> attribute must contain one or more 
            <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpgenref/html/cpcongroupingconstructs.asp">
            named grouping constructs</see>, which represents the names of the 
            properties to be set. These named grouping constructs can be enclosed 
            by angle brackets (?&lt;name&gt;) or single quotes (?'name').
            </para>
            <note>
            In the build file, use the XML element <![CDATA[&lt;]]> to specify &lt;, 
            and <![CDATA[&gt;]]> to specify &gt;.
            </note>
            <note>
            The named grouping construct must not contain any punctuation and it 
            cannot begin with a number.
            </note>
            </remarks>
            <example>
              <para>
              Find the last word in the given string and stores it in the property 
              <c>lastword</c>.
              </para>
              <code>
                <![CDATA[
            <regex pattern="(?'lastword'\w+)$" input="This is a test sentence" />
            <echo message="${lastword}" />
                ]]>
              </code>
              <para>
              Split the full filename and extension of a filename.
              </para>
              <code>
                <![CDATA[
            <regex pattern="^(?'filename'.*)\.(?'extension'\w+)$" input="d:\Temp\SomeDir\SomeDir\bla.xml" />
                ]]>
              </code>
              <para>
              Split the path and the filename. (This checks for <c>/</c> or <c>\</c> 
              as the path separator).
              </para>
              <code>
                <![CDATA[
            <regex pattern="^(?'path'.*(\\|/)|(/|\\))(?'file'.*)$" input="d:\Temp\SomeDir\SomeDir\bla.xml" />
                ]]>
              </code>
              <para>
              Results in path=<c>d:\Temp\SomeDir\SomeDir\</c> and file=<c>bla.xml</c>.
              </para>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.RegexTask.ExecuteTask">
            <summary>
            Executes the task.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.RegexTask.Pattern">
            <summary>
            Represents the regular expression to be evalued.
            </summary>
            <value>
            Represents the regular expression to be evalued.
            </value>
            <remarks>
            The pattern must contain one or more named constructs, which may 
            not contain any punctuation and cannot begin with a number.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Tasks.RegexTask.Input">
            <summary>
            Represents the input for the regular expression.
            </summary>
            <value>
            The input for the regular expression.
            </value>
        </member>
        <member name="T:NAnt.Core.Tasks.SleepTask">
            <summary>
            A task for sleeping a specified period of time, useful when a build or deployment process
            requires an interval between tasks.
            </summary>
            <example>
              <para>Sleep 1 hour, 2 minutes, 3 seconds and 4 milliseconds.</para>
              <code>
                <![CDATA[
            <sleep hours="1" minutes="2" seconds="3" milliseconds="4" />
                ]]>
              </code>
              <para>Sleep 123 milliseconds.</para>
              <code>
                <![CDATA[
            <sleep milliseconds="123" />
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.SleepTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
             Verify parameters.
            </summary>
            <param name="taskNode"> taskNode used to define this task instance </param>
        </member>
        <member name="M:NAnt.Core.Tasks.SleepTask.GetSleepTime">
            <summary>
            Return time to sleep.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.SleepTask.DoSleep(System.Int32)">
            <summary>
            Sleeps for the specified number of milliseconds.
            </summary>
            <param name="millis">Number of milliseconds to sleep.</param>
        </member>
        <member name="P:NAnt.Core.Tasks.SleepTask.Hours">
            <summary>
            Hours to add to the sleep time.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.SleepTask.Minutes">
            <summary>
            Minutes to add to the sleep time.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.SleepTask.Seconds">
            <summary>
            Seconds to add to the sleep time.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.SleepTask.Milliseconds">
            <summary>
            Milliseconds to add to the sleep time.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.StyleTask">
            <summary>
            Processes a document via XSLT.
            </summary>
            <example>
              <para>Create a report in HTML.</para>
              <code>
                <![CDATA[
            <style style="report.xsl" in="data.xml" out="report.html" />
                ]]>
              </code>
            </example>
            <example>
              <para>Create a report in HTML, with a param.</para>
              <code>
                <![CDATA[
            <style style="report.xsl" in="data.xml" out="report.html">
                <parameters>
                    <parameter name="reportType" namespaceuri="" value="Plain" />
                </parameters>
            </style>
                ]]>
              </code>
            </example>
            <example>
              <para>Create a report in HTML, with a expanded param.</para>
              <code>
                <![CDATA[
            <style style="report.xsl" in="data.xml" out="report.html">
                <parameters>
                    <parameter name="reportType" namespaceuri="" value="${report.type}" />
                </parameters>
            </style>
                ]]>
              </code>
            </example>
            <example>
            <para>Create some code based on a directory of templates.</para>
              <code>
                <![CDATA[
            <style style="CodeGenerator.xsl" extension="java">
                <infiles>
                    <includes name="*.xml" />
                </infiles>
                <parameters>
                    <parameter name="reportType" namespaceuri="" value="Plain" if="${report.plain}" />
                </parameters>
            <style>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.StyleTask.BaseDir">
            <summary>
            Where to find the source XML file, default is the project's basedir.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.StyleTask.DestDir">
            <summary>
            Directory in which to store the results.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.StyleTask.Extension">
            <summary>
            Desired file extension to be used for the targets. The default is 
            <c>html</c>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.StyleTask.StyleSheet">
            <summary>
            Name of the stylesheet to use - given either relative to the project's 
            basedir or as an absolute path.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.StyleTask.SrcFile">
            <summary>
            Specifies a single XML document to be styled. Should be used with 
            the <see cref="P:NAnt.Core.Tasks.StyleTask.OutputFile"/> attribute.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.StyleTask.OutputFile">
            <summary>
            Specifies the output name for the styled result from the <see cref="P:NAnt.Core.Tasks.StyleTask.SrcFile"/> 
            attribute.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.StyleTask.InFiles">
            <summary>
            Specifies a group of input files to which to apply the stylesheet.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.StyleTask.Parameters">
            <summary>
            XSLT parameters to be passed to the XSLT transformation.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.SysInfoTask">
            <summary>
            Sets properties with system information.
            </summary>
            <remarks>
              <para>Sets a number of properties with information about the system environment.  The intent of this task is for nightly build logs to have a record of system information so that the build was performed on.</para>
              <list type="table">
                <listheader>
                  <term>Property</term>
                  <description>Value</description>
                </listheader>
                <item>
                  <term>sys.clr.version</term>
                  <description>Common Language Runtime version number.</description>
                </item>
                <item>
                  <term>sys.env.*</term>
                  <description>Environment variables (e.g., sys.env.PATH).</description>
                </item>
                <item>
                  <term>sys.os.platform</term>
                  <description>Operating system platform ID.</description>
                </item>
                <item>
                  <term>sys.os.version</term>
                  <description>Operating system version.</description>
                </item>
                <item>
                  <term>sys.os</term>
                  <description>Operating system version string.</description>
                </item>
                <item>
                  <term>sys.os.folder.applicationdata</term>
                  <description>The directory that serves as a common repository for application-specific data for the current roaming user.</description>
                </item>
                <item>
                  <term>sys.os.folder.commonapplicationdata</term>
                  <description>The directory that serves as a common repository for application-specific data that is used by all users.</description>
                </item>
                <item>
                  <term>sys.os.folder.commonprogramfiles</term>
                  <description>The directory for components that are shared across applications.</description>
                </item>
                <item>
                  <term>sys.os.folder.desktopdirectory</term>
                  <description>The directory used to physically store file objects on the desktop. Do not confuse this directory with the desktop folder itself, which is a virtual folder.</description>
                </item>
                <item>
                  <term>sys.os.folder.programfiles</term>
                  <description>The Program Files directory.</description>
                </item>
                <item>
                  <term>sys.os.folder.system</term>
                  <description>The System directory.</description>
                </item>
                <item>
                  <term>sys.os.folder.temp</term>
                  <description>The temporary directory.</description>
                </item>
              </list>
            </remarks>
            <example>
              <para>Register the properties with the default property prefix.</para>
              <code>
                <![CDATA[
            <sysinfo />
                ]]>
              </code>
              <para>Register the properties without a prefix.</para>
              <code>
                <![CDATA[
            <sysinfo prefix="" />
                ]]>
              </code>
              <para>Register properties and display a summary.</para>
              <code>
                <![CDATA[
            <sysinfo verbose="true" />
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.SysInfoTask.Prefix">
            <summary>
            The string to prefix the property names with. The default is <c>sys.</c>.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.TStampTask">
            <summary>
            Sets properties with the current date and time.
            </summary>
            <remarks>
              <para>
              By default the <see cref="T:NAnt.Core.Tasks.TStampTask"/> displays the current date 
              and time and sets the following properties:
              </para>
              <list type="bullet">
                <item><description>tstamp.date to yyyyMMdd</description></item>
                <item><description>tstamp.time to HHmm</description></item>
                <item><description>tstamp.now using the default DateTime.ToString() method</description></item>
              </list>
              <para>
              To set an additional property with a custom date/time use the 
              <see cref="P:NAnt.Core.Tasks.TStampTask.Property"/> and <see cref="P:NAnt.Core.Tasks.TStampTask.Pattern"/> attributes.  
              To set a number of additional properties with the exact same date and 
              time use the <see cref="P:NAnt.Core.Tasks.TStampTask.Formatters"/> nested element (see example).
              </para>
              <para>
              The date and time string displayed by the <see cref="T:NAnt.Core.Tasks.TStampTask"/> 
              uses the computer's default long date and time string format.  You 
              might consider setting these to the 
              <see href="http://www.cl.cam.ac.uk/~mgk25/iso-time.html">ISO 8601 standard 
              for date and time notation</see>.
              </para>
            </remarks>
            <example>
              <para>Set the <c>build.date</c> property.</para>
              <code>
                <![CDATA[
            <tstamp property="build.date" pattern="yyyyMMdd" verbose="true" />
                ]]>
              </code>
              <para>Set a number of properties for Ant like compatibility.</para>
              <code>
                <![CDATA[
            <tstamp verbose="true">
                <formatter property="TODAY" pattern="dd MMM yyyy"/>
                <formatter property="DSTAMP" pattern="yyyyMMdd" unless="${date.not.needed}" />
                <formatter property="TSTAMP" pattern="HHmm" if="${need.hours}" />
            </tstamp>
                ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.Core.Tasks.TStampTask.Property">
            <summary>
            The property to receive the date/time string in the given pattern.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.TStampTask.Pattern">
            <summary>The date/time pattern to be used.</summary>
            <remarks>
              <para>The following table lists the standard format characters for each standard pattern. The format characters are case-sensitive; for example, 'g' and 'G' represent slightly different patterns.</para>
              <list type="table">
                <listheader>
                  <description>Format Character</description>
                  <description>Description Example Format Pattern (en-US)</description>
                </listheader>
                <item><description>d</description><description>MM/dd/yyyy</description></item>
                <item><description>D</description><description>dddd, dd MMMM yyyy</description></item>
                <item><description>f</description><description>dddd, dd MMMM yyyy HH:mm</description></item>
                <item><description>F</description><description>dddd, dd MMMM yyyy HH:mm:ss</description></item>
                <item><description>g</description><description>MM/dd/yyyy HH:mm</description></item>
                <item><description>G</description><description>MM/dd/yyyy HH:mm:ss</description></item>
                <item><description>m, M</description><description>MMMM dd</description></item>
                <item><description>r, R</description><description>ddd, dd MMM yyyy HH':'mm':'ss 'GMT'</description></item>
                <item><description>s</description><description>yyyy'-'MM'-'dd'T'HH':'mm':'ss</description></item>
                <item><description>t</description><description>HH:mm</description></item>
                <item><description>T</description><description>HH:mm:ss</description></item>
                <item><description>u</description><description>yyyy'-'MM'-'dd HH':'mm':'ss'Z'</description></item>
                <item><description>U</description><description>dddd, dd MMMM yyyy HH:mm:ss</description></item>
                <item><description>y, Y</description><description>yyyy MMMM</description></item>
              </list>
              <para>The following table lists the patterns that can be combined to construct custom patterns. The patterns are case-sensitive; for example, "MM" is recognized, but "mm" is not. If the custom pattern contains white-space characters or characters enclosed in single quotation marks, the output string will also contain those characters. Characters not defined as part of a format pattern or as format characters are reproduced literally.</para>
              <list type="table">
                <listheader>
                  <description>Format</description>
                  <description>Pattern Description</description>
                </listheader>
                <item><description>d</description><description>The day of the month. Single-digit days will not have a leading zero.</description></item>
                <item><description>dd</description><description>The day of the month. Single-digit days will have a leading zero.</description></item>
                <item><description>ddd</description><description>The abbreviated name of the day of the week.</description></item>
                <item><description>dddd</description><description>The full name of the day of the week.</description></item>
                <item><description>M</description><description>The numeric month. Single-digit months will not have a leading zero.</description></item>
                <item><description>MM</description><description>The numeric month. Single-digit months will have a leading zero.</description></item>
                <item><description>MMM</description><description>The abbreviated name of the month.</description></item>
                <item><description>MMMM</description><description>The full name of the month.</description></item>
                <item><description>y</description><description>The year without the century. If the year without the century is less than 10, the year is displayed with no leading zero.</description></item>
                <item><description>yy</description><description>The year without the century. If the year without the century is less than 10, the year is displayed with a leading zero.</description></item>
                <item><description>yyyy</description><description>The year in four digits, including the century.</description></item>
                <item><description>gg</description><description>The period or era. This pattern is ignored if the date to be formatted does not have an associated period or era string.</description></item>
                <item><description>h</description><description>The hour in a 12-hour clock. Single-digit hours will not have a leading zero.</description></item>
                <item><description>hh</description><description>The hour in a 12-hour clock. Single-digit hours will have a leading zero.</description></item>
                <item><description>H</description><description>The hour in a 24-hour clock. Single-digit hours will not have a leading zero.</description></item>
                <item><description>HH</description><description>The hour in a 24-hour clock. Single-digit hours will have a leading zero.</description></item>
                <item><description>m</description><description>The minute. Single-digit minutes will not have a leading zero.</description></item>
                <item><description>mm</description><description>The minute. Single-digit minutes will have a leading zero.</description></item>
                <item><description>s</description><description>The second. Single-digit seconds will not have a leading zero.</description></item>
                <item><description>ss</description><description>The second. Single-digit seconds will have a leading zero.</description></item>
                <item><description>f</description><description>The fraction of a second in single-digit precision. The remaining digits are truncated.</description></item>
                <item><description>ff</description><description>The fraction of a second in double-digit precision. The remaining digits are truncated.</description></item>
                <item><description>fff</description><description>The fraction of a second in three-digit precision. The remaining digits are truncated.</description></item>
                <item><description>ffff</description><description>The fraction of a second in four-digit precision. The remaining digits are truncated.</description></item>
                <item><description>fffff</description><description>The fraction of a second in five-digit precision. The remaining digits are truncated. </description></item>
                <item><description>ffffff</description><description>The fraction of a second in six-digit precision. The remaining digits are truncated. </description></item>
                <item><description>fffffff</description><description>The fraction of a second in seven-digit precision. The remaining digits are truncated. </description></item>
                <item><description>t</description><description>The first character in the AM/PM designator.</description></item>
                <item><description>tt</description><description>The AM/PM designator. </description></item>
                <item><description>z</description><description>The time zone offset ("+" or "-" followed by the hour only). Single-digit hours will not have a leading zero. For example, Pacific Standard Time is "-8".</description></item>
                <item><description>zz</description><description>The time zone offset ("+" or "-" followed by the hour only). Single-digit hours will have a leading zero. For example, Pacific Standard Time is "-08".</description></item>
                <item><description>zzz</description><description>The full time zone offset ("+" or "-" followed by the hour and minutes). Single-digit hours and minutes will have leading zeros. For example, Pacific Standard Time is "-08:00".</description></item>
                <item><description>:</description><description>The default time separator.</description></item>
                <item><description>/</description><description>The default date separator.</description></item>
                <item><description>\ c</description><description>Pattern Where c is any character. Displays the character literally. To display the backslash character, use "\\". </description></item>
              </list>
            </remarks>
        </member>
        <member name="T:NAnt.Core.Tasks.TouchTask">
            <summary>
            Touches a file or set of files -- corresponds to the Unix touch command.  
            </summary>
            <remarks>
            <para>
            If the file specified in the single-file case does not exist, the task 
            will create it.
            </para>
            </remarks>
            <example>
              <para>Touch the <c>Main.cs</c> file.  The current time is used.</para>
              <code>
                <![CDATA[
            <touch file="Main.cs" />
                ]]>
              </code>
              <para>Touch all executable files in the current directory and its subdirectories.</para>
              <code>
                <![CDATA[
            <touch>
                <fileset>
                    <includes name="**/*.exe" />
                    <includes name="**/*.dll" />
                </fileset>
            </touch>
                ]]>
              </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.TouchTask.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.</summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="P:NAnt.Core.Tasks.TouchTask.FileName">
            <summary>
            Assembly filename (required unless a <see cref="T:NAnt.Core.Types.FileSet"/> is specified).
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.TouchTask.Millis">
            <summary>
            Specifies the new modification time of the file(s) in milliseconds 
            since midnight Jan 1 1970.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.TouchTask.Datetime">
            <summary>
            Specifies the new modification time of the file in the format 
            MM/DD/YYYY HH:MM AM_or_PM.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.TouchTask.TouchFileSet">
            <summary>
            Used to select files that should be touched.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.XmlPeekTask">
            <summary>
            Extracts text from an XML file at the location specified by an XPath 
            expression.
            </summary>
            <remarks>
            <para>
            If the XPath expression specifies multiple nodes the node index is used 
            to determine which of the nodes' text is returned.
            </para>
            </remarks>
            <example>
                <para>
                The example provided assumes that the following XML file (App.config)
                exists in the current build directory.
                </para>
                <code>
                    <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                </appSettings>
            </configuration>
                    ]]>
                </code>
                <para>
                The example will read the server value from the above
                configuration file.
                </para>
                <code>
                    <![CDATA[
            <xmlpeek
                file="App.config"
                xpath="/configuration/appSettings/add[@key = 'server']/@value"
                property="configuration.server" />
                    ]]>
                </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.XmlPeekTask.ExecuteTask">
            <summary>
            Executes the XML peek task.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.XmlPeekTask.LoadDocument(System.String)">
            <summary>
            Loads an XML document from a file on disk.
            </summary>
            <param name="fileName">The file name of the file to load the XML document from.</param>
            <returns>
            A <see cref="T:System.Xml.XmlDocument">document</see> containing
            the document object representing the file.
            </returns>
        </member>
        <member name="M:NAnt.Core.Tasks.XmlPeekTask.GetNodeContents(System.String,System.Xml.XmlDocument,System.Int32)">
            <summary>
            Gets the contents of the node specified by the XPath expression.
            </summary>
            <param name="xpath">The XPath expression used to determine which nodes to choose from.</param>
            <param name="document">The XML document to select the nodes from.</param>
            <param name="nodeIndex">The node index in the case where multiple nodes satisfy the expression.</param>
            <returns>
            The contents of the node specified by the XPath expression.
            </returns>
        </member>
        <member name="P:NAnt.Core.Tasks.XmlPeekTask.FileName">
            <summary>
            The name of the file that contains the XML document
            that is going to be peeked at.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.XmlPeekTask.NodeIndex">
            <summary>
            The index of the node that gets its text returned when the query 
            returns multiple nodes.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.XmlPeekTask.Property">
            <summary>
            The property that receives the text representation of the XML inside 
            the node returned from the XPath expression.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.XmlPeekTask.XPath">
            <summary>
            The XPath expression used to select which node to read.
            </summary>
        </member>
        <member name="T:NAnt.Core.Tasks.XmlPokeTask">
            <summary>
            Replaces text in an XML file at the location specified by an XPath 
            expression.
            </summary>
            <remarks>
            <para>
            The location specified by the XPath expression must exist, it will
            not create the parent elements for you. However, provided you have
            a root element you could use a series of the tasks to build the
            XML file up if necessary.
            </para>
            </remarks>
            <example>
                <para>
                The example provided assumes that the following XML file (App.config)
                exists in the current build directory.
                </para>
                <code>
                    <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                </appSettings>
            </configuration>
                    ]]>
                </code>
                <para>
                The example will change the <c>server</c> setting in the above 
                configuration from <c>testhost.somecompany.com</c> to
                <c>productionhost.somecompany.com</c>.
                </para>
                <code>
                    <![CDATA[
            <xmlpoke
                file="App.config"
                xpath="/configuration/appSettings/add[@key = 'server']/@value"
                value="productionhost.somecompany.com" />
                    ]]>
                </code>
            </example>
        </member>
        <member name="M:NAnt.Core.Tasks.XmlPokeTask.ExecuteTask">
            <summary>
            Executes the XML poke task.
            </summary>
        </member>
        <member name="M:NAnt.Core.Tasks.XmlPokeTask.LoadDocument(System.String)">
            <summary>
            Loads an XML document from a file on disk.
            </summary>
            <param name="fileName">
            The file name of the file to load the XML document from.
            </param>
            <returns>
            An <see cref="T:System.Xml.XmlDocument"/> containing
            the document object model representing the file.
            </returns>
        </member>
        <member name="M:NAnt.Core.Tasks.XmlPokeTask.SelectNodes(System.String,System.Xml.XmlDocument)">
            <summary>
            Given an XML document and an expression, returns a list of nodes
            which match the expression criteria.
            </summary>
            <param name="xpath">
            The XPath expression used to select the nodes.
            </param>
            <param name="document">
            The XML document that is searched.
            </param>
            <returns>
            An <see cref="T:System.Xml.XmlNodeList"/> containing references to the nodes 
            that matched the XPath expression.
            </returns>
        </member>
        <member name="M:NAnt.Core.Tasks.XmlPokeTask.UpdateNodes(System.Xml.XmlNodeList,System.String)">
            <summary>
            Given a node list, replaces the XML within those nodes.
            </summary>
            <param name="nodes">
            The list of nodes to replace the contents of.
            </param>
            <param name="value">
            The text to replace the contents with.
            </param>
        </member>
        <member name="M:NAnt.Core.Tasks.XmlPokeTask.SaveDocument(System.Xml.XmlDocument,System.String)">
            <summary>
            Saves the XML document to a file.
            </summary>
            <param name="document">The XML document to be saved.</param>
            <param name="fileName">The file name to save the XML document under.</param>
        </member>
        <member name="P:NAnt.Core.Tasks.XmlPokeTask.FileName">
            <summary>
            The file name of the file that contains the XML document that is
            going to be poked.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.XmlPokeTask.XPath">
            <summary>
            The XPath expression used to select which nodes are to be modified.
            </summary>
        </member>
        <member name="P:NAnt.Core.Tasks.XmlPokeTask.Value">
            <summary>
            The value that replaces the contents of the selected nodes.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.Argument">
            <summary>
            Represents a command-line argument.
            </summary>
        </member>
        <member name="T:NAnt.Core.DataTypeBase">
            <summary>
            Provides the abstract base class for types.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBase.Reset">
            <summary>
            Should be overridden by derived classes. clones the referenced types 
            data into the current instance.
            </summary>
        </member>
        <member name="P:NAnt.Core.DataTypeBase.ID">
            <summary>            The ID used to be referenced later.            </summary>
        </member>
        <member name="P:NAnt.Core.DataTypeBase.RefID">
            <summary>            The ID to use as the reference.            </summary>
        </member>
        <member name="P:NAnt.Core.DataTypeBase.Name">
            <summary>
            Gets the name of the datatype.
            </summary>
            <value>The name of the datatype.</value>
        </member>
        <member name="M:NAnt.Core.Types.Argument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.Argument"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.Argument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.Argument"/> class
            with the specified value.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Argument.Value">
            <summary>
            Value of this argument.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Argument.File">
            <summary>
            File of this argument.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Argument.IfDefined">
            <summary>
            Indicates if the argument should be passed to the external program. 
            If <see langword="true" /> then the argument will be passed; 
            otherwise, skipped. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Argument.UnlessDefined">
            <summary>
            Indicates if the argument should not be passed to the external 
            program. If <see langword="false" /> then the argument will be 
            passed; otherwise, skipped. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.ArgumentCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Core.Types.Argument"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.ArgumentCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.#ctor(NAnt.Core.Types.ArgumentCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.ArgumentCollection"/> class
            with the specified <see cref="T:NAnt.Core.Types.ArgumentCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.#ctor(NAnt.Core.Types.Argument[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.ArgumentCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Types.Argument"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.Add(NAnt.Core.Types.Argument)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Types.Argument"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Argument"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.AddRange(NAnt.Core.Types.Argument[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.Argument"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Types.Argument"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.AddRange(NAnt.Core.Types.ArgumentCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.ArgumentCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Types.ArgumentCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.Contains(NAnt.Core.Types.Argument)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.Argument"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Argument"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.Argument"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Core.Types.Argument"/> with value 
            <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.CopyTo(NAnt.Core.Types.Argument[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.IndexOf(NAnt.Core.Types.Argument)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Types.Argument"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Argument"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Types.Argument"/>. If the <see cref="T:NAnt.Core.Types.Argument"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.Insert(System.Int32,NAnt.Core.Types.Argument)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Types.Argument"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Types.Argument"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Types.ArgumentEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentCollection.Remove(NAnt.Core.Types.Argument)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Argument"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.Types.ArgumentCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.Types.ArgumentCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.Types.Argument"/> with the specified value.
            </summary>
            <param name="value">The value of the <see cref="T:NAnt.Core.Types.Argument"/> to get.</param>
        </member>
        <member name="T:NAnt.Core.Types.ArgumentEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Types.Argument"/> elements of a <see cref="T:NAnt.Core.Types.ArgumentCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentEnumerator.#ctor(NAnt.Core.Types.ArgumentCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.ArgumentEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Types.ArgumentCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.ArgumentEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.ArgumentEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.Types.Credential">
            <summary>
            Provides credentials for password-based authentication schemes.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.Credential.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.Credential"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.Credential.GetCredential">
            <summary>
            Returns a <see cref="T:System.Net.NetworkCredential"/> instance representing
            the current <see cref="T:NAnt.Core.Types.Credential"/>.
            </summary>
            <returns>
            A <see cref="T:System.Net.NetworkCredential"/> instance representing the current 
            <see cref="T:NAnt.Core.Types.Credential"/>, or <see langword="null"/> if the 
            credentials should not be used to provide authentication information
            to the external resource.
            </returns>
        </member>
        <member name="P:NAnt.Core.Types.Credential.Domain">
            <summary>
            The domain or computer name that verifies the credentials.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Credential.Password">
            <summary>
            The password for the user name associated with the credentials.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Credential.UserName">
            <summary>
            The user name associated with the credentials. 
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Credential.IfDefined">
            <summary>
            Indicates if the credentials should be used to provide authentication
            information to the external resource. If <see langword="true" /> then 
            the credentials will be passed; otherwise, not. The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Credential.UnlessDefined">
            <summary>
            Indicates if the credentials should not be used to provide authentication
            information to the external resource. If <see langword="false" /> then the 
            credentials will be passed; otherwise, not. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.EnvironmentVariable">
            <summary>
            Represents an environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariable.VariableName">
            <summary>
            The name of the environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariable.LiteralValue">
            <summary>
            The literal value for the environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariable.File">
            <summary>
            The value for a file-based environment variable. NAnt will convert 
            it to an absolute filename.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariable.Path">
            <summary>
            The value for a PATH like environment variable. You can use 
            <code>;</code> as path separator and NAnt will convert it to the 
            platform's local conventions.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariable.Value">
            <summary>
            Gets the value of the environment variable.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariable.IfDefined">
            <summary>
            Indicates if the environment variable should be passed to the 
            external program.  If <see langword="true" /> then the environment
            variable will be passed;  otherwise, skipped. The default is 
            <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariable.UnlessDefined">
            <summary>
            Indicates if the environment variable should not be passed to the 
            external program.  If <see langword="false" /> then the environment
            variable will be passed;  otherwise, skipped. The default is 
            <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.EnvironmentVariableCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.EnvironmentVariableCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.#ctor(NAnt.Core.Types.EnvironmentVariableCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.EnvironmentVariableCollection"/> class
            with the specified <see cref="T:NAnt.Core.Types.EnvironmentVariableCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.#ctor(NAnt.Core.Types.EnvironmentVariable[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.EnvironmentVariableCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.Add(NAnt.Core.Types.EnvironmentVariable)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.AddRange(NAnt.Core.Types.EnvironmentVariable[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.AddRange(NAnt.Core.Types.EnvironmentVariableCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.EnvironmentVariableCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Types.EnvironmentVariableCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.Contains(NAnt.Core.Types.EnvironmentVariable)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> with value 
            <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.CopyTo(NAnt.Core.Types.EnvironmentVariable[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.IndexOf(NAnt.Core.Types.EnvironmentVariable)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Types.EnvironmentVariable"/>. If the <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.Insert(System.Int32,NAnt.Core.Types.EnvironmentVariable)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Types.EnvironmentVariableEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableCollection.Remove(NAnt.Core.Types.EnvironmentVariable)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariableCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariableCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> to get.</param>
        </member>
        <member name="T:NAnt.Core.Types.EnvironmentVariableEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Types.EnvironmentVariable"/> elements of a <see cref="T:NAnt.Core.Types.EnvironmentVariableCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableEnumerator.#ctor(NAnt.Core.Types.EnvironmentVariableCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.EnvironmentVariableEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Types.EnvironmentVariableCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.EnvironmentVariableEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.EnvironmentVariableEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.Types.FileSet">
            <summary>
            Filesets are groups of files.  These files can be found in a directory 
            tree starting in a base directory and are matched by patterns taken 
            from a number of patterns.  Filesets can appear inside tasks that support 
            this feature or at the project level, i.e., as children of <c>&lt;project&gt;</c>.
            </summary>
            <remarks>
            <h3>Patterns</h3>
            <para>
            As described earlier, patterns are used for the inclusion and exclusion. 
            These patterns look very much like the patterns used in DOS and UNIX:
            </para>
            <list type="bullet">
                <item>
                    <description>
                        <para>'<c>*</c>' matches zero or more characters</para>
                        <para>For example:</para>
                        <para>
                        <c>*.cs</c> matches <c>.cs</c>, <c>x.cs</c> and <c>FooBar.cs</c>, 
                        but not <c>FooBar.xml</c> (does not end with <c>.cs</c>).
                        </para>
                    </description>
                </item>
                <item>
                    <description>
                        <para>'<c>?</c>' matches one character</para>
                        <para>For example:</para>
                        <para>
                        <c>?.cs</c> matches <c>x.cs</c>, <c>A.cs</c>, but not 
                        <c>.cs</c> or <c>xyz.cs</c> (both don't have one character
                        before <c>.cs</c>).
                        </para>
                    </description>
                </item>
            </list>
            <para>
            Combinations of <c>*</c>'s and <c>?</c>'s are allowed.
            </para>
            <para>
            Matching is done per-directory. This means that first the first directory 
            in the pattern is matched against the first directory in the path to match. 
            Then the second directory is matched, and so on. For example, when we have 
            the pattern <c>/?abc/*/*.cs</c> and the path <c>/xabc/foobar/test.cs</c>, 
            the first <c>?abc</c> is matched with <c>xabc</c>, then <c>*</c> is matched 
            with <c>foobar</c>, and finally <c>*.cs</c> is matched with <c>test.cs</c>. 
            They all match, so the path matches the pattern.
            </para>
            <para>
            To make things a bit more flexible, we added one extra feature, which makes 
            it possible to match multiple directory levels. This can be used to match a 
            complete directory tree, or a file anywhere in the directory tree. To do this, 
            <c>**</c> must be used as the name of a directory. When <c>**</c> is used as 
            the name of a directory in the pattern, it matches zero or more directories. 
            For example: <c>/test/**</c> matches all files/directories under <c>/test/</c>, 
            such as <c>/test/x.cs</c>, or <c>/test/foo/bar/xyz.html</c>, but not <c>/xyz.xml</c>.
            </para>
            <para>
            There is one "shorthand" - if a pattern ends with <c>/</c> or <c>\</c>, then 
            <c>**</c> is appended. For example, <c>mypackage/test/</c> is interpreted as 
            if it were <c>mypackage/test/**</c>.
            </para>
            </remarks>
            <history>
            <change date="20030224" author="Brian Deacon (bdeacon at vidya dot com">Added support for the failonempty attribute</change>
            </history>
            <example>
            <list type="table">
                <listheader>
                    <term>Pattern</term>
                    <description>Match</description>
                </listheader>
                <item>
                    <term><c>**/CVS/*</c></term>
                    <description>
                        <para>
                        Matches all files in <c>CVS</c> directories that can be 
                        located anywhere in the directory tree.
                        </para>
                        <para>Matches:</para>
                        <list type="bullet">
                            <item>
                                <description>CVS/Repository</description>
                            </item>
                            <item>
                                <description>org/apache/CVS/Entries</description>
                            </item>
                            <item>
                                <description>org/apache/jakarta/tools/ant/CVS/Entries</description>
                            </item>
                        </list>
                        <para>But not:</para>
                        <list type="bullet">
                            <item>
                                <description>org/apache/CVS/foo/bar/Entries (<c>foo/bar/</c> part does not match)</description>
                            </item>
                        </list>
                    </description>
                </item>
                <item>
                    <term><c>org/apache/jakarta/**</c></term>
                    <description>
                        <para>
                        Matches all files in the <c>org/apache/jakarta</c> directory 
                        tree.
                        </para>
                        <para>Matches:</para>
                        <list type="bullet">
                            <item>
                                <description>org/apache/jakarta/tools/ant/docs/index.html</description>
                            </item>
                            <item>
                                <description>org/apache/jakarta/test.xml</description>
                            </item>
                        </list>
                        <para>But not:</para>
                        <list type="bullet">
                            <item>
                                <description>org/apache/xyz.java (<c>jakarta/</c> part is missing)</description>
                            </item>
                        </list>
                    </description>
                </item>
                <item>
                    <term><c>org/apache/**/CVS/*</c></term>
                    <description>
                        <para>
                        Matches all files in <c>CVS</c> directories that are located 
                        anywhere in the directory tree under <c>org/apache</c>.
                        </para>
                        <para>Matches:</para>
                        <list type="bullet">
                            <item>
                                <description>org/apache/CVS/Entries</description>
                            </item>
                            <item>
                                <description>org/apache/jakarta/tools/ant/CVS/Entries</description>
                            </item>
                        </list>
                        <para>But not:</para>
                        <list type="bullet">
                            <item>
                                <description>org/apache/CVS/foo/bar/Entries (<c>foo/bar/</c> part does not match)</description>
                            </item>
                        </list>
                    </description>
                </item>
                <item>
                    <term><c>**/test/**</c></term>
                    <description>
                        <para>
                        Matches all files that have a <c>test</c> element in their 
                        path, including <c>test</c> as a filename.
                        </para>
                    </description>
                </item>
            </list>
            </example>
        </member>
        <member name="M:NAnt.Core.Types.FileSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FileSet"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FileSet.#ctor(NAnt.Core.Types.FileSet)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FileSet"/> class from
            the specified <see cref="T:NAnt.Core.Types.FileSet"/>.
            </summary>
            <param name="source">The <see cref="T:NAnt.Core.Types.FileSet"/> that should be used to create a new instance of the <see cref="T:NAnt.Core.Types.FileSet"/> class.</param>
        </member>
        <member name="M:NAnt.Core.Types.FileSet.FindMoreRecentLastWriteTime(System.String,System.DateTime)">
            <summary>
            Determines if a file has a more recent last write time than the 
            given time.
            </summary>
            <param name="fileName">A file to check the last write time against.</param>
            <param name="targetLastWriteTime">The datetime to compare against.</param>
            <returns>
            The name of the file that has a last write time greater than 
            <paramref name="targetLastWriteTime" />; otherwise, null.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FileSet.FindMoreRecentLastWriteTime(System.Collections.Specialized.StringCollection,System.DateTime)">
            <summary>
            Determines if one of the given files has a more recent last write 
            time than the given time.
            </summary>
            <param name="fileNames">A collection of filenames to check the last write time against.</param>
            <param name="targetLastWriteTime">The datetime to compare against.</param>
            <returns>
            The name of the first file that has a last write time greater than 
            <paramref name="targetLastWriteTime" />; otherwise, null.
            </returns>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.FailOnEmpty">
            <summary>
            When set to <see langword="true"/>, causes the fileset element to 
            throw a <see cref="T:NAnt.Core.ValidationException"/> when no files match the 
            includes and excludes criteria. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.DefaultExcludes">
            <summary>
            Indicates whether default excludes should be used or not. 
            The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.BaseDirectory">
            <summary>
            The base of the directory of this fileset. The default is the project 
            base directory.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.Includes">
            <summary>
            Gets the collection of include patterns.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.Excludes">
            <summary>
            Gets the collection of exclude patterns.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.AsIs">
            <summary>
            Gets the collection of files that will be added to the 
            <see cref="T:NAnt.Core.Types.FileSet"/> without pattern matching or checking if the 
            file exists.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.FileNames">
            <summary>
            Gets the collection of file names that match the fileset.
            </summary>
            <value>
            A collection that contains the file names that match the 
            <see cref="T:NAnt.Core.Types.FileSet"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.DirectoryNames">
            <summary>
            Gets the collection of directory names that match the fileset.
            </summary>
            <value>
            A collection that contains the directory names that match the 
            <see cref="T:NAnt.Core.Types.FileSet"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.ScannedDirectories">
            <summary>
            Gets the collection of directory names that were scanned for files.
            </summary>
            <value>
            A collection that contains the directory names that were scanned for
            files.
            </value>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.SetIncludes">
            <summary>
            The items to include in the fileset.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.SetExcludes">
            <summary>
            The items to exclude from the fileset.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.SetIncludesList">
            <summary>
            The items to include in the fileset.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.MostRecentLastWriteTimeFile">
            <summary>
            Determines the most recently modified file in the fileset (by LastWriteTime of the <see cref="T:System.IO.FileInfo"/>).
            </summary>
            <returns>
            The <see cref="T:System.IO.FileInfo"/> of the file that has the newest (closest to present) last write time.
            </returns>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.ExcludesElement.Pattern">
            <summary>
            The pattern or file name to include.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.ExcludesElement.IfDefined">
            <summary>
            If <see langword="true" /> then the pattern will be included; 
            otherwise, skipped. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.ExcludesElement.UnlessDefined">
            <summary>
            Opposite of <see cref="P:NAnt.Core.Types.FileSet.ExcludesElement.IfDefined"/>. If <see langword="false"/> 
            then the pattern will be included; otherwise, skipped. The default 
            is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.IncludesElement.AsIs">
            <summary>
            If <see langword="true"/> then the file name will be added to 
            the <see cref="T:NAnt.Core.Types.FileSet"/> without pattern matching or checking 
            if the file exists.  The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FileSet.IncludesElement.FromPath">
            <summary>
            If <see langword="true" /> then the file will be searched for 
            on the path. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.Filter">
            <summary>
            Individual filter component of <see cref="T:NAnt.Core.Types.FilterSet"/>.
            </summary>
        </member>
        <member name="F:NAnt.Core.Types.Filter._token">
            <summary>
            Holds the token which will be replaced in the filter operation.
            </summary>
        </member>
        <member name="F:NAnt.Core.Types.Filter._value">
            <summary>
            Holsd the value which will replace the token in the filtering operation.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.Filter"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.Filter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.Filter"/> class with
            the given token and value.
            </summary>
            <param name="token">The token which will be replaced when filtering.</param>
            <param name="value">The value which will replace the token when filtering.</param>
        </member>
        <member name="P:NAnt.Core.Types.Filter.Token">
            <summary>
            The token which will be replaced when filtering.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Filter.Value">
            <summary>
            The value which will replace the token when filtering.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.FilterCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Core.Types.Filter"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.#ctor(NAnt.Core.Types.FilterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterCollection"/> class
            with the specified <see cref="T:NAnt.Core.Types.FilterCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.#ctor(NAnt.Core.Types.Filter[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Types.Filter"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.Add(NAnt.Core.Types.Filter)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Types.Filter"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Filter"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.AddRange(NAnt.Core.Types.Filter[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.Filter"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Types.Filter"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.AddRange(NAnt.Core.Types.FilterCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.FilterCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Types.FilterCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.Contains(NAnt.Core.Types.Filter)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.Filter"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Filter"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.Filter"/> with the specified
            token is in the collection.
            </summary>
            <param name="token">The token to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Core.Types.Filter"/> with the given 
            token is found in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.CopyTo(NAnt.Core.Types.Filter[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.IndexOf(NAnt.Core.Types.Filter)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Types.Filter"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Filter"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Types.Filter"/>. If the <see cref="T:NAnt.Core.Types.Filter"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.Insert(System.Int32,NAnt.Core.Types.Filter)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Types.Filter"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Types.Filter"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Types.FilterEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterCollection.Remove(NAnt.Core.Types.Filter)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Filter"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.Types.FilterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.Types.FilterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.Types.Filter"/> with the specified token.
            </summary>
            <param name="token">The token to get.</param>
        </member>
        <member name="T:NAnt.Core.Types.FilterEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Types.Filter"/> elements of a <see cref="T:NAnt.Core.Types.FilterCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterEnumerator.#ctor(NAnt.Core.Types.FilterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Types.FilterCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Types.FilterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FilterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.Types.FilterSet">
            <summary>
            A set of filters to be applied to something.
            </summary>
            <remarks>
            <para>
            A filter set may have begintoken and endtokens defined.
            </para>
            </remarks>
        </member>
        <member name="F:NAnt.Core.Types.FilterSet.DefaultTokenStart">
            <summary>
            The default token start string.
            </summary>
        </member>
        <member name="F:NAnt.Core.Types.FilterSet.DefaultTokenEnd">
            <summary>
            The default token end string.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterSet"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterSet.ReplaceTokens(System.String)">
            <summary>
            Does replacement on the given string with token matching.
            </summary>
            <param name="line">The line to process the tokens in.</param>
            <returns>
            The line with the tokens replaced.
            </returns>
        </member>
        <member name="P:NAnt.Core.Types.FilterSet.BeginToken">
            <summary>
            The string used to identity the beginning of a token. The default is
            <c>@</c>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FilterSet.EndToken">
            <summary>
            The string used to identify the end of a token. The default is
            <c>@</c>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FilterSet.Filters">
            <summary>
            The filters to apply.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.FilterSetCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Core.Types.FilterSet"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterSetCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.#ctor(NAnt.Core.Types.FilterSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterSetCollection"/> class
            with the specified <see cref="T:NAnt.Core.Types.FilterSetCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.#ctor(NAnt.Core.Types.FilterSet[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterSetCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Types.FilterSet"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.Add(NAnt.Core.Types.FilterSet)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Types.FilterSet"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.FilterSet"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.AddRange(NAnt.Core.Types.FilterSet[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.FilterSet"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Types.FilterSet"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.AddRange(NAnt.Core.Types.FilterSetCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.FilterSetCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Types.FilterSetCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.Contains(NAnt.Core.Types.FilterSet)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.FilterSet"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.FilterSet"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.CopyTo(NAnt.Core.Types.FilterSet[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.IndexOf(NAnt.Core.Types.FilterSet)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Types.FilterSet"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.FilterSet"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Types.FilterSet"/>. If the <see cref="T:NAnt.Core.Types.FilterSet"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.Insert(System.Int32,NAnt.Core.Types.FilterSet)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Types.FilterSet"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Types.FilterSet"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Types.FilterSetEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.Remove(NAnt.Core.Types.FilterSet)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.FilterSet"/> to remove from the collection.</param>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.ReplaceTokens(System.String)">
            <summary>
            Does replacement on the given string with token matching.
            </summary>
            <param name="line">The line to process the tokens in.</param>
            <returns>
            The line with the tokens replaced.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetCollection.HasFilters">
            <summary>
            Checks to see if there are filters in the collection of filtersets.
            </summary>
            <returns>
            <see langword="true" /> if there are filters in this collection of
            filtersets; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="P:NAnt.Core.Types.FilterSetCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:NAnt.Core.Types.FilterSetEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Types.FilterSet"/> elements of a <see cref="T:NAnt.Core.Types.FilterSetCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetEnumerator.#ctor(NAnt.Core.Types.FilterSetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FilterSetEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Types.FilterSetCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FilterSetEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FilterSetEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="P:NAnt.Core.Types.Formatter.Property">
            <summary>
            The name of the NAnt property to set.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Formatter.Pattern">
            <summary>
            The string pattern to use to format the property.
            </summary>       
        </member>
        <member name="P:NAnt.Core.Types.Formatter.IfDefined">
            <summary>
            Indicates if the formatter should be used to format the timestamp.
            If <see langword="true" /> then the formatter will be used; 
            otherwise, skipped. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Formatter.UnlessDefined">
            <summary>
            Indicates if the formatter should be not used to format the 
            timestamp. If <see langword="false" /> then the formatter will be 
            used; otherwise, skipped. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.FormatterCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Core.Types.Formatter"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FormatterCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.#ctor(NAnt.Core.Types.FormatterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FormatterCollection"/> class
            with the specified <see cref="T:NAnt.Core.Types.FormatterCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.#ctor(NAnt.Core.Types.Formatter[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FormatterCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Types.Formatter"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.Add(NAnt.Core.Types.Formatter)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Types.Formatter"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Formatter"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.AddRange(NAnt.Core.Types.Formatter[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.Formatter"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Types.Formatter"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.AddRange(NAnt.Core.Types.FormatterCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.FormatterCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Types.FormatterCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.Contains(NAnt.Core.Types.Formatter)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.Formatter"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Formatter"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.CopyTo(NAnt.Core.Types.Formatter[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.IndexOf(NAnt.Core.Types.Formatter)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Types.Formatter"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Formatter"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Types.Formatter"/>. If the <see cref="T:NAnt.Core.Types.Formatter"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.Insert(System.Int32,NAnt.Core.Types.Formatter)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Types.Formatter"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Types.Formatter"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Types.FormatterEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FormatterCollection.Remove(NAnt.Core.Types.Formatter)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Formatter"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.Types.FormatterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:NAnt.Core.Types.FormatterEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Types.Formatter"/> elements of a <see cref="T:NAnt.Core.Types.FormatterCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.FormatterEnumerator.#ctor(NAnt.Core.Types.FormatterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.FormatterEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Types.FormatterCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Types.FormatterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.FormatterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.FormatterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.Types.NamespaceImport">
            <summary>
            Represents a namespace to import.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.NamespaceImport"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImport.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.NamespaceImport"/> 
            class for the specified namespace.
            </summary>
            <param name="nameSpace">The namespace.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nameSpace"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:NAnt.Core.Types.NamespaceImport.Namespace">
            <summary>
            The name of the namespace to import.
            </summary>
            <value>
            The name of the namespace to import.
            </value>
        </member>
        <member name="P:NAnt.Core.Types.NamespaceImport.IfDefined">
            <summary>
            Indicates if the import should be generated. 
            </summary>
            <value>
            <see langword="true" /> if the import should be generated; otherwise,
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Types.NamespaceImport.UnlessDefined">
            <summary>
            Indicates if the import should be not generated. 
            </summary>
            <value>
            <see langword="true" /> if the import should be not generated; 
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="T:NAnt.Core.Types.NamespaceImportCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Core.Types.NamespaceImport"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.NamespaceImportCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.#ctor(NAnt.Core.Types.NamespaceImportCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.NamespaceImportCollection"/> class
            with the specified <see cref="T:NAnt.Core.Types.NamespaceImportCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.#ctor(NAnt.Core.Types.NamespaceImport[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.NamespaceImportCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Types.NamespaceImport"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.Add(NAnt.Core.Types.NamespaceImport)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Types.NamespaceImport"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.NamespaceImport"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.AddRange(NAnt.Core.Types.NamespaceImport[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.NamespaceImport"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Types.NamespaceImport"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.AddRange(NAnt.Core.Types.NamespaceImportCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.NamespaceImportCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Types.NamespaceImportCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.Contains(NAnt.Core.Types.NamespaceImport)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.NamespaceImport"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.NamespaceImport"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.NamespaceImport"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Core.Types.NamespaceImport"/> with 
            value <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.CopyTo(NAnt.Core.Types.NamespaceImport[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.IndexOf(NAnt.Core.Types.NamespaceImport)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Types.NamespaceImport"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.NamespaceImport"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Types.NamespaceImport"/>. If the <see cref="T:NAnt.Core.Types.NamespaceImport"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.Insert(System.Int32,NAnt.Core.Types.NamespaceImport)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Types.NamespaceImport"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Types.NamespaceImport"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Types.NamespaceImportEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportCollection.Remove(NAnt.Core.Types.NamespaceImport)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.NamespaceImport"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.Types.NamespaceImportCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.Types.NamespaceImportCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.Types.NamespaceImport"/> with the specified namespace.
            </summary>
            <param name="value">The namespace of the <see cref="T:NAnt.Core.Types.NamespaceImport"/> to get.</param>
        </member>
        <member name="T:NAnt.Core.Types.NamespaceImportEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Types.NamespaceImport"/> elements of a <see cref="T:NAnt.Core.Types.NamespaceImportCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportEnumerator.#ctor(NAnt.Core.Types.NamespaceImportCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.NamespaceImportEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Types.NamespaceImportCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.NamespaceImportEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.NamespaceImportEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.Types.Option">
            <summary>
            Represents an option.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Option.OptionName">
            <summary>
            Name of the option.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Option.Value">
            <summary>
            Value of the option. The default is <see langword="null" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Option.IfDefined">
            <summary>
            Indicates if the option should be passed to the task. 
            If <see langword="true" /> then the option will be passed; 
            otherwise, skipped. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Option.UnlessDefined">
            <summary>
            Indicates if the option should not be passed to the task.
            If <see langword="false" /> then the option will be passed; 
            otherwise, skipped. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.OptionCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Core.Types.Option"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.OptionCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.#ctor(NAnt.Core.Types.OptionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.OptionCollection"/> class
            with the specified <see cref="T:NAnt.Core.Types.OptionCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.#ctor(NAnt.Core.Types.Option[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.OptionCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Types.Option"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.Add(NAnt.Core.Types.Option)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Types.Option"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Option"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.AddRange(NAnt.Core.Types.Option[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.Option"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Types.Option"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.AddRange(NAnt.Core.Types.OptionCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.OptionCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Types.OptionCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.Contains(NAnt.Core.Types.Option)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.Option"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Option"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.Option"/> for the specified 
            task is in the collection.
            </summary>
            <param name="taskName">The name of task for which the <see cref="T:NAnt.Core.Types.Option"/> should be located in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Core.Types.Option"/> for the specified 
            task is found in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.CopyTo(NAnt.Core.Types.Option[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.IndexOf(NAnt.Core.Types.Option)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Types.Option"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Option"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Types.Option"/>. If the <see cref="T:NAnt.Core.Types.Option"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.Insert(System.Int32,NAnt.Core.Types.Option)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Types.Option"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Types.Option"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Types.OptionEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.OptionCollection.Remove(NAnt.Core.Types.Option)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.Option"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.Types.OptionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.Types.OptionCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.Types.Option"/> with the specified name.
            </summary>
            <param name="name">The name of the option that should be located in the collection.</param> 
        </member>
        <member name="T:NAnt.Core.Types.OptionEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Types.Option"/> elements of a <see cref="T:NAnt.Core.Types.OptionCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.OptionEnumerator.#ctor(NAnt.Core.Types.OptionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.OptionEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Types.OptionCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Types.OptionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.OptionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.OptionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.PathList.#ctor(NAnt.Core.Project,System.String)">
            <summary>
            Invoked by <see cref="T:NAnt.Core.Element.AttributeConfigurator"/> for build 
            attributes with an underlying <see cref="T:NAnt.Core.Types.PathList"/> type.
            </summary>
            <param name="project">The <see cref="T:NAnt.Core.Project"/> to be used to resolve relative paths.</param>
            <param name="pathList"></param>
        </member>
        <member name="M:NAnt.Core.Types.PathList.ToString">
            <summary>
            Returns a textual representation of the path, which can be used as
            PATH environment variable definition.
            </summary>
            <returns>
            A textual representation of the path.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.PathList.TranslatePath(NAnt.Core.Project,System.String)">
            <summary>
            Splits a PATH (with ; as separator) into its parts, while resolving
            references to environment variables.
            </summary>
            <param name="project">The <see cref="T:NAnt.Core.Project"/> to be used to resolve relative paths.</param>
            <param name="source"></param>
            <returns>
            A PATH split up its parts, with references to environment variables
            resolved.
            </returns>
        </member>
        <member name="T:NAnt.Core.Types.Proxy">
            <summary>
            Contains HTTP proxy settings used to process requests to Internet 
            resources.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.Proxy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.Proxy"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.Proxy.GetWebProxy">
            <summary>
            Gets a <see cref="T:System.Net.WebProxy"/> instance representing the current
            <see cref="T:NAnt.Core.Types.Proxy"/>.
            </summary>
            <returns>
            A <see cref="T:System.Net.WebProxy"/> instance representing the current 
            <see cref="T:NAnt.Core.Types.Proxy"/>, or <see langword="GlobalProxySelection.Select"/> 
            if this proxy should not be used to connect to the external resource.
            </returns>
        </member>
        <member name="P:NAnt.Core.Types.Proxy.Host">
            <summary>
            The name of the proxy host. 
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Proxy.Port">
            <summary>
            The port number on <see cref="P:NAnt.Core.Types.Proxy.Host"/> to use. 
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Proxy.BypassOnLocal">
            <summary>
            Specifies whether to bypass the proxy server for local addresses.
            The default is <see langword="false" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Proxy.Credentials">
            <summary>
            The credentials to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Proxy.IfDefined">
            <summary>
            Indicates if the proxy should be used to connect to the external 
            resource. If <see langword="true" /> then the proxy will be used; 
            otherwise, not. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.Proxy.UnlessDefined">
            <summary>
            Indicates if the proxy should not be used to connect to the external
            resource. If <see langword="false" /> then the proxy will be used;
            otherwise, not. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.XsltParameter">
            <summary>
            Represents an XSLT parameter.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.XsltParameter"/> 
            class.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.XsltParameter.ParameterName">
            <summary>
            The name of the XSLT parameter.
            </summary>
            <value>
            The name of the XSLT parameter, or <see cref="F:System.String.Empty"/> if 
            not set.
            </value>
        </member>
        <member name="P:NAnt.Core.Types.XsltParameter.NamespaceUri">
            <summary>
            The namespace URI to associate with the parameter.
            </summary>
            <value>
            The namespace URI to associate with the parameter, or 
            <see cref="F:System.String.Empty"/> if not set.
            </value>
        </member>
        <member name="P:NAnt.Core.Types.XsltParameter.Value">
            <summary>
            The value of the XSLT parameter.
            </summary>
            <value>
            The value of the XSLT parameter, or <see cref="F:System.String.Empty"/> if 
            not set.
            </value>
        </member>
        <member name="P:NAnt.Core.Types.XsltParameter.IfDefined">
            <summary>
            Indicates if the parameter should be added to the XSLT argument list.
            If <see langword="true" /> then the parameter will be added; 
            otherwise, skipped. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.XsltParameter.UnlessDefined">
            <summary>
            Indicates if the parameter should not be added to the XSLT argument
            list. If <see langword="false" /> then the parameter will be 
            added; otherwise, skipped. The default is <see langword="false" />.
            </summary>
        </member>
        <member name="T:NAnt.Core.Types.XsltParameterCollection">
            <summary>
            Contains a collection of <see cref="T:NAnt.Core.Types.XsltParameter"/> elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.XsltParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.#ctor(NAnt.Core.Types.XsltParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.XsltParameterCollection"/> class
            with the specified <see cref="T:NAnt.Core.Types.XsltParameterCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.#ctor(NAnt.Core.Types.XsltParameter[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.XsltParameterCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Types.XsltParameter"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.Add(NAnt.Core.Types.XsltParameter)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Types.XsltParameter"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.XsltParameter"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.AddRange(NAnt.Core.Types.XsltParameter[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.XsltParameter"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Types.XsltParameter"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.AddRange(NAnt.Core.Types.XsltParameterCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Types.XsltParameterCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Types.XsltParameterCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.Contains(NAnt.Core.Types.XsltParameter)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.XsltParameter"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.XsltParameter"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Types.XsltParameter"/> with the specified
            value is in the collection.
            </summary>
            <param name="value">The argument value to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Core.Types.XsltParameter"/> with 
            value <paramref name="value"/> is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.CopyTo(NAnt.Core.Types.XsltParameter[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.IndexOf(NAnt.Core.Types.XsltParameter)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Types.XsltParameter"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.XsltParameter"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Types.XsltParameter"/>. If the <see cref="T:NAnt.Core.Types.XsltParameter"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.Insert(System.Int32,NAnt.Core.Types.XsltParameter)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Types.XsltParameter"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Types.XsltParameter"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Types.XsltParameterEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterCollection.Remove(NAnt.Core.Types.XsltParameter)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Types.XsltParameter"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.Types.XsltParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.Types.XsltParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.Types.XsltParameter"/> with the specified name.
            </summary>
            <param name="value">The name of the <see cref="T:NAnt.Core.Types.XsltParameter"/> to get.</param>
        </member>
        <member name="T:NAnt.Core.Types.XsltParameterEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Types.XsltParameter"/> elements of a <see cref="T:NAnt.Core.Types.XsltParameterCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterEnumerator.#ctor(NAnt.Core.Types.XsltParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Types.XsltParameterEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Types.XsltParameterCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Types.XsltParameterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Types.XsltParameterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.Util.AssemblyResolver">
            <summary> 
            Resolves assemblies by caching assembly that were loaded.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.AssemblyResolver.#ctor">
            <summary> 
            Initializes an instanse of the <see cref="T:NAnt.Core.Util.AssemblyResolver"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.AssemblyResolver.Attach">
            <summary> 
            Installs the assembly resolver by hooking up to the 
            <see cref="F:System.AppDomain.AssemblyResolve"/> event.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.AssemblyResolver.Detach">
            <summary> 
            Uninstalls the assembly resolver.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.AssemblyResolver.AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary> 
            Resolves an assembly not found by the system using the assembly 
            cache.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:System.ResolveEventArgs"/> that contains the event data.</param>
            <returns>
            The loaded assembly, or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:NAnt.Core.Util.AssemblyResolver.AssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Occurs when an assembly is loaded. The loaded assembly is added 
            to the assembly cache.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">An <see cref="T:System.AssemblyLoadEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:NAnt.Core.Util.AssemblyResolver._assemblyCache">
            <summary>
            Holds the loaded assemblies.
            </summary>
        </member>
        <member name="T:NAnt.Core.Util.CommandLineArgument">
            <summary>
            Represents a valid command-line argument.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgument.Finish(System.Object)">
            <summary>
            Sets the value of the argument on the specified object.
            </summary>
            <param name="destination">The object on which the value of the argument should be set.</param>
            <exception cref="T:NAnt.Core.Util.CommandLineArgumentException">The argument is required and no value was specified.</exception>
            <exception cref="T:System.NotSupportedException">
            <para>
            The matching property is collection-based, but is not initialized 
            and cannot be written to.
            </para>
            <para>-or-</para>
            <para>
            The matching property is collection-based, but has no strongly-typed
            Add method.
            </para>
            <para>-or-</para>
            <para>
            The matching property is collection-based, but the signature of the 
            Add method is not supported.
            </para>
            </exception>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgument.SetValue(System.String)">
            <summary>
            Assigns the specified value to the argument.
            </summary>
            <param name="value">The value that should be assigned to the argument.</param>
            <exception cref="T:NAnt.Core.Util.CommandLineArgumentException">
            <para>Duplicate argument.</para>
            <para>-or-</para>
            <para>Invalid value.</para>
            </exception>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.ValueType">
            <summary>
            Gets the underlying <see cref="P:NAnt.Core.Util.CommandLineArgument.Type"/> of the argument.
            </summary>
            <value>The underlying <see cref="P:NAnt.Core.Util.CommandLineArgument.Type"/> of the argument.</value>
            <remarks>
            If the <see cref="P:NAnt.Core.Util.CommandLineArgument.Type"/> of the argument is a collection type,
            this property will returns the underlying type of that collection.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.LongName">
            <summary>
            Gets the long name of the argument.
            </summary>
            <value>The long name of the argument.</value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.ShortName">
            <summary>
            Gets the short name of the argument.
            </summary>
            <value>The short name of the argument.</value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.Description">
            <summary>
            Gets the description of the argument.
            </summary>
            <value>The description of the argument.</value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.IsRequired">
            <summary>
            Gets a value indicating whether the argument is required.
            </summary>
            <value>
            <see langword="true" /> if the argument is required; otherwise, 
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.SeenValue">
            <summary>
            Gets a value indicating whether a mathing command-line argument 
            was already found.
            </summary>
            <value>
            <see langword="true" /> if a matching command-line argument was 
            already found; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.AllowMultiple">
            <summary>
            Gets a value indicating whether the argument can be specified multiple
            times.
            </summary>
            <value>
            <see langword="true" /> if the argument may be specified multiple 
            times; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.Unique">
            <summary>
            Gets a value indicating whether the argument can only be specified once
            with a certain value.
            </summary>
            <value>
            <see langword="true" /> if the argument should always have a unique 
            value; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.Type">
            <summary>
            Gets the <see cref="P:NAnt.Core.Util.CommandLineArgument.Type"/> of the property to which the argument
            is applied.
            </summary>
            <value>
            The <see cref="P:NAnt.Core.Util.CommandLineArgument.Type"/> of the property to which the argument is
            applied.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.IsCollection">
            <summary>
            Gets a value indicating whether the argument is collection-based.
            </summary>
            <value>
            <see langword="true" /> if the argument is collection-based; otherwise, 
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.IsArray">
            <summary>
            Gets a value indicating whether the argument is array-nased.
            </summary>
            <value>
            <see langword="true" /> if the argument is array-based; otherwise, 
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.IsDefault">
            <summary>
            Gets a value indicating whether the argument is the default argument.
            </summary>
            <value>
            <see langword="true" /> if the argument is the default argument; 
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgument.IsExclusive">
            <summary>
            Gets a value indicating whether the argument cannot be combined with
            other arguments.
            </summary>
            <value>
            <see langword="true" /> if the argument cannot be combined with other 
            arguments; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="T:NAnt.Core.Util.CommandLineArgumentAttribute">
            <summary>
            Allows control of command line parsing.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentAttribute.#ctor(NAnt.Core.Util.CommandLineArgumentTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentAttribute"/> class
            with the specified argument type.
            </summary>
            <param name="argumentType">Specifies the checking to be done on the argument.</param>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgumentAttribute.Type">
            <summary>
            Gets or sets the checking to be done on the argument.
            </summary>
            <value>The checking that should be done on the argument.</value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgumentAttribute.Name">
            <summary>
            Gets or sets the long name of the argument.
            </summary>
            <value>The long name of the argument.</value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgumentAttribute.ShortName">
            <summary>
            Gets or sets the short name of the argument.
            </summary>
            <value>The short name of the argument.</value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgumentAttribute.Description">
            <summary>
            Gets or sets the description of the argument.
            </summary>
            <value>The description of the argument.</value>
        </member>
        <member name="T:NAnt.Core.Util.CommandLineArgumentCollection">
            <summary>
            Contains a strongly typed collection of <see cref="T:NAnt.Core.Util.CommandLineArgument"/> objects.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.#ctor(NAnt.Core.Util.CommandLineArgumentCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentCollection"/> class
            with the specified <see cref="T:NAnt.Core.Util.CommandLineArgumentCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.#ctor(NAnt.Core.Util.CommandLineArgument[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.Util.CommandLineArgument"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.Add(NAnt.Core.Util.CommandLineArgument)">
            <summary>
            Adds a <see cref="T:NAnt.Core.Util.CommandLineArgument"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Util.CommandLineArgument"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.AddRange(NAnt.Core.Util.CommandLineArgument[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Util.CommandLineArgument"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.Util.CommandLineArgument"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.AddRange(NAnt.Core.Util.CommandLineArgumentCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.Util.CommandLineArgumentCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.Util.CommandLineArgumentCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.Contains(NAnt.Core.Util.CommandLineArgument)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.Util.CommandLineArgument"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Util.CommandLineArgument"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.CopyTo(NAnt.Core.Util.CommandLineArgument[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.IndexOf(NAnt.Core.Util.CommandLineArgument)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.Util.CommandLineArgument"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Util.CommandLineArgument"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.Util.CommandLineArgument"/>. If the <see cref="T:NAnt.Core.Util.CommandLineArgument"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.Insert(System.Int32,NAnt.Core.Util.CommandLineArgument)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.Util.CommandLineArgument"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.Util.CommandLineArgument"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.Util.CommandLineArgumentEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentCollection.Remove(NAnt.Core.Util.CommandLineArgument)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.Util.CommandLineArgument"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgumentCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgumentCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.Util.CommandLineArgument"/> with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:NAnt.Core.Util.CommandLineArgument"/> to get.</param>
        </member>
        <member name="T:NAnt.Core.Util.CommandLineArgumentEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.Util.CommandLineArgument"/> elements of a <see cref="T:NAnt.Core.Util.CommandLineArgumentCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentEnumerator.#ctor(NAnt.Core.Util.CommandLineArgumentCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.Util.CommandLineArgumentCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineArgumentEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.Util.CommandLineArgumentException">
            <summary>
            The exception that is thrown when one of the command-line arguments provided 
            is not valid.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentException"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentException"/> class
            with a descriptive message.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentException"/> class
            with a descriptive message and an inner exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="innerException">A nested exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentException"/> class 
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:NAnt.Core.Util.CommandLineArgumentTypes">
            <summary>
            Used to control parsing of command-line arguments.
            </summary>
        </member>
        <member name="F:NAnt.Core.Util.CommandLineArgumentTypes.Required">
            <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
        </member>
        <member name="F:NAnt.Core.Util.CommandLineArgumentTypes.Unique">
            <summary>
            Only valid in conjunction with Multiple.
            Duplicate values will result in an error.
            </summary>
        </member>
        <member name="F:NAnt.Core.Util.CommandLineArgumentTypes.Multiple">
            <summary>
            Inidicates that the argument may be specified more than once.
            Only valid if the argument is a collection
            </summary>
        </member>
        <member name="F:NAnt.Core.Util.CommandLineArgumentTypes.Exclusive">
            <summary>
            Inidicates that if this argument is specified, no other arguments may be specified.
            </summary>
        </member>
        <member name="F:NAnt.Core.Util.CommandLineArgumentTypes.AtMostOnce">
            <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
        </member>
        <member name="F:NAnt.Core.Util.CommandLineArgumentTypes.MultipleUnique">
            <summary>
            The default type for collection arguments.
            The argument is permitted to occur multiple times, but duplicate 
            values will cause an error to be reported.
            </summary>
        </member>
        <member name="T:NAnt.Core.Util.CommandLineParser">
            <summary>
            Commandline parser.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineParser.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineParser"/> class
            using possible arguments deducted from the specific <see cref="T:System.Type"/>.
            </summary>
            <param name="argumentSpecification">The <see cref="T:System.Type"/> from which the possible command-line arguments should be retrieved.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="argumentSpecification"/> is a null reference.</exception>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineParser.Parse(System.String[],System.Object)">
            <summary>
            Parses an argument list.
            </summary>
            <param name="args">The arguments to parse.</param>
            <param name="destination">The destination object on which properties will be set corresponding to the specified arguments.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is a null reference.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:System.Type"/> of <paramref name="destination"/> does not match the argument specification that was used to initialize the parser.</exception>
        </member>
        <member name="M:NAnt.Core.Util.CommandLineParser.GetCommandLineAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Returns the <see cref="T:NAnt.Core.Util.CommandLineArgumentAttribute"/> that's applied 
            on the specified property.
            </summary>
            <param name="propertyInfo">The property of which applied <see cref="T:NAnt.Core.Util.CommandLineArgumentAttribute"/> should be returned.</param>
            <returns>
            The <see cref="T:NAnt.Core.Util.CommandLineArgumentAttribute"/> that's applied to the 
            <paramref name="propertyInfo"/>, or a null reference if none was applied.
            </returns>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineParser.LogoBanner">
            <summary>
            Gets a logo banner using version and copyright attributes defined on the 
            <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/> or the 
            <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/>.
            </summary>
            <value>
            A logo banner.
            </value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineParser.Usage">
            <summary>
            Gets the usage instructions.
            </summary>
            <value>The usage instructions.</value>
        </member>
        <member name="P:NAnt.Core.Util.CommandLineParser.NoArgs">
            <summary>
            Gets a value indicating whether no arguments were specified on the
            command line.
            </summary>
        </member>
        <member name="T:NAnt.Core.Util.DefaultCommandLineArgumentAttribute">
            <summary>
            Marks a command-line option as being the default option.  When the name of 
            a command-line argument is not specified, this option will be assumed.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.DefaultCommandLineArgumentAttribute.#ctor(NAnt.Core.Util.CommandLineArgumentTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.CommandLineArgumentAttribute"/> class
            with the specified argument type.
            </summary>
            <param name="argumentType">Specifies the checking to be done on the argument.</param>
        </member>
        <member name="T:NAnt.Core.Util.FileUtils">
            <summary>
            Groups a set of useful file manipulation methods.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.FileUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.FileUtils"/> class.
            </summary>
            <remarks>
            Prevents instantiation of the <see cref="T:NAnt.Core.Util.FileUtils"/> class.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Util.FileUtils.CopyFile(System.String,System.String,System.Text.Encoding,NAnt.Core.Types.FilterSetCollection)">
            <summary>
            Copies a file while replacing the tokens identified by the given
            <see cref="T:NAnt.Core.Types.FilterSetCollection"/>.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> used when filter-copying the file.</param>
            <param name="filtersets">The collection of filtersets that should be applied to the file.</param>
        </member>
        <member name="M:NAnt.Core.Util.FileUtils.MoveFile(System.String,System.String,System.Text.Encoding,NAnt.Core.Types.FilterSetCollection)">
            <summary>
            Moves a file while replacing the tokens identified by the given
            <see cref="T:NAnt.Core.Types.FilterSetCollection"/>.
            </summary>
            <param name="sourceFileName">The file to move.</param>
            <param name="destinationFileName">The name of the destination file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> used when filter-copying the file.</param>
            <param name="filtersets">The collection of filtersets that should be applied to the file.</param>
        </member>
        <member name="T:NAnt.Core.Util.StringUtils">
            <summary>
            Groups a set of useful <see cref="T:System.String"/> manipulation and validation 
            methods.
            </summary>
        </member>
        <member name="M:NAnt.Core.Util.StringUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Util.StringUtils"/> class.
            </summary>
            <remarks>
            Prevents instantiation of the <see cref="T:NAnt.Core.Util.StringUtils"/> class.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Util.StringUtils.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether or not the specified <see cref="T:System.String"/> is 
            <see langword="null"/> or an <see cref="F:System.String.Empty"/> string.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is <see langword="null"/>
            or an empty string (""); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.Util.StringUtils.ConvertEmptyToNull(System.String)">
            <summary>
            Converts an empty string ("") to <see langword="null" />.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            <see langword="null" /> if <paramref name="value" /> is an empty 
            string ("") or <see langword="null" />; otherwise, <paramref name="value" />.
            </returns>
        </member>
        <member name="M:NAnt.Core.Util.StringUtils.ConvertNullToEmpty(System.String)">
            <summary>
            Converts <see langword="null" /> to an empty string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            An empty string if <paramref name="value" /> is <see langword="null" />;
            otherwise, <paramref name="value" />.
            </returns>
        </member>
        <member name="M:NAnt.Core.Util.StringUtils.Join(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Concatenates a specified separator <see cref="T:System.String"/> between each 
            element of a specified <see cref="T:System.Collections.Specialized.StringCollection"/>, yielding a 
            single concatenated string.
            </summary>
            <param name="separator">A <see cref="T:System.String"/>.</param>
            <param name="value">A <see cref="T:System.Collections.Specialized.StringCollection"/>.</param>
            <returns>
            A <see cref="T:System.String"/> consisting of the elements of <paramref name="value"/> 
            interspersed with the separator string.
            </returns>
            <remarks>
            <para>
            For example if <paramref name="separator"/> is ", " and the elements 
            of <paramref name="value"/> are "apple", "orange", "grape", and "pear", 
            <see cref="M:NAnt.Core.Util.StringUtils.Join(System.String,System.Collections.Specialized.StringCollection)"/> returns "apple, orange, 
            grape, pear".
            </para>
            <para>
            If <paramref name="separator"/> is <see langword="null"/>, an empty 
            string (<see cref="F:System.String.Empty"/>) is used instead.
            </para>
            </remarks>
        </member>
        <member name="T:NAnt.Core.BuildException">
            <summary>
            Thrown whenever an error occurs during the build.
            </summary>
        </member>
        <member name="F:NAnt.Core.BuildException._location">
            <summary>            The location of the exception in the build document (xml file).            </summary>
        </member>
        <member name="M:NAnt.Core.BuildException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildException"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.BuildException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildException"/> class 
            with a descriptive message.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
        </member>
        <member name="M:NAnt.Core.BuildException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildException"/> class
            with the specified descriptive message and inner exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="innerException">A nested exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NAnt.Core.BuildException.#ctor(System.String,NAnt.Core.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildException"/> class
            with a descriptive message and the location in the build file that 
            caused the exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="location">The location in the build file where the exception occured.</param>
        </member>
        <member name="M:NAnt.Core.BuildException.#ctor(System.String,NAnt.Core.Location,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildException"/> class
            with a descriptive message, the location in the build file and an 
            instance of the exception that is the cause of the current exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="location">The location in the build file where the exception occured.</param>
            <param name="innerException">A nested exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NAnt.Core.BuildException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildException"/> class 
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NAnt.Core.BuildException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> provided.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:NAnt.Core.BuildException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="P:NAnt.Core.BuildException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>The error message that explains the reason for the exception.</value>
            <remarks>
            Adds location information to the message, if available.
            </remarks>
        </member>
        <member name="T:NAnt.Core.CommandLineOptions">
            <summary>
            Represents the set of command-line options supported by NAnt.
            </summary>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.DefaultFramework">
            <summary>
            Gets or sets the default framework to use (overrides 
            NAnt.exe.config settings)
            </summary>
            <value>
            The framework that should be used.
            </value>
            <remarks>
            For a list of possible frameworks, see NAnt.exe.config, possible
            values include "net-1.0", "net-1.1", etc.
            </remarks>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.BuildFile">
            <summary>
            Gets or sets the buildfile that should be executed.
            </summary>
            <value>
            The buildfile that should be executed.
            </value>
            <remarks>
            Can be both a file or an URI.
            </remarks>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.Verbose">
            <summary>
            Gets or sets a value indicating whether more information should be
            displayed during the build process.
            </summary>
            <value>
            <see langword="true" /> if more information should be displayed; 
            otherwise, <see langword="false" />. The default is <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.Debug">
            <summary>
            Gets or sets a value indicating whether debug information should be
            displayed during the build process.
            </summary>
            <value>
            <see langword="true" /> if debug information should be displayed; 
            otherwise, <see langword="false" />. The default is <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.Quiet">
            <summary>
            Gets or sets a value indicating whether only error and debug debug messages should be
            displayed during the build process.
            </summary>
            <value>
            <see langword="true" /> if only error or warning messages should be 
            displayed; otherwise, <see langword="false" />. The default is
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.FindInParent">
            <summary>
            Gets a value indicating whether parent directories should be searched
            for a buildfile.
            </summary>
            <value>
            <see langword="true" /> if parent directories should be searched for 
            a build file; otherwise, <see langword="false" />. The default is
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.IndentationLevel">
            <summary>
            Gets or sets the indentation level of the build output.
            </summary>
            <value>
            The indentation level of the build output. The default is <c>0</c>.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.Properties">
            <summary>
            Gets or sets the list of properties that should be set.
            </summary>
            <value>
            The list of properties that should be set.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.LoggerType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of logger to add to the list
            of listeners.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of logger to add to the list of
            listeners.
            </value>
            <remarks>
            The <see cref="P:NAnt.Core.CommandLineOptions.LoggerType"/> should derive from <see cref="T:NAnt.Core.IBuildLogger"/>.
            </remarks>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.LogFile">
            <summary>
            Gets or sets the name of the file to log output to.
            </summary>
            <value>
            The name of the file to log output to.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.Listeners">
            <summary>
            Gets a collection containing fully qualified type names of classes 
            implementating <see cref="T:NAnt.Core.IBuildListener"/> that should be added 
            to the project as listeners.
            </summary>
            <value>
            A collection of fully qualified type names that should be added as 
            listeners to the <see cref="T:NAnt.Core.Project"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.ShowProjectHelp">
            <summary>
            Gets or sets a value indicating whether <see cref="T:NAnt.Core.Project"/> help 
            should be printed.
            </summary>
            <value>
            <see langword="true"/> if <see cref="T:NAnt.Core.Project"/> help should be 
            printed; otherwise, <see langword="false"/>. The default is
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.NoLogo">
            <summary>
            Gets or sets a value indicating whether the logo banner should be
            printed.
            </summary>
            <value>
            <see langword="true" /> if the logo banner should be printed; otherwise, 
            <see langword="false" />. The default is <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.ShowHelp">
            <summary>
            Gets or sets a value indicating whether the NAnt help should be
            printed.
            </summary>
            <value>
            <see langword="true" /> if NAnt help should be printed; otherwise, 
            <see langword="false" />. The default is <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.CommandLineOptions.Targets">
            <summary>
            Gets a collection containing the targets that should be executed.
            </summary>
            <value>
            A collection that contains the targets that should be executed.
            </value>
        </member>
        <member name="T:NAnt.Core.ConfigurationSection">
            <summary>
            Custom configuration section handler for the <nantsettings/> element.
            </summary>
        </member>
        <member name="M:NAnt.Core.ConfigurationSection.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            This just passed things through. Return the node read from the config file.
            </summary>
        </member>
        <member name="T:NAnt.Core.ConsoleDriver">
            <summary>
            Main entry point to NAnt that is called by the ConsoleStub.
            </summary>
        </member>
        <member name="M:NAnt.Core.ConsoleDriver.Main(System.String[])">
            <summary>
            Starts NAnt. This is the Main entry point.
            </summary>
            <param name="args">Command Line args, or whatever you want to pass it. They will treated as Command Line args.</param>
            <returns>
            The exit code.
            </returns>
        </member>
        <member name="M:NAnt.Core.ConsoleDriver.ShowProjectHelp(System.Xml.XmlDocument)">
            <summary>
            Prints the projecthelp to the console.
            </summary>
            <param name="buildDoc">The build file to show help for.</param>
            <remarks>
            <paramref name="buildDoc" /> is loaded and transformed with 
            <c>ProjectHelp.xslt</c>, which is an embedded resource.
            </remarks>
        </member>
        <member name="M:NAnt.Core.ConsoleDriver.GetBuildFileName(System.String,System.String,System.Boolean)">
            <summary>
            Gets the file name for the build file in the specified directory.
            </summary>
            <param name="directory">The directory to look for a build file.  When in doubt use Environment.CurrentDirectory for directory.</param>
            <param name="searchPattern">Look for a build file with this pattern or name.  If null look for a file that matches the default build pattern (*.build).</param>
            <param name="findInParent">Whether or not to search the parent directories for a build file.</param>
            <returns>The path to the build file or <c>null</c> if no build file could be found.</returns>
        </member>
        <member name="M:NAnt.Core.ConsoleDriver.CreateLogger(System.String)">
            <summary>
            Dynamically constructs an <see cref="T:NAnt.Core.IBuildLogger"/> instance of 
            the class specified.
            </summary>
            <remarks>
            <para>
            At this point, only looks in the assembly where <see cref="T:NAnt.Core.IBuildLogger"/> 
            is defined.
            </para>
            </remarks>
            <param name="className">The fully qualified name of the logger that should be instantiated.</param>
            <exception cref="T:System.ArgumentException"><paramref name="className"/> does not implement <see cref="T:NAnt.Core.IBuildLogger"/>.</exception>
        </member>
        <member name="M:NAnt.Core.ConsoleDriver.CreateListener(System.String)">
            <summary>
            Dynamically constructs an <see cref="T:NAnt.Core.IBuildListener"/> instance of 
            the class specified.
            </summary>
            <remarks>
            <para>
            At this point, only looks in the assembly where <see cref="T:NAnt.Core.IBuildListener"/> 
            is defined.
            </para>
            </remarks>
            <param name="className">The fully qualified name of the listener that should be instantiated.</param>
            <exception cref="T:System.ArgumentException"><paramref name="className"/> does not implement <see cref="T:NAnt.Core.IBuildListener"/>.</exception>
        </member>
        <member name="M:NAnt.Core.ConsoleDriver.AddBuildListeners(NAnt.Core.CommandLineOptions,NAnt.Core.Project)">
            <summary>
            Add the listeners specified in the command line arguments,
            along with the default listener, to the specified project.
            </summary>
            <param name="cmdlineOptions">The command-line options.</param>
            <param name="project">The <see cref="T:NAnt.Core.Project"/> to add listeners to.</param>
        </member>
        <member name="M:NAnt.Core.ConsoleDriver.ShowHelp(NAnt.Core.Util.CommandLineParser)">
            <summary>
            Spits out generic help info to the console.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilder.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> class
            for the specified Element class.
            </summary>
            <param name="className">The class representing the Element.</param>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilder.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> class
            for the specified Element class in the assembly specified.
            </summary>
            <param name="className">The class representing the Element.</param>
            <param name="assemblyFileName">The assembly containing the Element.</param>/// 
        </member>
        <member name="T:NAnt.Core.DataTypeBaseBuilderCollection">
            <summary>
            Contains a strongly typed collection of <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> objects.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.DataTypeBaseBuilderCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.#ctor(NAnt.Core.DataTypeBaseBuilderCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.DataTypeBaseBuilderCollection"/> class
            with the specified <see cref="T:NAnt.Core.DataTypeBaseBuilderCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.#ctor(NAnt.Core.DataTypeBaseBuilder[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.DataTypeBaseBuilderCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.Add(NAnt.Core.DataTypeBaseBuilder)">
            <summary>
            Adds a <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.AddRange(NAnt.Core.DataTypeBaseBuilder[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.AddRange(NAnt.Core.DataTypeBaseBuilderCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.DataTypeBaseBuilderCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.DataTypeBaseBuilderCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.Contains(NAnt.Core.DataTypeBaseBuilder)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> for the specified 
            task is in the collection.
            </summary>
            <param name="taskName">The name of task for which the <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> should be located in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> for 
            the specified task is found in the collection; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.CopyTo(NAnt.Core.DataTypeBaseBuilder[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.IndexOf(NAnt.Core.DataTypeBaseBuilder)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.DataTypeBaseBuilder"/>. If the <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.Insert(System.Int32,NAnt.Core.DataTypeBaseBuilder)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.DataTypeBaseBuilderEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderCollection.Remove(NAnt.Core.DataTypeBaseBuilder)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.DataTypeBaseBuilderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.DataTypeBaseBuilderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> for the specified task.
            </summary>
            <param name="dataTypeName">The name of task for which the <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> should be located in the collection.</param> 
        </member>
        <member name="T:NAnt.Core.DataTypeBaseBuilderEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.DataTypeBaseBuilder"/> elements of a <see cref="T:NAnt.Core.DataTypeBaseBuilderCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderEnumerator.#ctor(NAnt.Core.DataTypeBaseBuilderCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.DataTypeBaseBuilderEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.DataTypeBaseBuilderCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseBuilderEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.DataTypeBaseBuilderEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.DataTypeBaseDictionary"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.DataTypeBaseDictionary"/> class
            with the specified capacity.
            </summary>
        </member>
        <member name="M:NAnt.Core.DataTypeBaseDictionary.Inherit(NAnt.Core.DataTypeBaseDictionary)">
            <summary>
            Inherits Properties from an existing property
            dictionary Instance
            </summary>
            <param name="source">DataType list to inherit</param>       
        </member>
        <member name="T:NAnt.Core.DirectoryScanner">
            <summary>
            Used for searching filesystem based on given include/exclude rules.
            </summary>
            <example>
                <para>Simple client code for testing the class.</para>
                <code>
                    while (true) {
                        DirectoryScanner scanner = new DirectoryScanner();
            
                        Console.Write("Scan Basedirectory : ");
                        string s = Console.ReadLine();
                        if (s.Length == 0) break;
                        scanner.BaseDirectory = s;
            
                        while(true) {
                            Console.Write("Include pattern : ");
                            s = Console.ReadLine();
                            if (s.Length == 0) break;
                            scanner.Includes.Add(s);
                        }
            
                        while(true) {
                            Console.Write("Exclude pattern : ");
                            s = Console.ReadLine();
                            if (s.Length == 0) break;
                            scanner.Excludes.Add(s);
                        }
            
                        foreach (string name in scanner.FileNames)
                            Console.WriteLine("file:" + name);
                        foreach (string name in scanner.DirectoryNames)
                            Console.WriteLine("dir :" + name);
            
                        Console.WriteLine("");
                    }
                </code>
            </example>
            <history>
                <change date="20020220" author="Ari Hännikäinen">Added support for absolute paths and relative paths refering to parent directories ( ../ )</change>
                <change date="20020221" author="Ari Hännikäinen">Changed implementation because of performance reasons - now scanning each directory only once</change>
                <change date="20030224" author="Brian Deacon (bdeacon at vidya dot com)">
                    Fixed a bug that was causing absolute pathnames to turn into an invalid regex pattern, and thus never match.
                </change>
            </history>
        </member>
        <member name="M:NAnt.Core.DirectoryScanner.Scan">
            <summary>
            Uses <see cref="P:NAnt.Core.DirectoryScanner.Includes"/> and <see cref="P:NAnt.Core.DirectoryScanner.Excludes"/> search criteria (relative to 
            <see cref="P:NAnt.Core.DirectoryScanner.BaseDirectory"/> or absolute), to search for filesystem objects.
            </summary>
            <history>
                <change date="20020220" author="Ari Hännikäinen">Totally changed the scanning strategy</change>
                <change date="20020221" author="Ari Hännikäinen">Changed it again because of performance reasons</change>
            </history>
        </member>
        <member name="M:NAnt.Core.DirectoryScanner.ConvertPatterns(NAnt.Core.DirScannerStringCollection,NAnt.Core.DirScannerStringCollection,System.Boolean)">
            <summary>
            Parses specified NAnt search patterns for search directories and 
            corresponding regex patterns.
            </summary>
            <param name="nantPatterns">In. NAnt patterns. Absolute or relative paths.</param>
            <param name="regexPatterns">Out. Regex patterns. Absolute canonical paths.</param>
            <param name="addSearchDirectories">In. Whether to allow a pattern to add search directories.</param>
            <history>
                <change date="20020221" author="Ari Hännikäinen">Created</change>
            </history>
        </member>
        <member name="M:NAnt.Core.DirectoryScanner.ParseSearchDirectoryAndPattern(System.String,System.String@,System.Boolean@,System.String@)">
            <summary>
            Given a NAnt search pattern returns a search directory and an regex 
            search pattern.
            </summary>
            <param name="originalNAntPattern">NAnt searh pattern (relative to the Basedirectory OR absolute, relative paths refering to parent directories ( ../ ) also supported)</param>
            <param name="searchDirectory">Out. Absolute canonical path to the directory to be searched</param>
            <param name="recursive">Out. Whether the pattern is potentially recursive or not</param>
            <param name="regexPattern">Out. Regex search pattern (absolute canonical path)</param>
            <history>
                <change date="20020220" author="Ari Hännikäinen">Created</change>
                <change date="20020221" author="Ari Hännikäinen">Returning absolute regex patterns instead of relative nant patterns</change>
                <change date="20030224" author="Brian Deacon (bdeacon at vidya dot com)">
                Added replacing of slashes with Path.DirectorySeparatorChar to make this OS-agnostic.  Also added the Path.IsPathRooted check
                to support absolute pathnames to prevent basedir = "/foo/bar" and pattern="/fudge/nugget" from being incorrectly turned into 
                "/foo/bar/fudge/nugget".  (pattern = "fudge/nugget" would still be treated as relative to basedir)
                </change>
            </history>
        </member>
        <member name="M:NAnt.Core.DirectoryScanner.ScanDirectory(System.String,System.Boolean)">
            <summary>
            Searches a directory recursively for files and directories matching 
            the search criteria.
            </summary>
            <param name="path">Directory in which to search (absolute canonical path)</param>
            <param name="recursive">Whether to scan recursively or not</param>
            <history>
                <change date="20020221" author="Ari Hännikäinen">Checking if the directory has already been scanned</change>
            </history>
        </member>
        <member name="M:NAnt.Core.DirectoryScanner.ToRegexPattern(System.String,System.String)">
            <summary>
            Converts search pattern to a regular expression pattern.
            </summary>
            <param name="baseDir">Base directory for the search.</param>
            <param name="nantPattern">Search pattern relative to the search directory.</param>
            <returns>Regular expresssion (absolute path) for searching matching file/directory names.</returns>
            <history>
                <change date="20020220" author="Ari Hännikäinen">Added parameter baseDir, using  it instead of class member variable</change>
            </history>
        </member>
        <member name="P:NAnt.Core.DirectoryScanner.Includes">
            <summary>
            Gets the collection of include patterns.
            </summary>
        </member>
        <member name="P:NAnt.Core.DirectoryScanner.Excludes">
            <summary>
            Gets the collection of exclude patterns.
            </summary>
        </member>
        <member name="P:NAnt.Core.DirectoryScanner.FileNames">
            <summary>
            Gets the list of files that match the given patterns.
            </summary>
        </member>
        <member name="P:NAnt.Core.DirectoryScanner.DirectoryNames">
            <summary>
            Gets the list of directories that match the given patterns.
            </summary>
        </member>
        <member name="P:NAnt.Core.DirectoryScanner.ScannedDirectories">
            <summary>
            Gets the list of directories that were scanned for files.
            </summary>
        </member>
        <member name="M:NAnt.Core.DirScannerStringCollection.ToString">
            <summary>
            Creates a string representing a list of the strings in the collection.
            </summary>
            <returns>
            A string that represents the contents.
            </returns>
        </member>
        <member name="T:NAnt.Core.FrameworkInfo">
            <summary>
            Encalsulates information about installed frameworks incuding version 
            information and directory locations for finding tools.
            </summary>
        </member>
        <member name="M:NAnt.Core.FrameworkInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,NAnt.Core.PropertyDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.FrameworkInfo"/> class
            with a name, description, version, runtime engine, directory information
            and properties.
            </summary>
            <param name="name">The name of the framework.</param>
            <param name="description">The description of the framework.</param>
            <param name="version">The version number of the framework.</param>
            <param name="frameworkDir">The directory of the framework.</param>
            <param name="sdkDir">The directory containing the SDK tools for the framework, if available.</param>
            <param name="frameworkAssemblyDir">The directory containing the system assemblies for the framework.</param>
            <param name="runtimeEngine">The name of the runtime engine, if required.</param>
            <param name="properties">Collection of framework specific properties.</param>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.Name">
            <summary>
            Gets the name of the framework.
            </summary>
            <value>The name of the framework.</value>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.Description">
            <summary>
            Gets the description of the framework.
            </summary>
            <value>
            The description of the framework.
            </value>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.Version">
            <summary>
            Gets the version of the framework.
            </summary>
            <value>
            The version of the framework.
            </value>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.FrameworkDirectory">
            <summary>
            Gets the base directory of the framework tools for the framework.
            </summary>
            <value>
            The base directory of the framework tools for the framework.
            </value>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.RuntimeEngine">
            <summary>
            Gets the path to the runtime engine for this framework.
            </summary>
            <value>
            The path to the runtime engine for the framework or null if no
            runtime gine is configured for the framework.
            </value>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.FrameworkAssemblyDirectory">
            <summary>
            Gets the directory where the system assemblies for the framework 
            are located.
            </summary>
            <value>
            The directory where the system assemblies for the framework are 
            located.
            </value>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.SdkDirectory">
            <summary>
            Gets the directory containing the SDK tools for the framework.
            </summary>
            <value>
            The directory containing the SDK tools for the framework or a null 
            refererence if the sdk directory
            </value>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.Properties">
            <summary>
            Gets the properties defined for this framework.
            </summary>
            <value>The properties defined for this framework.</value>
            <remarks>
            <para>
            This is the collection of properties for this framework in the 
            NAnt configuration file.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Core.FrameworkInfo.EnvironmentVariables">
            <summary>
            Gets or sets the collection of environment variables that should be 
            passed to external programs that are launched in the runtime engine 
            of the current framework.
            </summary>
            <value>
            The collection of environment variables that should be passed to 
            external programs that are launched in the runtime engine of the
            current framework.
            </value>
        </member>
        <member name="M:NAnt.Core.FrameworkInfoDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.FrameworkInfoDictionary"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.FrameworkInfoDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.FrameworkInfoDictionary"/> class
            with the specified capacity.
            </summary>
        </member>
        <member name="T:NAnt.Core.Location">
            <summary>
            Stores the file name, line number and column number to record a position in a text file.
            </summary>
        </member>
        <member name="M:NAnt.Core.Location.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Creates a location consisting of a file name, line number and column number.</summary>
            <remarks>fileName can be a local URI resource, e.g., file:///C:/WINDOWS/setuplog.txt</remarks>
        </member>
        <member name="M:NAnt.Core.Location.#ctor(System.String)">
            <summary>Creates a location consisting of a file name.</summary>
            <remarks>fileName can be a local URI resource, e.g., file:///C:/WINDOWS/setuplog.txt</remarks>
        </member>
        <member name="M:NAnt.Core.Location.#ctor">
            <summary>Creates an "unknown" location.</summary>
        </member>
        <member name="M:NAnt.Core.Location.Init(System.String,System.Int32,System.Int32)">
            <summary>Private Init function.</summary>
        </member>
        <member name="M:NAnt.Core.Location.ToString">
             <summary>
             Returns the file name, line number and a trailing space. An error
             message can be appended easily. For unknown locations, returns
             an empty string.
            </summary>
        </member>
        <member name="P:NAnt.Core.Location.FileName">
            <summary>Gets a string containing the file name for the location.</summary>
            <remarks>The file name includes both the file path and the extension.</remarks>
        </member>
        <member name="P:NAnt.Core.Location.LineNumber">
            <summary>Gets the line number for the location.</summary>
            <remarks>Lines start at 1.  Will be zero if not specified.</remarks>
        </member>
        <member name="P:NAnt.Core.Location.ColumnNumber">
            <summary>Gets the column number for the location.</summary>
            <remarks>Columns start a 1.  Will be zero if not specified.</remarks>
        </member>
        <member name="T:NAnt.Core.LocationMap">
            <summary>
            Maps XML nodes to the text positions from their original source.
            </summary>
        </member>
        <member name="M:NAnt.Core.LocationMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.LocationMap"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.LocationMap.FileIsMapped(System.String)">
            <summary>
            Determines if a file has been loaded by the current project. 
            </summary>
            <param name="fileOrUri">The file to check.</param>
            <returns>
            <see langword="true" /> if the specified file has already been loaded
            by the current project; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NAnt.Core.LocationMap.Add(System.Xml.XmlDocument)">
            <summary>
            Adds an <see cref="T:System.Xml.XmlDocument"/> to the map.
            </summary>
            <remarks>
            An <see cref="T:System.Xml.XmlDocument"/> can only be added to the map once.
            </remarks>
        </member>
        <member name="M:NAnt.Core.LocationMap.GetLocation(System.Xml.XmlNode)">
            <summary>
            Returns the <see cref="T:NAnt.Core.Location"/> in the XML file for the given node.
            </summary>
            <remarks>
            The <paramref name="node"/> must be from an <see cref="T:System.Xml.XmlDocument"/> 
            that has been added to the map.
            </remarks>
        </member>
        <member name="T:NAnt.Core.LocationMap.TextPosition">
            <summary>
            Represents a position in the build file.
            </summary>
        </member>
        <member name="M:NAnt.Core.LocationMap.TextPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.LocationMap.TextPosition"/>
            with the speified line and column.
            </summary>
            <param name="line">The line coordinate of the position.</param>
            <param name="column">The column coordinate of the position.</param>
        </member>
        <member name="F:NAnt.Core.LocationMap.TextPosition.Line">
            <summary>
            The line coordinate of the position.
            </summary>
        </member>
        <member name="F:NAnt.Core.LocationMap.TextPosition.Column">
            <summary>
            The column coordinate of the position.
            </summary>
        </member>
        <member name="T:NAnt.Core.Level">
            <summary>
            Defines the set of levels recognised by the NAnt logging system.
            </summary>
        </member>
        <member name="F:NAnt.Core.Level.Debug">
            <summary>
            The <see cref="F:NAnt.Core.Level.Debug"/> level designates fine-grained informational 
            events that are most useful to debug a build process.
            </summary>
        </member>
        <member name="F:NAnt.Core.Level.Verbose">
            <summary>
            The <see cref="F:NAnt.Core.Level.Verbose"/> level designates events that offer a more
            detailed view of the build process.
            </summary>
        </member>
        <member name="F:NAnt.Core.Level.Info">
            <summary>
            The <see cref="F:NAnt.Core.Level.Info"/> level designates informational events that
            are useful for getting a high-level view of the build process.
            </summary>
        </member>
        <member name="F:NAnt.Core.Level.Warning">
            <summary>
            The <see cref="F:NAnt.Core.Level.Warning"/> level designates potentionally harmful 
            events.
            </summary>
        </member>
        <member name="F:NAnt.Core.Level.Error">
            <summary>
            The <see cref="F:NAnt.Core.Level.Error"/> level designates error events.
            </summary>
        </member>
        <member name="T:NAnt.Core.BuildEventArgs">
            <summary>
            Class representing an event occurring during a build.
            </summary>
            <remarks>
            <para>
            An event is built by specifying either a project, a task or a target.
            </para>
            <para>
            A <see cref="P:NAnt.Core.BuildEventArgs.Project"/> level event will only have a <see cref="P:NAnt.Core.BuildEventArgs.Project"/> 
            reference.
            </para>
            <para>
            A <see cref="P:NAnt.Core.BuildEventArgs.Target"/> level event will have <see cref="P:NAnt.Core.BuildEventArgs.Project"/> and 
            <see cref="P:NAnt.Core.BuildEventArgs.Target"/> references.
            </para>
            <para>
            A <see cref="P:NAnt.Core.BuildEventArgs.Task"/> level event will have <see cref="P:NAnt.Core.BuildEventArgs.Project"/>, 
            <see cref="P:NAnt.Core.BuildEventArgs.Target"/> and <see cref="P:NAnt.Core.BuildEventArgs.Task"/> references.
            </para>
            </remarks>
        </member>
        <member name="M:NAnt.Core.BuildEventArgs.#ctor(NAnt.Core.Project)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildEventArgs"/>
            class for a <see cref="P:NAnt.Core.BuildEventArgs.Project"/> level event.
            </summary>
            <param name="project">The <see cref="P:NAnt.Core.BuildEventArgs.Project"/> that emitted the event.</param>
        </member>
        <member name="M:NAnt.Core.BuildEventArgs.#ctor(NAnt.Core.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildEventArgs"/>
            class for a <see cref="P:NAnt.Core.BuildEventArgs.Target"/> level event.
            </summary>
            <param name="target">The <see cref="P:NAnt.Core.BuildEventArgs.Target"/> that emitted the event.</param>
        </member>
        <member name="M:NAnt.Core.BuildEventArgs.#ctor(NAnt.Core.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildEventArgs"/>
            class for a <see cref="P:NAnt.Core.BuildEventArgs.Task"/> level event.
            </summary>
            <param name="task">The <see cref="P:NAnt.Core.BuildEventArgs.Task"/> that emitted the event.</param>
        </member>
        <member name="P:NAnt.Core.BuildEventArgs.Message">
            <summary>
            Gets or sets the message associated with this event.
            </summary>
            <value>
            The message associated with this event.
            </value>
        </member>
        <member name="P:NAnt.Core.BuildEventArgs.MessageLevel">
            <summary>
            Gets or sets the priority level associated with this event.
            </summary>
            <value>
            The priority level associated with this event.
            </value>
        </member>
        <member name="P:NAnt.Core.BuildEventArgs.Exception">
            <summary>
            Gets or sets the <see cref="P:NAnt.Core.BuildEventArgs.Exception"/> associated with this event.
            </summary>
            <value>
            The <see cref="P:NAnt.Core.BuildEventArgs.Exception"/> associated with this event.
            </value>
        </member>
        <member name="P:NAnt.Core.BuildEventArgs.Project">
            <summary>
            Gets the <see cref="P:NAnt.Core.BuildEventArgs.Project"/> that fired this event.
            </summary>
            <value>
            The <see cref="P:NAnt.Core.BuildEventArgs.Project"/> that fired this event.
            </value>
        </member>
        <member name="P:NAnt.Core.BuildEventArgs.Target">
            <summary>
            Gets the <see cref="P:NAnt.Core.BuildEventArgs.Target"/> that fired this event.
            </summary>
            <value>
            The <see cref="P:NAnt.Core.BuildEventArgs.Target"/> that fired this event, or a null reference 
            if this is a <see cref="P:NAnt.Core.BuildEventArgs.Project"/> level event.
            </value>
        </member>
        <member name="P:NAnt.Core.BuildEventArgs.Task">
            <summary>
            Gets the <see cref="P:NAnt.Core.BuildEventArgs.Task"/> that fired this event.
            </summary>
            <value>
            The <see cref="P:NAnt.Core.BuildEventArgs.Task"/> that fired this event, or <see langword="null"/>
            if this is a <see cref="P:NAnt.Core.BuildEventArgs.Project"/> or <see cref="P:NAnt.Core.BuildEventArgs.Target"/> level 
            event.
            </value>
        </member>
        <member name="T:NAnt.Core.BuildEventHandler">
            <summary>
            Represents the method that handles the build events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:NAnt.Core.IBuildListener">
            <summary>
            Instances of classes that implement this interface can register to be 
            notified when things happen during a build.
            </summary>
        </member>
        <member name="M:NAnt.Core.IBuildListener.BuildStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a build has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event is fired before any targets have started.
            </remarks>
        </member>
        <member name="M:NAnt.Core.IBuildListener.BuildFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that the last target has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.IBuildListener.TargetStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a target has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.IBuildListener.TargetFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a target has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.IBuildListener.TaskStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.IBuildListener.TaskFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.IBuildListener.MessageLogged(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a message has been logged.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:NAnt.Core.IBuildLogger">
            <summary>
            Interface used by NAnt to log the build output. 
            </summary>
            <remarks>
            Depending on the supplied command-line arguments, NAnt will set the
            <see cref="P:NAnt.Core.IBuildLogger.OutputWriter"/> to <see cref="P:System.Console.Out"/> or a
            <see cref="T:System.IO.StreamWriter"/>  with a file as backend store.
            </remarks>
        </member>
        <member name="M:NAnt.Core.IBuildLogger.Flush">
            <summary>
            Flushes buffered build events or messages to the underlying storage.
            </summary>
        </member>
        <member name="P:NAnt.Core.IBuildLogger.Threshold">
            <summary>
            Gets or sets the highest level of message this logger should respond 
            to.
            </summary>
            <value>The highest level of message this logger should respond to.</value>
            <remarks>
            Only messages with a message level higher than or equal to the given 
            level should actually be written to the log.
            </remarks>
        </member>
        <member name="P:NAnt.Core.IBuildLogger.OutputWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> to which the logger is 
            to send its output.
            </summary>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.DefaultLogger"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.Flush">
            <summary>
            Flushes buffered build events or messages to the underlying storage.
            </summary>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.BuildStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a build has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event is fired before any targets have started.
            </remarks>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.BuildFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that the last target has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.TargetStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a target has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.TargetFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.TaskStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.TaskFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.MessageLogged(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a message has been logged.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            Only messages with a priority higher or equal to the threshold of 
            the logger will actually be output in the build log.
            </remarks>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.Log(System.String)">
            <summary>
            Empty implementation which allows derived classes to receive the
            output that is generated in this logger.
            </summary>
            <param name="message">The message being logged.</param>
        </member>
        <member name="M:NAnt.Core.DefaultLogger.OutputMessage(NAnt.Core.Level,System.String,System.Int32)">
            <summary>
            Outputs an indented message to the build log if its priority is 
            greather than or equal to the <see cref="P:NAnt.Core.DefaultLogger.Threshold"/> of the 
            logger.
            </summary>
            <param name="mesageLevel">The priority of the message to output.</param>
            <param name="message">The message to output.</param>
            <param name="indentationLength">The number of characters that the message should be indented.</param>
        </member>
        <member name="P:NAnt.Core.DefaultLogger.Threshold">
            <summary>
            Gets or sets the highest level of message this logger should respond 
            to.
            </summary>
            <value>
            The highest level of message this logger should respond to.
            </value>
            <remarks>
            Only messages with a message level higher than or equal to the given 
            level should be written to the log.
            </remarks>
        </member>
        <member name="P:NAnt.Core.DefaultLogger.OutputWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> to which the logger is 
            to send its output.
            </summary>
            <value>
            The <see cref="T:System.IO.TextWriter"/> to which the logger sends its output.
            </value>
        </member>
        <member name="T:NAnt.Core.MailLogger">
            <summary>
            Buffers log messages from DefaultLogger, and sends an e-mail with the
            results.
            </summary>
            <remarks>
            The following properties are used to send the mail :
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>MailLogger.mailhost</term>
                    <description>Mail server to use. [default: localhost]</description>
                </item>
                <item>
                    <term>MailLogger.from</term>
                    <description>The address of the e-mail sender.</description>
                </item>
                <item>
                    <term>MailLogger.failure.notify</term>
                    <description>Send build failure e-mails ? [default: true]</description>
                </item>
                <item>
                    <term>MailLogger.success.notify</term>
                    <description>Send build success e-mails ? [default: true]</description>
                </item>
                <item>
                    <term>MailLogger.failure.to</term>
                    <description>The address to send build failure messages to.</description>
                </item>
                <item>
                    <term>MailLogger.success.to</term>
                    <description>The address to send build success messages to </description>
                </item>
                <item>
                    <term>MailLogger.failure.subject</term>
                    <description>subject of build failure messages. [default: "Build Failure"]</description>
                </item>
                <item>
                    <term>MailLogger.success.subject</term>
                    <description>subject of build success messages. [default: "Build Success"]</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:NAnt.Core.MailLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.MailLogger"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.MailLogger.BuildStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a build has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event is fired before any targets have started.
            </remarks>
        </member>
        <member name="M:NAnt.Core.MailLogger.BuildFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that the last target has finished, and send an e-mail with 
            the build results.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.MailLogger.Log(System.String)">
            <summary>
            Receives and buffers log messages.
            </summary>
            <param name="message">The message being logged.</param>
        </member>
        <member name="M:NAnt.Core.MailLogger.GetPropertyValue(NAnt.Core.PropertyDictionary,System.String,System.String)">
            <summary>
            Gets the value of the specified property.
            </summary>
            <param name="properties">Properties to obtain value from.</param>
            <param name="name">Suffix of property name.  "MailLogger" will be prepended internally.</param>
            <param name="defaultValue">Value returned if property is not present in <paramref name="properties"/>.</param>
            <returns>
            The value of the specified property; or the default value if the 
            property is not present in <paramref name="properties"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The specified property is not present and no default value has been given.</exception>
        </member>
        <member name="M:NAnt.Core.MailLogger.SendMail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends the e-mail.
            </summary>
            <param name="mailhost">The SMTP relay mail server to use to send e-mail messages.</param>
            <param name="from">The address of the e-mail sender.</param>
            <param name="toList">The address(es) of the e-mail recipient(s).</param>
            <param name="subject">The subject line of the e-mail message.</param>
            <param name="message">The body of the e-mail message.</param>
        </member>
        <member name="F:NAnt.Core.MailLogger._buffer">
            <summary>
            Buffer in which the message is constructed prior to sending.
            </summary>
        </member>
        <member name="F:NAnt.Core.MailLogger._projectStack">
            <summary>
            Holds the stack of currently executing projects.
            </summary>
        </member>
        <member name="T:NAnt.Core.BuildListenerCollection">
            <summary>
            Contains a strongly typed collection of <see cref="T:NAnt.Core.IBuildListener"/> 
            objects.
            </summary>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildListenerCollection"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.#ctor(NAnt.Core.BuildListenerCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildListenerCollection"/> 
            class with the specified <see cref="T:NAnt.Core.BuildListenerCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.#ctor(NAnt.Core.IBuildListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildListenerCollection"/> 
            class with the specified array of <see cref="T:NAnt.Core.IBuildListener"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.Add(NAnt.Core.IBuildListener)">
            <summary>
            Adds a <see cref="T:NAnt.Core.IBuildListener"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.IBuildListener"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.AddRange(NAnt.Core.IBuildListener[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.IBuildListener"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.IBuildListener"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.AddRange(NAnt.Core.BuildListenerCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.BuildListenerCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.BuildListenerCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.Contains(NAnt.Core.IBuildListener)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.IBuildListener"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.IBuildListener"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.CopyTo(NAnt.Core.IBuildListener[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.IndexOf(NAnt.Core.IBuildListener)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.IBuildListener"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.IBuildListener"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.IBuildListener"/>. If the <see cref="T:NAnt.Core.IBuildListener"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.Insert(System.Int32,NAnt.Core.IBuildListener)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.IBuildListener"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.IBuildListener"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.BuildListenerEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.BuildListenerCollection.Remove(NAnt.Core.IBuildListener)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.IBuildListener"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.BuildListenerCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="T:NAnt.Core.BuildListenerEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.IBuildListener"/> elements of a <see cref="T:NAnt.Core.BuildListenerCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.BuildListenerEnumerator.#ctor(NAnt.Core.BuildListenerCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.BuildListenerEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.BuildListenerCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.BuildListenerEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.BuildListenerEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.BuildListenerEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.LogWriter">
            <summary>
            Implements a <see cref="T:System.IO.TextWriter"/> for writing information to 
            the NAnt logging infrastructure.
            </summary>
        </member>
        <member name="M:NAnt.Core.LogWriter.#ctor(NAnt.Core.Task,NAnt.Core.Level,System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.LogWriter"/> class 
            with the specified prefix and format provider.
            </summary>
            <param name="task">Determines the indentation level.</param>
            <param name="outputLevel">The <see cref="T:NAnt.Core.Level"/> with which messages will be output to the build log.</param>
            <param name="logPrefix">The prefix for written messages.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> object that controls formatting.</param>
        </member>
        <member name="M:NAnt.Core.LogWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the text stream, while adding a 
            prefix if its the first output on the current line.
            </summary>
            <param name="chars">The character array to write to the text stream.</param>
        </member>
        <member name="M:NAnt.Core.LogWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value" /> is a null reference, only the line termination characters are written.</param>
        </member>
        <member name="M:NAnt.Core.LogWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes out a formatted string with prefix and a new line, using the same 
            semantics as <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </summary>
            <param name="line">The formatting string.</param>
            <param name="args">The object array to write into format string.</param>
        </member>
        <member name="M:NAnt.Core.LogWriter.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for 
            this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> used to control the lifetime 
            policy for this instance. This is the current lifetime service object 
            for this instance if one exists; otherwise, a new lifetime service 
            object initialized with a lease that will never time out.
            </returns>
        </member>
        <member name="P:NAnt.Core.LogWriter.Encoding">
            <summary>
            Gets the <see cref="P:NAnt.Core.LogWriter.Encoding"/> in which the output is written.
            </summary>
            <value>
            The <see cref="T:NAnt.Core.LogWriter"/> always writes output in UTF8 
            encoding.
            </value>
        </member>
        <member name="P:NAnt.Core.LogWriter.OutputLevel">
            <summary>
            Gets the <see cref="T:NAnt.Core.Level"/> with which messages will be output to
            the build log.
            </summary>
        </member>
        <member name="T:NAnt.Core.PathScanner">
            <summary>
            Used to search for files on the PATH. 
            </summary>
            <remarks>
            <para>
            The local directory is not searched (since this would already be covered 
            by normal use of the includes element).
            </para>
            <para>
            Also, advanced pattern matching isn't supported: you need to know the 
            exact name of the file.
            </para>
            </remarks>
        </member>
        <member name="M:NAnt.Core.PathScanner.Add(System.String)">
            <summary>
            Adds a file to the list of files to be scanned for.
            </summary>
            <param name="fileName">The filename to add to the list.</param>
        </member>
        <member name="T:NAnt.Core.Project">
            <summary>
            Central representation of a NAnt project.
            </summary>
            <example>
              <para>
              The <see cref="M:NAnt.Core.Project.Run"/> method will initialize the project with the build
              file specified in the constructor and execute the default target.
              </para>
              <code>
                <![CDATA[
            Project p = new Project("foo.build", Level.Info);
            p.Run();
                ]]>
              </code>
            </example>
            <example>
              <para>
              If no target is given, the default target will be executed if specified 
              in the project.
              </para>
              <code>
                <![CDATA[
            Project p = new Project("foo.build", Level.Info);
            p.Execute("build");
                ]]>
              </code>
            </example>
        </member>
        <member name="F:NAnt.Core.Project.Visiting">
            <summary>
            Constant for the "visiting" state, used when traversing a DFS of 
            target dependencies.
            </summary>
        </member>
        <member name="F:NAnt.Core.Project.Visited">
            <summary>
            Constant for the "visited" state, used when traversing a DFS of 
            target dependencies.
            </summary>
        </member>
        <member name="F:NAnt.Core.Project.logger">
            <summary>
            Holds the logger for this class.
            </summary>
        </member>
        <member name="F:NAnt.Core.Project._threshold">
            <summary>
            Holds the default threshold for build loggers.
            </summary>
        </member>
        <member name="M:NAnt.Core.Project.#ctor(System.Xml.XmlDocument,NAnt.Core.Level)">
            <summary>
            Initializes a new <see cref="T:NAnt.Core.Project"/> class with the given 
            document and message threshold and with default indentation 
            level (0).
            </summary>
            <param name="doc">Any valid build format will do.</param>
            <param name="threshold">The message threshold.</param>
        </member>
        <member name="M:NAnt.Core.Project.#ctor(System.Xml.XmlDocument,NAnt.Core.Level,System.Int32)">
            <summary>
            Initializes a new <see cref="T:NAnt.Core.Project"/> class with the given 
            document, message threshold and indentation level.
            </summary>
            <param name="doc">Any valid build format will do.</param>
            <param name="threshold">The message threshold.</param>
            <param name="indentLevel">The project indentation level.</param>
        </member>
        <member name="M:NAnt.Core.Project.#ctor(System.String,NAnt.Core.Level)">
            <summary>
            Initializes a new <see cref="T:NAnt.Core.Project"/> class with the given 
            source, message threshold and default indentation level.
            </summary>
            <param name="uriOrFilePath">
            <para>The full path to the build file.</para>
            <para> This can be of any form that <see cref="M:System.Xml.XmlDocument.Load(System.String)"/> accepts.</para>
            </param>
            <param name="threshold">The message threshold.</param>
            <remarks>
            If the source is a uri of form 'file:///path' then use the path part.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Project.#ctor(System.String,NAnt.Core.Level,System.Int32)">
            <summary>
            Initializes a new <see cref="T:NAnt.Core.Project"/> class with the given 
            source, message threshold and indentation level.
            </summary>
            <param name="uriOrFilePath">
            <para>The full path to the build file.</para>
            <para>This can be of any form that <see cref="M:System.Xml.XmlDocument.Load(System.String)"/> accepts.</para>
            </param>
            <param name="threshold">The message threshold.</param>
            <param name="indentLevel">The project indentation level.</param>
            <remarks>
            If the source is a uri of form 'file:///path' then use the path part.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Project.OnBuildStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Dispatches a <see cref="F:NAnt.Core.Project.BuildStarted"/> event to the build listeners 
            for this <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.Project.OnBuildFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Dispatches a <see cref="F:NAnt.Core.Project.BuildFinished"/> event to the build listeners 
            for this <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.Project.OnTargetStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Dispatches a <see cref="F:NAnt.Core.Project.TargetStarted"/> event to the build listeners 
            for this <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.Project.OnTargetFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Dispatches a <see cref="F:NAnt.Core.Project.TargetFinished"/> event to the build listeners 
            for this <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.Project.OnTaskStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Dispatches a <see cref="F:NAnt.Core.Project.TaskStarted"/> event to the build listeners 
            for this <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.Project.OnTaskFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Dispatches the <see cref="F:NAnt.Core.Project.TaskFinished"/> event to the build listeners 
            for this <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.Project.OnMessageLogged(NAnt.Core.BuildEventArgs)">
            <summary>
            Dispatches a <see cref="F:NAnt.Core.Project.MessageLogged"/> event to the build listeners 
            for this <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.Project.Log(NAnt.Core.Level,System.String)">
            <summary>
            Writes a <see cref="T:NAnt.Core.Project"/> level message to the build log with
            the given <see cref="T:NAnt.Core.Level"/>.
            </summary>
            <param name="messageLevel">The <see cref="T:NAnt.Core.Level"/> to log at.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:NAnt.Core.Project.Log(NAnt.Core.Level,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:NAnt.Core.Project"/> level formatted message to the build 
            log with the given <see cref="T:NAnt.Core.Level"/>.
            </summary>
            <param name="messageLevel">The <see cref="T:NAnt.Core.Level"/> to log at.</param>
            <param name="message">The message to log, containing zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
        </member>
        <member name="M:NAnt.Core.Project.Log(NAnt.Core.Task,NAnt.Core.Level,System.String)">
            <summary>
            Writes a <see cref="T:NAnt.Core.Task"/> task level message to the build log 
            with the given <see cref="T:NAnt.Core.Level"/>.
            </summary>
            <param name="task">The <see cref="T:NAnt.Core.Task"/> from which the message originated.</param>
            <param name="messageLevel">The <see cref="T:NAnt.Core.Level"/> to log at.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:NAnt.Core.Project.Log(NAnt.Core.Target,NAnt.Core.Level,System.String)">
            <summary>
            Writes a <see cref="T:NAnt.Core.Target"/> level message to the build log with 
            the given <see cref="T:NAnt.Core.Level"/>.
            </summary>
            <param name="target">The <see cref="T:NAnt.Core.Target"/> from which the message orignated.</param>
            <param name="messageLevel">The level to log at.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:NAnt.Core.Project.Execute">
            <summary>
            Executes the default target.
            </summary>
            <remarks>
            No top level error handling is done. Any <see cref="T:NAnt.Core.BuildException"/> 
            will be passed onto the caller.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Project.Execute(System.String)">
            <summary>
            Executes a specific target, and its dependencies.
            </summary>
            <param name="targetName">The name of the target to execute.</param>
            <remarks>
            Global tasks are not executed.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Project.Execute(System.String,System.Boolean)">
            <summary>
            Executes a specific target.
            </summary>
            <param name="targetName">The name of the target to execute.</param>
            <param name="forceDependencies">Whether dependencies should be forced to execute</param>
            <remarks>
            Global tasks are not executed.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Project.Run">
            <summary>
            Executes the default target and wraps in error handling and time 
            stamping.
            </summary>
            <returns>
            <see langword="true" /> if the build was successful; otherwise, 
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:NAnt.Core.Project.CreateTask(System.Xml.XmlNode)">
            <summary>
            Creates a new <see ref="Task"/> from the given <see cref="T:System.Xml.XmlNode"/>.
            </summary>
            <param name="taskNode">The <see cref="T:NAnt.Core.Task"/> definition.</param>
            <returns>The new <see cref="T:NAnt.Core.Task"/> instance.</returns>
        </member>
        <member name="M:NAnt.Core.Project.CreateTask(System.Xml.XmlNode,NAnt.Core.Target)">
            <summary>
            Creates a new <see cref="T:NAnt.Core.Task"/> from the given <see cref="T:System.Xml.XmlNode"/> 
            within a <see cref="T:NAnt.Core.Target"/>.
            </summary>
            <param name="taskNode">The <see cref="T:NAnt.Core.Task"/> definition.</param>
            <param name="target">The owner <see cref="T:NAnt.Core.Target"/>.</param>
            <returns>The new <see cref="T:NAnt.Core.Task"/> instance.</returns>
        </member>
        <member name="M:NAnt.Core.Project.ExpandProperties(System.String,NAnt.Core.Location)">
            <summary>
            Expands a <see cref="T:System.String"/> from known properties.
            </summary>
            <param name="input">The <see cref="T:System.String"/> with replacement tokens.</param>
            <param name="location">The location in the build file. Used to throw more accurate exceptions.</param>
            <returns>The expanded and replaced <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:NAnt.Core.Project.GetFullPath(System.String)">
            <summary>
            Combines the specified path with the <see cref="P:NAnt.Core.Project.BaseDirectory"/> of 
            the <see cref="T:NAnt.Core.Project"/> to form a full path to file or directory.
            </summary>
            <param name="path">The relative or absolute path.</param>
            <returns>
            A rooted path, or the <see cref="P:NAnt.Core.Project.BaseDirectory"/> of the <see cref="T:NAnt.Core.Project"/> 
            if the <paramref name="path"/> parameter is a null reference.
            </returns>
        </member>
        <member name="M:NAnt.Core.Project.CreateDefaultLogger">
            <summary>
            Creates the default <see cref="T:NAnt.Core.IBuildLogger"/> and attaches it to
            the <see cref="T:NAnt.Core.Project"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Project.Indent">
            <summary>
            Increases the <see cref="P:NAnt.Core.Project.IndentationLevel"/> of the <see cref="T:NAnt.Core.Project"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Project.Unindent">
            <summary>
            Decreases the <see cref="P:NAnt.Core.Project.IndentationLevel"/> of the <see cref="T:NAnt.Core.Project"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Project.DetachBuildListeners">
            <summary>
            Detaches the currently attached <see cref="T:NAnt.Core.IBuildListener"/> instances
            from the <see cref="T:NAnt.Core.Project"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Project.AttachBuildListeners(NAnt.Core.BuildListenerCollection)">
            <summary>
            Attaches the specified build listeners to the <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <param name="listeners">The <see cref="T:NAnt.Core.IBuildListener"/> instances to attach to the <see cref="T:NAnt.Core.Project"/>.</param>
            <remarks>
            The currently attached <see cref="T:NAnt.Core.IBuildListener"/> instances will 
            be detached before the new <see cref="T:NAnt.Core.IBuildListener"/> instances 
            are attached.
            </remarks>
        </member>
        <member name="M:NAnt.Core.Project.CtorHelper(System.Xml.XmlDocument,NAnt.Core.Level,System.Int32)">
            <summary>
            Inits stuff:
                <para>TypeFactory: Calls Initialize and AddProject </para>
                <para>Log.IndentSize set to 12</para>
                <para>Project properties are initialized ("nant.* stuff set")</para>
                <list type="nant.items">
                    <listheader>NAnt Props:</listheader>
                    <item>nant.filename</item>
                    <item>nant.version</item>
                    <item>nant.location</item>
                    <item>nant.project.name</item>
                    <item>nant.project.buildfile (if doc has baseuri)</item>
                    <item>nant.project.basedir</item>
                    <item>nant.project.default = defaultTarget</item>
                    <item>nant.tasks.[name] = true</item>
                    <item>nant.tasks.[name].location = AssemblyFileName</item>
                </list>
            </summary>
            <param name="doc">An <see cref="T:System.Xml.XmlDocument"/> representing the project definition.</param>
            <param name="threshold">The project message threshold.</param>
            <param name="indentLevel">The project indentation level.</param>
        </member>
        <member name="M:NAnt.Core.Project.InitializeProjectDocument(System.Xml.XmlDocument)">
            <summary>
            This method is only meant to be used by the <see cref="T:NAnt.Core.Project"/> 
            class and <see cref="T:NAnt.Core.Tasks.IncludeTask"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.Project.LoadBuildFile(System.String)">
            <summary>
            Creates a new <see cref="T:System.Xml.XmlDocument"/> based on the project 
            definition.
            </summary>
            <param name="source">The source of the document.<para>Any form that is valid for <see cref="M:System.Xml.XmlDocument.Load(System.String)"/> can be used here.</para></param>
            <returns>
            An <see cref="T:System.Xml.XmlDocument"/> based on the specified project 
            definition.
            </returns>
        </member>
        <member name="M:NAnt.Core.Project.ConfigurePlatformProperties">
            <summary>
            Configures the platform properties for the current platform.
            </summary>
            <exception cref="T:NAnt.Core.BuildException">NAnt does not support the current platform.</exception>
        </member>
        <member name="M:NAnt.Core.Project.UpdateDefaultFrameworkProperties">
            <summary>
            Updates dependent properties when the <see cref="P:NAnt.Core.Project.DefaultFramework"/> 
            is set.
            </summary>
        </member>
        <member name="M:NAnt.Core.Project.UpdateCurrentFrameworkProperties">
            <summary>
            Updates dependent properties when the <see cref="P:NAnt.Core.Project.CurrentFramework"/> 
            is set.
            </summary>
        </member>
        <member name="M:NAnt.Core.Project.TopologicalTargetSort(System.String,NAnt.Core.TargetCollection)">
            <summary>
            Topologically sorts a set of targets.
            </summary>
            <param name="root">The name of the root target. The sort is created in such a way that the sequence of targets up to the root target is the minimum possible such sequence. Must not be <see langword="null"/>.</param>
            <param name="targets">A collection of <see cref="T:NAnt.Core.Target"/> instances.</param>
            <returns>
            A collection of <see cref="T:NAnt.Core.Target"/> instances in sorted order.
            </returns>
            <exception cref="T:NAnt.Core.BuildException">There is a cyclic dependecy among the targets, or a named target does not exist.</exception>
        </member>
        <member name="M:NAnt.Core.Project.TopologicalTargetSort(System.String,NAnt.Core.TargetCollection,System.Collections.Hashtable,System.Collections.Stack,NAnt.Core.TargetCollection)">
            <summary>
            <para>
            Performs a single step in a recursive depth-first-search traversal 
            of the target dependency tree.
            </para>
            <para>
            The current target is first set to the "visiting" state, and pushed
            onto the "visiting" stack.
            </para>
            <para>
            An exception is then thrown if any child of the current node is in 
            the visiting state, as that implies a circular dependency. The 
            exception contains details of the cycle, using elements of the 
            "visiting" stack.
            </para>
            <para>
            If any child has not already been "visited", this method is called
            recursively on it.
            </para>
            <para>
            The current target is then added to the ordered list of targets. 
            Note that this is performed after the children have been visited in 
            order to get the correct order. The current target is set to the 
            "visited" state.
            </para>
            <para>
            By the time this method returns, the ordered list contains the 
            sequence of targets up to and including the current target.
            </para>
            </summary>
            <param name="root">The current target to inspect. Must not be <see langword="null"/>.</param>
            <param name="targets">A collection of <see cref="T:NAnt.Core.Target"/> instances.</param>
            <param name="state">A mapping from targets to states The states in question are "VISITING" and "VISITED". Must not be <see langword="null"/>.</param>
            <param name="visiting">A stack of targets which are currently being visited. Must not be <see langword="null"/>.</param>
            <param name="executeTargets">The list to add target names to. This will end up containing the complete list of depenencies in dependency order. Must not be <see langword="null"/>.</param>
            <exception cref="T:NAnt.Core.BuildException">
              <para>A non-existent target is specified</para>
              <para>-or-</para>
              <para>A circular dependency is detected.</para>
            </exception>
        </member>
        <member name="M:NAnt.Core.Project.CreateCircularException(System.String,System.Collections.Stack)">
            <summary>
            Builds an appropriate exception detailing a specified circular
            dependency.
            </summary>
            <param name="end">The dependency to stop at. Must not be <see langword="null"/>.</param>
            <param name="stack">A stack of dependencies. Must not be <see langword="null"/>.</param>
            <returns>
            A <see cref="T:NAnt.Core.BuildException"/> detailing the specified circular 
            dependency.
            </returns>
        </member>
        <member name="P:NAnt.Core.Project.IndentationLevel">
            <summary>
            Gets or sets the indendation level of the build output.
            </summary>
            <value>
            The indentation level of the build output.
            </value>
            <remarks>
            To change the <see cref="P:NAnt.Core.Project.IndentationLevel"/>, the <see cref="M:NAnt.Core.Project.Indent"/> 
            and <see cref="M:NAnt.Core.Project.Unindent"/> methods should be used.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Project.IndentationSize">
            <summary>
            Gets or sets the indentation size of the build output.
            </summary>
            <value>
            The indendation size of the build output.
            </value>
        </member>
        <member name="P:NAnt.Core.Project.Threshold">
            <summary>
            Gets or sets the default threshold level for build loggers.
            </summary>
            <value>
            The default threshold level for build loggers.
            </value>
        </member>
        <member name="P:NAnt.Core.Project.ProjectName">
            <summary>
            Gets the name of the <see cref="T:NAnt.Core.Project"/>.
            </summary>
            <value>
            The name of the <see cref="T:NAnt.Core.Project"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.Project.BaseDirectory">
            <summary>
            Gets or sets the base directory used for relative references.
            </summary>
            <value>
            The base directory used for relative references.
            </value>
            <remarks>
            <para>
            The directory must be rooted. (must start with drive letter, unc, 
            etc.)
            </para>
            <para>
            The <see cref="P:NAnt.Core.Project.BaseDirectory"/> sets and gets the special property 
            named "nant.project.basedir".
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Core.Project.BuildFileUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> form of the current project definition.
            </summary>
            <value>
            The <see cref="T:System.Uri"/> form of the current project definition.
            </value>
        </member>
        <member name="P:NAnt.Core.Project.FrameworkInfoDictionary">
            <summary>
            Table of framework info - accessible by tasks and others
            </summary>
        </member>
        <member name="P:NAnt.Core.Project.DefaultFramework">
            <summary>
            This is the framework we will normally use unless the 
            <see cref="P:NAnt.Core.Project.CurrentFramework"/> has been set.
            </summary>
        </member>
        <member name="P:NAnt.Core.Project.CurrentFramework">
            <summary>
            Gets or sets the framework to use for compilation.
            </summary>
            <value>
            The framework to use for compilation.
            </value>
            <remarks>
            We will use compiler tools and system assemblies for this framework 
            in framework-related tasks.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Project.PlatformName">
            <summary>
            Gets the name of the platform on which NAnt is currently running.
            </summary>
            <value>
            The name of the platform on which NAnt is currently running.
            </value>
            <remarks>
            <para>
            Possible values are:
            </para>
            <list type="bullet">
                <item>
                    <description>win32</description>
                </item>
                <item>
                    <description>unix</description>
                </item>
            </list>
            </remarks>
            <exception cref="T:NAnt.Core.BuildException">NAnt does not support the current platform.</exception>
        </member>
        <member name="P:NAnt.Core.Project.BuildFileLocalName">
            <summary>
            Gets the path to the build file.
            </summary>
            <value>
            The path to the build file, or <see langword="null" /> if the build
            document is not file backed.
            </value>
        </member>
        <member name="P:NAnt.Core.Project.Document">
            <summary>
            Gets the active <see cref="T:NAnt.Core.Project"/> definition.
            </summary>
            <value>
            The active <see cref="T:NAnt.Core.Project"/> definition.
            </value>
        </member>
        <member name="P:NAnt.Core.Project.DefaultTargetName">
            <remarks>
            Gets the name of the target that will be executed when no other 
            build targets are specified.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Project.Verbose">
            <summary>
            Gets a value indicating whether tasks should output more build log 
            messages.
            </summary>
            <value>
            <see langword="true" /> if tasks should output more build log message; 
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Project.BuildTargets">
            <summary>
            The list of targets to build.
            </summary>
            <remarks>
            Targets are built in the order they appear in the collection.  If 
            the collection is empty the default target will be built.
            </remarks>
        </member>
        <member name="P:NAnt.Core.Project.Properties">
            <summary>
            Gets the properties defined in this project.
            </summary>
            <value>The properties defined in this project.</value>
            <remarks>
            <para>
            This is the collection of properties that are defined by the system 
            and property task statements.
            </para>
            <para>
            These properties can be used in expansion.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Core.Project.FrameworkNeutralProperties">
            <summary>
            Gets the framework-neutral properties defined in the NAnt 
            configuration file.
            </summary>
            <value>
            The framework-neutral properties defined in the NAnt configuration 
            file.
            </value>
            <remarks>
            <para>
            This is the collection of read-only properties that are defined in 
            the NAnt configuration file.
            </para>
            <para>
            These properties can only be used for expansion in framework-specific
            and framework-neutral configuration settings.  These properties are 
            not available for expansion in the build file.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Core.Project.DataTypeReferences">
            <summary>
            Gets the <see cref="T:NAnt.Core.DataTypeBase"/> instances defined in this project.
            </summary>
            <value>
            The <see cref="T:NAnt.Core.DataTypeBase"/> instances defined in this project.
            </value>
            <remarks>
            <para>
            This is the collection of <see cref="T:NAnt.Core.DataTypeBase"/> instances that
            are defined by <see cref="T:NAnt.Core.DataTypeBase"/> (eg fileset) declarations.
            </para>
            </remarks>
        </member>
        <member name="P:NAnt.Core.Project.Targets">
            <summary>
            Gets the targets defined in this project.
            </summary>
            <value>
            The targets defined in this project.
            </value>
        </member>
        <member name="P:NAnt.Core.Project.BuildListeners">
            <summary>
            Gets the build listeners for this project. 
            </summary>
            <value>
            The build listeners for this project.
            </value>
        </member>
        <member name="F:NAnt.Core.ProjectSettingsLoader.ScannedTaskPath">
            <summary>
            Holds a value indicating whether a scan for tasks has already been 
            performed on the configured task path.
            </summary>
        </member>
        <member name="F:NAnt.Core.ProjectSettingsLoader.logger">
            <summary>
            Holds the logger instance for this class.
            </summary>
        </member>
        <member name="M:NAnt.Core.ProjectSettingsLoader.#ctor(NAnt.Core.Project)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.ProjectSettingsLoader"/>
            class for the given <see cref="P:NAnt.Core.ProjectSettingsLoader.Project"/>.
            </summary>
            <param name="project">The <see cref="P:NAnt.Core.ProjectSettingsLoader.Project"/> that should be configured.</param>
        </member>
        <member name="M:NAnt.Core.ProjectSettingsLoader.ProcessSettings(System.Xml.XmlNode)">
            <summary>
            Loads and processes settings from the specified <see cref="T:System.Xml.XmlNode"/> 
            of the configuration file.
            </summary>
        </member>
        <member name="M:NAnt.Core.ProjectSettingsLoader.ProcessGlobalProperties(System.Xml.XmlNodeList)">
            <summary>
            Reads the list of global properties specified in the NAnt configuration
            file.
            </summary>
            <param name="propertyNodes">An <see cref="T:System.Xml.XmlNodeList"/> representing global properties.</param>
        </member>
        <member name="M:NAnt.Core.ProjectSettingsLoader.ProcessFrameworkNeutralProperties(System.Xml.XmlNodeList)">
            <summary>
            Reads the list of framework-neutral properties defined in the 
            NAnt configuration file.
            </summary>
            <param name="propertyNodes">An <see cref="T:System.Xml.XmlNodeList"/> representing framework-neutral properties.</param>
        </member>
        <member name="M:NAnt.Core.ProjectSettingsLoader.ProcessFrameworks(System.Xml.XmlNodeList)">
            <summary>
            Processes the framework nodes.
            </summary>
            <param name="frameworkNodes">An <see cref="T:System.Xml.XmlNodeList"/> representing supported frameworks.</param>
        </member>
        <member name="M:NAnt.Core.ProjectSettingsLoader.ProcessFrameworkProperties(System.Xml.XmlNodeList)">
            <summary>
            Processes the framework properties.
            </summary>
            <param name="propertyNodes">An <see cref="T:System.Xml.XmlNodeList"/> representing framework properties.</param>
        </member>
        <member name="M:NAnt.Core.ProjectSettingsLoader.ProcessFrameworkEnvironmentVariables(System.Xml.XmlNodeList,NAnt.Core.FrameworkInfo)">
            <summary>
            Processes the framework environment variables.
            </summary>
            <param name="environmentNodes">An <see cref="T:System.Xml.XmlNodeList"/> representing framework environment variables.</param>
            <param name="framework">The <see cref="T:NAnt.Core.FrameworkInfo"/> to obtain framework-specific information from.</param>
        </member>
        <member name="M:NAnt.Core.ProjectSettingsLoader.GetXmlAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value of the specified attribute from the specified node.
            </summary>
            <param name="xmlNode">The node of which the attribute value should be retrieved.</param>
            <param name="attributeName">The attribute of which the value should be returned.</param>
            <returns>
            The value of the attribute with the specified name or <see langword="null" />
            if the attribute does not exist or has no value.
            </returns>
        </member>
        <member name="P:NAnt.Core.ProjectSettingsLoader.Project">
            <summary>
            Gets the underlying <see cref="P:NAnt.Core.ProjectSettingsLoader.Project"/> instance.
            </summary>
            <value>
            The underlying <see cref="P:NAnt.Core.ProjectSettingsLoader.Project"/> instance.
            </value>
        </member>
        <member name="F:NAnt.Core.PropertyDictionary.Visiting">
            <summary>
            Constant for the "visiting" state, used when traversing a DFS of 
            property references.
            </summary>
        </member>
        <member name="F:NAnt.Core.PropertyDictionary.Visited">
            <summary>
            Constant for the "visited" state, used when travesing a DFS of 
            property references.
            </summary>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.AddReadOnly(System.String,System.String)">
            <summary>
            Adds a property that cannot be changed.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value to assign to the property.</param>
            <remarks>
            Properties added with this method can never be changed.  Note that
            they are removed if the <see cref="M:System.Collections.DictionaryBase.Clear"/> method is called.
            </remarks>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.MarkDynamic(System.String)">
            <summary>
            Marks a property as a property of which the value is expanded at 
            execution time.
            </summary>
            <param name="name">The name of the property to mark as dynamic.</param>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.Add(System.String,System.String)">
            <summary>
            Adds a property to the collection.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value to assign to the property.</param>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.SetValue(System.String,System.String)">
            <summary>
            Sets the specified property to the given value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value to assign to the property.</param>
            <remarks>
            For read-only properties, the value will not be changed.
            </remarks>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.IsReadOnlyProperty(System.String)">
            <summary>
            Determines whether the specified property is listed as read-only.
            </summary>
            <param name="name">The name of the property to check.</param>
            <returns>
            <see langword="true" /> if the property is listed as read-only; 
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.IsDynamicProperty(System.String)">
            <summary>
            Determines whether the specified property is listed as dynamic.
            </summary>
            <param name="name">The name of the property to check.</param>
            <returns>
            <see langword="true" /> if the property is listed as dynamic; 
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.Inherit(NAnt.Core.PropertyDictionary,System.Collections.Specialized.StringCollection)">
            <summary>
            Inherits properties from an existing property dictionary Instance.
            </summary>
            <param name="source">Property list to inherit.</param>
            <param name="excludes">The list of properties to exclude during inheritance.</param>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.ExpandProperties(System.String,NAnt.Core.Location)">
            <summary>
            Expands a <see cref="T:System.String"/> from known properties.
            </summary>
            <param name="input">The replacement tokens.</param>
            <param name="location">The <see cref="T:NAnt.Core.Location"/> to pass through for any exceptions.</param>
            <returns>The expanded and replaced string.</returns>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.Contains(System.String)">
            <summary>
            Determines whether a property already exists.
            </summary>
            <param name="name">The name of the property to check.</param>
            <returns>
            <see langword="true" /> if the specified property already exists; 
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.ExpandProperties(System.String,NAnt.Core.Location,System.Collections.Hashtable,System.Collections.Stack)">
            <summary>
            Expands a <see cref="T:System.String"/> from known properties.
            </summary>
            <param name="input">The replacement tokens.</param>
            <param name="location">The <see cref="T:NAnt.Core.Location"/> to pass through for any exceptions.</param>
            <param name="state">A mapping from properties to states. The states in question are "VISITING" and "VISITED". Must not be <see langword="null"/>.</param>
            <param name="visiting">A stack of properties which are currently being visited. Must not be <see langword="null"/>.</param>
            <returns>The expanded and replaced string.</returns>
        </member>
        <member name="M:NAnt.Core.PropertyDictionary.CreateCircularException(System.String,System.Collections.Stack)">
            <summary>
            Builds an appropriate exception detailing a specified circular
            reference.
            </summary>
            <param name="end">The property reference to stop at. Must not be <see langword="null"/>.</param>
            <param name="stack">A stack of property references. Must not be <see langword="null"/>.</param>
            <returns>
            A <see cref="T:NAnt.Core.BuildException"/> detailing the specified circular 
            dependency.
            </returns>
        </member>
        <member name="F:NAnt.Core.PropertyDictionary._readOnlyProperties">
            <summary>
            Maintains a list of the property names that are readonly.
            </summary>
        </member>
        <member name="F:NAnt.Core.PropertyDictionary._dynamicProperties">
            <summary>
            Maintains a list of the property names of which the value is expanded
            on usage, not at initalization.
            </summary>
        </member>
        <member name="P:NAnt.Core.PropertyDictionary.Item(System.String)">
            <summary>
            Indexer property. 
            </summary>
        </member>
        <member name="M:NAnt.Core.Target.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.Target"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.Target.Execute">
            <summary>
            Executes dependent targets first, then the target.
            </summary>
        </member>
        <member name="P:NAnt.Core.Target.Executed">
            <summary>
            This indicates whether the target has already executed.
            </summary>
        </member>
        <member name="P:NAnt.Core.Target.Name">
            <summary>
            The name of the target.
            </summary>
            <remarks>
              <para>
              Hides <see cref="P:NAnt.Core.Element.Name"/> to have <see cref="T:NAnt.Core.Target"/> 
              return the name of target, not the name of XML element - which 
              would always be <c>target</c>.
              </para>
              <para>
              Note: Properties are not allowed in the name.
              </para>
            </remarks>
        </member>
        <member name="P:NAnt.Core.Target.IfCondition">
            <summary>
            If <see langword="true" /> then the target will be executed; 
            otherwise, skipped. The default is <see langword="true" />.
            </summary>
        </member>
        <member name="P:NAnt.Core.Target.IfDefined">
            <summary>
            Gets a value indicating whether the target should be executed.
            </summary>
            <value>
            <see langword="true" /> if the target should be executed; otherwise, 
            <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Target.UnlessCondition">
            <summary>
            Opposite of <see cref="P:NAnt.Core.Target.IfDefined"/>. If <see langword="false"/> 
            then the target will be executed; otherwise, skipped. The default 
            is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:NAnt.Core.Target.UnlessDefined">
            <summary>
            Gets a value indicating whether the target should NOT be executed.
            </summary>
            <value>
            <see langword="true" /> if the target should NOT be executed;
            otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:NAnt.Core.Target.Description">
            <summary>
            The description of the target.
            </summary>
        </member>
        <member name="P:NAnt.Core.Target.DependsListString">
            <summary>
            Space separated list of targets that this target depends on.
            </summary>
        </member>
        <member name="P:NAnt.Core.Target.Dependencies">
            <summary>
            A collection of target names that must be executed before this 
            target.
            </summary>
        </member>
        <member name="M:NAnt.Core.TargetCollection.Find(System.String)">
            <summary>
            Finds a target by name.
            </summary>
            <param name="targetName">The name of the target to find.</param>
            <returns>
            The <see cref="T:NAnt.Core.Target"/> with the specified name, or 
            <see langword="null"/> if no <see cref="T:NAnt.Core.Target"/> exists with
            the given name.
            </returns>
        </member>
        <member name="M:NAnt.Core.TargetCollection.ToString(System.String)">
            <summary>
            Gets the names of the targets in the <see cref="T:NAnt.Core.TargetCollection"/>
            combined into one list separated by the given <see cref="T:System.String"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains a list of the names of the 
            targets in the <see cref="T:NAnt.Core.TargetCollection"/>, separated by
            the specified <paramref name="separator"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.TargetCollection.ToString">
            <summary>
            Gets the names of the targets in the <see cref="T:NAnt.Core.TargetCollection"/>
            combined into one comma-separated list.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains a comma-separated list of the
            names of the targets in the <see cref="T:NAnt.Core.TargetCollection"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.TaskBuilder.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:NAnt.Core.TaskBuilder"/> class
            for the specified task class in the assembly specified.
            </summary>
            <param name="className">The class representing the task.</param>
            <param name="assemblyFileName">The assembly containing the task.</param>/// 
        </member>
        <member name="M:NAnt.Core.TaskBuilder.GetAssembly">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly"/> from which the task identified by
            <see cref="P:NAnt.Core.TaskBuilder.TaskName"/> will be created.
            </summary>
            <returns>
            The <see cref="T:System.Reflection.Assembly"/> from which the task identified by 
            <see cref="P:NAnt.Core.TaskBuilder.TaskName"/> will be created.
            </returns>
        </member>
        <member name="P:NAnt.Core.TaskBuilder.ClassName">
            <summary>
            Gets the name of the task class that can be created using this
            <see cref="T:NAnt.Core.TaskBuilder"/>.
            </summary>
            <value>
            The name of the task class that can be created using this
            <see cref="T:NAnt.Core.TaskBuilder"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.TaskBuilder.AssemblyFileName">
            <summary>
            Gets the filename of the <see cref="T:System.Reflection.Assembly"/> from which the
            task will be created.
            </summary>
            <value>
            The filename of the <see cref="T:System.Reflection.Assembly"/> from which the task will
            be created, or <see langword="null"/> to create the task from the
            executing <see cref="T:System.Reflection.Assembly"/>.
            </value>
        </member>
        <member name="P:NAnt.Core.TaskBuilder.TaskName">
            <summary>
            Gets the name of the task which the <see cref="T:NAnt.Core.TaskBuilder"/>
            can create.
            </summary>
            <value>
            The name of the task which the <see cref="T:NAnt.Core.TaskBuilder"/> can 
            create.
            </value>
        </member>
        <member name="T:NAnt.Core.TaskBuilderCollection">
            <summary>
            Contains a strongly typed collection of <see cref="T:NAnt.Core.TaskBuilder"/> objects.
            </summary>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.TaskBuilderCollection"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.#ctor(NAnt.Core.TaskBuilderCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.TaskBuilderCollection"/> class
            with the specified <see cref="T:NAnt.Core.TaskBuilderCollection"/> instance.
            </summary>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.#ctor(NAnt.Core.TaskBuilder[])">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.TaskBuilderCollection"/> class
            with the specified array of <see cref="T:NAnt.Core.TaskBuilder"/> instances.
            </summary>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.Add(NAnt.Core.TaskBuilder)">
            <summary>
            Adds a <see cref="T:NAnt.Core.TaskBuilder"/> to the end of the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.TaskBuilder"/> to be added to the end of the collection.</param> 
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.AddRange(NAnt.Core.TaskBuilder[])">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.TaskBuilder"/> array to the end of the collection.
            </summary>
            <param name="items">The array of <see cref="T:NAnt.Core.TaskBuilder"/> elements to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.AddRange(NAnt.Core.TaskBuilderCollection)">
            <summary>
            Adds the elements of a <see cref="T:NAnt.Core.TaskBuilderCollection"/> to the end of the collection.
            </summary>
            <param name="items">The <see cref="T:NAnt.Core.TaskBuilderCollection"/> to be added to the end of the collection.</param> 
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.Contains(NAnt.Core.TaskBuilder)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.TaskBuilder"/> is in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.TaskBuilder"/> to locate in the collection.</param> 
            <returns>
            <see langword="true"/> if <paramref name="item"/> is found in the 
            collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:NAnt.Core.TaskBuilder"/> for the specified 
            task is in the collection.
            </summary>
            <param name="taskName">The name of task for which the <see cref="T:NAnt.Core.TaskBuilder"/> should be located in the collection.</param> 
            <returns>
            <see langword="true"/> if a <see cref="T:NAnt.Core.TaskBuilder"/> for the 
            specified task is found in the collection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.CopyTo(NAnt.Core.TaskBuilder[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.        
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.IndexOf(NAnt.Core.TaskBuilder)">
            <summary>
            Retrieves the index of a specified <see cref="T:NAnt.Core.TaskBuilder"/> object in the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.TaskBuilder"/> object for which the index is returned.</param> 
            <returns>
            The index of the specified <see cref="T:NAnt.Core.TaskBuilder"/>. If the <see cref="T:NAnt.Core.TaskBuilder"/> is not currently a member of the collection, it returns -1.
            </returns>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.Insert(System.Int32,NAnt.Core.TaskBuilder)">
            <summary>
            Inserts a <see cref="T:NAnt.Core.TaskBuilder"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:NAnt.Core.TaskBuilder"/> to insert.</param>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:NAnt.Core.TaskBuilderEnumerator"/> for the entire collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.TaskBuilderCollection.Remove(NAnt.Core.TaskBuilder)">
            <summary>
            Removes a member from the collection.
            </summary>
            <param name="item">The <see cref="T:NAnt.Core.TaskBuilder"/> to remove from the collection.</param>
        </member>
        <member name="P:NAnt.Core.TaskBuilderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:NAnt.Core.TaskBuilderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NAnt.Core.TaskBuilder"/> for the specified task.
            </summary>
            <param name="taskName">The name of task for which the <see cref="T:NAnt.Core.TaskBuilder"/> should be located in the collection.</param> 
        </member>
        <member name="T:NAnt.Core.TaskBuilderEnumerator">
            <summary>
            Enumerates the <see cref="T:NAnt.Core.TaskBuilder"/> elements of a <see cref="T:NAnt.Core.TaskBuilderCollection"/>.
            </summary>
        </member>
        <member name="M:NAnt.Core.TaskBuilderEnumerator.#ctor(NAnt.Core.TaskBuilderCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.TaskBuilderEnumerator"/> class
            with the specified <see cref="T:NAnt.Core.TaskBuilderCollection"/>.
            </summary>
            <param name="arguments">The collection that should be enumerated.</param>
        </member>
        <member name="M:NAnt.Core.TaskBuilderEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true" /> if the enumerator was successfully advanced 
            to the next element; <see langword="false" /> if the enumerator has 
            passed the end of the collection.
            </returns>
        </member>
        <member name="M:NAnt.Core.TaskBuilderEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the 
            first element in the collection.
            </summary>
        </member>
        <member name="P:NAnt.Core.TaskBuilderEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NAnt.Core.TypeFactory">
            <summary>
            Comprises all of the loaded, and available, tasks. 
            Use these static methods to register, initialize and create a task.
            </summary>
        </member>
        <member name="M:NAnt.Core.TypeFactory.#cctor">
            <summary> 
            Initializes the tasks in the executing assembly, and basedir of the 
            current domain.
            </summary>
        </member>
        <member name="M:NAnt.Core.TypeFactory.ScanDir(System.String)">
            <summary>
            Scans the path for any task assemblies and adds them.
            </summary>
            <param name="path">The directory to scan in.</param>
        </member>
        <member name="M:NAnt.Core.TypeFactory.AddProject(NAnt.Core.Project)">
            <summary>
            Adds any task Assemblies in the project basedirectory.
            </summary>
            <param name="project">The project to work from.</param>
        </member>
        <member name="M:NAnt.Core.TypeFactory.AddTasks(System.Reflection.Assembly)">
            <summary>
            Scans the given assembly for any classes derived from 
            <see cref="T:NAnt.Core.Task"/> and adds a new builder for them.
            <note>
                If the taskname is already loaded then a new assembly scan 
                that finds new tasks that are already loaded will not replace it. 
                Once tasks are added, they cannot be removed.
            </note>
            </summary>
            <param name="taskAssembly">The <see cref="T:System.Reflection.Assembly"/> containing the new tasks to be loaded.</param>
            <returns>The number of tasks found in the assembly.</returns>
        </member>
        <member name="M:NAnt.Core.TypeFactory.CreateTask(System.Xml.XmlNode,NAnt.Core.Project)">
            <summary> 
            Creates a new <see cref="T:NAnt.Core.Task"/> instance for the given xml and 
            project.
            </summary>
            <param name="taskNode">The XML to initialize the task with.</param>
            <param name="proj">The <see cref="T:NAnt.Core.Project"/> that the <see cref="T:NAnt.Core.Task"/> belongs to.</param>
            <returns>The new <see cref="T:NAnt.Core.Task"/> instance.</returns>
        </member>
        <member name="P:NAnt.Core.TypeFactory.TaskBuilders">
            <summary>
            Gets the list of loaded <see cref="T:NAnt.Core.TaskBuilder"/> instances.
            </summary>
            <value>List of loaded <see cref="T:NAnt.Core.TaskBuilder"/> instances.</value>
        </member>
        <member name="M:NAnt.Core.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.ValidationException"/> 
            class.
            </summary>
        </member>
        <member name="M:NAnt.Core.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.ValidationException"/> 
            class with a descriptive message.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
        </member>
        <member name="M:NAnt.Core.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.ValidationException"/> 
            class with the specified descriptive message and inner exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="innerException">A nested exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NAnt.Core.ValidationException.#ctor(System.String,NAnt.Core.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.ValidationException"/> 
            class with a descriptive message and the location in the build file 
            that caused the exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="location">The location in the build file where the exception occured.</param>
        </member>
        <member name="M:NAnt.Core.ValidationException.#ctor(System.String,NAnt.Core.Location,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.ValidationException"/> 
            class with a descriptive message, the location in the build file and 
            an instance of the exception that is the cause of the current 
            exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="location">The location in the build file where the exception occured.</param>
            <param name="innerException">A nested exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NAnt.Core.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.ValidationException"/> 
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NAnt.Core.InvalidVolumeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.InvalidVolumeException"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.InvalidVolumeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.InvalidVolumeException"/> class 
            with a descriptive message.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
        </member>
        <member name="M:NAnt.Core.InvalidVolumeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.InvalidVolumeException"/> class
            with the specified descriptive message and inner exception.
            </summary>
            <param name="message">A descriptive message to include with the exception.</param>
            <param name="innerException">A nested exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NAnt.Core.InvalidVolumeException.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.InvalidVolumeException"/> class
            with the specified <see cref="T:System.Uri"/>.
            </summary>
            <param name="volUri"><see cref="T:System.Uri"/> of the invalid volume.</param>
        </member>
        <member name="M:NAnt.Core.InvalidVolumeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.InvalidVolumeException"/> class 
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:NAnt.Core.VolumeType">
            <summary>
            Represents the different types of drives that may exist in a system.
            </summary>
        </member>
        <member name="T:NAnt.Core.VolumeFlags">
            <summary>
            Represents the different supporting flags that may be set on a file system.
            </summary>
        </member>
        <member name="T:NAnt.Core.VolumeInfo">
            <summary>
            Presents information about a volume.
            </summary>
        </member>
        <member name="M:NAnt.Core.VolumeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.VolumeInfo"/> class.
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="M:NAnt.Core.VolumeInfo.IsVolumeCaseSensitive(System.Uri)">
            <summary>
            Determines whether the file system is case sensitive. Performs a
            P/Invoke to the Win32 API GetVolumeInformation.
            </summary>
            <param name="uri"></param>
            <returns>
            <see langword="true" /> if the specified volume is case-sensitive; 
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:NAnt.Core.XmlLogger">
            <summary>
            Used to wrap log messages in xml &lt;message/&gt; elements.
            </summary>
        </member>
        <member name="M:NAnt.Core.XmlLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.XmlLogger"/> class.
            </summary>
        </member>
        <member name="M:NAnt.Core.XmlLogger.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NAnt.Core.XmlLogger"/> class 
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NAnt.Core.XmlLogger.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates <paramref name="info"/> with the data needed to serialize 
            the <see cref="T:NAnt.Core.XmlLogger"/> instance.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:NAnt.Core.XmlLogger.ToString">
            <summary>
            Returns the contents of log captured.
            </summary>
        </member>
        <member name="M:NAnt.Core.XmlLogger.BuildStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a build has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event is fired before any targets have started.
            </remarks>
        </member>
        <member name="M:NAnt.Core.XmlLogger.BuildFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that the last target has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.XmlLogger.TargetStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a target has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.XmlLogger.TargetFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a target has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.XmlLogger.TaskStarted(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:NAnt.Core.XmlLogger.TaskFinished(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a task has finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            This event will still be fired if an error occurred during the build.
            </remarks>
        </member>
        <member name="M:NAnt.Core.XmlLogger.MessageLogged(System.Object,NAnt.Core.BuildEventArgs)">
            <summary>
            Signals that a message has been logged.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:NAnt.Core.BuildEventArgs"/> object that contains the event data.</param>
            <remarks>
            Only messages with a priority higher or equal to the threshold of 
            the logger will actually be output in the build log.
            </remarks>
        </member>
        <member name="M:NAnt.Core.XmlLogger.Flush">
            <summary>
            Flushes buffered build events or messages to the underlying storage.
            </summary>
        </member>
        <member name="P:NAnt.Core.XmlLogger.Threshold">
            <summary>
            Gets or sets the highest level of message this logger should respond 
            to.
            </summary>
            <value>The highest level of message this logger should respond to.</value>
            <remarks>
            Only messages with a message level higher than or equal to the given 
            level should be written to the log.
            </remarks>
        </member>
        <member name="P:NAnt.Core.XmlLogger.OutputWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> to which the logger is 
            to send its output.
            </summary>
        </member>
    </members>
</doc>
