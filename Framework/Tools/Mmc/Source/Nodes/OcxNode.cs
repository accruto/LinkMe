using System.Diagnostics;
using System.Windows.Forms;

namespace LinkMe.Framework.Tools.Mmc
{
	/// <summary>
	/// Node with a ResultView that contains ActivX controls given the guid for the OCX.
	/// Currently doesn't support sinking events generated by the control.
	/// </summary>
	public class OcxNode : SnapinNode
	{
		private System.Guid m_ocxGuid = System.Guid.Empty;
		private bool m_createNew;
		private object m_control = null;
		private object m_controlState = null;

		public OcxNode(Snapin snapin, System.Guid ocxGuid, bool createNew)
			:	base(snapin)
		{
			m_ocxGuid = ocxGuid;
			m_createNew = createNew;
		}

		/// <summary>
		/// GUID or the ActiveX control displayed in the result view for this node.
		/// </summary>
		public System.Guid OcxGuid
		{
			get { return m_ocxGuid; }
		}

		/// <summary>
		/// True to create a new ActiveX control for each result node of this type or false to
		/// re-use the same control. MMC does not allow this value to be changed once set.
		/// </summary>
		public bool CreateNew
		{
			get { return m_createNew; }
		}

		public object Control
		{
			get
			{
				if (m_control == null)
				{
					Debug.Assert(Snapin.ResultViewConsole != null, "Snapin.ResultViewConsole != null");

					Snapin.ResultViewConsole.QueryResultView(out m_control);
					Debug.Assert(m_control != null, "m_control != null");
				}

				return m_control;
			}
		}

		internal override string GetResultViewType(ref int pViewOptions)
		{			
			pViewOptions = 0;			

			// If set, tell MMC to destroy the cached OCX and creates (then caches) a new OCX every time
			// an item requests the OCX view.

			if (CreateNew)
			{
				pViewOptions |= (int)MmcViewOptions.CreateNew;
			}

			// Since we are showing an OCX in the result view, we can tell MMC to disable the 
			// standard ListView options from the node's 'View' context menu.

			pViewOptions |= (int)MmcViewOptions.NoListViews;

			// Return the Guid in bracket format i.e. {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}

			return m_ocxGuid.ToString("B");
		}

		internal override void OnAddResultPaneImages(IImageList il)
		{
			// Do nothing - this type of node doesn't need any images and adding them fails with
			// "Catastrophic failure".
		}

		internal override bool OnInitOcx(object objOCX)
		{
			m_control = objOCX; // Store the control instance, so we don't have to query for it later.
			return true;
		}

		protected override bool IsSelected
		{
			get
			{
				// The node is always selected.

				return true;
			}
		}

		protected internal override bool IsResultSelected
		{
			get { return false; }
		}

		protected override void SelectNode()
		{
			base.SelectNode();

			// Load the control state.

			LoadControlState(m_controlState);
		}

		protected override void DeselectNode()
		{
			base.DeselectNode();

			// Save the control state.

			m_controlState = SaveControlState();
		}

		protected virtual object SaveControlState()
		{
			return null;
		}

		protected virtual void LoadControlState(object state)
		{
		}

		protected object GetControlState()
		{
			return m_controlState;
		}
	}
}
