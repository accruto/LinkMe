#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Framework.Content.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class ContentDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContentDetailEntity(ContentDetailEntity instance);
    partial void UpdateContentDetailEntity(ContentDetailEntity instance);
    partial void DeleteContentDetailEntity(ContentDetailEntity instance);
    partial void InsertContentItemEntity(ContentItemEntity instance);
    partial void UpdateContentItemEntity(ContentItemEntity instance);
    partial void DeleteContentItemEntity(ContentItemEntity instance);
    #endregion
		
		public ContentDataContext() : 
				base(global::LinkMe.Framework.Content.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ContentDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContentDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<ContentDetailEntity> ContentDetailEntities
		{
			get
			{
				return this.GetTable<ContentDetailEntity>();
			}
		}
		
		internal System.Data.Linq.Table<ContentItemEntity> ContentItemEntities
		{
			get
			{
				return this.GetTable<ContentItemEntity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentDetail")]
	internal partial class ContentDetailEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _itemId;
		
		private string _name;
		
		private string _type;
		
		private object _value;
		
		private string _stringValue;
		
		private EntityRef<ContentItemEntity> _ContentItemEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnitemIdChanging(System.Guid value);
    partial void OnitemIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnvalueChanging(object value);
    partial void OnvalueChanged();
    partial void OnstringValueChanging(string value);
    partial void OnstringValueChanged();
    #endregion
		
		public ContentDetailEntity()
		{
			this._ContentItemEntity = default(EntityRef<ContentItemEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._ContentItemEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Variant", UpdateCheck=UpdateCheck.Never)]
		public object value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stringValue", DbType="text", UpdateCheck=UpdateCheck.Never)]
		public string stringValue
		{
			get
			{
				return this._stringValue;
			}
			set
			{
				if ((this._stringValue != value))
				{
					this.OnstringValueChanging(value);
					this.SendPropertyChanging();
					this._stringValue = value;
					this.SendPropertyChanged("stringValue");
					this.OnstringValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentItemEntity_ContentDetailEntity", Storage="_ContentItemEntity", ThisKey="itemId", OtherKey="id", IsForeignKey=true)]
		public ContentItemEntity ContentItemEntity
		{
			get
			{
				return this._ContentItemEntity.Entity;
			}
			set
			{
				ContentItemEntity previousValue = this._ContentItemEntity.Entity;
				if (((previousValue != value) 
							|| (this._ContentItemEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItemEntity.Entity = null;
						previousValue.ContentDetailEntities.Remove(this);
					}
					this._ContentItemEntity.Entity = value;
					if ((value != null))
					{
						value.ContentDetailEntities.Add(this);
						this._itemId = value.id;
					}
					else
					{
						this._itemId = default(System.Guid);
					}
					this.SendPropertyChanged("ContentItemEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContentItem")]
	internal partial class ContentItemEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.Guid> _parentId;
		
		private string _name;
		
		private string _type;
		
		private bool _deleted;
		
		private System.Nullable<System.Guid> _verticalId;
		
		private bool _enabled;
		
		private EntitySet<ContentDetailEntity> _ContentDetailEntities;
		
		private EntitySet<ContentItemEntity> _ContentItemEntities;
		
		private EntityRef<ContentItemEntity> _ContentItem1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnparentIdChanging(System.Nullable<System.Guid> value);
    partial void OnparentIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OnverticalIdChanging(System.Nullable<System.Guid> value);
    partial void OnverticalIdChanged();
    partial void OnenabledChanging(bool value);
    partial void OnenabledChanged();
    #endregion
		
		public ContentItemEntity()
		{
			this._ContentDetailEntities = new EntitySet<ContentDetailEntity>(new Action<ContentDetailEntity>(this.attach_ContentDetailEntities), new Action<ContentDetailEntity>(this.detach_ContentDetailEntities));
			this._ContentItemEntities = new EntitySet<ContentItemEntity>(new Action<ContentItemEntity>(this.attach_ContentItemEntities), new Action<ContentItemEntity>(this.detach_ContentItemEntities));
			this._ContentItem1 = default(EntityRef<ContentItemEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					if (this._ContentItem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_verticalId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> verticalId
		{
			get
			{
				return this._verticalId;
			}
			set
			{
				if ((this._verticalId != value))
				{
					this.OnverticalIdChanging(value);
					this.SendPropertyChanging();
					this._verticalId = value;
					this.SendPropertyChanged("verticalId");
					this.OnverticalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enabled", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool enabled
		{
			get
			{
				return this._enabled;
			}
			set
			{
				if ((this._enabled != value))
				{
					this.OnenabledChanging(value);
					this.SendPropertyChanging();
					this._enabled = value;
					this.SendPropertyChanged("enabled");
					this.OnenabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentItemEntity_ContentDetailEntity", Storage="_ContentDetailEntities", ThisKey="id", OtherKey="itemId")]
		public EntitySet<ContentDetailEntity> ContentDetailEntities
		{
			get
			{
				return this._ContentDetailEntities;
			}
			set
			{
				this._ContentDetailEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentItemEntity_ContentItemEntity", Storage="_ContentItemEntities", ThisKey="id", OtherKey="parentId")]
		public EntitySet<ContentItemEntity> ContentItemEntities
		{
			get
			{
				return this._ContentItemEntities;
			}
			set
			{
				this._ContentItemEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentItemEntity_ContentItemEntity", Storage="_ContentItem1", ThisKey="parentId", OtherKey="id", IsForeignKey=true)]
		public ContentItemEntity ContentItem1
		{
			get
			{
				return this._ContentItem1.Entity;
			}
			set
			{
				ContentItemEntity previousValue = this._ContentItem1.Entity;
				if (((previousValue != value) 
							|| (this._ContentItem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentItem1.Entity = null;
						previousValue.ContentItemEntities.Remove(this);
					}
					this._ContentItem1.Entity = value;
					if ((value != null))
					{
						value.ContentItemEntities.Add(this);
						this._parentId = value.id;
					}
					else
					{
						this._parentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ContentItem1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContentDetailEntities(ContentDetailEntity entity)
		{
			this.SendPropertyChanging();
			entity.ContentItemEntity = this;
		}
		
		private void detach_ContentDetailEntities(ContentDetailEntity entity)
		{
			this.SendPropertyChanging();
			entity.ContentItemEntity = null;
		}
		
		private void attach_ContentItemEntities(ContentItemEntity entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem1 = this;
		}
		
		private void detach_ContentItemEntities(ContentItemEntity entity)
		{
			this.SendPropertyChanging();
			entity.ContentItem1 = null;
		}
	}
}
#pragma warning restore 1591
