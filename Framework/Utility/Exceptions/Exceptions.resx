<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NullParameterException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because its value is null.</value>
  </data>
  <data name="InvalidParameterCountException" xml:space="preserve">
    <value>An invalid number of parameters, {ParameterCount}, has been passed when {ExpectedCount} were expected.</value>
  </data>
  <data name="InvalidParameterTypeException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because the supplied value has a type '{ParameterType}' instead of the expected type '{ExpectedType}'.</value>
  </data>
  <data name="InvalidParameterValueException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because the supplied value, '{ParameterValue}', is not valid data for the '{ParameterType}' type.</value>
  </data>
  <data name="ParameterOutOfRangeException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because the supplied value, {ParameterValue}, does not fall within the range: {MinValue} - {MaxValue}.</value>
  </data>
  <data name="MinimumValueParameterException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because the supplied value, {ParameterValue}, fallse below the allowed minimum value: {MaxValue}.</value>
  </data>
  <data name="MaximumValueParameterException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because the supplied value, {ParameterValue}, exceeds the allowed maximum value: {MaxValue}.</value>
  </data>
  <data name="InvalidParameterFormatException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because the supplied value, '{ParameterValue}', does not conform to the expected format: '{ExpectedFormat}'.</value>
  </data>
  <data name="TypeNotAnInterfaceException" xml:space="preserve">
    <value>The supplied type, '{Type}', is not an interface type.</value>
  </data>
  <data name="TypeDoesNotImplementInterfaceException" xml:space="preserve">
    <value>The supplied type, '{Type}', does not implement the '{InterfaceType}' interface.</value>
  </data>
  <data name="TypeNotExpectedException" xml:space="preserve">
    <value>The supplied type, '{Type}', is not of the expected type '{ExpectedType}'.</value>
  </data>
  <data name="InvalidClassInfoParametersException" xml:space="preserve">
    <value>The parameters are invalid because either both the assembly name, '{AssemblyName}', and full name, '{FullName}', must be specified or both must be empty.</value>
  </data>
  <data name="CannotReadXmlElementException" xml:space="preserve">
    <value>The '{Element}' element cannot be found.</value>
  </data>
  <data name="CannotReadXmlAttributeException" xml:space="preserve">
    <value>The '{Attribute}' attribute on the '{Element}' element cannot be found.</value>
  </data>
  <data name="WmiPropertyGetException" xml:space="preserve">
    <value>Failed to get the value of property '{PropertyName}' from WMI class '{ClassPath}'.</value>
  </data>
  <data name="WmiQueryException" xml:space="preserve">
    <value>Failed to execute WMI query '{QueryString}' in scope '{Scope}'.</value>
  </data>
  <data name="WmiPropertySetException" xml:space="preserve">
    <value>Failed to set the value of property '{PropertyName}' on WMI class '{ClassPath}' to '{PropertyValue}'.</value>
  </data>
  <data name="ParameterStringLengthOutOfRangeException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because the length of the supplied string value, {ParameterLength}, does not fall within the range: {MinLength} - {MaxLength}.</value>
  </data>
  <data name="WmiGetClassException" xml:space="preserve">
    <value>Failed to get the '{ClassPath}' WMI class.</value>
  </data>
  <data name="WmiMofFileCompileException" xml:space="preserve">
    <value>Failed to compile MOF file '{FileName}' to WMI namespace '{ServerAndNamespace}'. An error occurred during phase {CompilePhase}, while processing object {ObjectNumber}, defined on lines {FirstLine} - {LastLine}. Error number: 0x{NativeErrorCode:x}, facility: {Facility}, description: '{Description}'.</value>
  </data>
  <data name="CannotOpenRegistryKeyException" xml:space="preserve">
    <value>Registry key '{KeyName}' cannot be opened.</value>
  </data>
  <data name="CannotReadRegistryValueException" xml:space="preserve">
    <value>Registry value '{ValueName}' on key '{KeyName}' cannot be read.</value>
  </data>
  <data name="PathNotFoundException" xml:space="preserve">
    <value>File system path '{Path}' cannot be found.</value>
  </data>
  <data name="SqlCommandFailedException" xml:space="preserve">
    <value>Failed to execute a '{CommandType}' SQL command using connection string '{ConnectionString}' and command timeout of {CommandTimeout} seconds.</value>
  </data>
  <data name="ParameterStringTooShortException" xml:space="preserve">
    <value>The '{Parameter}' parameter is invalid because the length of the supplied string value, {ParameterLength}, is less than the minimum length: {MinLength}.</value>
  </data>
  <data name="DuplicateExistsException" xml:space="preserve">
    <value>The '{Key}' with value '{KeyValue}' would result in a duplicate key being added or inserted.</value>
  </data>
  <data name="InvalidOperationException" xml:space="preserve">
    <value>The operation is invalid.</value>
  </data>
  <data name="OperationNotSupportedException" xml:space="preserve">
    <value>This operation is not supported.</value>
  </data>
  <data name="InvalidMoveException" xml:space="preserve">
    <value>An invalid move operation was attempted.</value>
  </data>
  <data name="InvalidMoveNextException" xml:space="preserve">
    <value>Cannot move beyond the last item in the collection.</value>
  </data>
  <data name="InvalidMovePreviousException" xml:space="preserve">
    <value>Cannot move before the first item in the collection.</value>
  </data>
  <data name="InternalOutOfRangeException" xml:space="preserve">
    <value>The '{Variable}' variable is invalid because the supplied value, {VariableValue}, does not fall within the range: {MinValue} - {MaxValue}.</value>
  </data>
  <data name="UninitialisedException" xml:space="preserve">
    <value>The '{Variable}' variable has not been initialised"</value>
  </data>
  <data name="CannotCreateTypeInstanceException" xml:space="preserve">
    <value>Failed to create an instance of type '{Type}' from assembly '{Assembly}'.</value>
  </data>
  <data name="CannotSaveFormattedXmlException" xml:space="preserve">
    <value>An error occurred in writing formatted XML to file '{FileName}'.</value>
  </data>
  <data name="CannotLoadTypeException" xml:space="preserve">
    <value>Failed to load type '{Type}' from assembly '{Assembly}'.</value>
  </data>
  <data name="XmlPrefixNotFoundException" xml:space="preserve">
    <value>XML prefix '{Prefix}' does not resolve to any XML namespace.</value>
  </data>
  <data name="ParameterValueNotFoundException" xml:space="preserve">
    <value>The value corresponding to the key '{Key}', supplied through the '{Parameter}' parameter, cannot be found.</value>
  </data>
</root>