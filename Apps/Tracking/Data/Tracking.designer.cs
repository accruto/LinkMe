#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Apps.Tracking.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Instrumentation")]
	public partial class TrackingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTrackingCommunicationEntity(TrackingCommunicationEntity instance);
    partial void UpdateTrackingCommunicationEntity(TrackingCommunicationEntity instance);
    partial void DeleteTrackingCommunicationEntity(TrackingCommunicationEntity instance);
    partial void InsertTrackingCommunicationLinkClickedEntity(TrackingCommunicationLinkClickedEntity instance);
    partial void UpdateTrackingCommunicationLinkClickedEntity(TrackingCommunicationLinkClickedEntity instance);
    partial void DeleteTrackingCommunicationLinkClickedEntity(TrackingCommunicationLinkClickedEntity instance);
    partial void InsertTrackingCommunicationLinkEntity(TrackingCommunicationLinkEntity instance);
    partial void UpdateTrackingCommunicationLinkEntity(TrackingCommunicationLinkEntity instance);
    partial void DeleteTrackingCommunicationLinkEntity(TrackingCommunicationLinkEntity instance);
    partial void InsertTrackingCommunicationOpenedEntity(TrackingCommunicationOpenedEntity instance);
    partial void UpdateTrackingCommunicationOpenedEntity(TrackingCommunicationOpenedEntity instance);
    partial void DeleteTrackingCommunicationOpenedEntity(TrackingCommunicationOpenedEntity instance);
    partial void InsertTrackingRequestEntity(TrackingRequestEntity instance);
    partial void UpdateTrackingRequestEntity(TrackingRequestEntity instance);
    partial void DeleteTrackingRequestEntity(TrackingRequestEntity instance);
    #endregion
		
		public TrackingDataContext() : 
				base(global::LinkMe.Apps.Tracking.Properties.Settings.Default.InstrumentationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TrackingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TrackingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TrackingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TrackingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<TrackingCommunicationEntity> TrackingCommunicationEntities
		{
			get
			{
				return this.GetTable<TrackingCommunicationEntity>();
			}
		}
		
		internal System.Data.Linq.Table<TrackingCommunicationLinkClickedEntity> TrackingCommunicationLinkClickedEntities
		{
			get
			{
				return this.GetTable<TrackingCommunicationLinkClickedEntity>();
			}
		}
		
		internal System.Data.Linq.Table<TrackingCommunicationLinkEntity> TrackingCommunicationLinkEntities
		{
			get
			{
				return this.GetTable<TrackingCommunicationLinkEntity>();
			}
		}
		
		internal System.Data.Linq.Table<TrackingCommunicationOpenedEntity> TrackingCommunicationOpenedEntities
		{
			get
			{
				return this.GetTable<TrackingCommunicationOpenedEntity>();
			}
		}
		
		internal System.Data.Linq.Table<TrackingRequestEntity> TrackingRequestEntities
		{
			get
			{
				return this.GetTable<TrackingRequestEntity>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TrackingInsertCommunication")]
		public int TrackingInsertCommunication([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> sent, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string definition, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> vertical, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(100)")] string emailAddress)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, sent, definition, vertical, userId, emailAddress);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TrackingInsertCommunicationLink")]
		public int TrackingInsertCommunicationLink([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> communicationId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(1024)")] string link, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> instance)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, communicationId, link, instance);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TrackingInsertCommunicationLinkClicked")]
		public int TrackingInsertCommunicationLinkClicked([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> communicationId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> clicked)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, communicationId, clicked);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TrackingInsertCommunicationOpened")]
		public int TrackingInsertCommunicationOpened([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> opened)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, opened);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrackingCommunication")]
	internal partial class TrackingCommunicationEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<long> _sent;
		
		private string _definition;
		
		private System.Nullable<System.Guid> _vertical;
		
		private System.Nullable<System.Guid> _userId;
		
		private string _emailAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnsentChanging(System.Nullable<long> value);
    partial void OnsentChanged();
    partial void OndefinitionChanging(string value);
    partial void OndefinitionChanged();
    partial void OnverticalChanging(System.Nullable<System.Guid> value);
    partial void OnverticalChanged();
    partial void OnuserIdChanging(System.Nullable<System.Guid> value);
    partial void OnuserIdChanged();
    partial void OnemailAddressChanging(string value);
    partial void OnemailAddressChanged();
    #endregion
		
		public TrackingCommunicationEntity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sent", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> sent
		{
			get
			{
				return this._sent;
			}
			set
			{
				if ((this._sent != value))
				{
					this.OnsentChanging(value);
					this.SendPropertyChanging();
					this._sent = value;
					this.SendPropertyChanged("sent");
					this.OnsentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_definition", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string definition
		{
			get
			{
				return this._definition;
			}
			set
			{
				if ((this._definition != value))
				{
					this.OndefinitionChanging(value);
					this.SendPropertyChanging();
					this._definition = value;
					this.SendPropertyChanged("definition");
					this.OndefinitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vertical", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> vertical
		{
			get
			{
				return this._vertical;
			}
			set
			{
				if ((this._vertical != value))
				{
					this.OnverticalChanging(value);
					this.SendPropertyChanging();
					this._vertical = value;
					this.SendPropertyChanged("vertical");
					this.OnverticalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailAddress", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string emailAddress
		{
			get
			{
				return this._emailAddress;
			}
			set
			{
				if ((this._emailAddress != value))
				{
					this.OnemailAddressChanging(value);
					this.SendPropertyChanging();
					this._emailAddress = value;
					this.SendPropertyChanged("emailAddress");
					this.OnemailAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrackingCommunicationLinkClicked")]
	internal partial class TrackingCommunicationLinkClickedEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private long _clicked;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnclickedChanging(long value);
    partial void OnclickedChanged();
    #endregion
		
		public TrackingCommunicationLinkClickedEntity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clicked", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long clicked
		{
			get
			{
				return this._clicked;
			}
			set
			{
				if ((this._clicked != value))
				{
					this.OnclickedChanging(value);
					this.SendPropertyChanging();
					this._clicked = value;
					this.SendPropertyChanged("clicked");
					this.OnclickedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrackingCommunicationLink")]
	internal partial class TrackingCommunicationLinkEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _communicationId;
		
		private string _link;
		
		private System.Nullable<int> _instance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OncommunicationIdChanging(System.Guid value);
    partial void OncommunicationIdChanged();
    partial void OnlinkChanging(string value);
    partial void OnlinkChanged();
    partial void OninstanceChanging(System.Nullable<int> value);
    partial void OninstanceChanged();
    #endregion
		
		public TrackingCommunicationLinkEntity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_communicationId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid communicationId
		{
			get
			{
				return this._communicationId;
			}
			set
			{
				if ((this._communicationId != value))
				{
					this.OncommunicationIdChanging(value);
					this.SendPropertyChanging();
					this._communicationId = value;
					this.SendPropertyChanged("communicationId");
					this.OncommunicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_link", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string link
		{
			get
			{
				return this._link;
			}
			set
			{
				if ((this._link != value))
				{
					this.OnlinkChanging(value);
					this.SendPropertyChanging();
					this._link = value;
					this.SendPropertyChanged("link");
					this.OnlinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_instance", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> instance
		{
			get
			{
				return this._instance;
			}
			set
			{
				if ((this._instance != value))
				{
					this.OninstanceChanging(value);
					this.SendPropertyChanging();
					this._instance = value;
					this.SendPropertyChanged("instance");
					this.OninstanceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrackingCommunicationOpened")]
	internal partial class TrackingCommunicationOpenedEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private long _opened;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnopenedChanging(long value);
    partial void OnopenedChanged();
    #endregion
		
		public TrackingCommunicationOpenedEntity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_opened", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long opened
		{
			get
			{
				return this._opened;
			}
			set
			{
				if ((this._opened != value))
				{
					this.OnopenedChanging(value);
					this.SendPropertyChanging();
					this._opened = value;
					this.SendPropertyChanged("opened");
					this.OnopenedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrackingRequest")]
	internal partial class TrackingRequestEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.DateTime _time;
		
		private System.Nullable<System.Guid> _userId;
		
		private string _sessionId;
		
		private string _url;
		
		private string _queryString;
		
		private string _referrerUrl;
		
		private string _referrerQueryString;
		
		private string _clientHostName;
		
		private string _clientHostAddress;
		
		private string _clientAgent;
		
		private string _serverHostName;
		
		private System.Nullable<int> _serverProcessId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OntimeChanging(System.DateTime value);
    partial void OntimeChanged();
    partial void OnuserIdChanging(System.Nullable<System.Guid> value);
    partial void OnuserIdChanged();
    partial void OnsessionIdChanging(string value);
    partial void OnsessionIdChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnqueryStringChanging(string value);
    partial void OnqueryStringChanged();
    partial void OnreferrerUrlChanging(string value);
    partial void OnreferrerUrlChanged();
    partial void OnreferrerQueryStringChanging(string value);
    partial void OnreferrerQueryStringChanged();
    partial void OnclientHostNameChanging(string value);
    partial void OnclientHostNameChanged();
    partial void OnclientHostAddressChanging(string value);
    partial void OnclientHostAddressChanged();
    partial void OnclientAgentChanging(string value);
    partial void OnclientAgentChanged();
    partial void OnserverHostNameChanging(string value);
    partial void OnserverHostNameChanged();
    partial void OnserverProcessIdChanging(System.Nullable<int> value);
    partial void OnserverProcessIdChanged();
    #endregion
		
		public TrackingRequestEntity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sessionId", DbType="NVarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string sessionId
		{
			get
			{
				return this._sessionId;
			}
			set
			{
				if ((this._sessionId != value))
				{
					this.OnsessionIdChanging(value);
					this.SendPropertyChanging();
					this._sessionId = value;
					this.SendPropertyChanged("sessionId");
					this.OnsessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="NVarChar(1024) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_queryString", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string queryString
		{
			get
			{
				return this._queryString;
			}
			set
			{
				if ((this._queryString != value))
				{
					this.OnqueryStringChanging(value);
					this.SendPropertyChanging();
					this._queryString = value;
					this.SendPropertyChanged("queryString");
					this.OnqueryStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_referrerUrl", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string referrerUrl
		{
			get
			{
				return this._referrerUrl;
			}
			set
			{
				if ((this._referrerUrl != value))
				{
					this.OnreferrerUrlChanging(value);
					this.SendPropertyChanging();
					this._referrerUrl = value;
					this.SendPropertyChanged("referrerUrl");
					this.OnreferrerUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_referrerQueryString", DbType="NVarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string referrerQueryString
		{
			get
			{
				return this._referrerQueryString;
			}
			set
			{
				if ((this._referrerQueryString != value))
				{
					this.OnreferrerQueryStringChanging(value);
					this.SendPropertyChanging();
					this._referrerQueryString = value;
					this.SendPropertyChanged("referrerQueryString");
					this.OnreferrerQueryStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clientHostName", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string clientHostName
		{
			get
			{
				return this._clientHostName;
			}
			set
			{
				if ((this._clientHostName != value))
				{
					this.OnclientHostNameChanging(value);
					this.SendPropertyChanging();
					this._clientHostName = value;
					this.SendPropertyChanged("clientHostName");
					this.OnclientHostNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clientHostAddress", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string clientHostAddress
		{
			get
			{
				return this._clientHostAddress;
			}
			set
			{
				if ((this._clientHostAddress != value))
				{
					this.OnclientHostAddressChanging(value);
					this.SendPropertyChanging();
					this._clientHostAddress = value;
					this.SendPropertyChanged("clientHostAddress");
					this.OnclientHostAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clientAgent", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string clientAgent
		{
			get
			{
				return this._clientAgent;
			}
			set
			{
				if ((this._clientAgent != value))
				{
					this.OnclientAgentChanging(value);
					this.SendPropertyChanging();
					this._clientAgent = value;
					this.SendPropertyChanged("clientAgent");
					this.OnclientAgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serverHostName", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string serverHostName
		{
			get
			{
				return this._serverHostName;
			}
			set
			{
				if ((this._serverHostName != value))
				{
					this.OnserverHostNameChanging(value);
					this.SendPropertyChanging();
					this._serverHostName = value;
					this.SendPropertyChanged("serverHostName");
					this.OnserverHostNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serverProcessId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> serverProcessId
		{
			get
			{
				return this._serverProcessId;
			}
			set
			{
				if ((this._serverProcessId != value))
				{
					this.OnserverProcessIdChanging(value);
					this.SendPropertyChanging();
					this._serverProcessId = value;
					this.SendPropertyChanged("serverProcessId");
					this.OnserverProcessIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
