#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.TaskRunner.Test.Tasks.Maintenance
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class MaintenanceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJobAdIndexingEntity(JobAdIndexingEntity instance);
    partial void UpdateJobAdIndexingEntity(JobAdIndexingEntity instance);
    partial void DeleteJobAdIndexingEntity(JobAdIndexingEntity instance);
    partial void InsertMemberIndexingEntity(MemberIndexingEntity instance);
    partial void UpdateMemberIndexingEntity(MemberIndexingEntity instance);
    partial void DeleteMemberIndexingEntity(MemberIndexingEntity instance);
    #endregion
		
		public MaintenanceDataContext() : 
				base(global::LinkMe.TaskRunner.Test.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MaintenanceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<JobAdIndexingEntity> JobAdIndexingEntities
		{
			get
			{
				return this.GetTable<JobAdIndexingEntity>();
			}
		}
		
		internal System.Data.Linq.Table<MemberIndexingEntity> MemberIndexingEntities
		{
			get
			{
				return this.GetTable<MemberIndexingEntity>();
			}
		}
	}
	
	[Table(Name="dbo.JobAdIndexing")]
	internal partial class JobAdIndexingEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _jobAdId;
		
		private System.DateTime _modifiedTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnjobAdIdChanging(System.Guid value);
    partial void OnjobAdIdChanged();
    partial void OnmodifiedTimeChanging(System.DateTime value);
    partial void OnmodifiedTimeChanged();
    #endregion
		
		public JobAdIndexingEntity()
		{
			OnCreated();
		}
		
		[Column(Storage="_jobAdId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid jobAdId
		{
			get
			{
				return this._jobAdId;
			}
			set
			{
				if ((this._jobAdId != value))
				{
					this.OnjobAdIdChanging(value);
					this.SendPropertyChanging();
					this._jobAdId = value;
					this.SendPropertyChanged("jobAdId");
					this.OnjobAdIdChanged();
				}
			}
		}
		
		[Column(Storage="_modifiedTime", DbType="DateTime NOT NULL")]
		public System.DateTime modifiedTime
		{
			get
			{
				return this._modifiedTime;
			}
			set
			{
				if ((this._modifiedTime != value))
				{
					this.OnmodifiedTimeChanging(value);
					this.SendPropertyChanging();
					this._modifiedTime = value;
					this.SendPropertyChanged("modifiedTime");
					this.OnmodifiedTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MemberIndexing")]
	internal partial class MemberIndexingEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _memberId;
		
		private System.DateTime _modifiedTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemberIdChanging(System.Guid value);
    partial void OnmemberIdChanged();
    partial void OnmodifiedTimeChanging(System.DateTime value);
    partial void OnmodifiedTimeChanged();
    #endregion
		
		public MemberIndexingEntity()
		{
			OnCreated();
		}
		
		[Column(Storage="_memberId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid memberId
		{
			get
			{
				return this._memberId;
			}
			set
			{
				if ((this._memberId != value))
				{
					this.OnmemberIdChanging(value);
					this.SendPropertyChanging();
					this._memberId = value;
					this.SendPropertyChanged("memberId");
					this.OnmemberIdChanged();
				}
			}
		}
		
		[Column(Storage="_modifiedTime", DbType="DateTime NOT NULL")]
		public System.DateTime modifiedTime
		{
			get
			{
				return this._modifiedTime;
			}
			set
			{
				if ((this._modifiedTime != value))
				{
					this.OnmodifiedTimeChanging(value);
					this.SendPropertyChanging();
					this._modifiedTime = value;
					this.SendPropertyChanged("modifiedTime");
					this.OnmodifiedTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
