#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Channels.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class ChannelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppEntity(AppEntity instance);
    partial void UpdateAppEntity(AppEntity instance);
    partial void DeleteAppEntity(AppEntity instance);
    partial void InsertChannelEntity(ChannelEntity instance);
    partial void UpdateChannelEntity(ChannelEntity instance);
    partial void DeleteChannelEntity(ChannelEntity instance);
    partial void InsertChannelAppEntity(ChannelAppEntity instance);
    partial void UpdateChannelAppEntity(ChannelAppEntity instance);
    partial void DeleteChannelAppEntity(ChannelAppEntity instance);
    #endregion
		
		public ChannelsDataContext() : 
				base(global::LinkMe.Domain.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChannelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<AppEntity> AppEntities
		{
			get
			{
				return this.GetTable<AppEntity>();
			}
		}
		
		internal System.Data.Linq.Table<ChannelEntity> ChannelEntities
		{
			get
			{
				return this.GetTable<ChannelEntity>();
			}
		}
		
		internal System.Data.Linq.Table<ChannelAppEntity> ChannelAppEntities
		{
			get
			{
				return this.GetTable<ChannelAppEntity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.App")]
	internal partial class AppEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private EntitySet<ChannelAppEntity> _ChannelAppEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public AppEntity()
		{
			this._ChannelAppEntities = new EntitySet<ChannelAppEntity>(new Action<ChannelAppEntity>(this.attach_ChannelAppEntities), new Action<ChannelAppEntity>(this.detach_ChannelAppEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppEntity_ChannelAppEntity", Storage="_ChannelAppEntities", ThisKey="id", OtherKey="appId")]
		public EntitySet<ChannelAppEntity> ChannelAppEntities
		{
			get
			{
				return this._ChannelAppEntities;
			}
			set
			{
				this._ChannelAppEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChannelAppEntities(ChannelAppEntity entity)
		{
			this.SendPropertyChanging();
			entity.AppEntity = this;
		}
		
		private void detach_ChannelAppEntities(ChannelAppEntity entity)
		{
			this.SendPropertyChanging();
			entity.AppEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Channel")]
	internal partial class ChannelEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private EntitySet<ChannelAppEntity> _ChannelAppEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ChannelEntity()
		{
			this._ChannelAppEntities = new EntitySet<ChannelAppEntity>(new Action<ChannelAppEntity>(this.attach_ChannelAppEntities), new Action<ChannelAppEntity>(this.detach_ChannelAppEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChannelEntity_ChannelAppEntity", Storage="_ChannelAppEntities", ThisKey="id", OtherKey="channelId")]
		public EntitySet<ChannelAppEntity> ChannelAppEntities
		{
			get
			{
				return this._ChannelAppEntities;
			}
			set
			{
				this._ChannelAppEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChannelAppEntities(ChannelAppEntity entity)
		{
			this.SendPropertyChanging();
			entity.ChannelEntity = this;
		}
		
		private void detach_ChannelAppEntities(ChannelAppEntity entity)
		{
			this.SendPropertyChanging();
			entity.ChannelEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChannelApp")]
	internal partial class ChannelAppEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _channelId;
		
		private System.Guid _appId;
		
		private EntityRef<AppEntity> _AppEntity;
		
		private EntityRef<ChannelEntity> _ChannelEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnchannelIdChanging(System.Guid value);
    partial void OnchannelIdChanged();
    partial void OnappIdChanging(System.Guid value);
    partial void OnappIdChanged();
    #endregion
		
		public ChannelAppEntity()
		{
			this._AppEntity = default(EntityRef<AppEntity>);
			this._ChannelEntity = default(EntityRef<ChannelEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_channelId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid channelId
		{
			get
			{
				return this._channelId;
			}
			set
			{
				if ((this._channelId != value))
				{
					if (this._ChannelEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchannelIdChanging(value);
					this.SendPropertyChanging();
					this._channelId = value;
					this.SendPropertyChanged("channelId");
					this.OnchannelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid appId
		{
			get
			{
				return this._appId;
			}
			set
			{
				if ((this._appId != value))
				{
					if (this._AppEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnappIdChanging(value);
					this.SendPropertyChanging();
					this._appId = value;
					this.SendPropertyChanged("appId");
					this.OnappIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppEntity_ChannelAppEntity", Storage="_AppEntity", ThisKey="appId", OtherKey="id", IsForeignKey=true)]
		public AppEntity AppEntity
		{
			get
			{
				return this._AppEntity.Entity;
			}
			set
			{
				AppEntity previousValue = this._AppEntity.Entity;
				if (((previousValue != value) 
							|| (this._AppEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppEntity.Entity = null;
						previousValue.ChannelAppEntities.Remove(this);
					}
					this._AppEntity.Entity = value;
					if ((value != null))
					{
						value.ChannelAppEntities.Add(this);
						this._appId = value.id;
					}
					else
					{
						this._appId = default(System.Guid);
					}
					this.SendPropertyChanged("AppEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChannelEntity_ChannelAppEntity", Storage="_ChannelEntity", ThisKey="channelId", OtherKey="id", IsForeignKey=true)]
		public ChannelEntity ChannelEntity
		{
			get
			{
				return this._ChannelEntity.Entity;
			}
			set
			{
				ChannelEntity previousValue = this._ChannelEntity.Entity;
				if (((previousValue != value) 
							|| (this._ChannelEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChannelEntity.Entity = null;
						previousValue.ChannelAppEntities.Remove(this);
					}
					this._ChannelEntity.Entity = value;
					if ((value != null))
					{
						value.ChannelAppEntities.Add(this);
						this._channelId = value.id;
					}
					else
					{
						this._channelId = default(System.Guid);
					}
					this.SendPropertyChanged("ChannelEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
