#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Location.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class LocationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLocationAbbreviationEntity(LocationAbbreviationEntity instance);
    partial void UpdateLocationAbbreviationEntity(LocationAbbreviationEntity instance);
    partial void DeleteLocationAbbreviationEntity(LocationAbbreviationEntity instance);
    partial void InsertRelativeLocationEntity(RelativeLocationEntity instance);
    partial void UpdateRelativeLocationEntity(RelativeLocationEntity instance);
    partial void DeleteRelativeLocationEntity(RelativeLocationEntity instance);
    partial void InsertCountrySubdivisionEntity(CountrySubdivisionEntity instance);
    partial void UpdateCountrySubdivisionEntity(CountrySubdivisionEntity instance);
    partial void DeleteCountrySubdivisionEntity(CountrySubdivisionEntity instance);
    partial void InsertGeographicalAreaEntity(GeographicalAreaEntity instance);
    partial void UpdateGeographicalAreaEntity(GeographicalAreaEntity instance);
    partial void DeleteGeographicalAreaEntity(GeographicalAreaEntity instance);
    partial void InsertNamedLocationEntity(NamedLocationEntity instance);
    partial void UpdateNamedLocationEntity(NamedLocationEntity instance);
    partial void DeleteNamedLocationEntity(NamedLocationEntity instance);
    partial void InsertCountrySubdivisionAliasEntity(CountrySubdivisionAliasEntity instance);
    partial void UpdateCountrySubdivisionAliasEntity(CountrySubdivisionAliasEntity instance);
    partial void DeleteCountrySubdivisionAliasEntity(CountrySubdivisionAliasEntity instance);
    partial void InsertLocalityEntity(LocalityEntity instance);
    partial void UpdateLocalityEntity(LocalityEntity instance);
    partial void DeleteLocalityEntity(LocalityEntity instance);
    partial void InsertLocalityCountrySubdivisionEntity(LocalityCountrySubdivisionEntity instance);
    partial void UpdateLocalityCountrySubdivisionEntity(LocalityCountrySubdivisionEntity instance);
    partial void DeleteLocalityCountrySubdivisionEntity(LocalityCountrySubdivisionEntity instance);
    partial void InsertPostalCodeEntity(PostalCodeEntity instance);
    partial void UpdatePostalCodeEntity(PostalCodeEntity instance);
    partial void DeletePostalCodeEntity(PostalCodeEntity instance);
    partial void InsertPostalSuburbEntity(PostalSuburbEntity instance);
    partial void UpdatePostalSuburbEntity(PostalSuburbEntity instance);
    partial void DeletePostalSuburbEntity(PostalSuburbEntity instance);
    partial void InsertLocalityRegionEntity(LocalityRegionEntity instance);
    partial void UpdateLocalityRegionEntity(LocalityRegionEntity instance);
    partial void DeleteLocalityRegionEntity(LocalityRegionEntity instance);
    partial void InsertRegionEntity(RegionEntity instance);
    partial void UpdateRegionEntity(RegionEntity instance);
    partial void DeleteRegionEntity(RegionEntity instance);
    partial void InsertCountryEntity(CountryEntity instance);
    partial void UpdateCountryEntity(CountryEntity instance);
    partial void DeleteCountryEntity(CountryEntity instance);
    partial void InsertRegionAliasEntity(RegionAliasEntity instance);
    partial void UpdateRegionAliasEntity(RegionAliasEntity instance);
    partial void DeleteRegionAliasEntity(RegionAliasEntity instance);
    #endregion
		
		public LocationDataContext() : 
				base(global::LinkMe.Domain.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LocationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<LocationAbbreviationEntity> LocationAbbreviationEntities
		{
			get
			{
				return this.GetTable<LocationAbbreviationEntity>();
			}
		}
		
		internal System.Data.Linq.Table<RelativeLocationEntity> RelativeLocationEntities
		{
			get
			{
				return this.GetTable<RelativeLocationEntity>();
			}
		}
		
		internal System.Data.Linq.Table<CountrySubdivisionEntity> CountrySubdivisionEntities
		{
			get
			{
				return this.GetTable<CountrySubdivisionEntity>();
			}
		}
		
		internal System.Data.Linq.Table<GeographicalAreaEntity> GeographicalAreaEntities
		{
			get
			{
				return this.GetTable<GeographicalAreaEntity>();
			}
		}
		
		internal System.Data.Linq.Table<NamedLocationEntity> NamedLocationEntities
		{
			get
			{
				return this.GetTable<NamedLocationEntity>();
			}
		}
		
		internal System.Data.Linq.Table<CountrySubdivisionAliasEntity> CountrySubdivisionAliasEntities
		{
			get
			{
				return this.GetTable<CountrySubdivisionAliasEntity>();
			}
		}
		
		internal System.Data.Linq.Table<LocalityEntity> LocalityEntities
		{
			get
			{
				return this.GetTable<LocalityEntity>();
			}
		}
		
		internal System.Data.Linq.Table<LocalityCountrySubdivisionEntity> LocalityCountrySubdivisionEntities
		{
			get
			{
				return this.GetTable<LocalityCountrySubdivisionEntity>();
			}
		}
		
		internal System.Data.Linq.Table<PostalCodeEntity> PostalCodeEntities
		{
			get
			{
				return this.GetTable<PostalCodeEntity>();
			}
		}
		
		internal System.Data.Linq.Table<PostalSuburbEntity> PostalSuburbEntities
		{
			get
			{
				return this.GetTable<PostalSuburbEntity>();
			}
		}
		
		internal System.Data.Linq.Table<LocalityRegionEntity> LocalityRegionEntities
		{
			get
			{
				return this.GetTable<LocalityRegionEntity>();
			}
		}
		
		internal System.Data.Linq.Table<RegionEntity> RegionEntities
		{
			get
			{
				return this.GetTable<RegionEntity>();
			}
		}
		
		internal System.Data.Linq.Table<CountryEntity> CountryEntities
		{
			get
			{
				return this.GetTable<CountryEntity>();
			}
		}
		
		internal System.Data.Linq.Table<RegionAliasEntity> RegionAliasEntities
		{
			get
			{
				return this.GetTable<RegionAliasEntity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationAbbreviation")]
	internal partial class LocationAbbreviationEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private byte _countryId;
		
		private string _abbreviation;
		
		private string _displayName;
		
		private bool _prefix;
		
		private bool _suffix;
		
		private EntityRef<CountryEntity> _CountryEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncountryIdChanging(byte value);
    partial void OncountryIdChanged();
    partial void OnabbreviationChanging(string value);
    partial void OnabbreviationChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnprefixChanging(bool value);
    partial void OnprefixChanged();
    partial void OnsuffixChanging(bool value);
    partial void OnsuffixChanged();
    #endregion
		
		public LocationAbbreviationEntity()
		{
			this._CountryEntity = default(EntityRef<CountryEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryId", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte countryId
		{
			get
			{
				return this._countryId;
			}
			set
			{
				if ((this._countryId != value))
				{
					if (this._CountryEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncountryIdChanging(value);
					this.SendPropertyChanging();
					this._countryId = value;
					this.SendPropertyChanged("countryId");
					this.OncountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abbreviation", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string abbreviation
		{
			get
			{
				return this._abbreviation;
			}
			set
			{
				if ((this._abbreviation != value))
				{
					this.OnabbreviationChanging(value);
					this.SendPropertyChanging();
					this._abbreviation = value;
					this.SendPropertyChanged("abbreviation");
					this.OnabbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prefix", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool prefix
		{
			get
			{
				return this._prefix;
			}
			set
			{
				if ((this._prefix != value))
				{
					this.OnprefixChanging(value);
					this.SendPropertyChanging();
					this._prefix = value;
					this.SendPropertyChanged("prefix");
					this.OnprefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_suffix", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool suffix
		{
			get
			{
				return this._suffix;
			}
			set
			{
				if ((this._suffix != value))
				{
					this.OnsuffixChanging(value);
					this.SendPropertyChanging();
					this._suffix = value;
					this.SendPropertyChanged("suffix");
					this.OnsuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryEntity_LocationAbbreviationEntity", Storage="_CountryEntity", ThisKey="countryId", OtherKey="id", IsForeignKey=true)]
		public CountryEntity CountryEntity
		{
			get
			{
				return this._CountryEntity.Entity;
			}
			set
			{
				CountryEntity previousValue = this._CountryEntity.Entity;
				if (((previousValue != value) 
							|| (this._CountryEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryEntity.Entity = null;
						previousValue.LocationAbbreviationEntities.Remove(this);
					}
					this._CountryEntity.Entity = value;
					if ((value != null))
					{
						value.LocationAbbreviationEntities.Add(this);
						this._countryId = value.id;
					}
					else
					{
						this._countryId = default(byte);
					}
					this.SendPropertyChanged("CountryEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelativeLocation")]
	internal partial class RelativeLocationEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private byte _countryId;
		
		private string _displayName;
		
		private bool _prefix;
		
		private bool _suffix;
		
		private EntityRef<CountryEntity> _CountryEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncountryIdChanging(byte value);
    partial void OncountryIdChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnprefixChanging(bool value);
    partial void OnprefixChanged();
    partial void OnsuffixChanging(bool value);
    partial void OnsuffixChanged();
    #endregion
		
		public RelativeLocationEntity()
		{
			this._CountryEntity = default(EntityRef<CountryEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryId", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte countryId
		{
			get
			{
				return this._countryId;
			}
			set
			{
				if ((this._countryId != value))
				{
					if (this._CountryEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncountryIdChanging(value);
					this.SendPropertyChanging();
					this._countryId = value;
					this.SendPropertyChanged("countryId");
					this.OncountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prefix", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool prefix
		{
			get
			{
				return this._prefix;
			}
			set
			{
				if ((this._prefix != value))
				{
					this.OnprefixChanging(value);
					this.SendPropertyChanging();
					this._prefix = value;
					this.SendPropertyChanged("prefix");
					this.OnprefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_suffix", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool suffix
		{
			get
			{
				return this._suffix;
			}
			set
			{
				if ((this._suffix != value))
				{
					this.OnsuffixChanging(value);
					this.SendPropertyChanging();
					this._suffix = value;
					this.SendPropertyChanged("suffix");
					this.OnsuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryEntity_RelativeLocationEntity", Storage="_CountryEntity", ThisKey="countryId", OtherKey="id", IsForeignKey=true)]
		public CountryEntity CountryEntity
		{
			get
			{
				return this._CountryEntity.Entity;
			}
			set
			{
				CountryEntity previousValue = this._CountryEntity.Entity;
				if (((previousValue != value) 
							|| (this._CountryEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryEntity.Entity = null;
						previousValue.RelativeLocationEntities.Remove(this);
					}
					this._CountryEntity.Entity = value;
					if ((value != null))
					{
						value.RelativeLocationEntities.Add(this);
						this._countryId = value.id;
					}
					else
					{
						this._countryId = default(byte);
					}
					this.SendPropertyChanged("CountryEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountrySubdivision")]
	internal partial class CountrySubdivisionEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _circleRadiusKm;
		
		private System.Nullable<int> _circleCentreId;
		
		private byte _countryId;
		
		private string _shortDisplayName;
		
		private string _urlName;
		
		private EntitySet<CountrySubdivisionAliasEntity> _CountrySubdivisionAliasEntities;
		
		private EntitySet<LocalityCountrySubdivisionEntity> _LocalityCountrySubdivisionEntities;
		
		private EntitySet<PostalSuburbEntity> _PostalSuburbEntities;
		
		private EntityRef<GeographicalAreaEntity> _GeographicalAreaEntity;
		
		private EntityRef<LocalityEntity> _LocalityEntity;
		
		private EntityRef<CountryEntity> _CountryEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncircleRadiusKmChanging(int value);
    partial void OncircleRadiusKmChanged();
    partial void OncircleCentreIdChanging(System.Nullable<int> value);
    partial void OncircleCentreIdChanged();
    partial void OncountryIdChanging(byte value);
    partial void OncountryIdChanged();
    partial void OnshortDisplayNameChanging(string value);
    partial void OnshortDisplayNameChanged();
    partial void OnurlNameChanging(string value);
    partial void OnurlNameChanged();
    #endregion
		
		public CountrySubdivisionEntity()
		{
			this._CountrySubdivisionAliasEntities = new EntitySet<CountrySubdivisionAliasEntity>(new Action<CountrySubdivisionAliasEntity>(this.attach_CountrySubdivisionAliasEntities), new Action<CountrySubdivisionAliasEntity>(this.detach_CountrySubdivisionAliasEntities));
			this._LocalityCountrySubdivisionEntities = new EntitySet<LocalityCountrySubdivisionEntity>(new Action<LocalityCountrySubdivisionEntity>(this.attach_LocalityCountrySubdivisionEntities), new Action<LocalityCountrySubdivisionEntity>(this.detach_LocalityCountrySubdivisionEntities));
			this._PostalSuburbEntities = new EntitySet<PostalSuburbEntity>(new Action<PostalSuburbEntity>(this.attach_PostalSuburbEntities), new Action<PostalSuburbEntity>(this.detach_PostalSuburbEntities));
			this._GeographicalAreaEntity = default(EntityRef<GeographicalAreaEntity>);
			this._LocalityEntity = default(EntityRef<LocalityEntity>);
			this._CountryEntity = default(EntityRef<CountryEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._GeographicalAreaEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_circleRadiusKm", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int circleRadiusKm
		{
			get
			{
				return this._circleRadiusKm;
			}
			set
			{
				if ((this._circleRadiusKm != value))
				{
					this.OncircleRadiusKmChanging(value);
					this.SendPropertyChanging();
					this._circleRadiusKm = value;
					this.SendPropertyChanged("circleRadiusKm");
					this.OncircleRadiusKmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_circleCentreId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> circleCentreId
		{
			get
			{
				return this._circleCentreId;
			}
			set
			{
				if ((this._circleCentreId != value))
				{
					if (this._LocalityEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncircleCentreIdChanging(value);
					this.SendPropertyChanging();
					this._circleCentreId = value;
					this.SendPropertyChanged("circleCentreId");
					this.OncircleCentreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countryId", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte countryId
		{
			get
			{
				return this._countryId;
			}
			set
			{
				if ((this._countryId != value))
				{
					if (this._CountryEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncountryIdChanging(value);
					this.SendPropertyChanging();
					this._countryId = value;
					this.SendPropertyChanged("countryId");
					this.OncountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shortDisplayName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string shortDisplayName
		{
			get
			{
				return this._shortDisplayName;
			}
			set
			{
				if ((this._shortDisplayName != value))
				{
					this.OnshortDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._shortDisplayName = value;
					this.SendPropertyChanged("shortDisplayName");
					this.OnshortDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_urlName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string urlName
		{
			get
			{
				return this._urlName;
			}
			set
			{
				if ((this._urlName != value))
				{
					this.OnurlNameChanging(value);
					this.SendPropertyChanging();
					this._urlName = value;
					this.SendPropertyChanged("urlName");
					this.OnurlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountrySubdivisionEntity_CountrySubdivisionAliasEntity", Storage="_CountrySubdivisionAliasEntities", ThisKey="id", OtherKey="countrySubdivisionId")]
		public EntitySet<CountrySubdivisionAliasEntity> CountrySubdivisionAliasEntities
		{
			get
			{
				return this._CountrySubdivisionAliasEntities;
			}
			set
			{
				this._CountrySubdivisionAliasEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountrySubdivisionEntity_LocalityCountrySubdivisionEntity", Storage="_LocalityCountrySubdivisionEntities", ThisKey="id", OtherKey="countrySubdivisionId")]
		public EntitySet<LocalityCountrySubdivisionEntity> LocalityCountrySubdivisionEntities
		{
			get
			{
				return this._LocalityCountrySubdivisionEntities;
			}
			set
			{
				this._LocalityCountrySubdivisionEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountrySubdivisionEntity_PostalSuburbEntity", Storage="_PostalSuburbEntities", ThisKey="id", OtherKey="countrySubdivisionId")]
		public EntitySet<PostalSuburbEntity> PostalSuburbEntities
		{
			get
			{
				return this._PostalSuburbEntities;
			}
			set
			{
				this._PostalSuburbEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeographicalAreaEntity_CountrySubdivisionEntity", Storage="_GeographicalAreaEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public GeographicalAreaEntity GeographicalAreaEntity
		{
			get
			{
				return this._GeographicalAreaEntity.Entity;
			}
			set
			{
				GeographicalAreaEntity previousValue = this._GeographicalAreaEntity.Entity;
				if (((previousValue != value) 
							|| (this._GeographicalAreaEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeographicalAreaEntity.Entity = null;
						previousValue.CountrySubdivisionEntity = null;
					}
					this._GeographicalAreaEntity.Entity = value;
					if ((value != null))
					{
						value.CountrySubdivisionEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("GeographicalAreaEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalityEntity_CountrySubdivisionEntity", Storage="_LocalityEntity", ThisKey="circleCentreId", OtherKey="id", IsForeignKey=true)]
		public LocalityEntity LocalityEntity
		{
			get
			{
				return this._LocalityEntity.Entity;
			}
			set
			{
				LocalityEntity previousValue = this._LocalityEntity.Entity;
				if (((previousValue != value) 
							|| (this._LocalityEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocalityEntity.Entity = null;
						previousValue.CountrySubdivisionEntities.Remove(this);
					}
					this._LocalityEntity.Entity = value;
					if ((value != null))
					{
						value.CountrySubdivisionEntities.Add(this);
						this._circleCentreId = value.id;
					}
					else
					{
						this._circleCentreId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LocalityEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryEntity_CountrySubdivisionEntity", Storage="_CountryEntity", ThisKey="countryId", OtherKey="id", IsForeignKey=true)]
		public CountryEntity CountryEntity
		{
			get
			{
				return this._CountryEntity.Entity;
			}
			set
			{
				CountryEntity previousValue = this._CountryEntity.Entity;
				if (((previousValue != value) 
							|| (this._CountryEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryEntity.Entity = null;
						previousValue.CountrySubdivisionEntities.Remove(this);
					}
					this._CountryEntity.Entity = value;
					if ((value != null))
					{
						value.CountrySubdivisionEntities.Add(this);
						this._countryId = value.id;
					}
					else
					{
						this._countryId = default(byte);
					}
					this.SendPropertyChanged("CountryEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CountrySubdivisionAliasEntities(CountrySubdivisionAliasEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountrySubdivisionEntity = this;
		}
		
		private void detach_CountrySubdivisionAliasEntities(CountrySubdivisionAliasEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountrySubdivisionEntity = null;
		}
		
		private void attach_LocalityCountrySubdivisionEntities(LocalityCountrySubdivisionEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountrySubdivisionEntity = this;
		}
		
		private void detach_LocalityCountrySubdivisionEntities(LocalityCountrySubdivisionEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountrySubdivisionEntity = null;
		}
		
		private void attach_PostalSuburbEntities(PostalSuburbEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountrySubdivisionEntity = this;
		}
		
		private void detach_PostalSuburbEntities(PostalSuburbEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountrySubdivisionEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeographicalArea")]
	internal partial class GeographicalAreaEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private EntityRef<CountrySubdivisionEntity> _CountrySubdivisionEntity;
		
		private EntityRef<LocalityEntity> _LocalityEntity;
		
		private EntityRef<RegionEntity> _RegionEntity;
		
		private EntityRef<NamedLocationEntity> _NamedLocationEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public GeographicalAreaEntity()
		{
			this._CountrySubdivisionEntity = default(EntityRef<CountrySubdivisionEntity>);
			this._LocalityEntity = default(EntityRef<LocalityEntity>);
			this._RegionEntity = default(EntityRef<RegionEntity>);
			this._NamedLocationEntity = default(EntityRef<NamedLocationEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._NamedLocationEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeographicalAreaEntity_CountrySubdivisionEntity", Storage="_CountrySubdivisionEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public CountrySubdivisionEntity CountrySubdivisionEntity
		{
			get
			{
				return this._CountrySubdivisionEntity.Entity;
			}
			set
			{
				CountrySubdivisionEntity previousValue = this._CountrySubdivisionEntity.Entity;
				if (((previousValue != value) 
							|| (this._CountrySubdivisionEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountrySubdivisionEntity.Entity = null;
						previousValue.GeographicalAreaEntity = null;
					}
					this._CountrySubdivisionEntity.Entity = value;
					if ((value != null))
					{
						value.GeographicalAreaEntity = this;
					}
					this.SendPropertyChanged("CountrySubdivisionEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeographicalAreaEntity_LocalityEntity", Storage="_LocalityEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public LocalityEntity LocalityEntity
		{
			get
			{
				return this._LocalityEntity.Entity;
			}
			set
			{
				LocalityEntity previousValue = this._LocalityEntity.Entity;
				if (((previousValue != value) 
							|| (this._LocalityEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocalityEntity.Entity = null;
						previousValue.GeographicalAreaEntity = null;
					}
					this._LocalityEntity.Entity = value;
					if ((value != null))
					{
						value.GeographicalAreaEntity = this;
					}
					this.SendPropertyChanged("LocalityEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeographicalAreaEntity_RegionEntity", Storage="_RegionEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public RegionEntity RegionEntity
		{
			get
			{
				return this._RegionEntity.Entity;
			}
			set
			{
				RegionEntity previousValue = this._RegionEntity.Entity;
				if (((previousValue != value) 
							|| (this._RegionEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegionEntity.Entity = null;
						previousValue.GeographicalAreaEntity = null;
					}
					this._RegionEntity.Entity = value;
					if ((value != null))
					{
						value.GeographicalAreaEntity = this;
					}
					this.SendPropertyChanged("RegionEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedLocationEntity_GeographicalAreaEntity", Storage="_NamedLocationEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public NamedLocationEntity NamedLocationEntity
		{
			get
			{
				return this._NamedLocationEntity.Entity;
			}
			set
			{
				NamedLocationEntity previousValue = this._NamedLocationEntity.Entity;
				if (((previousValue != value) 
							|| (this._NamedLocationEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NamedLocationEntity.Entity = null;
						previousValue.GeographicalAreaEntity = null;
					}
					this._NamedLocationEntity.Entity = value;
					if ((value != null))
					{
						value.GeographicalAreaEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("NamedLocationEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NamedLocation")]
	internal partial class NamedLocationEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _displayName;
		
		private EntityRef<GeographicalAreaEntity> _GeographicalAreaEntity;
		
		private EntityRef<PostalCodeEntity> _PostalCodeEntity;
		
		private EntityRef<PostalSuburbEntity> _PostalSuburbEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    #endregion
		
		public NamedLocationEntity()
		{
			this._GeographicalAreaEntity = default(EntityRef<GeographicalAreaEntity>);
			this._PostalCodeEntity = default(EntityRef<PostalCodeEntity>);
			this._PostalSuburbEntity = default(EntityRef<PostalSuburbEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedLocationEntity_GeographicalAreaEntity", Storage="_GeographicalAreaEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public GeographicalAreaEntity GeographicalAreaEntity
		{
			get
			{
				return this._GeographicalAreaEntity.Entity;
			}
			set
			{
				GeographicalAreaEntity previousValue = this._GeographicalAreaEntity.Entity;
				if (((previousValue != value) 
							|| (this._GeographicalAreaEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeographicalAreaEntity.Entity = null;
						previousValue.NamedLocationEntity = null;
					}
					this._GeographicalAreaEntity.Entity = value;
					if ((value != null))
					{
						value.NamedLocationEntity = this;
					}
					this.SendPropertyChanged("GeographicalAreaEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedLocationEntity_PostalCodeEntity", Storage="_PostalCodeEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public PostalCodeEntity PostalCodeEntity
		{
			get
			{
				return this._PostalCodeEntity.Entity;
			}
			set
			{
				PostalCodeEntity previousValue = this._PostalCodeEntity.Entity;
				if (((previousValue != value) 
							|| (this._PostalCodeEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PostalCodeEntity.Entity = null;
						previousValue.NamedLocationEntity = null;
					}
					this._PostalCodeEntity.Entity = value;
					if ((value != null))
					{
						value.NamedLocationEntity = this;
					}
					this.SendPropertyChanged("PostalCodeEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedLocationEntity_PostalSuburbEntity", Storage="_PostalSuburbEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public PostalSuburbEntity PostalSuburbEntity
		{
			get
			{
				return this._PostalSuburbEntity.Entity;
			}
			set
			{
				PostalSuburbEntity previousValue = this._PostalSuburbEntity.Entity;
				if (((previousValue != value) 
							|| (this._PostalSuburbEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PostalSuburbEntity.Entity = null;
						previousValue.NamedLocationEntity = null;
					}
					this._PostalSuburbEntity.Entity = value;
					if ((value != null))
					{
						value.NamedLocationEntity = this;
					}
					this.SendPropertyChanged("PostalSuburbEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountrySubdivisionAlias")]
	internal partial class CountrySubdivisionAliasEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _displayName;
		
		private int _countrySubdivisionId;
		
		private EntityRef<CountrySubdivisionEntity> _CountrySubdivisionEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OncountrySubdivisionIdChanging(int value);
    partial void OncountrySubdivisionIdChanged();
    #endregion
		
		public CountrySubdivisionAliasEntity()
		{
			this._CountrySubdivisionEntity = default(EntityRef<CountrySubdivisionEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="SmallInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countrySubdivisionId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int countrySubdivisionId
		{
			get
			{
				return this._countrySubdivisionId;
			}
			set
			{
				if ((this._countrySubdivisionId != value))
				{
					if (this._CountrySubdivisionEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncountrySubdivisionIdChanging(value);
					this.SendPropertyChanging();
					this._countrySubdivisionId = value;
					this.SendPropertyChanged("countrySubdivisionId");
					this.OncountrySubdivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountrySubdivisionEntity_CountrySubdivisionAliasEntity", Storage="_CountrySubdivisionEntity", ThisKey="countrySubdivisionId", OtherKey="id", IsForeignKey=true)]
		public CountrySubdivisionEntity CountrySubdivisionEntity
		{
			get
			{
				return this._CountrySubdivisionEntity.Entity;
			}
			set
			{
				CountrySubdivisionEntity previousValue = this._CountrySubdivisionEntity.Entity;
				if (((previousValue != value) 
							|| (this._CountrySubdivisionEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountrySubdivisionEntity.Entity = null;
						previousValue.CountrySubdivisionAliasEntities.Remove(this);
					}
					this._CountrySubdivisionEntity.Entity = value;
					if ((value != null))
					{
						value.CountrySubdivisionAliasEntities.Add(this);
						this._countrySubdivisionId = value.id;
					}
					else
					{
						this._countrySubdivisionId = default(int);
					}
					this.SendPropertyChanged("CountrySubdivisionEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locality")]
	internal partial class LocalityEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private float _centroidLatitude;
		
		private float _centroidLongitude;
		
		private EntitySet<CountrySubdivisionEntity> _CountrySubdivisionEntities;
		
		private EntitySet<LocalityCountrySubdivisionEntity> _LocalityCountrySubdivisionEntities;
		
		private EntitySet<PostalCodeEntity> _PostalCodeEntities;
		
		private EntitySet<LocalityRegionEntity> _LocalityRegionEntities;
		
		private EntityRef<GeographicalAreaEntity> _GeographicalAreaEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncentroidLatitudeChanging(float value);
    partial void OncentroidLatitudeChanged();
    partial void OncentroidLongitudeChanging(float value);
    partial void OncentroidLongitudeChanged();
    #endregion
		
		public LocalityEntity()
		{
			this._CountrySubdivisionEntities = new EntitySet<CountrySubdivisionEntity>(new Action<CountrySubdivisionEntity>(this.attach_CountrySubdivisionEntities), new Action<CountrySubdivisionEntity>(this.detach_CountrySubdivisionEntities));
			this._LocalityCountrySubdivisionEntities = new EntitySet<LocalityCountrySubdivisionEntity>(new Action<LocalityCountrySubdivisionEntity>(this.attach_LocalityCountrySubdivisionEntities), new Action<LocalityCountrySubdivisionEntity>(this.detach_LocalityCountrySubdivisionEntities));
			this._PostalCodeEntities = new EntitySet<PostalCodeEntity>(new Action<PostalCodeEntity>(this.attach_PostalCodeEntities), new Action<PostalCodeEntity>(this.detach_PostalCodeEntities));
			this._LocalityRegionEntities = new EntitySet<LocalityRegionEntity>(new Action<LocalityRegionEntity>(this.attach_LocalityRegionEntities), new Action<LocalityRegionEntity>(this.detach_LocalityRegionEntities));
			this._GeographicalAreaEntity = default(EntityRef<GeographicalAreaEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._GeographicalAreaEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_centroidLatitude", DbType="Real NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public float centroidLatitude
		{
			get
			{
				return this._centroidLatitude;
			}
			set
			{
				if ((this._centroidLatitude != value))
				{
					this.OncentroidLatitudeChanging(value);
					this.SendPropertyChanging();
					this._centroidLatitude = value;
					this.SendPropertyChanged("centroidLatitude");
					this.OncentroidLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_centroidLongitude", DbType="Real NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public float centroidLongitude
		{
			get
			{
				return this._centroidLongitude;
			}
			set
			{
				if ((this._centroidLongitude != value))
				{
					this.OncentroidLongitudeChanging(value);
					this.SendPropertyChanging();
					this._centroidLongitude = value;
					this.SendPropertyChanged("centroidLongitude");
					this.OncentroidLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalityEntity_CountrySubdivisionEntity", Storage="_CountrySubdivisionEntities", ThisKey="id", OtherKey="circleCentreId")]
		public EntitySet<CountrySubdivisionEntity> CountrySubdivisionEntities
		{
			get
			{
				return this._CountrySubdivisionEntities;
			}
			set
			{
				this._CountrySubdivisionEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalityEntity_LocalityCountrySubdivisionEntity", Storage="_LocalityCountrySubdivisionEntities", ThisKey="id", OtherKey="localityId")]
		public EntitySet<LocalityCountrySubdivisionEntity> LocalityCountrySubdivisionEntities
		{
			get
			{
				return this._LocalityCountrySubdivisionEntities;
			}
			set
			{
				this._LocalityCountrySubdivisionEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalityEntity_PostalCodeEntity", Storage="_PostalCodeEntities", ThisKey="id", OtherKey="localityId")]
		public EntitySet<PostalCodeEntity> PostalCodeEntities
		{
			get
			{
				return this._PostalCodeEntities;
			}
			set
			{
				this._PostalCodeEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalityEntity_LocalityRegionEntity", Storage="_LocalityRegionEntities", ThisKey="id", OtherKey="localityId")]
		public EntitySet<LocalityRegionEntity> LocalityRegionEntities
		{
			get
			{
				return this._LocalityRegionEntities;
			}
			set
			{
				this._LocalityRegionEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeographicalAreaEntity_LocalityEntity", Storage="_GeographicalAreaEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public GeographicalAreaEntity GeographicalAreaEntity
		{
			get
			{
				return this._GeographicalAreaEntity.Entity;
			}
			set
			{
				GeographicalAreaEntity previousValue = this._GeographicalAreaEntity.Entity;
				if (((previousValue != value) 
							|| (this._GeographicalAreaEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeographicalAreaEntity.Entity = null;
						previousValue.LocalityEntity = null;
					}
					this._GeographicalAreaEntity.Entity = value;
					if ((value != null))
					{
						value.LocalityEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("GeographicalAreaEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CountrySubdivisionEntities(CountrySubdivisionEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocalityEntity = this;
		}
		
		private void detach_CountrySubdivisionEntities(CountrySubdivisionEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocalityEntity = null;
		}
		
		private void attach_LocalityCountrySubdivisionEntities(LocalityCountrySubdivisionEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocalityEntity = this;
		}
		
		private void detach_LocalityCountrySubdivisionEntities(LocalityCountrySubdivisionEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocalityEntity = null;
		}
		
		private void attach_PostalCodeEntities(PostalCodeEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocalityEntity = this;
		}
		
		private void detach_PostalCodeEntities(PostalCodeEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocalityEntity = null;
		}
		
		private void attach_LocalityRegionEntities(LocalityRegionEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocalityEntity = this;
		}
		
		private void detach_LocalityRegionEntities(LocalityRegionEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocalityEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocalityCountrySubdivision")]
	internal partial class LocalityCountrySubdivisionEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _localityId;
		
		private int _countrySubdivisionId;
		
		private EntityRef<CountrySubdivisionEntity> _CountrySubdivisionEntity;
		
		private EntityRef<LocalityEntity> _LocalityEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlocalityIdChanging(int value);
    partial void OnlocalityIdChanged();
    partial void OncountrySubdivisionIdChanging(int value);
    partial void OncountrySubdivisionIdChanged();
    #endregion
		
		public LocalityCountrySubdivisionEntity()
		{
			this._CountrySubdivisionEntity = default(EntityRef<CountrySubdivisionEntity>);
			this._LocalityEntity = default(EntityRef<LocalityEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_localityId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int localityId
		{
			get
			{
				return this._localityId;
			}
			set
			{
				if ((this._localityId != value))
				{
					if (this._LocalityEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlocalityIdChanging(value);
					this.SendPropertyChanging();
					this._localityId = value;
					this.SendPropertyChanged("localityId");
					this.OnlocalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countrySubdivisionId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int countrySubdivisionId
		{
			get
			{
				return this._countrySubdivisionId;
			}
			set
			{
				if ((this._countrySubdivisionId != value))
				{
					if (this._CountrySubdivisionEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncountrySubdivisionIdChanging(value);
					this.SendPropertyChanging();
					this._countrySubdivisionId = value;
					this.SendPropertyChanged("countrySubdivisionId");
					this.OncountrySubdivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountrySubdivisionEntity_LocalityCountrySubdivisionEntity", Storage="_CountrySubdivisionEntity", ThisKey="countrySubdivisionId", OtherKey="id", IsForeignKey=true)]
		public CountrySubdivisionEntity CountrySubdivisionEntity
		{
			get
			{
				return this._CountrySubdivisionEntity.Entity;
			}
			set
			{
				CountrySubdivisionEntity previousValue = this._CountrySubdivisionEntity.Entity;
				if (((previousValue != value) 
							|| (this._CountrySubdivisionEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountrySubdivisionEntity.Entity = null;
						previousValue.LocalityCountrySubdivisionEntities.Remove(this);
					}
					this._CountrySubdivisionEntity.Entity = value;
					if ((value != null))
					{
						value.LocalityCountrySubdivisionEntities.Add(this);
						this._countrySubdivisionId = value.id;
					}
					else
					{
						this._countrySubdivisionId = default(int);
					}
					this.SendPropertyChanged("CountrySubdivisionEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalityEntity_LocalityCountrySubdivisionEntity", Storage="_LocalityEntity", ThisKey="localityId", OtherKey="id", IsForeignKey=true)]
		public LocalityEntity LocalityEntity
		{
			get
			{
				return this._LocalityEntity.Entity;
			}
			set
			{
				LocalityEntity previousValue = this._LocalityEntity.Entity;
				if (((previousValue != value) 
							|| (this._LocalityEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocalityEntity.Entity = null;
						previousValue.LocalityCountrySubdivisionEntities.Remove(this);
					}
					this._LocalityEntity.Entity = value;
					if ((value != null))
					{
						value.LocalityCountrySubdivisionEntities.Add(this);
						this._localityId = value.id;
					}
					else
					{
						this._localityId = default(int);
					}
					this.SendPropertyChanged("LocalityEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PostalCode")]
	internal partial class PostalCodeEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _localityId;
		
		private EntitySet<PostalSuburbEntity> _PostalSuburbEntities;
		
		private EntityRef<LocalityEntity> _LocalityEntity;
		
		private EntityRef<NamedLocationEntity> _NamedLocationEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnlocalityIdChanging(int value);
    partial void OnlocalityIdChanged();
    #endregion
		
		public PostalCodeEntity()
		{
			this._PostalSuburbEntities = new EntitySet<PostalSuburbEntity>(new Action<PostalSuburbEntity>(this.attach_PostalSuburbEntities), new Action<PostalSuburbEntity>(this.detach_PostalSuburbEntities));
			this._LocalityEntity = default(EntityRef<LocalityEntity>);
			this._NamedLocationEntity = default(EntityRef<NamedLocationEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._NamedLocationEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_localityId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int localityId
		{
			get
			{
				return this._localityId;
			}
			set
			{
				if ((this._localityId != value))
				{
					if (this._LocalityEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlocalityIdChanging(value);
					this.SendPropertyChanging();
					this._localityId = value;
					this.SendPropertyChanged("localityId");
					this.OnlocalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PostalCodeEntity_PostalSuburbEntity", Storage="_PostalSuburbEntities", ThisKey="id", OtherKey="postcodeId")]
		public EntitySet<PostalSuburbEntity> PostalSuburbEntities
		{
			get
			{
				return this._PostalSuburbEntities;
			}
			set
			{
				this._PostalSuburbEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalityEntity_PostalCodeEntity", Storage="_LocalityEntity", ThisKey="localityId", OtherKey="id", IsForeignKey=true)]
		public LocalityEntity LocalityEntity
		{
			get
			{
				return this._LocalityEntity.Entity;
			}
			set
			{
				LocalityEntity previousValue = this._LocalityEntity.Entity;
				if (((previousValue != value) 
							|| (this._LocalityEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocalityEntity.Entity = null;
						previousValue.PostalCodeEntities.Remove(this);
					}
					this._LocalityEntity.Entity = value;
					if ((value != null))
					{
						value.PostalCodeEntities.Add(this);
						this._localityId = value.id;
					}
					else
					{
						this._localityId = default(int);
					}
					this.SendPropertyChanged("LocalityEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedLocationEntity_PostalCodeEntity", Storage="_NamedLocationEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public NamedLocationEntity NamedLocationEntity
		{
			get
			{
				return this._NamedLocationEntity.Entity;
			}
			set
			{
				NamedLocationEntity previousValue = this._NamedLocationEntity.Entity;
				if (((previousValue != value) 
							|| (this._NamedLocationEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NamedLocationEntity.Entity = null;
						previousValue.PostalCodeEntity = null;
					}
					this._NamedLocationEntity.Entity = value;
					if ((value != null))
					{
						value.PostalCodeEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("NamedLocationEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PostalSuburbEntities(PostalSuburbEntity entity)
		{
			this.SendPropertyChanging();
			entity.PostalCodeEntity = this;
		}
		
		private void detach_PostalSuburbEntities(PostalSuburbEntity entity)
		{
			this.SendPropertyChanging();
			entity.PostalCodeEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PostalSuburb")]
	internal partial class PostalSuburbEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _postcodeId;
		
		private int _countrySubdivisionId;
		
		private EntityRef<CountrySubdivisionEntity> _CountrySubdivisionEntity;
		
		private EntityRef<NamedLocationEntity> _NamedLocationEntity;
		
		private EntityRef<PostalCodeEntity> _PostalCodeEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpostcodeIdChanging(int value);
    partial void OnpostcodeIdChanged();
    partial void OncountrySubdivisionIdChanging(int value);
    partial void OncountrySubdivisionIdChanged();
    #endregion
		
		public PostalSuburbEntity()
		{
			this._CountrySubdivisionEntity = default(EntityRef<CountrySubdivisionEntity>);
			this._NamedLocationEntity = default(EntityRef<NamedLocationEntity>);
			this._PostalCodeEntity = default(EntityRef<PostalCodeEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._NamedLocationEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postcodeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int postcodeId
		{
			get
			{
				return this._postcodeId;
			}
			set
			{
				if ((this._postcodeId != value))
				{
					if (this._PostalCodeEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpostcodeIdChanging(value);
					this.SendPropertyChanging();
					this._postcodeId = value;
					this.SendPropertyChanged("postcodeId");
					this.OnpostcodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_countrySubdivisionId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int countrySubdivisionId
		{
			get
			{
				return this._countrySubdivisionId;
			}
			set
			{
				if ((this._countrySubdivisionId != value))
				{
					if (this._CountrySubdivisionEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncountrySubdivisionIdChanging(value);
					this.SendPropertyChanging();
					this._countrySubdivisionId = value;
					this.SendPropertyChanged("countrySubdivisionId");
					this.OncountrySubdivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountrySubdivisionEntity_PostalSuburbEntity", Storage="_CountrySubdivisionEntity", ThisKey="countrySubdivisionId", OtherKey="id", IsForeignKey=true)]
		public CountrySubdivisionEntity CountrySubdivisionEntity
		{
			get
			{
				return this._CountrySubdivisionEntity.Entity;
			}
			set
			{
				CountrySubdivisionEntity previousValue = this._CountrySubdivisionEntity.Entity;
				if (((previousValue != value) 
							|| (this._CountrySubdivisionEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountrySubdivisionEntity.Entity = null;
						previousValue.PostalSuburbEntities.Remove(this);
					}
					this._CountrySubdivisionEntity.Entity = value;
					if ((value != null))
					{
						value.PostalSuburbEntities.Add(this);
						this._countrySubdivisionId = value.id;
					}
					else
					{
						this._countrySubdivisionId = default(int);
					}
					this.SendPropertyChanged("CountrySubdivisionEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedLocationEntity_PostalSuburbEntity", Storage="_NamedLocationEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public NamedLocationEntity NamedLocationEntity
		{
			get
			{
				return this._NamedLocationEntity.Entity;
			}
			set
			{
				NamedLocationEntity previousValue = this._NamedLocationEntity.Entity;
				if (((previousValue != value) 
							|| (this._NamedLocationEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NamedLocationEntity.Entity = null;
						previousValue.PostalSuburbEntity = null;
					}
					this._NamedLocationEntity.Entity = value;
					if ((value != null))
					{
						value.PostalSuburbEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("NamedLocationEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PostalCodeEntity_PostalSuburbEntity", Storage="_PostalCodeEntity", ThisKey="postcodeId", OtherKey="id", IsForeignKey=true)]
		public PostalCodeEntity PostalCodeEntity
		{
			get
			{
				return this._PostalCodeEntity.Entity;
			}
			set
			{
				PostalCodeEntity previousValue = this._PostalCodeEntity.Entity;
				if (((previousValue != value) 
							|| (this._PostalCodeEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PostalCodeEntity.Entity = null;
						previousValue.PostalSuburbEntities.Remove(this);
					}
					this._PostalCodeEntity.Entity = value;
					if ((value != null))
					{
						value.PostalSuburbEntities.Add(this);
						this._postcodeId = value.id;
					}
					else
					{
						this._postcodeId = default(int);
					}
					this.SendPropertyChanged("PostalCodeEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocalityRegion")]
	internal partial class LocalityRegionEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _localityId;
		
		private int _regionId;
		
		private EntityRef<LocalityEntity> _LocalityEntity;
		
		private EntityRef<RegionEntity> _RegionEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlocalityIdChanging(int value);
    partial void OnlocalityIdChanged();
    partial void OnregionIdChanging(int value);
    partial void OnregionIdChanged();
    #endregion
		
		public LocalityRegionEntity()
		{
			this._LocalityEntity = default(EntityRef<LocalityEntity>);
			this._RegionEntity = default(EntityRef<RegionEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_localityId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int localityId
		{
			get
			{
				return this._localityId;
			}
			set
			{
				if ((this._localityId != value))
				{
					if (this._LocalityEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlocalityIdChanging(value);
					this.SendPropertyChanging();
					this._localityId = value;
					this.SendPropertyChanged("localityId");
					this.OnlocalityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regionId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int regionId
		{
			get
			{
				return this._regionId;
			}
			set
			{
				if ((this._regionId != value))
				{
					if (this._RegionEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregionIdChanging(value);
					this.SendPropertyChanging();
					this._regionId = value;
					this.SendPropertyChanged("regionId");
					this.OnregionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocalityEntity_LocalityRegionEntity", Storage="_LocalityEntity", ThisKey="localityId", OtherKey="id", IsForeignKey=true)]
		public LocalityEntity LocalityEntity
		{
			get
			{
				return this._LocalityEntity.Entity;
			}
			set
			{
				LocalityEntity previousValue = this._LocalityEntity.Entity;
				if (((previousValue != value) 
							|| (this._LocalityEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocalityEntity.Entity = null;
						previousValue.LocalityRegionEntities.Remove(this);
					}
					this._LocalityEntity.Entity = value;
					if ((value != null))
					{
						value.LocalityRegionEntities.Add(this);
						this._localityId = value.id;
					}
					else
					{
						this._localityId = default(int);
					}
					this.SendPropertyChanged("LocalityEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegionEntity_LocalityRegionEntity", Storage="_RegionEntity", ThisKey="regionId", OtherKey="id", IsForeignKey=true)]
		public RegionEntity RegionEntity
		{
			get
			{
				return this._RegionEntity.Entity;
			}
			set
			{
				RegionEntity previousValue = this._RegionEntity.Entity;
				if (((previousValue != value) 
							|| (this._RegionEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegionEntity.Entity = null;
						previousValue.LocalityRegionEntities.Remove(this);
					}
					this._RegionEntity.Entity = value;
					if ((value != null))
					{
						value.LocalityRegionEntities.Add(this);
						this._regionId = value.id;
					}
					else
					{
						this._regionId = default(int);
					}
					this.SendPropertyChanged("RegionEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	internal partial class RegionEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _urlName;
		
		private bool _isMajorCity;
		
		private EntitySet<LocalityRegionEntity> _LocalityRegionEntities;
		
		private EntitySet<RegionAliasEntity> _RegionAliasEntities;
		
		private EntityRef<GeographicalAreaEntity> _GeographicalAreaEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnurlNameChanging(string value);
    partial void OnurlNameChanged();
    partial void OnisMajorCityChanging(bool value);
    partial void OnisMajorCityChanged();
    #endregion
		
		public RegionEntity()
		{
			this._LocalityRegionEntities = new EntitySet<LocalityRegionEntity>(new Action<LocalityRegionEntity>(this.attach_LocalityRegionEntities), new Action<LocalityRegionEntity>(this.detach_LocalityRegionEntities));
			this._RegionAliasEntities = new EntitySet<RegionAliasEntity>(new Action<RegionAliasEntity>(this.attach_RegionAliasEntities), new Action<RegionAliasEntity>(this.detach_RegionAliasEntities));
			this._GeographicalAreaEntity = default(EntityRef<GeographicalAreaEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._GeographicalAreaEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_urlName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string urlName
		{
			get
			{
				return this._urlName;
			}
			set
			{
				if ((this._urlName != value))
				{
					this.OnurlNameChanging(value);
					this.SendPropertyChanging();
					this._urlName = value;
					this.SendPropertyChanged("urlName");
					this.OnurlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isMajorCity", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool isMajorCity
		{
			get
			{
				return this._isMajorCity;
			}
			set
			{
				if ((this._isMajorCity != value))
				{
					this.OnisMajorCityChanging(value);
					this.SendPropertyChanging();
					this._isMajorCity = value;
					this.SendPropertyChanged("isMajorCity");
					this.OnisMajorCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegionEntity_LocalityRegionEntity", Storage="_LocalityRegionEntities", ThisKey="id", OtherKey="regionId")]
		public EntitySet<LocalityRegionEntity> LocalityRegionEntities
		{
			get
			{
				return this._LocalityRegionEntities;
			}
			set
			{
				this._LocalityRegionEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegionEntity_RegionAlia", Storage="_RegionAliasEntities", ThisKey="id", OtherKey="regionId")]
		public EntitySet<RegionAliasEntity> RegionAliasEntities
		{
			get
			{
				return this._RegionAliasEntities;
			}
			set
			{
				this._RegionAliasEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GeographicalAreaEntity_RegionEntity", Storage="_GeographicalAreaEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public GeographicalAreaEntity GeographicalAreaEntity
		{
			get
			{
				return this._GeographicalAreaEntity.Entity;
			}
			set
			{
				GeographicalAreaEntity previousValue = this._GeographicalAreaEntity.Entity;
				if (((previousValue != value) 
							|| (this._GeographicalAreaEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GeographicalAreaEntity.Entity = null;
						previousValue.RegionEntity = null;
					}
					this._GeographicalAreaEntity.Entity = value;
					if ((value != null))
					{
						value.RegionEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("GeographicalAreaEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocalityRegionEntities(LocalityRegionEntity entity)
		{
			this.SendPropertyChanging();
			entity.RegionEntity = this;
		}
		
		private void detach_LocalityRegionEntities(LocalityRegionEntity entity)
		{
			this.SendPropertyChanging();
			entity.RegionEntity = null;
		}
		
		private void attach_RegionAliasEntities(RegionAliasEntity entity)
		{
			this.SendPropertyChanging();
			entity.RegionEntity = this;
		}
		
		private void detach_RegionAliasEntities(RegionAliasEntity entity)
		{
			this.SendPropertyChanging();
			entity.RegionEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	internal partial class CountryEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _id;
		
		private string _displayName;
		
		private string _isoCode;
		
		private EntitySet<LocationAbbreviationEntity> _LocationAbbreviationEntities;
		
		private EntitySet<RelativeLocationEntity> _RelativeLocationEntities;
		
		private EntitySet<CountrySubdivisionEntity> _CountrySubdivisionEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(byte value);
    partial void OnidChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnisoCodeChanging(string value);
    partial void OnisoCodeChanged();
    #endregion
		
		public CountryEntity()
		{
			this._LocationAbbreviationEntities = new EntitySet<LocationAbbreviationEntity>(new Action<LocationAbbreviationEntity>(this.attach_LocationAbbreviationEntities), new Action<LocationAbbreviationEntity>(this.detach_LocationAbbreviationEntities));
			this._RelativeLocationEntities = new EntitySet<RelativeLocationEntity>(new Action<RelativeLocationEntity>(this.attach_RelativeLocationEntities), new Action<RelativeLocationEntity>(this.detach_RelativeLocationEntities));
			this._CountrySubdivisionEntities = new EntitySet<CountrySubdivisionEntity>(new Action<CountrySubdivisionEntity>(this.attach_CountrySubdivisionEntities), new Action<CountrySubdivisionEntity>(this.detach_CountrySubdivisionEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="TinyInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public byte id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isoCode", DbType="NVarChar(2)", UpdateCheck=UpdateCheck.Never)]
		public string isoCode
		{
			get
			{
				return this._isoCode;
			}
			set
			{
				if ((this._isoCode != value))
				{
					this.OnisoCodeChanging(value);
					this.SendPropertyChanging();
					this._isoCode = value;
					this.SendPropertyChanged("isoCode");
					this.OnisoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryEntity_LocationAbbreviationEntity", Storage="_LocationAbbreviationEntities", ThisKey="id", OtherKey="countryId")]
		public EntitySet<LocationAbbreviationEntity> LocationAbbreviationEntities
		{
			get
			{
				return this._LocationAbbreviationEntities;
			}
			set
			{
				this._LocationAbbreviationEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryEntity_RelativeLocationEntity", Storage="_RelativeLocationEntities", ThisKey="id", OtherKey="countryId")]
		public EntitySet<RelativeLocationEntity> RelativeLocationEntities
		{
			get
			{
				return this._RelativeLocationEntities;
			}
			set
			{
				this._RelativeLocationEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryEntity_CountrySubdivisionEntity", Storage="_CountrySubdivisionEntities", ThisKey="id", OtherKey="countryId")]
		public EntitySet<CountrySubdivisionEntity> CountrySubdivisionEntities
		{
			get
			{
				return this._CountrySubdivisionEntities;
			}
			set
			{
				this._CountrySubdivisionEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationAbbreviationEntities(LocationAbbreviationEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountryEntity = this;
		}
		
		private void detach_LocationAbbreviationEntities(LocationAbbreviationEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountryEntity = null;
		}
		
		private void attach_RelativeLocationEntities(RelativeLocationEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountryEntity = this;
		}
		
		private void detach_RelativeLocationEntities(RelativeLocationEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountryEntity = null;
		}
		
		private void attach_CountrySubdivisionEntities(CountrySubdivisionEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountryEntity = this;
		}
		
		private void detach_CountrySubdivisionEntities(CountrySubdivisionEntity entity)
		{
			this.SendPropertyChanging();
			entity.CountryEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegionAlias")]
	internal partial class RegionAliasEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _displayName;
		
		private int _regionId;
		
		private EntityRef<RegionEntity> _RegionEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnregionIdChanging(int value);
    partial void OnregionIdChanged();
    #endregion
		
		public RegionAliasEntity()
		{
			this._RegionEntity = default(EntityRef<RegionEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_regionId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int regionId
		{
			get
			{
				return this._regionId;
			}
			set
			{
				if ((this._regionId != value))
				{
					if (this._RegionEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnregionIdChanging(value);
					this.SendPropertyChanging();
					this._regionId = value;
					this.SendPropertyChanged("regionId");
					this.OnregionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegionEntity_RegionAlia", Storage="_RegionEntity", ThisKey="regionId", OtherKey="id", IsForeignKey=true)]
		public RegionEntity RegionEntity
		{
			get
			{
				return this._RegionEntity.Entity;
			}
			set
			{
				RegionEntity previousValue = this._RegionEntity.Entity;
				if (((previousValue != value) 
							|| (this._RegionEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegionEntity.Entity = null;
						previousValue.RegionAliasEntities.Remove(this);
					}
					this._RegionEntity.Entity = value;
					if ((value != null))
					{
						value.RegionAliasEntities.Add(this);
						this._regionId = value.id;
					}
					else
					{
						this._regionId = default(int);
					}
					this.SendPropertyChanged("RegionEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
