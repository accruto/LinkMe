#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Donations.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class DonationsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDonationRecipientEntity(DonationRecipientEntity instance);
    partial void UpdateDonationRecipientEntity(DonationRecipientEntity instance);
    partial void DeleteDonationRecipientEntity(DonationRecipientEntity instance);
    partial void InsertDonationRequestEntity(DonationRequestEntity instance);
    partial void UpdateDonationRequestEntity(DonationRequestEntity instance);
    partial void DeleteDonationRequestEntity(DonationRequestEntity instance);
    partial void InsertNetworkInvitationEntity(NetworkInvitationEntity instance);
    partial void UpdateNetworkInvitationEntity(NetworkInvitationEntity instance);
    partial void DeleteNetworkInvitationEntity(NetworkInvitationEntity instance);
    #endregion
		
		public DonationsDataContext() : 
				base(global::LinkMe.Domain.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DonationsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DonationsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DonationsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DonationsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<DonationRecipientEntity> DonationRecipientEntities
		{
			get
			{
				return this.GetTable<DonationRecipientEntity>();
			}
		}
		
		internal System.Data.Linq.Table<DonationRequestEntity> DonationRequestEntities
		{
			get
			{
				return this.GetTable<DonationRequestEntity>();
			}
		}
		
		internal System.Data.Linq.Table<NetworkInvitationEntity> NetworkInvitationEntities
		{
			get
			{
				return this.GetTable<NetworkInvitationEntity>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SplitGuids", IsComposable=true)]
		public IQueryable<SplitGuidsResult> SplitGuids([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string delimiter, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string input)
		{
			return this.CreateMethodCallQuery<SplitGuidsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), delimiter, input);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DonationRecipient")]
	internal partial class DonationRecipientEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _displayName;
		
		private bool _isActive;
		
		private System.Guid _id;
		
		private EntitySet<DonationRequestEntity> _DonationRequestEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    #endregion
		
		public DonationRecipientEntity()
		{
			this._DonationRequestEntities = new EntitySet<DonationRequestEntity>(new Action<DonationRequestEntity>(this.attach_DonationRequestEntities), new Action<DonationRequestEntity>(this.detach_DonationRequestEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonationRecipientEntity_DonationRequestEntity", Storage="_DonationRequestEntities", ThisKey="id", OtherKey="donationRecipientId")]
		public EntitySet<DonationRequestEntity> DonationRequestEntities
		{
			get
			{
				return this._DonationRequestEntities;
			}
			set
			{
				this._DonationRequestEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DonationRequestEntities(DonationRequestEntity entity)
		{
			this.SendPropertyChanging();
			entity.DonationRecipientEntity = this;
		}
		
		private void detach_DonationRequestEntities(DonationRequestEntity entity)
		{
			this.SendPropertyChanging();
			entity.DonationRecipientEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DonationRequest")]
	internal partial class DonationRequestEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _amount;
		
		private System.Guid _donationRecipientId;
		
		private System.Guid _id;
		
		private EntitySet<NetworkInvitationEntity> _NetworkInvitationEntities;
		
		private EntityRef<DonationRecipientEntity> _DonationRecipientEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void OndonationRecipientIdChanging(System.Guid value);
    partial void OndonationRecipientIdChanged();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    #endregion
		
		public DonationRequestEntity()
		{
			this._NetworkInvitationEntities = new EntitySet<NetworkInvitationEntity>(new Action<NetworkInvitationEntity>(this.attach_NetworkInvitationEntities), new Action<NetworkInvitationEntity>(this.detach_NetworkInvitationEntities));
			this._DonationRecipientEntity = default(EntityRef<DonationRecipientEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donationRecipientId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid donationRecipientId
		{
			get
			{
				return this._donationRecipientId;
			}
			set
			{
				if ((this._donationRecipientId != value))
				{
					if (this._DonationRecipientEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndonationRecipientIdChanging(value);
					this.SendPropertyChanging();
					this._donationRecipientId = value;
					this.SendPropertyChanged("donationRecipientId");
					this.OndonationRecipientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonationRequestEntity_NetworkInvitationEntity", Storage="_NetworkInvitationEntities", ThisKey="id", OtherKey="donationRequestId")]
		public EntitySet<NetworkInvitationEntity> NetworkInvitationEntities
		{
			get
			{
				return this._NetworkInvitationEntities;
			}
			set
			{
				this._NetworkInvitationEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonationRecipientEntity_DonationRequestEntity", Storage="_DonationRecipientEntity", ThisKey="donationRecipientId", OtherKey="id", IsForeignKey=true)]
		public DonationRecipientEntity DonationRecipientEntity
		{
			get
			{
				return this._DonationRecipientEntity.Entity;
			}
			set
			{
				DonationRecipientEntity previousValue = this._DonationRecipientEntity.Entity;
				if (((previousValue != value) 
							|| (this._DonationRecipientEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DonationRecipientEntity.Entity = null;
						previousValue.DonationRequestEntities.Remove(this);
					}
					this._DonationRecipientEntity.Entity = value;
					if ((value != null))
					{
						value.DonationRequestEntities.Add(this);
						this._donationRecipientId = value.id;
					}
					else
					{
						this._donationRecipientId = default(System.Guid);
					}
					this.SendPropertyChanged("DonationRecipientEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NetworkInvitationEntities(NetworkInvitationEntity entity)
		{
			this.SendPropertyChanging();
			entity.DonationRequestEntity = this;
		}
		
		private void detach_NetworkInvitationEntities(NetworkInvitationEntity entity)
		{
			this.SendPropertyChanging();
			entity.DonationRequestEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NetworkInvitation")]
	internal partial class NetworkInvitationEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _inviteeEmailAddress;
		
		private System.Guid _inviterId;
		
		private System.Nullable<System.Guid> _inviteeId;
		
		private System.Nullable<System.Guid> _donationRequestId;
		
		private EntityRef<DonationRequestEntity> _DonationRequestEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OninviteeEmailAddressChanging(string value);
    partial void OninviteeEmailAddressChanged();
    partial void OninviterIdChanging(System.Guid value);
    partial void OninviterIdChanged();
    partial void OninviteeIdChanging(System.Nullable<System.Guid> value);
    partial void OninviteeIdChanged();
    partial void OndonationRequestIdChanging(System.Nullable<System.Guid> value);
    partial void OndonationRequestIdChanged();
    #endregion
		
		public NetworkInvitationEntity()
		{
			this._DonationRequestEntity = default(EntityRef<DonationRequestEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inviteeEmailAddress", DbType="NVarChar(320)", UpdateCheck=UpdateCheck.Never)]
		public string inviteeEmailAddress
		{
			get
			{
				return this._inviteeEmailAddress;
			}
			set
			{
				if ((this._inviteeEmailAddress != value))
				{
					this.OninviteeEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._inviteeEmailAddress = value;
					this.SendPropertyChanged("inviteeEmailAddress");
					this.OninviteeEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inviterId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid inviterId
		{
			get
			{
				return this._inviterId;
			}
			set
			{
				if ((this._inviterId != value))
				{
					this.OninviterIdChanging(value);
					this.SendPropertyChanging();
					this._inviterId = value;
					this.SendPropertyChanged("inviterId");
					this.OninviterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inviteeId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> inviteeId
		{
			get
			{
				return this._inviteeId;
			}
			set
			{
				if ((this._inviteeId != value))
				{
					this.OninviteeIdChanging(value);
					this.SendPropertyChanging();
					this._inviteeId = value;
					this.SendPropertyChanged("inviteeId");
					this.OninviteeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donationRequestId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> donationRequestId
		{
			get
			{
				return this._donationRequestId;
			}
			set
			{
				if ((this._donationRequestId != value))
				{
					if (this._DonationRequestEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndonationRequestIdChanging(value);
					this.SendPropertyChanging();
					this._donationRequestId = value;
					this.SendPropertyChanged("donationRequestId");
					this.OndonationRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonationRequestEntity_NetworkInvitationEntity", Storage="_DonationRequestEntity", ThisKey="donationRequestId", OtherKey="id", IsForeignKey=true)]
		public DonationRequestEntity DonationRequestEntity
		{
			get
			{
				return this._DonationRequestEntity.Entity;
			}
			set
			{
				DonationRequestEntity previousValue = this._DonationRequestEntity.Entity;
				if (((previousValue != value) 
							|| (this._DonationRequestEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DonationRequestEntity.Entity = null;
						previousValue.NetworkInvitationEntities.Remove(this);
					}
					this._DonationRequestEntity.Entity = value;
					if ((value != null))
					{
						value.NetworkInvitationEntities.Add(this);
						this._donationRequestId = value.id;
					}
					else
					{
						this._donationRequestId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DonationRequestEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class SplitGuidsResult
	{
		
		private System.Nullable<System.Guid> _value;
		
		public SplitGuidsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
