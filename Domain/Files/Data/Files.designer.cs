#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Files.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class FilesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFileDataEntity(FileDataEntity instance);
    partial void UpdateFileDataEntity(FileDataEntity instance);
    partial void DeleteFileDataEntity(FileDataEntity instance);
    partial void InsertFileReferenceEntity(FileReferenceEntity instance);
    partial void UpdateFileReferenceEntity(FileReferenceEntity instance);
    partial void DeleteFileReferenceEntity(FileReferenceEntity instance);
    #endregion
		
		public FilesDataContext() : 
				base(global::LinkMe.Domain.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FilesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FilesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FilesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FilesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FileDataEntity> FileDataEntities
		{
			get
			{
				return this.GetTable<FileDataEntity>();
			}
		}
		
		public System.Data.Linq.Table<FileReferenceEntity> FileReferenceEntities
		{
			get
			{
				return this.GetTable<FileReferenceEntity>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SplitGuids", IsComposable=true)]
		public IQueryable<SplitGuidsResult> SplitGuids([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string delimiter, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string input)
		{
			return this.CreateMethodCallQuery<SplitGuidsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), delimiter, input);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileData")]
	public partial class FileDataEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private byte _context;
		
		private string _extension;
		
		private System.Data.Linq.Binary _hash;
		
		private int _sizeBytes;
		
		private EntitySet<FileReferenceEntity> _FileReferenceEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OncontextChanging(byte value);
    partial void OncontextChanged();
    partial void OnextensionChanging(string value);
    partial void OnextensionChanged();
    partial void OnhashChanging(System.Data.Linq.Binary value);
    partial void OnhashChanged();
    partial void OnsizeBytesChanging(int value);
    partial void OnsizeBytesChanged();
    #endregion
		
		public FileDataEntity()
		{
			this._FileReferenceEntities = new EntitySet<FileReferenceEntity>(new Action<FileReferenceEntity>(this.attach_FileReferenceEntities), new Action<FileReferenceEntity>(this.detach_FileReferenceEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_context", DbType="TinyInt NOT NULL")]
		public byte context
		{
			get
			{
				return this._context;
			}
			set
			{
				if ((this._context != value))
				{
					this.OncontextChanging(value);
					this.SendPropertyChanging();
					this._context = value;
					this.SendPropertyChanged("context");
					this.OncontextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extension", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string extension
		{
			get
			{
				return this._extension;
			}
			set
			{
				if ((this._extension != value))
				{
					this.OnextensionChanging(value);
					this.SendPropertyChanging();
					this._extension = value;
					this.SendPropertyChanged("extension");
					this.OnextensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hash", DbType="Binary(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary hash
		{
			get
			{
				return this._hash;
			}
			set
			{
				if ((this._hash != value))
				{
					this.OnhashChanging(value);
					this.SendPropertyChanging();
					this._hash = value;
					this.SendPropertyChanged("hash");
					this.OnhashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sizeBytes", DbType="Int NOT NULL")]
		public int sizeBytes
		{
			get
			{
				return this._sizeBytes;
			}
			set
			{
				if ((this._sizeBytes != value))
				{
					this.OnsizeBytesChanging(value);
					this.SendPropertyChanging();
					this._sizeBytes = value;
					this.SendPropertyChanged("sizeBytes");
					this.OnsizeBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileDataEntity_FileReferenceEntity", Storage="_FileReferenceEntities", ThisKey="id", OtherKey="dataId")]
		public EntitySet<FileReferenceEntity> FileReferenceEntities
		{
			get
			{
				return this._FileReferenceEntities;
			}
			set
			{
				this._FileReferenceEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileReferenceEntities(FileReferenceEntity entity)
		{
			this.SendPropertyChanging();
			entity.FileDataEntity = this;
		}
		
		private void detach_FileReferenceEntities(FileReferenceEntity entity)
		{
			this.SendPropertyChanging();
			entity.FileDataEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileReference")]
	public partial class FileReferenceEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.DateTime _createdTime;
		
		private string _mimeType;
		
		private string _name;
		
		private System.Guid _dataId;
		
		private EntityRef<FileDataEntity> _FileDataEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OncreatedTimeChanging(System.DateTime value);
    partial void OncreatedTimeChanged();
    partial void OnmimeTypeChanging(string value);
    partial void OnmimeTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndataIdChanging(System.Guid value);
    partial void OndataIdChanged();
    #endregion
		
		public FileReferenceEntity()
		{
			this._FileDataEntity = default(EntityRef<FileDataEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdTime", DbType="DateTime NOT NULL")]
		public System.DateTime createdTime
		{
			get
			{
				return this._createdTime;
			}
			set
			{
				if ((this._createdTime != value))
				{
					this.OncreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._createdTime = value;
					this.SendPropertyChanged("createdTime");
					this.OncreatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mimeType", DbType="VarChar(128)")]
		public string mimeType
		{
			get
			{
				return this._mimeType;
			}
			set
			{
				if ((this._mimeType != value))
				{
					this.OnmimeTypeChanging(value);
					this.SendPropertyChanging();
					this._mimeType = value;
					this.SendPropertyChanged("mimeType");
					this.OnmimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(260) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid dataId
		{
			get
			{
				return this._dataId;
			}
			set
			{
				if ((this._dataId != value))
				{
					if (this._FileDataEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndataIdChanging(value);
					this.SendPropertyChanging();
					this._dataId = value;
					this.SendPropertyChanged("dataId");
					this.OndataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileDataEntity_FileReferenceEntity", Storage="_FileDataEntity", ThisKey="dataId", OtherKey="id", IsForeignKey=true)]
		public FileDataEntity FileDataEntity
		{
			get
			{
				return this._FileDataEntity.Entity;
			}
			set
			{
				FileDataEntity previousValue = this._FileDataEntity.Entity;
				if (((previousValue != value) 
							|| (this._FileDataEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileDataEntity.Entity = null;
						previousValue.FileReferenceEntities.Remove(this);
					}
					this._FileDataEntity.Entity = value;
					if ((value != null))
					{
						value.FileReferenceEntities.Add(this);
						this._dataId = value.id;
					}
					else
					{
						this._dataId = default(System.Guid);
					}
					this.SendPropertyChanged("FileDataEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class SplitGuidsResult
	{
		
		private System.Nullable<System.Guid> _value;
		
		public SplitGuidsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
