#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Roles.Communications.Settings.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class SettingsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCommunicationCategorySettingEntity(CommunicationCategorySettingEntity instance);
    partial void UpdateCommunicationCategorySettingEntity(CommunicationCategorySettingEntity instance);
    partial void DeleteCommunicationCategorySettingEntity(CommunicationCategorySettingEntity instance);
    partial void InsertCommunicationDefinitionEntity(CommunicationDefinitionEntity instance);
    partial void UpdateCommunicationDefinitionEntity(CommunicationDefinitionEntity instance);
    partial void DeleteCommunicationDefinitionEntity(CommunicationDefinitionEntity instance);
    partial void InsertCommunicationDefinitionSettingEntity(CommunicationDefinitionSettingEntity instance);
    partial void UpdateCommunicationDefinitionSettingEntity(CommunicationDefinitionSettingEntity instance);
    partial void DeleteCommunicationDefinitionSettingEntity(CommunicationDefinitionSettingEntity instance);
    partial void InsertCommunicationSettingEntity(CommunicationSettingEntity instance);
    partial void UpdateCommunicationSettingEntity(CommunicationSettingEntity instance);
    partial void DeleteCommunicationSettingEntity(CommunicationSettingEntity instance);
    partial void InsertNonMemberSettingEntity(NonMemberSettingEntity instance);
    partial void UpdateNonMemberSettingEntity(NonMemberSettingEntity instance);
    partial void DeleteNonMemberSettingEntity(NonMemberSettingEntity instance);
    partial void InsertCommunicationCategoryEntity(CommunicationCategoryEntity instance);
    partial void UpdateCommunicationCategoryEntity(CommunicationCategoryEntity instance);
    partial void DeleteCommunicationCategoryEntity(CommunicationCategoryEntity instance);
    #endregion
		
		public SettingsDataContext() : 
				base(global::LinkMe.Domain.Roles.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SettingsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SettingsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SettingsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SettingsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<CommunicationCategorySettingEntity> CommunicationCategorySettingEntities
		{
			get
			{
				return this.GetTable<CommunicationCategorySettingEntity>();
			}
		}
		
		internal System.Data.Linq.Table<CommunicationDefinitionEntity> CommunicationDefinitionEntities
		{
			get
			{
				return this.GetTable<CommunicationDefinitionEntity>();
			}
		}
		
		internal System.Data.Linq.Table<CommunicationDefinitionSettingEntity> CommunicationDefinitionSettingEntities
		{
			get
			{
				return this.GetTable<CommunicationDefinitionSettingEntity>();
			}
		}
		
		internal System.Data.Linq.Table<CommunicationSettingEntity> CommunicationSettingEntities
		{
			get
			{
				return this.GetTable<CommunicationSettingEntity>();
			}
		}
		
		internal System.Data.Linq.Table<NonMemberSettingEntity> NonMemberSettingEntities
		{
			get
			{
				return this.GetTable<NonMemberSettingEntity>();
			}
		}
		
		internal System.Data.Linq.Table<CommunicationCategoryEntity> CommunicationCategoryEntities
		{
			get
			{
				return this.GetTable<CommunicationCategoryEntity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommunicationCategorySettings")]
	internal partial class CommunicationCategorySettingEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _categoryId;
		
		private System.Guid _settingsId;
		
		private System.Nullable<byte> _frequency;
		
		private EntityRef<CommunicationSettingEntity> _CommunicationSettingEntity;
		
		private EntityRef<CommunicationCategoryEntity> _CommunicationCategoryEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OncategoryIdChanging(System.Guid value);
    partial void OncategoryIdChanged();
    partial void OnsettingsIdChanging(System.Guid value);
    partial void OnsettingsIdChanged();
    partial void OnfrequencyChanging(System.Nullable<byte> value);
    partial void OnfrequencyChanged();
    #endregion
		
		public CommunicationCategorySettingEntity()
		{
			this._CommunicationSettingEntity = default(EntityRef<CommunicationSettingEntity>);
			this._CommunicationCategoryEntity = default(EntityRef<CommunicationCategoryEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid categoryId
		{
			get
			{
				return this._categoryId;
			}
			set
			{
				if ((this._categoryId != value))
				{
					if (this._CommunicationCategoryEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIdChanging(value);
					this.SendPropertyChanging();
					this._categoryId = value;
					this.SendPropertyChanged("categoryId");
					this.OncategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_settingsId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid settingsId
		{
			get
			{
				return this._settingsId;
			}
			set
			{
				if ((this._settingsId != value))
				{
					if (this._CommunicationSettingEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsettingsIdChanging(value);
					this.SendPropertyChanging();
					this._settingsId = value;
					this.SendPropertyChanged("settingsId");
					this.OnsettingsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_frequency", DbType="TinyInt")]
		public System.Nullable<byte> frequency
		{
			get
			{
				return this._frequency;
			}
			set
			{
				if ((this._frequency != value))
				{
					this.OnfrequencyChanging(value);
					this.SendPropertyChanging();
					this._frequency = value;
					this.SendPropertyChanged("frequency");
					this.OnfrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationSettingEntity_CommunicationCategorySettingEntity", Storage="_CommunicationSettingEntity", ThisKey="settingsId", OtherKey="id", IsForeignKey=true)]
		public CommunicationSettingEntity CommunicationSettingEntity
		{
			get
			{
				return this._CommunicationSettingEntity.Entity;
			}
			set
			{
				CommunicationSettingEntity previousValue = this._CommunicationSettingEntity.Entity;
				if (((previousValue != value) 
							|| (this._CommunicationSettingEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommunicationSettingEntity.Entity = null;
						previousValue.CommunicationCategorySettingEntities.Remove(this);
					}
					this._CommunicationSettingEntity.Entity = value;
					if ((value != null))
					{
						value.CommunicationCategorySettingEntities.Add(this);
						this._settingsId = value.id;
					}
					else
					{
						this._settingsId = default(System.Guid);
					}
					this.SendPropertyChanged("CommunicationSettingEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationCategoryEntity_CommunicationCategorySettingEntity", Storage="_CommunicationCategoryEntity", ThisKey="categoryId", OtherKey="id", IsForeignKey=true)]
		public CommunicationCategoryEntity CommunicationCategoryEntity
		{
			get
			{
				return this._CommunicationCategoryEntity.Entity;
			}
			set
			{
				CommunicationCategoryEntity previousValue = this._CommunicationCategoryEntity.Entity;
				if (((previousValue != value) 
							|| (this._CommunicationCategoryEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommunicationCategoryEntity.Entity = null;
						previousValue.CommunicationCategorySettingEntities.Remove(this);
					}
					this._CommunicationCategoryEntity.Entity = value;
					if ((value != null))
					{
						value.CommunicationCategorySettingEntities.Add(this);
						this._categoryId = value.id;
					}
					else
					{
						this._categoryId = default(System.Guid);
					}
					this.SendPropertyChanged("CommunicationCategoryEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommunicationDefinition")]
	internal partial class CommunicationDefinitionEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private System.Guid _categoryId;
		
		private EntitySet<CommunicationDefinitionSettingEntity> _CommunicationDefinitionSettingEntities;
		
		private EntityRef<CommunicationCategoryEntity> _CommunicationCategoryEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncategoryIdChanging(System.Guid value);
    partial void OncategoryIdChanged();
    #endregion
		
		public CommunicationDefinitionEntity()
		{
			this._CommunicationDefinitionSettingEntities = new EntitySet<CommunicationDefinitionSettingEntity>(new Action<CommunicationDefinitionSettingEntity>(this.attach_CommunicationDefinitionSettingEntities), new Action<CommunicationDefinitionSettingEntity>(this.detach_CommunicationDefinitionSettingEntities));
			this._CommunicationCategoryEntity = default(EntityRef<CommunicationCategoryEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid categoryId
		{
			get
			{
				return this._categoryId;
			}
			set
			{
				if ((this._categoryId != value))
				{
					if (this._CommunicationCategoryEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIdChanging(value);
					this.SendPropertyChanging();
					this._categoryId = value;
					this.SendPropertyChanged("categoryId");
					this.OncategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationDefinitionEntity_CommunicationDefinitionSettingEntity", Storage="_CommunicationDefinitionSettingEntities", ThisKey="id", OtherKey="definitionId")]
		public EntitySet<CommunicationDefinitionSettingEntity> CommunicationDefinitionSettingEntities
		{
			get
			{
				return this._CommunicationDefinitionSettingEntities;
			}
			set
			{
				this._CommunicationDefinitionSettingEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationCategoryEntity_CommunicationDefinitionEntity", Storage="_CommunicationCategoryEntity", ThisKey="categoryId", OtherKey="id", IsForeignKey=true)]
		public CommunicationCategoryEntity CommunicationCategoryEntity
		{
			get
			{
				return this._CommunicationCategoryEntity.Entity;
			}
			set
			{
				CommunicationCategoryEntity previousValue = this._CommunicationCategoryEntity.Entity;
				if (((previousValue != value) 
							|| (this._CommunicationCategoryEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommunicationCategoryEntity.Entity = null;
						previousValue.CommunicationDefinitionEntities.Remove(this);
					}
					this._CommunicationCategoryEntity.Entity = value;
					if ((value != null))
					{
						value.CommunicationDefinitionEntities.Add(this);
						this._categoryId = value.id;
					}
					else
					{
						this._categoryId = default(System.Guid);
					}
					this.SendPropertyChanged("CommunicationCategoryEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommunicationDefinitionSettingEntities(CommunicationDefinitionSettingEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationDefinitionEntity = this;
		}
		
		private void detach_CommunicationDefinitionSettingEntities(CommunicationDefinitionSettingEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationDefinitionEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommunicationDefinitionSettings")]
	internal partial class CommunicationDefinitionSettingEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _definitionId;
		
		private System.Guid _settingsId;
		
		private System.Nullable<System.DateTime> _lastSentTime;
		
		private EntityRef<CommunicationDefinitionEntity> _CommunicationDefinitionEntity;
		
		private EntityRef<CommunicationSettingEntity> _CommunicationSettingEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OndefinitionIdChanging(System.Guid value);
    partial void OndefinitionIdChanged();
    partial void OnsettingsIdChanging(System.Guid value);
    partial void OnsettingsIdChanged();
    partial void OnlastSentTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnlastSentTimeChanged();
    #endregion
		
		public CommunicationDefinitionSettingEntity()
		{
			this._CommunicationDefinitionEntity = default(EntityRef<CommunicationDefinitionEntity>);
			this._CommunicationSettingEntity = default(EntityRef<CommunicationSettingEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_definitionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid definitionId
		{
			get
			{
				return this._definitionId;
			}
			set
			{
				if ((this._definitionId != value))
				{
					if (this._CommunicationDefinitionEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndefinitionIdChanging(value);
					this.SendPropertyChanging();
					this._definitionId = value;
					this.SendPropertyChanged("definitionId");
					this.OndefinitionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_settingsId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid settingsId
		{
			get
			{
				return this._settingsId;
			}
			set
			{
				if ((this._settingsId != value))
				{
					if (this._CommunicationSettingEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsettingsIdChanging(value);
					this.SendPropertyChanging();
					this._settingsId = value;
					this.SendPropertyChanged("settingsId");
					this.OnsettingsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastSentTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastSentTime
		{
			get
			{
				return this._lastSentTime;
			}
			set
			{
				if ((this._lastSentTime != value))
				{
					this.OnlastSentTimeChanging(value);
					this.SendPropertyChanging();
					this._lastSentTime = value;
					this.SendPropertyChanged("lastSentTime");
					this.OnlastSentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationDefinitionEntity_CommunicationDefinitionSettingEntity", Storage="_CommunicationDefinitionEntity", ThisKey="definitionId", OtherKey="id", IsForeignKey=true)]
		public CommunicationDefinitionEntity CommunicationDefinitionEntity
		{
			get
			{
				return this._CommunicationDefinitionEntity.Entity;
			}
			set
			{
				CommunicationDefinitionEntity previousValue = this._CommunicationDefinitionEntity.Entity;
				if (((previousValue != value) 
							|| (this._CommunicationDefinitionEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommunicationDefinitionEntity.Entity = null;
						previousValue.CommunicationDefinitionSettingEntities.Remove(this);
					}
					this._CommunicationDefinitionEntity.Entity = value;
					if ((value != null))
					{
						value.CommunicationDefinitionSettingEntities.Add(this);
						this._definitionId = value.id;
					}
					else
					{
						this._definitionId = default(System.Guid);
					}
					this.SendPropertyChanged("CommunicationDefinitionEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationSettingEntity_CommunicationDefinitionSettingEntity", Storage="_CommunicationSettingEntity", ThisKey="settingsId", OtherKey="id", IsForeignKey=true)]
		public CommunicationSettingEntity CommunicationSettingEntity
		{
			get
			{
				return this._CommunicationSettingEntity.Entity;
			}
			set
			{
				CommunicationSettingEntity previousValue = this._CommunicationSettingEntity.Entity;
				if (((previousValue != value) 
							|| (this._CommunicationSettingEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommunicationSettingEntity.Entity = null;
						previousValue.CommunicationDefinitionSettingEntities.Remove(this);
					}
					this._CommunicationSettingEntity.Entity = value;
					if ((value != null))
					{
						value.CommunicationDefinitionSettingEntities.Add(this);
						this._settingsId = value.id;
					}
					else
					{
						this._settingsId = default(System.Guid);
					}
					this.SendPropertyChanged("CommunicationSettingEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommunicationSettings")]
	internal partial class CommunicationSettingEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _userId;
		
		private bool _sendPlainTextOnly;
		
		private EntitySet<CommunicationCategorySettingEntity> _CommunicationCategorySettingEntities;
		
		private EntitySet<CommunicationDefinitionSettingEntity> _CommunicationDefinitionSettingEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnuserIdChanging(System.Guid value);
    partial void OnuserIdChanged();
    partial void OnsendPlainTextOnlyChanging(bool value);
    partial void OnsendPlainTextOnlyChanged();
    #endregion
		
		public CommunicationSettingEntity()
		{
			this._CommunicationCategorySettingEntities = new EntitySet<CommunicationCategorySettingEntity>(new Action<CommunicationCategorySettingEntity>(this.attach_CommunicationCategorySettingEntities), new Action<CommunicationCategorySettingEntity>(this.detach_CommunicationCategorySettingEntities));
			this._CommunicationDefinitionSettingEntities = new EntitySet<CommunicationDefinitionSettingEntity>(new Action<CommunicationDefinitionSettingEntity>(this.attach_CommunicationDefinitionSettingEntities), new Action<CommunicationDefinitionSettingEntity>(this.detach_CommunicationDefinitionSettingEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sendPlainTextOnly", DbType="Bit NOT NULL")]
		public bool sendPlainTextOnly
		{
			get
			{
				return this._sendPlainTextOnly;
			}
			set
			{
				if ((this._sendPlainTextOnly != value))
				{
					this.OnsendPlainTextOnlyChanging(value);
					this.SendPropertyChanging();
					this._sendPlainTextOnly = value;
					this.SendPropertyChanged("sendPlainTextOnly");
					this.OnsendPlainTextOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationSettingEntity_CommunicationCategorySettingEntity", Storage="_CommunicationCategorySettingEntities", ThisKey="id", OtherKey="settingsId")]
		public EntitySet<CommunicationCategorySettingEntity> CommunicationCategorySettingEntities
		{
			get
			{
				return this._CommunicationCategorySettingEntities;
			}
			set
			{
				this._CommunicationCategorySettingEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationSettingEntity_CommunicationDefinitionSettingEntity", Storage="_CommunicationDefinitionSettingEntities", ThisKey="id", OtherKey="settingsId")]
		public EntitySet<CommunicationDefinitionSettingEntity> CommunicationDefinitionSettingEntities
		{
			get
			{
				return this._CommunicationDefinitionSettingEntities;
			}
			set
			{
				this._CommunicationDefinitionSettingEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommunicationCategorySettingEntities(CommunicationCategorySettingEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationSettingEntity = this;
		}
		
		private void detach_CommunicationCategorySettingEntities(CommunicationCategorySettingEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationSettingEntity = null;
		}
		
		private void attach_CommunicationDefinitionSettingEntities(CommunicationDefinitionSettingEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationSettingEntity = this;
		}
		
		private void detach_CommunicationDefinitionSettingEntities(CommunicationDefinitionSettingEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationSettingEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NonMemberSettings")]
	internal partial class NonMemberSettingEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _emailAddress;
		
		private byte _flags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnemailAddressChanging(string value);
    partial void OnemailAddressChanged();
    partial void OnflagsChanging(byte value);
    partial void OnflagsChanged();
    #endregion
		
		public NonMemberSettingEntity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailAddress", DbType="NVarChar(320) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string emailAddress
		{
			get
			{
				return this._emailAddress;
			}
			set
			{
				if ((this._emailAddress != value))
				{
					this.OnemailAddressChanging(value);
					this.SendPropertyChanging();
					this._emailAddress = value;
					this.SendPropertyChanged("emailAddress");
					this.OnemailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flags", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte flags
		{
			get
			{
				return this._flags;
			}
			set
			{
				if ((this._flags != value))
				{
					this.OnflagsChanging(value);
					this.SendPropertyChanging();
					this._flags = value;
					this.SendPropertyChanged("flags");
					this.OnflagsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommunicationCategory")]
	internal partial class CommunicationCategoryEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private byte _type;
		
		private byte _defaultFrequency;
		
		private bool _deleted;
		
		private int _roles;
		
		private string _availableFrequencies;
		
		private EntitySet<CommunicationCategorySettingEntity> _CommunicationCategorySettingEntities;
		
		private EntitySet<CommunicationDefinitionEntity> _CommunicationDefinitionEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(byte value);
    partial void OntypeChanged();
    partial void OndefaultFrequencyChanging(byte value);
    partial void OndefaultFrequencyChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OnrolesChanging(int value);
    partial void OnrolesChanged();
    partial void OnavailableFrequenciesChanging(string value);
    partial void OnavailableFrequenciesChanged();
    #endregion
		
		public CommunicationCategoryEntity()
		{
			this._CommunicationCategorySettingEntities = new EntitySet<CommunicationCategorySettingEntity>(new Action<CommunicationCategorySettingEntity>(this.attach_CommunicationCategorySettingEntities), new Action<CommunicationCategorySettingEntity>(this.detach_CommunicationCategorySettingEntities));
			this._CommunicationDefinitionEntities = new EntitySet<CommunicationDefinitionEntity>(new Action<CommunicationDefinitionEntity>(this.attach_CommunicationDefinitionEntities), new Action<CommunicationDefinitionEntity>(this.detach_CommunicationDefinitionEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_defaultFrequency", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte defaultFrequency
		{
			get
			{
				return this._defaultFrequency;
			}
			set
			{
				if ((this._defaultFrequency != value))
				{
					this.OndefaultFrequencyChanging(value);
					this.SendPropertyChanging();
					this._defaultFrequency = value;
					this.SendPropertyChanged("defaultFrequency");
					this.OndefaultFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roles", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int roles
		{
			get
			{
				return this._roles;
			}
			set
			{
				if ((this._roles != value))
				{
					this.OnrolesChanging(value);
					this.SendPropertyChanging();
					this._roles = value;
					this.SendPropertyChanged("roles");
					this.OnrolesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_availableFrequencies", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string availableFrequencies
		{
			get
			{
				return this._availableFrequencies;
			}
			set
			{
				if ((this._availableFrequencies != value))
				{
					this.OnavailableFrequenciesChanging(value);
					this.SendPropertyChanging();
					this._availableFrequencies = value;
					this.SendPropertyChanged("availableFrequencies");
					this.OnavailableFrequenciesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationCategoryEntity_CommunicationCategorySettingEntity", Storage="_CommunicationCategorySettingEntities", ThisKey="id", OtherKey="categoryId")]
		public EntitySet<CommunicationCategorySettingEntity> CommunicationCategorySettingEntities
		{
			get
			{
				return this._CommunicationCategorySettingEntities;
			}
			set
			{
				this._CommunicationCategorySettingEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommunicationCategoryEntity_CommunicationDefinitionEntity", Storage="_CommunicationDefinitionEntities", ThisKey="id", OtherKey="categoryId")]
		public EntitySet<CommunicationDefinitionEntity> CommunicationDefinitionEntities
		{
			get
			{
				return this._CommunicationDefinitionEntities;
			}
			set
			{
				this._CommunicationDefinitionEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommunicationCategorySettingEntities(CommunicationCategorySettingEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationCategoryEntity = this;
		}
		
		private void detach_CommunicationCategorySettingEntities(CommunicationCategorySettingEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationCategoryEntity = null;
		}
		
		private void attach_CommunicationDefinitionEntities(CommunicationDefinitionEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationCategoryEntity = this;
		}
		
		private void detach_CommunicationDefinitionEntities(CommunicationDefinitionEntity entity)
		{
			this.SendPropertyChanging();
			entity.CommunicationCategoryEntity = null;
		}
	}
}
#pragma warning restore 1591
