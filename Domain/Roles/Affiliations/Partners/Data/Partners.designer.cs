#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Roles.Affiliations.Partners.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class PartnersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertServicePartnerEntity(ServicePartnerEntity instance);
    partial void UpdateServicePartnerEntity(ServicePartnerEntity instance);
    partial void DeleteServicePartnerEntity(ServicePartnerEntity instance);
    partial void InsertEmployerEntity(EmployerEntity instance);
    partial void UpdateEmployerEntity(EmployerEntity instance);
    partial void DeleteEmployerEntity(EmployerEntity instance);
    #endregion
		
		public PartnersDataContext() : 
				base(global::LinkMe.Domain.Roles.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PartnersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartnersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartnersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PartnersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<ServicePartnerEntity> ServicePartnerEntities
		{
			get
			{
				return this.GetTable<ServicePartnerEntity>();
			}
		}
		
		internal System.Data.Linq.Table<EmployerEntity> EmployerEntities
		{
			get
			{
				return this.GetTable<EmployerEntity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServicePartner")]
	internal partial class ServicePartnerEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private EntitySet<EmployerEntity> _EmployerEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ServicePartnerEntity()
		{
			this._EmployerEntities = new EntitySet<EmployerEntity>(new Action<EmployerEntity>(this.attach_EmployerEntities), new Action<EmployerEntity>(this.detach_EmployerEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServicePartnerEntity_EmployerEntity", Storage="_EmployerEntities", ThisKey="id", OtherKey="ownerPartnerId")]
		public EntitySet<EmployerEntity> EmployerEntities
		{
			get
			{
				return this._EmployerEntities;
			}
			set
			{
				this._EmployerEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployerEntities(EmployerEntity entity)
		{
			this.SendPropertyChanging();
			entity.ServicePartnerEntity = this;
		}
		
		private void detach_EmployerEntities(EmployerEntity entity)
		{
			this.SendPropertyChanging();
			entity.ServicePartnerEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employer")]
	internal partial class EmployerEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _contactPhoneNumber;
		
		private string _jobTitle;
		
		private byte _subRole;
		
		private System.Nullable<System.Guid> _ownerPartnerId;
		
		private System.Guid _organisationId;
		
		private EntityRef<ServicePartnerEntity> _ServicePartnerEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OncontactPhoneNumberChanging(string value);
    partial void OncontactPhoneNumberChanged();
    partial void OnjobTitleChanging(string value);
    partial void OnjobTitleChanged();
    partial void OnsubRoleChanging(byte value);
    partial void OnsubRoleChanged();
    partial void OnownerPartnerIdChanging(System.Nullable<System.Guid> value);
    partial void OnownerPartnerIdChanged();
    partial void OnorganisationIdChanging(System.Guid value);
    partial void OnorganisationIdChanged();
    #endregion
		
		public EmployerEntity()
		{
			this._ServicePartnerEntity = default(EntityRef<ServicePartnerEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactPhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string contactPhoneNumber
		{
			get
			{
				return this._contactPhoneNumber;
			}
			set
			{
				if ((this._contactPhoneNumber != value))
				{
					this.OncontactPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._contactPhoneNumber = value;
					this.SendPropertyChanged("contactPhoneNumber");
					this.OncontactPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobTitle", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string jobTitle
		{
			get
			{
				return this._jobTitle;
			}
			set
			{
				if ((this._jobTitle != value))
				{
					this.OnjobTitleChanging(value);
					this.SendPropertyChanging();
					this._jobTitle = value;
					this.SendPropertyChanged("jobTitle");
					this.OnjobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subRole", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte subRole
		{
			get
			{
				return this._subRole;
			}
			set
			{
				if ((this._subRole != value))
				{
					this.OnsubRoleChanging(value);
					this.SendPropertyChanging();
					this._subRole = value;
					this.SendPropertyChanged("subRole");
					this.OnsubRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ownerPartnerId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> ownerPartnerId
		{
			get
			{
				return this._ownerPartnerId;
			}
			set
			{
				if ((this._ownerPartnerId != value))
				{
					if (this._ServicePartnerEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnownerPartnerIdChanging(value);
					this.SendPropertyChanging();
					this._ownerPartnerId = value;
					this.SendPropertyChanged("ownerPartnerId");
					this.OnownerPartnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_organisationId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid organisationId
		{
			get
			{
				return this._organisationId;
			}
			set
			{
				if ((this._organisationId != value))
				{
					this.OnorganisationIdChanging(value);
					this.SendPropertyChanging();
					this._organisationId = value;
					this.SendPropertyChanged("organisationId");
					this.OnorganisationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServicePartnerEntity_EmployerEntity", Storage="_ServicePartnerEntity", ThisKey="ownerPartnerId", OtherKey="id", IsForeignKey=true)]
		public ServicePartnerEntity ServicePartnerEntity
		{
			get
			{
				return this._ServicePartnerEntity.Entity;
			}
			set
			{
				ServicePartnerEntity previousValue = this._ServicePartnerEntity.Entity;
				if (((previousValue != value) 
							|| (this._ServicePartnerEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServicePartnerEntity.Entity = null;
						previousValue.EmployerEntities.Remove(this);
					}
					this._ServicePartnerEntity.Entity = value;
					if ((value != null))
					{
						value.EmployerEntities.Add(this);
						this._ownerPartnerId = value.id;
					}
					else
					{
						this._ownerPartnerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ServicePartnerEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
