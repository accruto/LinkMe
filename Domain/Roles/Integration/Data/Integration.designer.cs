#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Roles.Integration.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class IntegrationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAtsIntegratorEntity(AtsIntegratorEntity instance);
    partial void UpdateAtsIntegratorEntity(AtsIntegratorEntity instance);
    partial void DeleteAtsIntegratorEntity(AtsIntegratorEntity instance);
    partial void InsertIntegratorUserEntity(IntegratorUserEntity instance);
    partial void UpdateIntegratorUserEntity(IntegratorUserEntity instance);
    partial void DeleteIntegratorUserEntity(IntegratorUserEntity instance);
    #endregion
		
		public IntegrationDataContext() : 
				base(global::LinkMe.Domain.Roles.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IntegrationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntegrationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntegrationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IntegrationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<AtsIntegratorEntity> AtsIntegratorEntities
		{
			get
			{
				return this.GetTable<AtsIntegratorEntity>();
			}
		}
		
		internal System.Data.Linq.Table<IntegratorUserEntity> IntegratorUserEntities
		{
			get
			{
				return this.GetTable<IntegratorUserEntity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AtsIntegrator")]
	internal partial class AtsIntegratorEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _name;
		
		private EntitySet<IntegratorUserEntity> _IntegratorUserEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public AtsIntegratorEntity()
		{
			this._IntegratorUserEntities = new EntitySet<IntegratorUserEntity>(new Action<IntegratorUserEntity>(this.attach_IntegratorUserEntities), new Action<IntegratorUserEntity>(this.detach_IntegratorUserEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AtsIntegratorEntity_IntegratorUserEntity", Storage="_IntegratorUserEntities", ThisKey="id", OtherKey="integratorId")]
		public EntitySet<IntegratorUserEntity> IntegratorUserEntities
		{
			get
			{
				return this._IntegratorUserEntities;
			}
			set
			{
				this._IntegratorUserEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IntegratorUserEntities(IntegratorUserEntity entity)
		{
			this.SendPropertyChanging();
			entity.AtsIntegratorEntity = this;
		}
		
		private void detach_IntegratorUserEntities(IntegratorUserEntity entity)
		{
			this.SendPropertyChanging();
			entity.AtsIntegratorEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IntegratorUser")]
	internal partial class IntegratorUserEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _username;
		
		private string _password;
		
		private System.Guid _integratorId;
		
		private short _permissions;
		
		private EntityRef<AtsIntegratorEntity> _AtsIntegratorEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnintegratorIdChanging(System.Guid value);
    partial void OnintegratorIdChanged();
    partial void OnpermissionsChanging(short value);
    partial void OnpermissionsChanged();
    #endregion
		
		public IntegratorUserEntity()
		{
			this._AtsIntegratorEntity = default(EntityRef<AtsIntegratorEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Char(24) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_integratorId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid integratorId
		{
			get
			{
				return this._integratorId;
			}
			set
			{
				if ((this._integratorId != value))
				{
					if (this._AtsIntegratorEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnintegratorIdChanging(value);
					this.SendPropertyChanging();
					this._integratorId = value;
					this.SendPropertyChanged("integratorId");
					this.OnintegratorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permissions", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short permissions
		{
			get
			{
				return this._permissions;
			}
			set
			{
				if ((this._permissions != value))
				{
					this.OnpermissionsChanging(value);
					this.SendPropertyChanging();
					this._permissions = value;
					this.SendPropertyChanged("permissions");
					this.OnpermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AtsIntegratorEntity_IntegratorUserEntity", Storage="_AtsIntegratorEntity", ThisKey="integratorId", OtherKey="id", IsForeignKey=true)]
		public AtsIntegratorEntity AtsIntegratorEntity
		{
			get
			{
				return this._AtsIntegratorEntity.Entity;
			}
			set
			{
				AtsIntegratorEntity previousValue = this._AtsIntegratorEntity.Entity;
				if (((previousValue != value) 
							|| (this._AtsIntegratorEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AtsIntegratorEntity.Entity = null;
						previousValue.IntegratorUserEntities.Remove(this);
					}
					this._AtsIntegratorEntity.Entity = value;
					if ((value != null))
					{
						value.IntegratorUserEntities.Add(this);
						this._integratorId = value.id;
					}
					else
					{
						this._integratorId = default(System.Guid);
					}
					this.SendPropertyChanged("AtsIntegratorEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
