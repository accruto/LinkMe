#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Users.Members.Contacts.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	internal partial class ContactsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLocationReferenceEntity(LocationReferenceEntity instance);
    partial void UpdateLocationReferenceEntity(LocationReferenceEntity instance);
    partial void DeleteLocationReferenceEntity(LocationReferenceEntity instance);
    partial void InsertAddressEntity(AddressEntity instance);
    partial void UpdateAddressEntity(AddressEntity instance);
    partial void DeleteAddressEntity(AddressEntity instance);
    partial void InsertRepresentativeEntity(RepresentativeEntity instance);
    partial void UpdateRepresentativeEntity(RepresentativeEntity instance);
    partial void DeleteRepresentativeEntity(RepresentativeEntity instance);
    partial void InsertNetworkLinkEntity(NetworkLinkEntity instance);
    partial void UpdateNetworkLinkEntity(NetworkLinkEntity instance);
    partial void DeleteNetworkLinkEntity(NetworkLinkEntity instance);
    partial void InsertIgnoredNetworkMatchEntity(IgnoredNetworkMatchEntity instance);
    partial void UpdateIgnoredNetworkMatchEntity(IgnoredNetworkMatchEntity instance);
    partial void DeleteIgnoredNetworkMatchEntity(IgnoredNetworkMatchEntity instance);
    partial void InsertNetworkInvitationEntity(NetworkInvitationEntity instance);
    partial void UpdateNetworkInvitationEntity(NetworkInvitationEntity instance);
    partial void DeleteNetworkInvitationEntity(NetworkInvitationEntity instance);
    partial void InsertRepresentativeInvitationEntity(RepresentativeInvitationEntity instance);
    partial void UpdateRepresentativeInvitationEntity(RepresentativeInvitationEntity instance);
    partial void DeleteRepresentativeInvitationEntity(RepresentativeInvitationEntity instance);
    partial void InsertUserToUserRequestEntity(UserToUserRequestEntity instance);
    partial void UpdateUserToUserRequestEntity(UserToUserRequestEntity instance);
    partial void DeleteUserToUserRequestEntity(UserToUserRequestEntity instance);
    partial void InsertCommunityMemberEntity(CommunityMemberEntity instance);
    partial void UpdateCommunityMemberEntity(CommunityMemberEntity instance);
    partial void DeleteCommunityMemberEntity(CommunityMemberEntity instance);
    partial void InsertRegisteredUserEntity(RegisteredUserEntity instance);
    partial void UpdateRegisteredUserEntity(RegisteredUserEntity instance);
    partial void DeleteRegisteredUserEntity(RegisteredUserEntity instance);
    partial void InsertMemberEntity(MemberEntity instance);
    partial void UpdateMemberEntity(MemberEntity instance);
    partial void DeleteMemberEntity(MemberEntity instance);
    #endregion
		
		public ContactsDataContext() : 
				base(global::LinkMe.Domain.Users.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<LocationReferenceEntity> LocationReferenceEntities
		{
			get
			{
				return this.GetTable<LocationReferenceEntity>();
			}
		}
		
		internal System.Data.Linq.Table<AddressEntity> AddressEntities
		{
			get
			{
				return this.GetTable<AddressEntity>();
			}
		}
		
		internal System.Data.Linq.Table<RepresentativeEntity> RepresentativeEntities
		{
			get
			{
				return this.GetTable<RepresentativeEntity>();
			}
		}
		
		internal System.Data.Linq.Table<NetworkLinkEntity> NetworkLinkEntities
		{
			get
			{
				return this.GetTable<NetworkLinkEntity>();
			}
		}
		
		internal System.Data.Linq.Table<IgnoredNetworkMatchEntity> IgnoredNetworkMatchEntities
		{
			get
			{
				return this.GetTable<IgnoredNetworkMatchEntity>();
			}
		}
		
		internal System.Data.Linq.Table<NetworkInvitationEntity> NetworkInvitationEntities
		{
			get
			{
				return this.GetTable<NetworkInvitationEntity>();
			}
		}
		
		internal System.Data.Linq.Table<RepresentativeInvitationEntity> RepresentativeInvitationEntities
		{
			get
			{
				return this.GetTable<RepresentativeInvitationEntity>();
			}
		}
		
		internal System.Data.Linq.Table<UserToUserRequestEntity> UserToUserRequestEntities
		{
			get
			{
				return this.GetTable<UserToUserRequestEntity>();
			}
		}
		
		internal System.Data.Linq.Table<CommunityMemberEntity> CommunityMemberEntities
		{
			get
			{
				return this.GetTable<CommunityMemberEntity>();
			}
		}
		
		internal System.Data.Linq.Table<RegisteredUserEntity> RegisteredUserEntities
		{
			get
			{
				return this.GetTable<RegisteredUserEntity>();
			}
		}
		
		internal System.Data.Linq.Table<MemberEntity> MemberEntities
		{
			get
			{
				return this.GetTable<MemberEntity>();
			}
		}
		
		[Function(Name="dbo.SplitGuids", IsComposable=true)]
		internal IQueryable<SplitGuidsResult> SplitGuids([Parameter(DbType="NVarChar(MAX)")] string delimiter, [Parameter(DbType="NVarChar(MAX)")] string input)
		{
			return this.CreateMethodCallQuery<SplitGuidsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), delimiter, input);
		}
	}
	
	[Table(Name="dbo.LocationReference")]
	internal partial class LocationReferenceEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _unstructuredLocation;
		
		private System.Nullable<int> _namedLocationId;
		
		private int _countrySubdivisionId;
		
		private System.Nullable<int> _localityId;
		
		private EntitySet<AddressEntity> _AddressEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnunstructuredLocationChanging(string value);
    partial void OnunstructuredLocationChanged();
    partial void OnnamedLocationIdChanging(System.Nullable<int> value);
    partial void OnnamedLocationIdChanged();
    partial void OncountrySubdivisionIdChanging(int value);
    partial void OncountrySubdivisionIdChanged();
    partial void OnlocalityIdChanging(System.Nullable<int> value);
    partial void OnlocalityIdChanged();
    #endregion
		
		public LocationReferenceEntity()
		{
			this._AddressEntities = new EntitySet<AddressEntity>(new Action<AddressEntity>(this.attach_AddressEntities), new Action<AddressEntity>(this.detach_AddressEntities));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_unstructuredLocation", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string unstructuredLocation
		{
			get
			{
				return this._unstructuredLocation;
			}
			set
			{
				if ((this._unstructuredLocation != value))
				{
					this.OnunstructuredLocationChanging(value);
					this.SendPropertyChanging();
					this._unstructuredLocation = value;
					this.SendPropertyChanged("unstructuredLocation");
					this.OnunstructuredLocationChanged();
				}
			}
		}
		
		[Column(Storage="_namedLocationId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> namedLocationId
		{
			get
			{
				return this._namedLocationId;
			}
			set
			{
				if ((this._namedLocationId != value))
				{
					this.OnnamedLocationIdChanging(value);
					this.SendPropertyChanging();
					this._namedLocationId = value;
					this.SendPropertyChanged("namedLocationId");
					this.OnnamedLocationIdChanged();
				}
			}
		}
		
		[Column(Storage="_countrySubdivisionId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int countrySubdivisionId
		{
			get
			{
				return this._countrySubdivisionId;
			}
			set
			{
				if ((this._countrySubdivisionId != value))
				{
					this.OncountrySubdivisionIdChanging(value);
					this.SendPropertyChanging();
					this._countrySubdivisionId = value;
					this.SendPropertyChanged("countrySubdivisionId");
					this.OncountrySubdivisionIdChanged();
				}
			}
		}
		
		[Column(Storage="_localityId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> localityId
		{
			get
			{
				return this._localityId;
			}
			set
			{
				if ((this._localityId != value))
				{
					this.OnlocalityIdChanging(value);
					this.SendPropertyChanging();
					this._localityId = value;
					this.SendPropertyChanged("localityId");
					this.OnlocalityIdChanged();
				}
			}
		}
		
		[Association(Name="LocationReferenceEntity_AddressEntity", Storage="_AddressEntities", ThisKey="id", OtherKey="locationReferenceId")]
		public EntitySet<AddressEntity> AddressEntities
		{
			get
			{
				return this._AddressEntities;
			}
			set
			{
				this._AddressEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AddressEntities(AddressEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocationReferenceEntity = this;
		}
		
		private void detach_AddressEntities(AddressEntity entity)
		{
			this.SendPropertyChanging();
			entity.LocationReferenceEntity = null;
		}
	}
	
	[Table(Name="dbo.Address")]
	internal partial class AddressEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _line1;
		
		private string _line2;
		
		private System.Nullable<System.Guid> _locationReferenceId;
		
		private EntitySet<MemberEntity> _MemberEntities;
		
		private EntityRef<LocationReferenceEntity> _LocationReferenceEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void Online1Changing(string value);
    partial void Online1Changed();
    partial void Online2Changing(string value);
    partial void Online2Changed();
    partial void OnlocationReferenceIdChanging(System.Nullable<System.Guid> value);
    partial void OnlocationReferenceIdChanged();
    #endregion
		
		public AddressEntity()
		{
			this._MemberEntities = new EntitySet<MemberEntity>(new Action<MemberEntity>(this.attach_MemberEntities), new Action<MemberEntity>(this.detach_MemberEntities));
			this._LocationReferenceEntity = default(EntityRef<LocationReferenceEntity>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_line1", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string line1
		{
			get
			{
				return this._line1;
			}
			set
			{
				if ((this._line1 != value))
				{
					this.Online1Changing(value);
					this.SendPropertyChanging();
					this._line1 = value;
					this.SendPropertyChanged("line1");
					this.Online1Changed();
				}
			}
		}
		
		[Column(Storage="_line2", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string line2
		{
			get
			{
				return this._line2;
			}
			set
			{
				if ((this._line2 != value))
				{
					this.Online2Changing(value);
					this.SendPropertyChanging();
					this._line2 = value;
					this.SendPropertyChanged("line2");
					this.Online2Changed();
				}
			}
		}
		
		[Column(Storage="_locationReferenceId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> locationReferenceId
		{
			get
			{
				return this._locationReferenceId;
			}
			set
			{
				if ((this._locationReferenceId != value))
				{
					if (this._LocationReferenceEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlocationReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._locationReferenceId = value;
					this.SendPropertyChanged("locationReferenceId");
					this.OnlocationReferenceIdChanged();
				}
			}
		}
		
		[Association(Name="AddressEntity_Member", Storage="_MemberEntities", ThisKey="id", OtherKey="addressId")]
		public EntitySet<MemberEntity> MemberEntities
		{
			get
			{
				return this._MemberEntities;
			}
			set
			{
				this._MemberEntities.Assign(value);
			}
		}
		
		[Association(Name="LocationReferenceEntity_AddressEntity", Storage="_LocationReferenceEntity", ThisKey="locationReferenceId", OtherKey="id", IsForeignKey=true)]
		public LocationReferenceEntity LocationReferenceEntity
		{
			get
			{
				return this._LocationReferenceEntity.Entity;
			}
			set
			{
				LocationReferenceEntity previousValue = this._LocationReferenceEntity.Entity;
				if (((previousValue != value) 
							|| (this._LocationReferenceEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocationReferenceEntity.Entity = null;
						previousValue.AddressEntities.Remove(this);
					}
					this._LocationReferenceEntity.Entity = value;
					if ((value != null))
					{
						value.AddressEntities.Add(this);
						this._locationReferenceId = value.id;
					}
					else
					{
						this._locationReferenceId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("LocationReferenceEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MemberEntities(MemberEntity entity)
		{
			this.SendPropertyChanging();
			entity.AddressEntity = this;
		}
		
		private void detach_MemberEntities(MemberEntity entity)
		{
			this.SendPropertyChanging();
			entity.AddressEntity = null;
		}
	}
	
	[Table(Name="dbo.Representative")]
	internal partial class RepresentativeEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _representeeId;
		
		private System.Guid _representativeId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrepresenteeIdChanging(System.Guid value);
    partial void OnrepresenteeIdChanged();
    partial void OnrepresentativeIdChanging(System.Guid value);
    partial void OnrepresentativeIdChanged();
    #endregion
		
		public RepresentativeEntity()
		{
			OnCreated();
		}
		
		[Column(Storage="_representeeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid representeeId
		{
			get
			{
				return this._representeeId;
			}
			set
			{
				if ((this._representeeId != value))
				{
					this.OnrepresenteeIdChanging(value);
					this.SendPropertyChanging();
					this._representeeId = value;
					this.SendPropertyChanged("representeeId");
					this.OnrepresenteeIdChanged();
				}
			}
		}
		
		[Column(Storage="_representativeId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid representativeId
		{
			get
			{
				return this._representativeId;
			}
			set
			{
				if ((this._representativeId != value))
				{
					this.OnrepresentativeIdChanging(value);
					this.SendPropertyChanging();
					this._representativeId = value;
					this.SendPropertyChanged("representativeId");
					this.OnrepresentativeIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NetworkLink")]
	internal partial class NetworkLinkEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _fromNetworkerId;
		
		private System.Guid _toNetworkerId;
		
		private System.DateTime _addedTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfromNetworkerIdChanging(System.Guid value);
    partial void OnfromNetworkerIdChanged();
    partial void OntoNetworkerIdChanging(System.Guid value);
    partial void OntoNetworkerIdChanged();
    partial void OnaddedTimeChanging(System.DateTime value);
    partial void OnaddedTimeChanged();
    #endregion
		
		public NetworkLinkEntity()
		{
			OnCreated();
		}
		
		[Column(Storage="_fromNetworkerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid fromNetworkerId
		{
			get
			{
				return this._fromNetworkerId;
			}
			set
			{
				if ((this._fromNetworkerId != value))
				{
					this.OnfromNetworkerIdChanging(value);
					this.SendPropertyChanging();
					this._fromNetworkerId = value;
					this.SendPropertyChanged("fromNetworkerId");
					this.OnfromNetworkerIdChanged();
				}
			}
		}
		
		[Column(Storage="_toNetworkerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid toNetworkerId
		{
			get
			{
				return this._toNetworkerId;
			}
			set
			{
				if ((this._toNetworkerId != value))
				{
					this.OntoNetworkerIdChanging(value);
					this.SendPropertyChanging();
					this._toNetworkerId = value;
					this.SendPropertyChanged("toNetworkerId");
					this.OntoNetworkerIdChanged();
				}
			}
		}
		
		[Column(Storage="_addedTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime addedTime
		{
			get
			{
				return this._addedTime;
			}
			set
			{
				if ((this._addedTime != value))
				{
					this.OnaddedTimeChanging(value);
					this.SendPropertyChanging();
					this._addedTime = value;
					this.SendPropertyChanged("addedTime");
					this.OnaddedTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.IgnoredNetworkMatch")]
	internal partial class IgnoredNetworkMatchEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private byte _category;
		
		private System.DateTime _time;
		
		private System.Guid _ignorerId;
		
		private System.Guid _ignoredId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OncategoryChanging(byte value);
    partial void OncategoryChanged();
    partial void OntimeChanging(System.DateTime value);
    partial void OntimeChanged();
    partial void OnignorerIdChanging(System.Guid value);
    partial void OnignorerIdChanged();
    partial void OnignoredIdChanging(System.Guid value);
    partial void OnignoredIdChanged();
    #endregion
		
		public IgnoredNetworkMatchEntity()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_category", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte category
		{
			get
			{
				return this._category;
			}
			set
			{
				if ((this._category != value))
				{
					this.OncategoryChanging(value);
					this.SendPropertyChanging();
					this._category = value;
					this.SendPropertyChanged("category");
					this.OncategoryChanged();
				}
			}
		}
		
		[Column(Storage="_time", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[Column(Storage="_ignorerId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ignorerId
		{
			get
			{
				return this._ignorerId;
			}
			set
			{
				if ((this._ignorerId != value))
				{
					this.OnignorerIdChanging(value);
					this.SendPropertyChanging();
					this._ignorerId = value;
					this.SendPropertyChanged("ignorerId");
					this.OnignorerIdChanged();
				}
			}
		}
		
		[Column(Storage="_ignoredId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ignoredId
		{
			get
			{
				return this._ignoredId;
			}
			set
			{
				if ((this._ignoredId != value))
				{
					this.OnignoredIdChanging(value);
					this.SendPropertyChanging();
					this._ignoredId = value;
					this.SendPropertyChanged("ignoredId");
					this.OnignoredIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NetworkInvitation")]
	internal partial class NetworkInvitationEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _inviteeEmailAddress;
		
		private System.Guid _inviterId;
		
		private System.Nullable<System.Guid> _inviteeId;
		
		private System.Nullable<System.Guid> _donationRequestId;
		
		private EntityRef<UserToUserRequestEntity> _UserToUserRequestEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OninviteeEmailAddressChanging(string value);
    partial void OninviteeEmailAddressChanged();
    partial void OninviterIdChanging(System.Guid value);
    partial void OninviterIdChanged();
    partial void OninviteeIdChanging(System.Nullable<System.Guid> value);
    partial void OninviteeIdChanged();
    partial void OndonationRequestIdChanging(System.Nullable<System.Guid> value);
    partial void OndonationRequestIdChanged();
    #endregion
		
		public NetworkInvitationEntity()
		{
			this._UserToUserRequestEntity = default(EntityRef<UserToUserRequestEntity>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._UserToUserRequestEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_inviteeEmailAddress", DbType="NVarChar(320)", UpdateCheck=UpdateCheck.Never)]
		public string inviteeEmailAddress
		{
			get
			{
				return this._inviteeEmailAddress;
			}
			set
			{
				if ((this._inviteeEmailAddress != value))
				{
					this.OninviteeEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._inviteeEmailAddress = value;
					this.SendPropertyChanged("inviteeEmailAddress");
					this.OninviteeEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_inviterId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid inviterId
		{
			get
			{
				return this._inviterId;
			}
			set
			{
				if ((this._inviterId != value))
				{
					this.OninviterIdChanging(value);
					this.SendPropertyChanging();
					this._inviterId = value;
					this.SendPropertyChanged("inviterId");
					this.OninviterIdChanged();
				}
			}
		}
		
		[Column(Storage="_inviteeId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> inviteeId
		{
			get
			{
				return this._inviteeId;
			}
			set
			{
				if ((this._inviteeId != value))
				{
					this.OninviteeIdChanging(value);
					this.SendPropertyChanging();
					this._inviteeId = value;
					this.SendPropertyChanged("inviteeId");
					this.OninviteeIdChanged();
				}
			}
		}
		
		[Column(Storage="_donationRequestId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> donationRequestId
		{
			get
			{
				return this._donationRequestId;
			}
			set
			{
				if ((this._donationRequestId != value))
				{
					this.OndonationRequestIdChanging(value);
					this.SendPropertyChanging();
					this._donationRequestId = value;
					this.SendPropertyChanged("donationRequestId");
					this.OndonationRequestIdChanged();
				}
			}
		}
		
		[Association(Name="UserToUserRequestEntity_NetworkInvitationEntity", Storage="_UserToUserRequestEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public UserToUserRequestEntity UserToUserRequestEntity
		{
			get
			{
				return this._UserToUserRequestEntity.Entity;
			}
			set
			{
				UserToUserRequestEntity previousValue = this._UserToUserRequestEntity.Entity;
				if (((previousValue != value) 
							|| (this._UserToUserRequestEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserToUserRequestEntity.Entity = null;
						previousValue.NetworkInvitationEntity = null;
					}
					this._UserToUserRequestEntity.Entity = value;
					if ((value != null))
					{
						value.NetworkInvitationEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(System.Guid);
					}
					this.SendPropertyChanged("UserToUserRequestEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RepresentativeInvitation")]
	internal partial class RepresentativeInvitationEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _inviteeEmailAddress;
		
		private System.Guid _inviterId;
		
		private System.Nullable<System.Guid> _inviteeId;
		
		private EntityRef<UserToUserRequestEntity> _UserToUserRequestEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OninviteeEmailAddressChanging(string value);
    partial void OninviteeEmailAddressChanged();
    partial void OninviterIdChanging(System.Guid value);
    partial void OninviterIdChanged();
    partial void OninviteeIdChanging(System.Nullable<System.Guid> value);
    partial void OninviteeIdChanged();
    #endregion
		
		public RepresentativeInvitationEntity()
		{
			this._UserToUserRequestEntity = default(EntityRef<UserToUserRequestEntity>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._UserToUserRequestEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_inviteeEmailAddress", DbType="NVarChar(320)", UpdateCheck=UpdateCheck.Never)]
		public string inviteeEmailAddress
		{
			get
			{
				return this._inviteeEmailAddress;
			}
			set
			{
				if ((this._inviteeEmailAddress != value))
				{
					this.OninviteeEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._inviteeEmailAddress = value;
					this.SendPropertyChanged("inviteeEmailAddress");
					this.OninviteeEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_inviterId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid inviterId
		{
			get
			{
				return this._inviterId;
			}
			set
			{
				if ((this._inviterId != value))
				{
					this.OninviterIdChanging(value);
					this.SendPropertyChanging();
					this._inviterId = value;
					this.SendPropertyChanged("inviterId");
					this.OninviterIdChanged();
				}
			}
		}
		
		[Column(Storage="_inviteeId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> inviteeId
		{
			get
			{
				return this._inviteeId;
			}
			set
			{
				if ((this._inviteeId != value))
				{
					this.OninviteeIdChanging(value);
					this.SendPropertyChanging();
					this._inviteeId = value;
					this.SendPropertyChanged("inviteeId");
					this.OninviteeIdChanged();
				}
			}
		}
		
		[Association(Name="UserToUserRequestEntity_RepresentativeInvitationEntity", Storage="_UserToUserRequestEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public UserToUserRequestEntity UserToUserRequestEntity
		{
			get
			{
				return this._UserToUserRequestEntity.Entity;
			}
			set
			{
				UserToUserRequestEntity previousValue = this._UserToUserRequestEntity.Entity;
				if (((previousValue != value) 
							|| (this._UserToUserRequestEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserToUserRequestEntity.Entity = null;
						previousValue.RepresentativeInvitationEntity = null;
					}
					this._UserToUserRequestEntity.Entity = value;
					if ((value != null))
					{
						value.RepresentativeInvitationEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(System.Guid);
					}
					this.SendPropertyChanged("UserToUserRequestEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserToUserRequest")]
	internal partial class UserToUserRequestEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.DateTime> _actionedTime;
		
		private System.Nullable<System.DateTime> _firstSentTime;
		
		private byte _flags;
		
		private System.Nullable<System.DateTime> _lastSentTime;
		
		private string _messageText;
		
		private byte _status;
		
		private EntityRef<NetworkInvitationEntity> _NetworkInvitationEntity;
		
		private EntityRef<RepresentativeInvitationEntity> _RepresentativeInvitationEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnactionedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnactionedTimeChanged();
    partial void OnfirstSentTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnfirstSentTimeChanged();
    partial void OnflagsChanging(byte value);
    partial void OnflagsChanged();
    partial void OnlastSentTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnlastSentTimeChanged();
    partial void OnmessageTextChanging(string value);
    partial void OnmessageTextChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    #endregion
		
		public UserToUserRequestEntity()
		{
			this._NetworkInvitationEntity = default(EntityRef<NetworkInvitationEntity>);
			this._RepresentativeInvitationEntity = default(EntityRef<RepresentativeInvitationEntity>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_actionedTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> actionedTime
		{
			get
			{
				return this._actionedTime;
			}
			set
			{
				if ((this._actionedTime != value))
				{
					this.OnactionedTimeChanging(value);
					this.SendPropertyChanging();
					this._actionedTime = value;
					this.SendPropertyChanged("actionedTime");
					this.OnactionedTimeChanged();
				}
			}
		}
		
		[Column(Storage="_firstSentTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> firstSentTime
		{
			get
			{
				return this._firstSentTime;
			}
			set
			{
				if ((this._firstSentTime != value))
				{
					this.OnfirstSentTimeChanging(value);
					this.SendPropertyChanging();
					this._firstSentTime = value;
					this.SendPropertyChanged("firstSentTime");
					this.OnfirstSentTimeChanged();
				}
			}
		}
		
		[Column(Storage="_flags", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte flags
		{
			get
			{
				return this._flags;
			}
			set
			{
				if ((this._flags != value))
				{
					this.OnflagsChanging(value);
					this.SendPropertyChanging();
					this._flags = value;
					this.SendPropertyChanged("flags");
					this.OnflagsChanged();
				}
			}
		}
		
		[Column(Storage="_lastSentTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> lastSentTime
		{
			get
			{
				return this._lastSentTime;
			}
			set
			{
				if ((this._lastSentTime != value))
				{
					this.OnlastSentTimeChanging(value);
					this.SendPropertyChanging();
					this._lastSentTime = value;
					this.SendPropertyChanged("lastSentTime");
					this.OnlastSentTimeChanged();
				}
			}
		}
		
		[Column(Storage="_messageText", DbType="NVarChar(2000)", UpdateCheck=UpdateCheck.Never)]
		public string messageText
		{
			get
			{
				return this._messageText;
			}
			set
			{
				if ((this._messageText != value))
				{
					this.OnmessageTextChanging(value);
					this.SendPropertyChanging();
					this._messageText = value;
					this.SendPropertyChanged("messageText");
					this.OnmessageTextChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[Association(Name="UserToUserRequestEntity_NetworkInvitationEntity", Storage="_NetworkInvitationEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public NetworkInvitationEntity NetworkInvitationEntity
		{
			get
			{
				return this._NetworkInvitationEntity.Entity;
			}
			set
			{
				NetworkInvitationEntity previousValue = this._NetworkInvitationEntity.Entity;
				if (((previousValue != value) 
							|| (this._NetworkInvitationEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NetworkInvitationEntity.Entity = null;
						previousValue.UserToUserRequestEntity = null;
					}
					this._NetworkInvitationEntity.Entity = value;
					if ((value != null))
					{
						value.UserToUserRequestEntity = this;
					}
					this.SendPropertyChanged("NetworkInvitationEntity");
				}
			}
		}
		
		[Association(Name="UserToUserRequestEntity_RepresentativeInvitationEntity", Storage="_RepresentativeInvitationEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public RepresentativeInvitationEntity RepresentativeInvitationEntity
		{
			get
			{
				return this._RepresentativeInvitationEntity.Entity;
			}
			set
			{
				RepresentativeInvitationEntity previousValue = this._RepresentativeInvitationEntity.Entity;
				if (((previousValue != value) 
							|| (this._RepresentativeInvitationEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RepresentativeInvitationEntity.Entity = null;
						previousValue.UserToUserRequestEntity = null;
					}
					this._RepresentativeInvitationEntity.Entity = value;
					if ((value != null))
					{
						value.UserToUserRequestEntity = this;
					}
					this.SendPropertyChanged("RepresentativeInvitationEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CommunityMember")]
	internal partial class CommunityMemberEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Guid _primaryCommunityId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnprimaryCommunityIdChanging(System.Guid value);
    partial void OnprimaryCommunityIdChanged();
    #endregion
		
		public CommunityMemberEntity()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_primaryCommunityId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid primaryCommunityId
		{
			get
			{
				return this._primaryCommunityId;
			}
			set
			{
				if ((this._primaryCommunityId != value))
				{
					this.OnprimaryCommunityIdChanging(value);
					this.SendPropertyChanging();
					this._primaryCommunityId = value;
					this.SendPropertyChanged("primaryCommunityId");
					this.OnprimaryCommunityIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RegisteredUser")]
	internal partial class RegisteredUserEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _loginId;
		
		private System.DateTime _createdTime;
		
		private string _emailAddress;
		
		private string _firstName;
		
		private string _lastName;
		
		private short _flags;
		
		private string _passwordHash;
		
		private bool _emailAddressVerified;
		
		private string _secondaryEmailAddress;
		
		private System.Nullable<bool> _secondaryEmailAddressVerified;
		
		private EntityRef<MemberEntity> _MemberEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnloginIdChanging(string value);
    partial void OnloginIdChanged();
    partial void OncreatedTimeChanging(System.DateTime value);
    partial void OncreatedTimeChanged();
    partial void OnemailAddressChanging(string value);
    partial void OnemailAddressChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnflagsChanging(short value);
    partial void OnflagsChanged();
    partial void OnpasswordHashChanging(string value);
    partial void OnpasswordHashChanged();
    partial void OnemailAddressVerifiedChanging(bool value);
    partial void OnemailAddressVerifiedChanged();
    partial void OnsecondaryEmailAddressChanging(string value);
    partial void OnsecondaryEmailAddressChanged();
    partial void OnsecondaryEmailAddressVerifiedChanging(System.Nullable<bool> value);
    partial void OnsecondaryEmailAddressVerifiedChanged();
    #endregion
		
		public RegisteredUserEntity()
		{
			this._MemberEntity = default(EntityRef<MemberEntity>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_loginId", DbType="NVarChar(320)", UpdateCheck=UpdateCheck.Never)]
		public string loginId
		{
			get
			{
				return this._loginId;
			}
			set
			{
				if ((this._loginId != value))
				{
					this.OnloginIdChanging(value);
					this.SendPropertyChanging();
					this._loginId = value;
					this.SendPropertyChanged("loginId");
					this.OnloginIdChanged();
				}
			}
		}
		
		[Column(Storage="_createdTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime createdTime
		{
			get
			{
				return this._createdTime;
			}
			set
			{
				if ((this._createdTime != value))
				{
					this.OncreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._createdTime = value;
					this.SendPropertyChanged("createdTime");
					this.OncreatedTimeChanged();
				}
			}
		}
		
		[Column(Storage="_emailAddress", DbType="NVarChar(320) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string emailAddress
		{
			get
			{
				return this._emailAddress;
			}
			set
			{
				if ((this._emailAddress != value))
				{
					this.OnemailAddressChanging(value);
					this.SendPropertyChanging();
					this._emailAddress = value;
					this.SendPropertyChanged("emailAddress");
					this.OnemailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_firstName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_lastName", DbType="NVarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[Column(Storage="_flags", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short flags
		{
			get
			{
				return this._flags;
			}
			set
			{
				if ((this._flags != value))
				{
					this.OnflagsChanging(value);
					this.SendPropertyChanging();
					this._flags = value;
					this.SendPropertyChanged("flags");
					this.OnflagsChanged();
				}
			}
		}
		
		[Column(Storage="_passwordHash", DbType="Char(24)", UpdateCheck=UpdateCheck.Never)]
		public string passwordHash
		{
			get
			{
				return this._passwordHash;
			}
			set
			{
				if ((this._passwordHash != value))
				{
					this.OnpasswordHashChanging(value);
					this.SendPropertyChanging();
					this._passwordHash = value;
					this.SendPropertyChanged("passwordHash");
					this.OnpasswordHashChanged();
				}
			}
		}
		
		[Column(Storage="_emailAddressVerified", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool emailAddressVerified
		{
			get
			{
				return this._emailAddressVerified;
			}
			set
			{
				if ((this._emailAddressVerified != value))
				{
					this.OnemailAddressVerifiedChanging(value);
					this.SendPropertyChanging();
					this._emailAddressVerified = value;
					this.SendPropertyChanged("emailAddressVerified");
					this.OnemailAddressVerifiedChanged();
				}
			}
		}
		
		[Column(Storage="_secondaryEmailAddress", DbType="NVarChar(320)", UpdateCheck=UpdateCheck.Never)]
		public string secondaryEmailAddress
		{
			get
			{
				return this._secondaryEmailAddress;
			}
			set
			{
				if ((this._secondaryEmailAddress != value))
				{
					this.OnsecondaryEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._secondaryEmailAddress = value;
					this.SendPropertyChanged("secondaryEmailAddress");
					this.OnsecondaryEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_secondaryEmailAddressVerified", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> secondaryEmailAddressVerified
		{
			get
			{
				return this._secondaryEmailAddressVerified;
			}
			set
			{
				if ((this._secondaryEmailAddressVerified != value))
				{
					this.OnsecondaryEmailAddressVerifiedChanging(value);
					this.SendPropertyChanging();
					this._secondaryEmailAddressVerified = value;
					this.SendPropertyChanged("secondaryEmailAddressVerified");
					this.OnsecondaryEmailAddressVerifiedChanged();
				}
			}
		}
		
		[Association(Name="RegisteredUserEntity_Member", Storage="_MemberEntity", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public MemberEntity MemberEntity
		{
			get
			{
				return this._MemberEntity.Entity;
			}
			set
			{
				MemberEntity previousValue = this._MemberEntity.Entity;
				if (((previousValue != value) 
							|| (this._MemberEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MemberEntity.Entity = null;
						previousValue.RegisteredUserEntity = null;
					}
					this._MemberEntity.Entity = value;
					if ((value != null))
					{
						value.RegisteredUserEntity = this;
					}
					this.SendPropertyChanged("MemberEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Member")]
	internal partial class MemberEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private System.Nullable<System.DateTime> _dateOfBirth;
		
		private byte _gender;
		
		private byte _employerAccess;
		
		private int _firstDegreeAccess;
		
		private int _secondDegreeAccess;
		
		private int _publicAccess;
		
		private System.Nullable<byte> _enteredReferralSourceId;
		
		private System.Guid _addressId;
		
		private System.Nullable<System.Guid> _profilePhotoId;
		
		private System.Nullable<int> _ethnicFlags;
		
		private System.Nullable<int> _disabilityFlags;
		
		private System.Nullable<byte> _dateOfBirthParts;
		
		private string _primaryPhoneNumber;
		
		private System.Nullable<byte> _primaryPhoneNumberType;
		
		private string _secondaryPhoneNumber;
		
		private System.Nullable<byte> _secondaryPhoneNumberType;
		
		private string _tertiaryPhoneNumber;
		
		private System.Nullable<byte> _tertiaryPhoneNumberType;
		
		private System.DateTime _lastEditedTime;
		
		private EntityRef<AddressEntity> _AddressEntity;
		
		private EntityRef<RegisteredUserEntity> _RegisteredUserEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OndateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfBirthChanged();
    partial void OngenderChanging(byte value);
    partial void OngenderChanged();
    partial void OnemployerAccessChanging(byte value);
    partial void OnemployerAccessChanged();
    partial void OnfirstDegreeAccessChanging(int value);
    partial void OnfirstDegreeAccessChanged();
    partial void OnsecondDegreeAccessChanging(int value);
    partial void OnsecondDegreeAccessChanged();
    partial void OnpublicAccessChanging(int value);
    partial void OnpublicAccessChanged();
    partial void OnenteredReferralSourceIdChanging(System.Nullable<byte> value);
    partial void OnenteredReferralSourceIdChanged();
    partial void OnaddressIdChanging(System.Guid value);
    partial void OnaddressIdChanged();
    partial void OnprofilePhotoIdChanging(System.Nullable<System.Guid> value);
    partial void OnprofilePhotoIdChanged();
    partial void OnethnicFlagsChanging(System.Nullable<int> value);
    partial void OnethnicFlagsChanged();
    partial void OndisabilityFlagsChanging(System.Nullable<int> value);
    partial void OndisabilityFlagsChanged();
    partial void OndateOfBirthPartsChanging(System.Nullable<byte> value);
    partial void OndateOfBirthPartsChanged();
    partial void OnprimaryPhoneNumberChanging(string value);
    partial void OnprimaryPhoneNumberChanged();
    partial void OnprimaryPhoneNumberTypeChanging(System.Nullable<byte> value);
    partial void OnprimaryPhoneNumberTypeChanged();
    partial void OnsecondaryPhoneNumberChanging(string value);
    partial void OnsecondaryPhoneNumberChanged();
    partial void OnsecondaryPhoneNumberTypeChanging(System.Nullable<byte> value);
    partial void OnsecondaryPhoneNumberTypeChanged();
    partial void OntertiaryPhoneNumberChanging(string value);
    partial void OntertiaryPhoneNumberChanged();
    partial void OntertiaryPhoneNumberTypeChanging(System.Nullable<byte> value);
    partial void OntertiaryPhoneNumberTypeChanged();
    partial void OnlastEditedTimeChanging(System.DateTime value);
    partial void OnlastEditedTimeChanged();
    #endregion
		
		public MemberEntity()
		{
			this._AddressEntity = default(EntityRef<AddressEntity>);
			this._RegisteredUserEntity = default(EntityRef<RegisteredUserEntity>);
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._RegisteredUserEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_dateOfBirth", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[Column(Storage="_gender", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[Column(Storage="_employerAccess", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte employerAccess
		{
			get
			{
				return this._employerAccess;
			}
			set
			{
				if ((this._employerAccess != value))
				{
					this.OnemployerAccessChanging(value);
					this.SendPropertyChanging();
					this._employerAccess = value;
					this.SendPropertyChanged("employerAccess");
					this.OnemployerAccessChanged();
				}
			}
		}
		
		[Column(Storage="_firstDegreeAccess", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int firstDegreeAccess
		{
			get
			{
				return this._firstDegreeAccess;
			}
			set
			{
				if ((this._firstDegreeAccess != value))
				{
					this.OnfirstDegreeAccessChanging(value);
					this.SendPropertyChanging();
					this._firstDegreeAccess = value;
					this.SendPropertyChanged("firstDegreeAccess");
					this.OnfirstDegreeAccessChanged();
				}
			}
		}
		
		[Column(Storage="_secondDegreeAccess", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int secondDegreeAccess
		{
			get
			{
				return this._secondDegreeAccess;
			}
			set
			{
				if ((this._secondDegreeAccess != value))
				{
					this.OnsecondDegreeAccessChanging(value);
					this.SendPropertyChanging();
					this._secondDegreeAccess = value;
					this.SendPropertyChanged("secondDegreeAccess");
					this.OnsecondDegreeAccessChanged();
				}
			}
		}
		
		[Column(Storage="_publicAccess", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int publicAccess
		{
			get
			{
				return this._publicAccess;
			}
			set
			{
				if ((this._publicAccess != value))
				{
					this.OnpublicAccessChanging(value);
					this.SendPropertyChanging();
					this._publicAccess = value;
					this.SendPropertyChanged("publicAccess");
					this.OnpublicAccessChanged();
				}
			}
		}
		
		[Column(Storage="_enteredReferralSourceId", DbType="TinyInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<byte> enteredReferralSourceId
		{
			get
			{
				return this._enteredReferralSourceId;
			}
			set
			{
				if ((this._enteredReferralSourceId != value))
				{
					this.OnenteredReferralSourceIdChanging(value);
					this.SendPropertyChanging();
					this._enteredReferralSourceId = value;
					this.SendPropertyChanged("enteredReferralSourceId");
					this.OnenteredReferralSourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_addressId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid addressId
		{
			get
			{
				return this._addressId;
			}
			set
			{
				if ((this._addressId != value))
				{
					if (this._AddressEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaddressIdChanging(value);
					this.SendPropertyChanging();
					this._addressId = value;
					this.SendPropertyChanged("addressId");
					this.OnaddressIdChanged();
				}
			}
		}
		
		[Column(Storage="_profilePhotoId", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> profilePhotoId
		{
			get
			{
				return this._profilePhotoId;
			}
			set
			{
				if ((this._profilePhotoId != value))
				{
					this.OnprofilePhotoIdChanging(value);
					this.SendPropertyChanging();
					this._profilePhotoId = value;
					this.SendPropertyChanged("profilePhotoId");
					this.OnprofilePhotoIdChanged();
				}
			}
		}
		
		[Column(Storage="_ethnicFlags", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ethnicFlags
		{
			get
			{
				return this._ethnicFlags;
			}
			set
			{
				if ((this._ethnicFlags != value))
				{
					this.OnethnicFlagsChanging(value);
					this.SendPropertyChanging();
					this._ethnicFlags = value;
					this.SendPropertyChanged("ethnicFlags");
					this.OnethnicFlagsChanged();
				}
			}
		}
		
		[Column(Storage="_disabilityFlags", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> disabilityFlags
		{
			get
			{
				return this._disabilityFlags;
			}
			set
			{
				if ((this._disabilityFlags != value))
				{
					this.OndisabilityFlagsChanging(value);
					this.SendPropertyChanging();
					this._disabilityFlags = value;
					this.SendPropertyChanged("disabilityFlags");
					this.OndisabilityFlagsChanged();
				}
			}
		}
		
		[Column(Storage="_dateOfBirthParts", DbType="TinyInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<byte> dateOfBirthParts
		{
			get
			{
				return this._dateOfBirthParts;
			}
			set
			{
				if ((this._dateOfBirthParts != value))
				{
					this.OndateOfBirthPartsChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirthParts = value;
					this.SendPropertyChanged("dateOfBirthParts");
					this.OndateOfBirthPartsChanged();
				}
			}
		}
		
		[Column(Storage="_primaryPhoneNumber", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string primaryPhoneNumber
		{
			get
			{
				return this._primaryPhoneNumber;
			}
			set
			{
				if ((this._primaryPhoneNumber != value))
				{
					this.OnprimaryPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._primaryPhoneNumber = value;
					this.SendPropertyChanged("primaryPhoneNumber");
					this.OnprimaryPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_primaryPhoneNumberType", DbType="TinyInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<byte> primaryPhoneNumberType
		{
			get
			{
				return this._primaryPhoneNumberType;
			}
			set
			{
				if ((this._primaryPhoneNumberType != value))
				{
					this.OnprimaryPhoneNumberTypeChanging(value);
					this.SendPropertyChanging();
					this._primaryPhoneNumberType = value;
					this.SendPropertyChanged("primaryPhoneNumberType");
					this.OnprimaryPhoneNumberTypeChanged();
				}
			}
		}
		
		[Column(Storage="_secondaryPhoneNumber", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string secondaryPhoneNumber
		{
			get
			{
				return this._secondaryPhoneNumber;
			}
			set
			{
				if ((this._secondaryPhoneNumber != value))
				{
					this.OnsecondaryPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._secondaryPhoneNumber = value;
					this.SendPropertyChanged("secondaryPhoneNumber");
					this.OnsecondaryPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_secondaryPhoneNumberType", DbType="TinyInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<byte> secondaryPhoneNumberType
		{
			get
			{
				return this._secondaryPhoneNumberType;
			}
			set
			{
				if ((this._secondaryPhoneNumberType != value))
				{
					this.OnsecondaryPhoneNumberTypeChanging(value);
					this.SendPropertyChanging();
					this._secondaryPhoneNumberType = value;
					this.SendPropertyChanged("secondaryPhoneNumberType");
					this.OnsecondaryPhoneNumberTypeChanged();
				}
			}
		}
		
		[Column(Storage="_tertiaryPhoneNumber", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string tertiaryPhoneNumber
		{
			get
			{
				return this._tertiaryPhoneNumber;
			}
			set
			{
				if ((this._tertiaryPhoneNumber != value))
				{
					this.OntertiaryPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._tertiaryPhoneNumber = value;
					this.SendPropertyChanged("tertiaryPhoneNumber");
					this.OntertiaryPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_tertiaryPhoneNumberType", DbType="TinyInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<byte> tertiaryPhoneNumberType
		{
			get
			{
				return this._tertiaryPhoneNumberType;
			}
			set
			{
				if ((this._tertiaryPhoneNumberType != value))
				{
					this.OntertiaryPhoneNumberTypeChanging(value);
					this.SendPropertyChanging();
					this._tertiaryPhoneNumberType = value;
					this.SendPropertyChanged("tertiaryPhoneNumberType");
					this.OntertiaryPhoneNumberTypeChanged();
				}
			}
		}
		
		[Column(Storage="_lastEditedTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime lastEditedTime
		{
			get
			{
				return this._lastEditedTime;
			}
			set
			{
				if ((this._lastEditedTime != value))
				{
					this.OnlastEditedTimeChanging(value);
					this.SendPropertyChanging();
					this._lastEditedTime = value;
					this.SendPropertyChanged("lastEditedTime");
					this.OnlastEditedTimeChanged();
				}
			}
		}
		
		[Association(Name="AddressEntity_Member", Storage="_AddressEntity", ThisKey="addressId", OtherKey="id", IsForeignKey=true)]
		public AddressEntity AddressEntity
		{
			get
			{
				return this._AddressEntity.Entity;
			}
			set
			{
				AddressEntity previousValue = this._AddressEntity.Entity;
				if (((previousValue != value) 
							|| (this._AddressEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressEntity.Entity = null;
						previousValue.MemberEntities.Remove(this);
					}
					this._AddressEntity.Entity = value;
					if ((value != null))
					{
						value.MemberEntities.Add(this);
						this._addressId = value.id;
					}
					else
					{
						this._addressId = default(System.Guid);
					}
					this.SendPropertyChanged("AddressEntity");
				}
			}
		}
		
		[Association(Name="RegisteredUserEntity_Member", Storage="_RegisteredUserEntity", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public RegisteredUserEntity RegisteredUserEntity
		{
			get
			{
				return this._RegisteredUserEntity.Entity;
			}
			set
			{
				RegisteredUserEntity previousValue = this._RegisteredUserEntity.Entity;
				if (((previousValue != value) 
							|| (this._RegisteredUserEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisteredUserEntity.Entity = null;
						previousValue.MemberEntity = null;
					}
					this._RegisteredUserEntity.Entity = value;
					if ((value != null))
					{
						value.MemberEntity = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(System.Guid);
					}
					this.SendPropertyChanged("RegisteredUserEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class SplitGuidsResult
	{
		
		private System.Nullable<System.Guid> _value;
		
		public SplitGuidsResult()
		{
		}
		
		[Column(Storage="_value", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
