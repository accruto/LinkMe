#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkMe.Domain.Users.Anonymous.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinkMe")]
	public partial class AnonymousDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnonymousUserEntity(AnonymousUserEntity instance);
    partial void UpdateAnonymousUserEntity(AnonymousUserEntity instance);
    partial void DeleteAnonymousUserEntity(AnonymousUserEntity instance);
    partial void InsertAnonymousContactEntity(AnonymousContactEntity instance);
    partial void UpdateAnonymousContactEntity(AnonymousContactEntity instance);
    partial void DeleteAnonymousContactEntity(AnonymousContactEntity instance);
    partial void InsertContactDetailEntity(ContactDetailEntity instance);
    partial void UpdateContactDetailEntity(ContactDetailEntity instance);
    partial void DeleteContactDetailEntity(ContactDetailEntity instance);
    #endregion
		
		public AnonymousDataContext() : 
				base(global::LinkMe.Domain.Users.Properties.Settings.Default.LinkMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AnonymousDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnonymousDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnonymousDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnonymousDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		internal System.Data.Linq.Table<AnonymousUserEntity> AnonymousUserEntities
		{
			get
			{
				return this.GetTable<AnonymousUserEntity>();
			}
		}
		
		internal System.Data.Linq.Table<AnonymousContactEntity> AnonymousContactEntities
		{
			get
			{
				return this.GetTable<AnonymousContactEntity>();
			}
		}
		
		internal System.Data.Linq.Table<ContactDetailEntity> ContactDetailEntities
		{
			get
			{
				return this.GetTable<ContactDetailEntity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnonymousUser")]
	internal partial class AnonymousUserEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private EntitySet<AnonymousContactEntity> _AnonymousContactEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    #endregion
		
		public AnonymousUserEntity()
		{
			this._AnonymousContactEntities = new EntitySet<AnonymousContactEntity>(new Action<AnonymousContactEntity>(this.attach_AnonymousContactEntities), new Action<AnonymousContactEntity>(this.detach_AnonymousContactEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnonymousUserEntity_AnonymousContactEntity", Storage="_AnonymousContactEntities", ThisKey="id", OtherKey="userId")]
		public EntitySet<AnonymousContactEntity> AnonymousContactEntities
		{
			get
			{
				return this._AnonymousContactEntities;
			}
			set
			{
				this._AnonymousContactEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnonymousContactEntities(AnonymousContactEntity entity)
		{
			this.SendPropertyChanging();
			entity.AnonymousUserEntity = this;
		}
		
		private void detach_AnonymousContactEntities(AnonymousContactEntity entity)
		{
			this.SendPropertyChanging();
			entity.AnonymousUserEntity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnonymousContact")]
	internal partial class AnonymousContactEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _userId;
		
		private System.Guid _contactDetailsId;
		
		private EntityRef<AnonymousUserEntity> _AnonymousUserEntity;
		
		private EntityRef<ContactDetailEntity> _ContactDetailEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(System.Guid value);
    partial void OnuserIdChanged();
    partial void OncontactDetailsIdChanging(System.Guid value);
    partial void OncontactDetailsIdChanged();
    #endregion
		
		public AnonymousContactEntity()
		{
			this._AnonymousUserEntity = default(EntityRef<AnonymousUserEntity>);
			this._ContactDetailEntity = default(EntityRef<ContactDetailEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._AnonymousUserEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactDetailsId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid contactDetailsId
		{
			get
			{
				return this._contactDetailsId;
			}
			set
			{
				if ((this._contactDetailsId != value))
				{
					if (this._ContactDetailEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncontactDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._contactDetailsId = value;
					this.SendPropertyChanged("contactDetailsId");
					this.OncontactDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnonymousUserEntity_AnonymousContactEntity", Storage="_AnonymousUserEntity", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public AnonymousUserEntity AnonymousUserEntity
		{
			get
			{
				return this._AnonymousUserEntity.Entity;
			}
			set
			{
				AnonymousUserEntity previousValue = this._AnonymousUserEntity.Entity;
				if (((previousValue != value) 
							|| (this._AnonymousUserEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnonymousUserEntity.Entity = null;
						previousValue.AnonymousContactEntities.Remove(this);
					}
					this._AnonymousUserEntity.Entity = value;
					if ((value != null))
					{
						value.AnonymousContactEntities.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(System.Guid);
					}
					this.SendPropertyChanged("AnonymousUserEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetailEntity_AnonymousContactEntity", Storage="_ContactDetailEntity", ThisKey="contactDetailsId", OtherKey="id", IsForeignKey=true)]
		public ContactDetailEntity ContactDetailEntity
		{
			get
			{
				return this._ContactDetailEntity.Entity;
			}
			set
			{
				ContactDetailEntity previousValue = this._ContactDetailEntity.Entity;
				if (((previousValue != value) 
							|| (this._ContactDetailEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactDetailEntity.Entity = null;
						previousValue.AnonymousContactEntities.Remove(this);
					}
					this._ContactDetailEntity.Entity = value;
					if ((value != null))
					{
						value.AnonymousContactEntities.Add(this);
						this._contactDetailsId = value.id;
					}
					else
					{
						this._contactDetailsId = default(System.Guid);
					}
					this.SendPropertyChanged("ContactDetailEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactDetails")]
	internal partial class ContactDetailEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _email;
		
		private string _faxNumber;
		
		private string _phoneNumber;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _secondaryEmails;
		
		private EntitySet<AnonymousContactEntity> _AnonymousContactEntities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnfaxNumberChanging(string value);
    partial void OnfaxNumberChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnsecondaryEmailsChanging(string value);
    partial void OnsecondaryEmailsChanged();
    #endregion
		
		public ContactDetailEntity()
		{
			this._AnonymousContactEntities = new EntitySet<AnonymousContactEntity>(new Action<AnonymousContactEntity>(this.attach_AnonymousContactEntities), new Action<AnonymousContactEntity>(this.detach_AnonymousContactEntities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(320)", UpdateCheck=UpdateCheck.Never)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_faxNumber", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string faxNumber
		{
			get
			{
				return this._faxNumber;
			}
			set
			{
				if ((this._faxNumber != value))
				{
					this.OnfaxNumberChanging(value);
					this.SendPropertyChanging();
					this._faxNumber = value;
					this.SendPropertyChanged("faxNumber");
					this.OnfaxNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secondaryEmails", DbType="NVarChar(700)", UpdateCheck=UpdateCheck.Never)]
		public string secondaryEmails
		{
			get
			{
				return this._secondaryEmails;
			}
			set
			{
				if ((this._secondaryEmails != value))
				{
					this.OnsecondaryEmailsChanging(value);
					this.SendPropertyChanging();
					this._secondaryEmails = value;
					this.SendPropertyChanged("secondaryEmails");
					this.OnsecondaryEmailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetailEntity_AnonymousContactEntity", Storage="_AnonymousContactEntities", ThisKey="id", OtherKey="contactDetailsId")]
		public EntitySet<AnonymousContactEntity> AnonymousContactEntities
		{
			get
			{
				return this._AnonymousContactEntities;
			}
			set
			{
				this._AnonymousContactEntities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnonymousContactEntities(AnonymousContactEntity entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetailEntity = this;
		}
		
		private void detach_AnonymousContactEntities(AnonymousContactEntity entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetailEntity = null;
		}
	}
}
#pragma warning restore 1591
